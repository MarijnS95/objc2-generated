//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// This class represents a universal link available on the current system.
    /// Universal links can be opened in a browser or directly in an application.
    ///
    ///
    /// Warning: The use of this class requires an entitlement.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfuniversallink?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFUniversalLink;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SFUniversalLink {}
);

impl SFUniversalLink {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Initialize the receiver with a web URL that may or may not be a universal link.
        #[unsafe(method(initWithWebpageURL:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWebpageURL(
            this: Allocated<Self>,
            url: &NSURL,
        ) -> Option<Retained<Self>>;

        /// The URL passed when initializing the receiver.
        #[unsafe(method(webpageURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn webpageURL(&self) -> Retained<NSURL>;

        /// The file URL to the application that can handle this universal link.
        #[unsafe(method(applicationURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn applicationURL(&self) -> Retained<NSURL>;

        /// Whether or not this universal link is enabled. If it is enabled, the URL
        /// will open in the application instead of the browser. Set this property when
        /// the user indicates they wish to enable or disable this universal link.
        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);
    );
}
