//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfsafaritoolbaritem?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFSafariToolbarItem;
);

unsafe impl NSCoding for SFSafariToolbarItem {}

unsafe impl NSCopying for SFSafariToolbarItem {}

unsafe impl CopyingHelper for SFSafariToolbarItem {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SFSafariToolbarItem {}

unsafe impl NSSecureCoding for SFSafariToolbarItem {}

impl SFSafariToolbarItem {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Sets the enabled state and the badge text for the toolbar item. The badge text is visible even when the toolbar item is disabled.
        #[deprecated = "use -setEnabled: and -setBadgeText:"]
        #[unsafe(method(setEnabled:withBadgeText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled_withBadgeText(&self, enabled: bool, badge_text: Option<&NSString>);

        /// Sets the enabled state for the toolbar item.
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        /// Sets the badge text for the toolbar item. The badge text is visible even when the toolbar item is disabled. Setting the text to nil will clear the badge.
        #[unsafe(method(setBadgeText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBadgeText(&self, badge_text: Option<&NSString>);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Sets the image for the toolbar item. Setting the image to nil will set the default image.
        #[unsafe(method(setImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setImage(&self, image: Option<&NSImage>);

        /// Sets the label for the toolbar button. Setting the label to nil will set the default label.
        #[unsafe(method(setLabel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);

        /// Shows the popover associated with this toolbar button.
        #[unsafe(method(showPopover))]
        #[unsafe(method_family = none)]
        pub unsafe fn showPopover(&self);
    );
}
