//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationcalloutinfodidchangenotification?language=objc)
    pub static MKAnnotationCalloutInfoDidChangeNotification: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewdragstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MKAnnotationViewDragState(pub NSUInteger);
impl MKAnnotationViewDragState {
    #[doc(alias = "MKAnnotationViewDragStateNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MKAnnotationViewDragStateStarting")]
    pub const Starting: Self = Self(1);
    #[doc(alias = "MKAnnotationViewDragStateDragging")]
    pub const Dragging: Self = Self(2);
    #[doc(alias = "MKAnnotationViewDragStateCanceling")]
    pub const Canceling: Self = Self(3);
    #[doc(alias = "MKAnnotationViewDragStateEnding")]
    pub const Ending: Self = Self(4);
}

unsafe impl Encode for MKAnnotationViewDragState {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MKAnnotationViewDragState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplaypriority?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type MKFeatureDisplayPriority = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplaypriorityrequired?language=objc)
pub static MKFeatureDisplayPriorityRequired: MKFeatureDisplayPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplayprioritydefaulthigh?language=objc)
pub static MKFeatureDisplayPriorityDefaultHigh: MKFeatureDisplayPriority = 750 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplayprioritydefaultlow?language=objc)
pub static MKFeatureDisplayPriorityDefaultLow: MKFeatureDisplayPriority = 250 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzpriority?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type MKAnnotationViewZPriority = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritymax?language=objc)
pub static MKAnnotationViewZPriorityMax: MKAnnotationViewZPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritydefaultselected?language=objc)
pub static MKAnnotationViewZPriorityDefaultSelected: MKAnnotationViewZPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritydefaultunselected?language=objc)
pub static MKAnnotationViewZPriorityDefaultUnselected: MKAnnotationViewZPriority = 500 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritymin?language=objc)
pub static MKAnnotationViewZPriorityMin: MKAnnotationViewZPriority = 0 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewcollisionmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MKAnnotationViewCollisionMode(pub NSInteger);
impl MKAnnotationViewCollisionMode {
    #[doc(alias = "MKAnnotationViewCollisionModeRectangle")]
    pub const Rectangle: Self = Self(0);
    #[doc(alias = "MKAnnotationViewCollisionModeCircle")]
    pub const Circle: Self = Self(1);
    #[doc(alias = "MKAnnotationViewCollisionModeNone")]
    pub const None: Self = Self(2);
}

unsafe impl Encode for MKAnnotationViewCollisionMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MKAnnotationViewCollisionMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct MKAnnotationView;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibility for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibilityElementProtocol for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAnimatablePropertyContainer for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAppearanceCustomization for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSDraggingDestination for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for MKAnnotationView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSUserInterfaceItemIdentification for MKAnnotationView {}

extern_methods!(
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl MKAnnotationView {
        #[cfg(feature = "MKAnnotation")]
        #[unsafe(method_family(init))]
        #[method_id(initWithAnnotation:reuseIdentifier:)]
        pub unsafe fn initWithAnnotation_reuseIdentifier(
            this: Allocated<Self>,
            annotation: Option<&ProtocolObject<dyn MKAnnotation>>,
            reuse_identifier: Option<&NSString>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(reuseIdentifier)]
        pub unsafe fn reuseIdentifier(&self) -> Option<Retained<NSString>>;

        #[method(prepareForReuse)]
        pub unsafe fn prepareForReuse(&self);

        #[method(prepareForDisplay)]
        pub unsafe fn prepareForDisplay(&self);

        #[cfg(feature = "MKAnnotation")]
        #[unsafe(method_family(none))]
        #[method_id(annotation)]
        pub unsafe fn annotation(&self) -> Option<Retained<ProtocolObject<dyn MKAnnotation>>>;

        #[cfg(feature = "MKAnnotation")]
        /// Setter for [`annotation`][Self::annotation].
        #[method(setAnnotation:)]
        pub unsafe fn setAnnotation(&self, annotation: Option<&ProtocolObject<dyn MKAnnotation>>);

        #[unsafe(method_family(none))]
        #[method_id(image)]
        pub unsafe fn image(&self) -> Option<Retained<NSImage>>;

        /// Setter for [`image`][Self::image].
        #[method(setImage:)]
        pub unsafe fn setImage(&self, image: Option<&NSImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(centerOffset)]
        pub unsafe fn centerOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`centerOffset`][Self::centerOffset].
        #[method(setCenterOffset:)]
        pub unsafe fn setCenterOffset(&self, center_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(accessoryOffset)]
        pub unsafe fn accessoryOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`accessoryOffset`][Self::accessoryOffset].
        #[method(setAccessoryOffset:)]
        pub unsafe fn setAccessoryOffset(&self, accessory_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(calloutOffset)]
        pub unsafe fn calloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`calloutOffset`][Self::calloutOffset].
        #[method(setCalloutOffset:)]
        pub unsafe fn setCalloutOffset(&self, callout_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(leftCalloutOffset)]
        pub unsafe fn leftCalloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`leftCalloutOffset`][Self::leftCalloutOffset].
        #[method(setLeftCalloutOffset:)]
        pub unsafe fn setLeftCalloutOffset(&self, left_callout_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(rightCalloutOffset)]
        pub unsafe fn rightCalloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`rightCalloutOffset`][Self::rightCalloutOffset].
        #[method(setRightCalloutOffset:)]
        pub unsafe fn setRightCalloutOffset(&self, right_callout_offset: CGPoint);

        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[method(isHighlighted)]
        pub unsafe fn isHighlighted(&self) -> bool;

        /// Setter for [`isHighlighted`][Self::isHighlighted].
        #[method(setHighlighted:)]
        pub unsafe fn setHighlighted(&self, highlighted: bool);

        #[method(isSelected)]
        pub unsafe fn isSelected(&self) -> bool;

        /// Setter for [`isSelected`][Self::isSelected].
        #[method(setSelected:)]
        pub unsafe fn setSelected(&self, selected: bool);

        #[method(setSelected:animated:)]
        pub unsafe fn setSelected_animated(&self, selected: bool, animated: bool);

        #[method(canShowCallout)]
        pub unsafe fn canShowCallout(&self) -> bool;

        /// Setter for [`canShowCallout`][Self::canShowCallout].
        #[method(setCanShowCallout:)]
        pub unsafe fn setCanShowCallout(&self, can_show_callout: bool);

        #[unsafe(method_family(none))]
        #[method_id(leftCalloutAccessoryView)]
        pub unsafe fn leftCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`leftCalloutAccessoryView`][Self::leftCalloutAccessoryView].
        #[method(setLeftCalloutAccessoryView:)]
        pub unsafe fn setLeftCalloutAccessoryView(
            &self,
            left_callout_accessory_view: Option<&NSView>,
        );

        #[unsafe(method_family(none))]
        #[method_id(rightCalloutAccessoryView)]
        pub unsafe fn rightCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`rightCalloutAccessoryView`][Self::rightCalloutAccessoryView].
        #[method(setRightCalloutAccessoryView:)]
        pub unsafe fn setRightCalloutAccessoryView(
            &self,
            right_callout_accessory_view: Option<&NSView>,
        );

        #[unsafe(method_family(none))]
        #[method_id(detailCalloutAccessoryView)]
        pub unsafe fn detailCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`detailCalloutAccessoryView`][Self::detailCalloutAccessoryView].
        #[method(setDetailCalloutAccessoryView:)]
        pub unsafe fn setDetailCalloutAccessoryView(
            &self,
            detail_callout_accessory_view: Option<&NSView>,
        );

        #[method(isDraggable)]
        pub unsafe fn isDraggable(&self) -> bool;

        /// Setter for [`isDraggable`][Self::isDraggable].
        #[method(setDraggable:)]
        pub unsafe fn setDraggable(&self, draggable: bool);

        #[method(dragState)]
        pub unsafe fn dragState(&self) -> MKAnnotationViewDragState;

        /// Setter for [`dragState`][Self::dragState].
        #[method(setDragState:)]
        pub unsafe fn setDragState(&self, drag_state: MKAnnotationViewDragState);

        #[method(setDragState:animated:)]
        pub unsafe fn setDragState_animated(
            &self,
            new_drag_state: MKAnnotationViewDragState,
            animated: bool,
        );

        #[unsafe(method_family(none))]
        #[method_id(clusteringIdentifier)]
        pub unsafe fn clusteringIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`clusteringIdentifier`][Self::clusteringIdentifier].
        #[method(setClusteringIdentifier:)]
        pub unsafe fn setClusteringIdentifier(&self, clustering_identifier: Option<&NSString>);

        #[unsafe(method_family(none))]
        #[method_id(clusterAnnotationView)]
        pub unsafe fn clusterAnnotationView(&self) -> Option<Retained<MKAnnotationView>>;

        #[method(displayPriority)]
        pub unsafe fn displayPriority(&self) -> MKFeatureDisplayPriority;

        /// Setter for [`displayPriority`][Self::displayPriority].
        #[method(setDisplayPriority:)]
        pub unsafe fn setDisplayPriority(&self, display_priority: MKFeatureDisplayPriority);

        #[method(zPriority)]
        pub unsafe fn zPriority(&self) -> MKAnnotationViewZPriority;

        /// Setter for [`zPriority`][Self::zPriority].
        #[method(setZPriority:)]
        pub unsafe fn setZPriority(&self, z_priority: MKAnnotationViewZPriority);

        #[method(selectedZPriority)]
        pub unsafe fn selectedZPriority(&self) -> MKAnnotationViewZPriority;

        /// Setter for [`selectedZPriority`][Self::selectedZPriority].
        #[method(setSelectedZPriority:)]
        pub unsafe fn setSelectedZPriority(&self, selected_z_priority: MKAnnotationViewZPriority);

        #[method(collisionMode)]
        pub unsafe fn collisionMode(&self) -> MKAnnotationViewCollisionMode;

        /// Setter for [`collisionMode`][Self::collisionMode].
        #[method(setCollisionMode:)]
        pub unsafe fn setCollisionMode(&self, collision_mode: MKAnnotationViewCollisionMode);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl MKAnnotationView {
        #[unsafe(method_family(init))]
        #[method_id(initWithFrame:)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl MKAnnotationView {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl MKAnnotationView {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
