//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-location")]
use objc2_core_location::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mklookaroundscenerequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MKLookAroundSceneRequest;
);

unsafe impl NSObjectProtocol for MKLookAroundSceneRequest {}

extern_methods!(
    unsafe impl MKLookAroundSceneRequest {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-core-location")]
        #[method_id(initWithCoordinate:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoordinate(
            this: Allocated<Self>,
            coordinate: CLLocationCoordinate2D,
        ) -> Retained<Self>;

        #[cfg(feature = "MKMapItem")]
        #[method_id(initWithMapItem:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithMapItem(
            this: Allocated<Self>,
            map_item: &MKMapItem,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-location")]
        #[method(coordinate)]
        pub unsafe fn coordinate(&self) -> CLLocationCoordinate2D;

        #[cfg(feature = "MKMapItem")]
        #[method_id(mapItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn mapItem(&self) -> Option<Retained<MKMapItem>>;

        #[method(isCancelled)]
        pub unsafe fn isCancelled(&self) -> bool;

        #[method(isLoading)]
        pub unsafe fn isLoading(&self) -> bool;

        #[cfg(all(feature = "MKLookAroundScene", feature = "block2"))]
        #[method(getSceneWithCompletionHandler:)]
        pub unsafe fn getSceneWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut MKLookAroundScene, *mut NSError)>,
        );

        #[method(cancel)]
        pub unsafe fn cancel(&self);
    }
);
