//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkmarkerannotationview?language=objc)
    #[unsafe(super(MKAnnotationView, NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    pub struct MKMarkerAnnotationView;
);

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibility for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibilityElementProtocol for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSAnimatablePropertyContainer for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSAppearanceCustomization for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSDraggingDestination for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for MKMarkerAnnotationView {}

#[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSUserInterfaceItemIdentification for MKMarkerAnnotationView {}

extern_methods!(
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl MKMarkerAnnotationView {
        #[cfg(feature = "MKTypes")]
        #[method(titleVisibility)]
        pub unsafe fn titleVisibility(&self) -> MKFeatureVisibility;

        #[cfg(feature = "MKTypes")]
        #[method(setTitleVisibility:)]
        pub unsafe fn setTitleVisibility(&self, title_visibility: MKFeatureVisibility);

        #[cfg(feature = "MKTypes")]
        #[method(subtitleVisibility)]
        pub unsafe fn subtitleVisibility(&self) -> MKFeatureVisibility;

        #[cfg(feature = "MKTypes")]
        #[method(setSubtitleVisibility:)]
        pub unsafe fn setSubtitleVisibility(&self, subtitle_visibility: MKFeatureVisibility);

        #[method_id(@__retain_semantics Other markerTintColor)]
        pub unsafe fn markerTintColor(&self) -> Option<Retained<NSColor>>;

        #[method(setMarkerTintColor:)]
        pub unsafe fn setMarkerTintColor(&self, marker_tint_color: Option<&NSColor>);

        #[method_id(@__retain_semantics Other glyphTintColor)]
        pub unsafe fn glyphTintColor(&self) -> Option<Retained<NSColor>>;

        #[method(setGlyphTintColor:)]
        pub unsafe fn setGlyphTintColor(&self, glyph_tint_color: Option<&NSColor>);

        #[method_id(@__retain_semantics Other glyphText)]
        pub unsafe fn glyphText(&self) -> Option<Retained<NSString>>;

        #[method(setGlyphText:)]
        pub unsafe fn setGlyphText(&self, glyph_text: Option<&NSString>);

        #[method_id(@__retain_semantics Other glyphImage)]
        pub unsafe fn glyphImage(&self) -> Option<Retained<NSImage>>;

        #[method(setGlyphImage:)]
        pub unsafe fn setGlyphImage(&self, glyph_image: Option<&NSImage>);

        #[method_id(@__retain_semantics Other selectedGlyphImage)]
        pub unsafe fn selectedGlyphImage(&self) -> Option<Retained<NSImage>>;

        #[method(setSelectedGlyphImage:)]
        pub unsafe fn setSelectedGlyphImage(&self, selected_glyph_image: Option<&NSImage>);

        #[method(animatesWhenAdded)]
        pub unsafe fn animatesWhenAdded(&self) -> bool;

        #[method(setAnimatesWhenAdded:)]
        pub unsafe fn setAnimatesWhenAdded(&self, animates_when_added: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `MKAnnotationView`
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl MKMarkerAnnotationView {
        #[cfg(feature = "MKAnnotation")]
        #[method_id(@__retain_semantics Init initWithAnnotation:reuseIdentifier:)]
        pub unsafe fn initWithAnnotation_reuseIdentifier(
            this: Allocated<Self>,
            annotation: Option<&ProtocolObject<dyn MKAnnotation>>,
            reuse_identifier: Option<&NSString>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl MKMarkerAnnotationView {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl MKMarkerAnnotationView {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "MKAnnotationView", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl MKMarkerAnnotationView {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
