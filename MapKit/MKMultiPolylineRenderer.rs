//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkmultipolylinerenderer?language=objc)
    #[unsafe(super(MKOverlayPathRenderer, MKOverlayRenderer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "MKOverlayPathRenderer", feature = "MKOverlayRenderer"))]
    pub struct MKMultiPolylineRenderer;
);

#[cfg(all(feature = "MKOverlayPathRenderer", feature = "MKOverlayRenderer"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for MKMultiPolylineRenderer {}
);

#[cfg(all(feature = "MKOverlayPathRenderer", feature = "MKOverlayRenderer"))]
impl MKMultiPolylineRenderer {
    extern_methods!(
        #[cfg(all(feature = "MKMultiPolyline", feature = "MKShape"))]
        #[unsafe(method(initWithMultiPolyline:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithMultiPolyline(
            this: Allocated<Self>,
            multi_polyline: &MKMultiPolyline,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MKMultiPolyline", feature = "MKShape"))]
        #[unsafe(method(multiPolyline))]
        #[unsafe(method_family = none)]
        pub unsafe fn multiPolyline(&self) -> Retained<MKMultiPolyline>;
    );
}

/// Methods declared on superclass `MKOverlayRenderer`.
#[cfg(all(feature = "MKOverlayPathRenderer", feature = "MKOverlayRenderer"))]
impl MKMultiPolylineRenderer {
    extern_methods!(
        #[cfg(all(feature = "MKAnnotation", feature = "MKOverlay"))]
        #[unsafe(method(initWithOverlay:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithOverlay(
            this: Allocated<Self>,
            overlay: &ProtocolObject<dyn MKOverlay>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "MKOverlayPathRenderer", feature = "MKOverlayRenderer"))]
impl MKMultiPolylineRenderer {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
