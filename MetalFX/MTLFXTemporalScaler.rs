//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxtemporalscalerdescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFXTemporalScalerDescriptor;
);

unsafe impl NSCopying for MTLFXTemporalScalerDescriptor {}

unsafe impl CopyingHelper for MTLFXTemporalScalerDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for MTLFXTemporalScalerDescriptor {}

extern_methods!(
    unsafe impl MTLFXTemporalScalerDescriptor {
        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`colorTextureFormat`][Self::colorTextureFormat].
        #[unsafe(method(setColorTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorTextureFormat(&self, color_texture_format: MTLPixelFormat);

        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`depthTextureFormat`][Self::depthTextureFormat].
        #[unsafe(method(setDepthTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDepthTextureFormat(&self, depth_texture_format: MTLPixelFormat);

        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`motionTextureFormat`][Self::motionTextureFormat].
        #[unsafe(method(setMotionTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotionTextureFormat(&self, motion_texture_format: MTLPixelFormat);

        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`outputTextureFormat`][Self::outputTextureFormat].
        #[unsafe(method(setOutputTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputTextureFormat(&self, output_texture_format: MTLPixelFormat);

        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputWidth(&self) -> NSUInteger;

        /// Setter for [`inputWidth`][Self::inputWidth].
        #[unsafe(method(setInputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputWidth(&self, input_width: NSUInteger);

        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputHeight(&self) -> NSUInteger;

        /// Setter for [`inputHeight`][Self::inputHeight].
        #[unsafe(method(setInputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputHeight(&self, input_height: NSUInteger);

        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputWidth(&self) -> NSUInteger;

        /// Setter for [`outputWidth`][Self::outputWidth].
        #[unsafe(method(setOutputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputWidth(&self, output_width: NSUInteger);

        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputHeight(&self) -> NSUInteger;

        /// Setter for [`outputHeight`][Self::outputHeight].
        #[unsafe(method(setOutputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputHeight(&self, output_height: NSUInteger);

        #[unsafe(method(isAutoExposureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isAutoExposureEnabled(&self) -> bool;

        /// Setter for [`isAutoExposureEnabled`][Self::isAutoExposureEnabled].
        #[unsafe(method(setAutoExposureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutoExposureEnabled(&self, auto_exposure_enabled: bool);

        #[unsafe(method(requiresSynchronousInitialization))]
        #[unsafe(method_family = none)]
        pub unsafe fn requiresSynchronousInitialization(&self) -> bool;

        /// Setter for [`requiresSynchronousInitialization`][Self::requiresSynchronousInitialization].
        #[unsafe(method(setRequiresSynchronousInitialization:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequiresSynchronousInitialization(
            &self,
            requires_synchronous_initialization: bool,
        );

        #[unsafe(method(isInputContentPropertiesEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isInputContentPropertiesEnabled(&self) -> bool;

        /// Setter for [`isInputContentPropertiesEnabled`][Self::isInputContentPropertiesEnabled].
        #[unsafe(method(setInputContentPropertiesEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputContentPropertiesEnabled(
            &self,
            input_content_properties_enabled: bool,
        );

        #[unsafe(method(inputContentMinScale))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputContentMinScale(&self) -> c_float;

        /// Setter for [`inputContentMinScale`][Self::inputContentMinScale].
        #[unsafe(method(setInputContentMinScale:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputContentMinScale(&self, input_content_min_scale: c_float);

        #[unsafe(method(inputContentMaxScale))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputContentMaxScale(&self) -> c_float;

        /// Setter for [`inputContentMaxScale`][Self::inputContentMaxScale].
        #[unsafe(method(setInputContentMaxScale:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputContentMaxScale(&self, input_content_max_scale: c_float);

        #[unsafe(method(isReactiveMaskTextureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isReactiveMaskTextureEnabled(&self) -> bool;

        /// Setter for [`isReactiveMaskTextureEnabled`][Self::isReactiveMaskTextureEnabled].
        #[unsafe(method(setReactiveMaskTextureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReactiveMaskTextureEnabled(&self, reactive_mask_texture_enabled: bool);

        #[unsafe(method(reactiveMaskTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn reactiveMaskTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`reactiveMaskTextureFormat`][Self::reactiveMaskTextureFormat].
        #[unsafe(method(setReactiveMaskTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReactiveMaskTextureFormat(
            &self,
            reactive_mask_texture_format: MTLPixelFormat,
        );

        #[unsafe(method(newTemporalScalerWithDevice:))]
        #[unsafe(method_family = new)]
        pub unsafe fn newTemporalScalerWithDevice(
            &self,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<ProtocolObject<dyn MTLFXTemporalScaler>>>;

        #[unsafe(method(supportedInputContentMinScaleForDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedInputContentMinScaleForDevice(
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> c_float;

        #[unsafe(method(supportedInputContentMaxScaleForDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedInputContentMaxScaleForDevice(
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> c_float;

        #[unsafe(method(supportsDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsDevice(device: &ProtocolObject<dyn MTLDevice>) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLFXTemporalScalerDescriptor {
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxtemporalscaler?language=objc)
    pub unsafe trait MTLFXTemporalScaler: NSObjectProtocol {
        #[unsafe(method(colorTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureUsage(&self) -> MTLTextureUsage;

        #[unsafe(method(depthTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureUsage(&self) -> MTLTextureUsage;

        #[unsafe(method(motionTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureUsage(&self) -> MTLTextureUsage;

        #[unsafe(method(reactiveTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn reactiveTextureUsage(&self) -> MTLTextureUsage;

        #[unsafe(method(outputTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureUsage(&self) -> MTLTextureUsage;

        #[unsafe(method(inputContentWidth))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentWidth(&self) -> NSUInteger;

        /// Setter for [`inputContentWidth`][Self::inputContentWidth].
        #[unsafe(method(setInputContentWidth:))]
        #[unsafe(method_family = none)]
        unsafe fn setInputContentWidth(&self, input_content_width: NSUInteger);

        #[unsafe(method(inputContentHeight))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentHeight(&self) -> NSUInteger;

        /// Setter for [`inputContentHeight`][Self::inputContentHeight].
        #[unsafe(method(setInputContentHeight:))]
        #[unsafe(method_family = none)]
        unsafe fn setInputContentHeight(&self, input_content_height: NSUInteger);

        #[unsafe(method(colorTexture))]
        #[unsafe(method_family = none)]
        unsafe fn colorTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`colorTexture`][Self::colorTexture].
        #[unsafe(method(setColorTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setColorTexture(&self, color_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[unsafe(method(depthTexture))]
        #[unsafe(method_family = none)]
        unsafe fn depthTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`depthTexture`][Self::depthTexture].
        #[unsafe(method(setDepthTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthTexture(&self, depth_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[unsafe(method(motionTexture))]
        #[unsafe(method_family = none)]
        unsafe fn motionTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`motionTexture`][Self::motionTexture].
        #[unsafe(method(setMotionTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionTexture(&self, motion_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[unsafe(method(outputTexture))]
        #[unsafe(method_family = none)]
        unsafe fn outputTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`outputTexture`][Self::outputTexture].
        #[unsafe(method(setOutputTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setOutputTexture(&self, output_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[unsafe(method(exposureTexture))]
        #[unsafe(method_family = none)]
        unsafe fn exposureTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`exposureTexture`][Self::exposureTexture].
        #[unsafe(method(setExposureTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setExposureTexture(
            &self,
            exposure_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        #[unsafe(method(reactiveMaskTexture))]
        #[unsafe(method_family = none)]
        unsafe fn reactiveMaskTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`reactiveMaskTexture`][Self::reactiveMaskTexture].
        #[unsafe(method(setReactiveMaskTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setReactiveMaskTexture(
            &self,
            reactive_mask_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        #[unsafe(method(preExposure))]
        #[unsafe(method_family = none)]
        unsafe fn preExposure(&self) -> c_float;

        /// Setter for [`preExposure`][Self::preExposure].
        #[unsafe(method(setPreExposure:))]
        #[unsafe(method_family = none)]
        unsafe fn setPreExposure(&self, pre_exposure: c_float);

        #[unsafe(method(jitterOffsetX))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetX(&self) -> c_float;

        /// Setter for [`jitterOffsetX`][Self::jitterOffsetX].
        #[unsafe(method(setJitterOffsetX:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetX(&self, jitter_offset_x: c_float);

        #[unsafe(method(jitterOffsetY))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetY(&self) -> c_float;

        /// Setter for [`jitterOffsetY`][Self::jitterOffsetY].
        #[unsafe(method(setJitterOffsetY:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetY(&self, jitter_offset_y: c_float);

        #[unsafe(method(motionVectorScaleX))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleX(&self) -> c_float;

        /// Setter for [`motionVectorScaleX`][Self::motionVectorScaleX].
        #[unsafe(method(setMotionVectorScaleX:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleX(&self, motion_vector_scale_x: c_float);

        #[unsafe(method(motionVectorScaleY))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleY(&self) -> c_float;

        /// Setter for [`motionVectorScaleY`][Self::motionVectorScaleY].
        #[unsafe(method(setMotionVectorScaleY:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleY(&self, motion_vector_scale_y: c_float);

        #[unsafe(method(reset))]
        #[unsafe(method_family = none)]
        unsafe fn reset(&self) -> bool;

        /// Setter for [`reset`][Self::reset].
        #[unsafe(method(setReset:))]
        #[unsafe(method_family = none)]
        unsafe fn setReset(&self, reset: bool);

        #[unsafe(method(isDepthReversed))]
        #[unsafe(method_family = none)]
        unsafe fn isDepthReversed(&self) -> bool;

        /// Setter for [`isDepthReversed`][Self::isDepthReversed].
        #[unsafe(method(setDepthReversed:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthReversed(&self, depth_reversed: bool);

        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn inputWidth(&self) -> NSUInteger;

        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn inputHeight(&self) -> NSUInteger;

        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn outputWidth(&self) -> NSUInteger;

        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn outputHeight(&self) -> NSUInteger;

        #[unsafe(method(inputContentMinScale))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentMinScale(&self) -> c_float;

        #[unsafe(method(inputContentMaxScale))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentMaxScale(&self) -> c_float;

        #[unsafe(method(fence))]
        #[unsafe(method_family = none)]
        unsafe fn fence(&self) -> Option<Retained<ProtocolObject<dyn MTLFence>>>;

        /// Setter for [`fence`][Self::fence].
        #[unsafe(method(setFence:))]
        #[unsafe(method_family = none)]
        unsafe fn setFence(&self, fence: Option<&ProtocolObject<dyn MTLFence>>);

        #[unsafe(method(encodeToCommandBuffer:))]
        #[unsafe(method_family = none)]
        unsafe fn encodeToCommandBuffer(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
        );
    }
);
