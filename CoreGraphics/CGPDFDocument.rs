//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfdocumentref?language=objc)
#[repr(C)]
pub struct CGPDFDocumentRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGPDFDocument"]
    unsafe impl CGPDFDocumentRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfaccesspermissions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGPDFAccessPermissions(pub u32);
bitflags::bitflags! {
    impl CGPDFAccessPermissions: u32 {
        #[doc(alias = "kCGPDFAllowsLowQualityPrinting")]
        const AllowsLowQualityPrinting = 1<<0;
        #[doc(alias = "kCGPDFAllowsHighQualityPrinting")]
        const AllowsHighQualityPrinting = 1<<1;
        #[doc(alias = "kCGPDFAllowsDocumentChanges")]
        const AllowsDocumentChanges = 1<<2;
        #[doc(alias = "kCGPDFAllowsDocumentAssembly")]
        const AllowsDocumentAssembly = 1<<3;
        #[doc(alias = "kCGPDFAllowsContentCopying")]
        const AllowsContentCopying = 1<<4;
        #[doc(alias = "kCGPDFAllowsContentAccessibility")]
        const AllowsContentAccessibility = 1<<5;
        #[doc(alias = "kCGPDFAllowsCommenting")]
        const AllowsCommenting = 1<<6;
        #[doc(alias = "kCGPDFAllowsFormFieldEntry")]
        const AllowsFormFieldEntry = 1<<7;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGPDFAccessPermissions {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFAccessPermissions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgpdfoutlinetitle?language=objc)
    pub static kCGPDFOutlineTitle: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgpdfoutlinechildren?language=objc)
    pub static kCGPDFOutlineChildren: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgpdfoutlinedestination?language=objc)
    pub static kCGPDFOutlineDestination: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgpdfoutlinedestinationrect?language=objc)
    pub static kCGPDFOutlineDestinationRect: &'static CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGDataProvider")]
    pub fn CGPDFDocumentCreateWithProvider(
        provider: Option<&CGDataProviderRef>,
    ) -> *mut CGPDFDocumentRef;
}

extern "C-unwind" {
    pub fn CGPDFDocumentCreateWithURL(url: Option<&CFURLRef>) -> *mut CGPDFDocumentRef;
}

extern "C-unwind" {
    pub fn CGPDFDocumentRetain(document: Option<&CGPDFDocumentRef>) -> *mut CGPDFDocumentRef;
}

extern "C-unwind" {
    pub fn CGPDFDocumentRelease(document: Option<&CGPDFDocumentRef>);
}

extern "C-unwind" {
    pub fn CGPDFDocumentGetVersion(
        document: Option<&CGPDFDocumentRef>,
        major_version: NonNull<c_int>,
        minor_version: NonNull<c_int>,
    );
}

extern "C-unwind" {
    pub fn CGPDFDocumentIsEncrypted(document: Option<&CGPDFDocumentRef>) -> bool;
}

extern "C-unwind" {
    pub fn CGPDFDocumentUnlockWithPassword(
        document: Option<&CGPDFDocumentRef>,
        password: NonNull<c_char>,
    ) -> bool;
}

extern "C-unwind" {
    pub fn CGPDFDocumentIsUnlocked(document: Option<&CGPDFDocumentRef>) -> bool;
}

extern "C-unwind" {
    pub fn CGPDFDocumentAllowsPrinting(document: Option<&CGPDFDocumentRef>) -> bool;
}

extern "C-unwind" {
    pub fn CGPDFDocumentAllowsCopying(document: Option<&CGPDFDocumentRef>) -> bool;
}

extern "C-unwind" {
    pub fn CGPDFDocumentGetNumberOfPages(document: Option<&CGPDFDocumentRef>) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFPage")]
    pub fn CGPDFDocumentGetPage(
        document: Option<&CGPDFDocumentRef>,
        page_number: usize,
    ) -> *mut CGPDFPageRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFDictionary")]
    pub fn CGPDFDocumentGetCatalog(document: Option<&CGPDFDocumentRef>) -> CGPDFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFDictionary")]
    pub fn CGPDFDocumentGetInfo(document: Option<&CGPDFDocumentRef>) -> CGPDFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFArray")]
    pub fn CGPDFDocumentGetID(document: Option<&CGPDFDocumentRef>) -> CGPDFArrayRef;
}

extern "C-unwind" {
    pub fn CGPDFDocumentGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CGPDFDocumentGetOutline(document: &CGPDFDocumentRef) -> *mut CFDictionaryRef;
}

extern "C-unwind" {
    pub fn CGPDFDocumentGetAccessPermissions(document: &CGPDFDocumentRef)
        -> CGPDFAccessPermissions;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetMediaBox(document: Option<&CGPDFDocumentRef>, page: c_int) -> CGRect;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetCropBox(document: Option<&CGPDFDocumentRef>, page: c_int) -> CGRect;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetBleedBox(document: Option<&CGPDFDocumentRef>, page: c_int) -> CGRect;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetTrimBox(document: Option<&CGPDFDocumentRef>, page: c_int) -> CGRect;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetArtBox(document: Option<&CGPDFDocumentRef>, page: c_int) -> CGRect;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGPDFDocumentGetRotationAngle(document: Option<&CGPDFDocumentRef>, page: c_int)
        -> c_int;
}
