//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGEventGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventCreate(source: CGEventSourceRef) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventCreateData(allocator: CFAllocatorRef, event: CGEventRef) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventCreateFromData(allocator: CFAllocatorRef, data: CFDataRef) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventCreateMouseEvent(
        source: CGEventSourceRef,
        mouse_type: CGEventType,
        mouse_cursor_position: CGPoint,
        mouse_button: CGMouseButton,
    ) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "CGRemoteOperation"))]
    pub fn CGEventCreateKeyboardEvent(
        source: CGEventSourceRef,
        virtual_key: CGKeyCode,
        key_down: bool,
    ) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventCreateScrollWheelEvent2(
        source: CGEventSourceRef,
        units: CGScrollEventUnit,
        wheel_count: u32,
        wheel1: i32,
        wheel2: i32,
        wheel3: i32,
    ) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventCreateCopy(event: CGEventRef) -> CGEventRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventCreateSourceFromEvent(event: CGEventRef) -> CGEventSourceRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetSource(event: CGEventRef, source: CGEventSourceRef);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventGetType(event: CGEventRef) -> CGEventType;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetType(event: CGEventRef, r#type: CGEventType);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventGetTimestamp(event: CGEventRef) -> CGEventTimestamp;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetTimestamp(event: CGEventRef, timestamp: CGEventTimestamp);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventGetLocation(event: CGEventRef) -> CGPoint;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventGetUnflippedLocation(event: CGEventRef) -> CGPoint;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventSetLocation(event: CGEventRef, location: CGPoint);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventGetFlags(event: CGEventRef) -> CGEventFlags;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetFlags(event: CGEventRef, flags: CGEventFlags);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventKeyboardGetUnicodeString(
        event: CGEventRef,
        max_string_length: UniCharCount,
        actual_string_length: *mut UniCharCount,
        unicode_string: *mut UniChar,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventKeyboardSetUnicodeString(
        event: CGEventRef,
        string_length: UniCharCount,
        unicode_string: *const UniChar,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventGetIntegerValueField(event: CGEventRef, field: CGEventField) -> i64;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetIntegerValueField(event: CGEventRef, field: CGEventField, value: i64);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventGetDoubleValueField(event: CGEventRef, field: CGEventField) -> c_double;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventSetDoubleValueField(event: CGEventRef, field: CGEventField, value: c_double);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventTapCreate(
        tap: CGEventTapLocation,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        events_of_interest: CGEventMask,
        callback: CGEventTapCallBack,
        user_info: *mut c_void,
    ) -> CFMachPortRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "objc2-core-foundation"))]
    pub fn CGEventTapCreateForPSN(
        process_serial_number: NonNull<c_void>,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        events_of_interest: CGEventMask,
        callback: CGEventTapCallBack,
        user_info: *mut c_void,
    ) -> CFMachPortRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CGEventTypes",
        feature = "libc",
        feature = "objc2-core-foundation"
    ))]
    pub fn CGEventTapCreateForPid(
        pid: libc::pid_t,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        events_of_interest: CGEventMask,
        callback: CGEventTapCallBack,
        user_info: *mut c_void,
    ) -> CFMachPortRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGEventTapEnable(tap: CFMachPortRef, enable: bool);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGEventTapIsEnabled(tap: CFMachPortRef) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventTapPostEvent(proxy: CGEventTapProxy, event: CGEventRef);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventPost(tap: CGEventTapLocation, event: CGEventRef);
}

extern "C-unwind" {
    #[cfg(feature = "CGEventTypes")]
    pub fn CGEventPostToPSN(process_serial_number: *mut c_void, event: CGEventRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGEventTypes", feature = "libc"))]
    pub fn CGEventPostToPid(pid: libc::pid_t, event: CGEventRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "CGEventTypes", feature = "libc"))]
    pub fn CGGetEventTapList(
        max_number_of_taps: u32,
        tap_list: *mut CGEventTapInformation,
        event_tap_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    pub fn CGPreflightListenEventAccess() -> bool;
}

extern "C-unwind" {
    pub fn CGRequestListenEventAccess() -> bool;
}

extern "C-unwind" {
    pub fn CGPreflightPostEventAccess() -> bool;
}

extern "C-unwind" {
    pub fn CGRequestPostEventAccess() -> bool;
}
