//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfpageref?language=objc)
#[repr(C)]
pub struct CGPDFPageRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGPDFPage"]
    unsafe impl CGPDFPageRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfbox?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGPDFBox(pub i32);
impl CGPDFBox {
    #[doc(alias = "kCGPDFMediaBox")]
    pub const MediaBox: Self = Self(0);
    #[doc(alias = "kCGPDFCropBox")]
    pub const CropBox: Self = Self(1);
    #[doc(alias = "kCGPDFBleedBox")]
    pub const BleedBox: Self = Self(2);
    #[doc(alias = "kCGPDFTrimBox")]
    pub const TrimBox: Self = Self(3);
    #[doc(alias = "kCGPDFArtBox")]
    pub const ArtBox: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGPDFBox {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFBox {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CGPDFPageRetain(page: Option<&CGPDFPageRef>) -> *mut CGPDFPageRef;
}

extern "C-unwind" {
    pub fn CGPDFPageRelease(page: Option<&CGPDFPageRef>);
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFDocument")]
    pub fn CGPDFPageGetDocument(page: Option<&CGPDFPageRef>) -> *mut CGPDFDocumentRef;
}

extern "C-unwind" {
    pub fn CGPDFPageGetPageNumber(page: Option<&CGPDFPageRef>) -> usize;
}

extern "C-unwind" {
    pub fn CGPDFPageGetBoxRect(page: Option<&CGPDFPageRef>, r#box: CGPDFBox) -> CGRect;
}

extern "C-unwind" {
    pub fn CGPDFPageGetRotationAngle(page: Option<&CGPDFPageRef>) -> c_int;
}

extern "C-unwind" {
    pub fn CGPDFPageGetDrawingTransform(
        page: Option<&CGPDFPageRef>,
        r#box: CGPDFBox,
        rect: CGRect,
        rotate: c_int,
        preserve_aspect_ratio: bool,
    ) -> CGAffineTransform;
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFDictionary")]
    pub fn CGPDFPageGetDictionary(page: Option<&CGPDFPageRef>) -> CGPDFDictionaryRef;
}

extern "C-unwind" {
    pub fn CGPDFPageGetTypeID() -> CFTypeID;
}
