//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcolorref?language=objc)
#[repr(C)]
pub struct CGColorRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGColor"]
    unsafe impl CGColorRef {}
);

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorCreate(
        space: Option<&CGColorSpaceRef>,
        components: *const CGFloat,
    ) -> *mut CGColorRef;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericGray(gray: CGFloat, alpha: CGFloat) -> NonNull<CGColorRef>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColorRef>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericCMYK(
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColorRef>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericGrayGamma2_2(gray: CGFloat, alpha: CGFloat) -> NonNull<CGColorRef>;
}

extern "C-unwind" {
    pub fn CGColorCreateSRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColorRef>;
}

extern "C-unwind" {
    pub fn CGColorGetConstantColor(color_name: Option<&CFStringRef>) -> *mut CGColorRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGPattern"))]
    pub fn CGColorCreateWithPattern(
        space: Option<&CGColorSpaceRef>,
        pattern: Option<&CGPatternRef>,
        components: *const CGFloat,
    ) -> *mut CGColorRef;
}

extern "C-unwind" {
    pub fn CGColorCreateCopy(color: Option<&CGColorRef>) -> *mut CGColorRef;
}

extern "C-unwind" {
    pub fn CGColorCreateCopyWithAlpha(
        color: Option<&CGColorRef>,
        alpha: CGFloat,
    ) -> *mut CGColorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorCreateCopyByMatchingToColorSpace(
        _: Option<&CGColorSpaceRef>,
        intent: CGColorRenderingIntent,
        color: Option<&CGColorRef>,
        options: Option<&CFDictionaryRef>,
    ) -> *mut CGColorRef;
}

extern "C-unwind" {
    pub fn CGColorRetain(color: Option<&CGColorRef>) -> *mut CGColorRef;
}

extern "C-unwind" {
    pub fn CGColorRelease(color: Option<&CGColorRef>);
}

extern "C-unwind" {
    pub fn CGColorEqualToColor(color1: Option<&CGColorRef>, color2: Option<&CGColorRef>) -> bool;
}

extern "C-unwind" {
    pub fn CGColorGetNumberOfComponents(color: Option<&CGColorRef>) -> usize;
}

extern "C-unwind" {
    pub fn CGColorGetComponents(color: Option<&CGColorRef>) -> *const CGFloat;
}

extern "C-unwind" {
    pub fn CGColorGetAlpha(color: Option<&CGColorRef>) -> CGFloat;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorGetColorSpace(color: Option<&CGColorRef>) -> *mut CGColorSpaceRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGPattern")]
    pub fn CGColorGetPattern(color: Option<&CGColorRef>) -> *mut CGPatternRef;
}

extern "C-unwind" {
    pub fn CGColorGetTypeID() -> CFTypeID;
}

extern "C" {
    /// * Names of colors for use with `CGColorGetConstantColor'. **
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorwhite?language=objc)
    pub static kCGColorWhite: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorblack?language=objc)
    pub static kCGColorBlack: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorclear?language=objc)
    pub static kCGColorClear: &'static CFStringRef;
}
