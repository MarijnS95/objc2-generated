//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcolor?language=objc)
#[repr(C)]
pub struct CGColor {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGColor"]
    unsafe impl CGColor {}
);

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorCreate(space: Option<&CGColorSpace>, components: *const CGFloat) -> *mut CGColor;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericGray(gray: CGFloat, alpha: CGFloat) -> NonNull<CGColor>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColor>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericCMYK(
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColor>;
}

extern "C-unwind" {
    pub fn CGColorCreateGenericGrayGamma2_2(gray: CGFloat, alpha: CGFloat) -> NonNull<CGColor>;
}

extern "C-unwind" {
    pub fn CGColorCreateSRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> NonNull<CGColor>;
}

extern "C-unwind" {
    pub fn CGColorGetConstantColor(color_name: Option<&CFString>) -> *mut CGColor;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGPattern"))]
    pub fn CGColorCreateWithPattern(
        space: Option<&CGColorSpace>,
        pattern: Option<&CGPattern>,
        components: *const CGFloat,
    ) -> *mut CGColor;
}

extern "C-unwind" {
    pub fn CGColorCreateCopy(color: Option<&CGColor>) -> *mut CGColor;
}

extern "C-unwind" {
    pub fn CGColorCreateCopyWithAlpha(color: Option<&CGColor>, alpha: CGFloat) -> *mut CGColor;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorCreateCopyByMatchingToColorSpace(
        _: Option<&CGColorSpace>,
        intent: CGColorRenderingIntent,
        color: Option<&CGColor>,
        options: Option<&CFDictionary>,
    ) -> *mut CGColor;
}

extern "C-unwind" {
    pub fn CGColorRetain(color: Option<&CGColor>) -> *mut CGColor;
}

extern "C-unwind" {
    pub fn CGColorRelease(color: Option<&CGColor>);
}

extern "C-unwind" {
    pub fn CGColorEqualToColor(color1: Option<&CGColor>, color2: Option<&CGColor>) -> bool;
}

extern "C-unwind" {
    pub fn CGColorGetNumberOfComponents(color: Option<&CGColor>) -> usize;
}

extern "C-unwind" {
    pub fn CGColorGetComponents(color: Option<&CGColor>) -> *const CGFloat;
}

extern "C-unwind" {
    pub fn CGColorGetAlpha(color: Option<&CGColor>) -> CGFloat;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorGetColorSpace(color: Option<&CGColor>) -> *mut CGColorSpace;
}

extern "C-unwind" {
    #[cfg(feature = "CGPattern")]
    pub fn CGColorGetPattern(color: Option<&CGColor>) -> *mut CGPattern;
}

extern "C-unwind" {
    pub fn CGColorGetTypeID() -> CFTypeID;
}

extern "C" {
    /// * Names of colors for use with `CGColorGetConstantColor'. **
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorwhite?language=objc)
    pub static kCGColorWhite: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorblack?language=objc)
    pub static kCGColorBlack: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorclear?language=objc)
    pub static kCGColorClear: &'static CFString;
}
