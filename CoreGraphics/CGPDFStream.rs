//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfstreamref?language=objc)
pub type CGPDFStreamRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfdataformat?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGPDFDataFormat(pub i32);
impl CGPDFDataFormat {
    #[doc(alias = "CGPDFDataFormatRaw")]
    pub const Raw: Self = Self(0);
    #[doc(alias = "CGPDFDataFormatJPEGEncoded")]
    pub const JPEGEncoded: Self = Self(1);
    #[doc(alias = "CGPDFDataFormatJPEG2000")]
    pub const JPEG2000: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGPDFDataFormat {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFDataFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFDictionary")]
    pub fn CGPDFStreamGetDictionary(stream: CGPDFStreamRef) -> CGPDFDictionaryRef;
}

extern "C-unwind" {
    pub fn CGPDFStreamCopyData(stream: CGPDFStreamRef, format: *mut CGPDFDataFormat) -> CFDataRef;
}
