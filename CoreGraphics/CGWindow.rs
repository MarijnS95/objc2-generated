//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwindowid?language=objc)
pub type CGWindowID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGWindowSharingType(pub u32);
impl CGWindowSharingType {
    pub const kCGWindowSharingNone: Self = Self(0);
    pub const kCGWindowSharingReadOnly: Self = Self(1);
    pub const kCGWindowSharingReadWrite: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGWindowSharingType {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGWindowSharingType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwindowbackingtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGWindowBackingType(pub u32);
impl CGWindowBackingType {
    pub const kCGBackingStoreRetained: Self = Self(0);
    pub const kCGBackingStoreNonretained: Self = Self(1);
    pub const kCGBackingStoreBuffered: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGWindowBackingType {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGWindowBackingType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindownumber?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowNumber: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowstoretype?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowStoreType: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowlayer?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowLayer: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowbounds?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowBounds: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowsharingstate?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowSharingState: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowalpha?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowAlpha: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowownerpid?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowOwnerPID: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowmemoryusage?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowMemoryUsage: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowworkspace?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowWorkspace: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowownername?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowOwnerName: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowname?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowName: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowisonscreen?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowIsOnscreen: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgwindowbackinglocationvideomemory?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGWindowBackingLocationVideoMemory: CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwindowlistoption?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGWindowListOption(pub u32);
bitflags::bitflags! {
    impl CGWindowListOption: u32 {
        const kCGWindowListOptionAll = 0;
        const kCGWindowListOptionOnScreenOnly = 1<<0;
        const kCGWindowListOptionOnScreenAboveWindow = 1<<1;
        const kCGWindowListOptionOnScreenBelowWindow = 1<<2;
        const kCGWindowListOptionIncludingWindow = 1<<3;
        const kCGWindowListExcludeDesktopElements = 1<<4;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGWindowListOption {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGWindowListOption {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGWindowListCopyWindowInfo(
        option: CGWindowListOption,
        relative_to_window: CGWindowID,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGWindowListCreate(
        option: CGWindowListOption,
        relative_to_window: CGWindowID,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGWindowListCreateDescriptionFromArray(window_array: CFArrayRef) -> CFArrayRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwindowimageoption?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGWindowImageOption(pub u32);
bitflags::bitflags! {
    impl CGWindowImageOption: u32 {
        const kCGWindowImageDefault = 0;
        const kCGWindowImageBoundsIgnoreFraming = 1<<0;
        const kCGWindowImageShouldBeOpaque = 1<<1;
        const kCGWindowImageOnlyShadows = 1<<2;
        const kCGWindowImageBestResolution = 1<<3;
        const kCGWindowImageNominalResolution = 1<<4;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGWindowImageOption {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGWindowImageOption {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGImage", feature = "objc2-core-foundation"))]
    #[deprecated = "Please use ScreenCaptureKit instead."]
    pub fn CGWindowListCreateImage(
        screen_bounds: CGRect,
        list_option: CGWindowListOption,
        window_id: CGWindowID,
        image_option: CGWindowImageOption,
    ) -> CGImageRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGImage", feature = "objc2-core-foundation"))]
    #[deprecated = "Please use ScreenCaptureKit instead."]
    pub fn CGWindowListCreateImageFromArray(
        screen_bounds: CGRect,
        window_array: CFArrayRef,
        image_option: CGWindowImageOption,
    ) -> CGImageRef;
}

extern "C-unwind" {
    pub fn CGPreflightScreenCaptureAccess() -> bool;
}

extern "C-unwind" {
    pub fn CGRequestScreenCaptureAccess() -> bool;
}
