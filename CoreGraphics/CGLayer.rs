//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cglayerref?language=objc)
pub type CGLayerRef = *mut c_void;

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "objc2-core-foundation"))]
    pub fn CGLayerCreateWithContext(
        context: CGContextRef,
        size: CGSize,
        auxiliary_info: CFDictionaryRef,
    ) -> CGLayerRef;
}

extern "C-unwind" {
    pub fn CGLayerRetain(layer: CGLayerRef) -> CGLayerRef;
}

extern "C-unwind" {
    pub fn CGLayerRelease(layer: CGLayerRef);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGLayerGetSize(layer: CGLayerRef) -> CGSize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGLayerGetContext(layer: CGLayerRef) -> CGContextRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "objc2-core-foundation"))]
    pub fn CGContextDrawLayerInRect(context: CGContextRef, rect: CGRect, layer: CGLayerRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "objc2-core-foundation"))]
    pub fn CGContextDrawLayerAtPoint(context: CGContextRef, point: CGPoint, layer: CGLayerRef);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGLayerGetTypeID() -> CFTypeID;
}
