//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cglayer?language=objc)
#[repr(C)]
pub struct CGLayer {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl CGLayer {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"CGLayer"> for CGLayer {}
);

#[cfg(feature = "CGContext")]
#[inline]
pub unsafe extern "C-unwind" fn CGLayerCreateWithContext(
    context: Option<&CGContext>,
    size: CGSize,
    auxiliary_info: Option<&CFDictionary>,
) -> Option<CFRetained<CGLayer>> {
    extern "C-unwind" {
        fn CGLayerCreateWithContext(
            context: Option<&CGContext>,
            size: CGSize,
            auxiliary_info: Option<&CFDictionary>,
        ) -> Option<NonNull<CGLayer>>;
    }
    let ret = unsafe { CGLayerCreateWithContext(context, size, auxiliary_info) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn CGLayerGetSize(layer: Option<&CGLayer>) -> CGSize;
}

#[cfg(feature = "CGContext")]
#[inline]
pub unsafe extern "C-unwind" fn CGLayerGetContext(
    layer: Option<&CGLayer>,
) -> Option<CFRetained<CGContext>> {
    extern "C-unwind" {
        fn CGLayerGetContext(layer: Option<&CGLayer>) -> Option<NonNull<CGContext>>;
    }
    let ret = unsafe { CGLayerGetContext(layer) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGContextDrawLayerInRect(
        context: Option<&CGContext>,
        rect: CGRect,
        layer: Option<&CGLayer>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGContextDrawLayerAtPoint(
        context: Option<&CGContext>,
        point: CGPoint,
        layer: Option<&CGLayer>,
    );
}

unsafe impl ConcreteType for CGLayer {
    #[doc(alias = "CGLayerGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CGLayerGetTypeID() -> CFTypeID;
        }
        unsafe { CGLayerGetTypeID() }
    }
}
