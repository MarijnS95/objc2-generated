//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cglayer?language=objc)
#[repr(C)]
pub struct CGLayer {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGLayer"]
    unsafe impl CGLayer {}
);

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGLayerCreateWithContext(
        context: Option<&CGContext>,
        size: CGSize,
        auxiliary_info: Option<&CFDictionary>,
    ) -> *mut CGLayer;
}

extern "C-unwind" {
    pub fn CGLayerGetSize(layer: Option<&CGLayer>) -> CGSize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGLayerGetContext(layer: Option<&CGLayer>) -> *mut CGContext;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGContextDrawLayerInRect(
        context: Option<&CGContext>,
        rect: CGRect,
        layer: Option<&CGLayer>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGContextDrawLayerAtPoint(
        context: Option<&CGContext>,
        point: CGPoint,
        layer: Option<&CGLayer>,
    );
}

extern "C-unwind" {
    pub fn CGLayerGetTypeID() -> CFTypeID;
}
