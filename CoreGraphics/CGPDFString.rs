//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfstring?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct CGPDFString {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFString {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("CGPDFString", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfstringref?language=objc)
pub type CGPDFStringRef = *mut CGPDFString;

extern "C-unwind" {
    pub fn CGPDFStringGetLength(string: CGPDFStringRef) -> usize;
}

extern "C-unwind" {
    pub fn CGPDFStringGetBytePtr(string: CGPDFStringRef) -> *const c_uchar;
}

#[inline]
pub unsafe extern "C-unwind" fn CGPDFStringCopyTextString(
    string: CGPDFStringRef,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn CGPDFStringCopyTextString(string: CGPDFStringRef) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { CGPDFStringCopyTextString(string) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CGPDFStringCopyDate(
    string: CGPDFStringRef,
) -> Option<CFRetained<CFDate>> {
    extern "C-unwind" {
        fn CGPDFStringCopyDate(string: CGPDFStringRef) -> Option<NonNull<CFDate>>;
    }
    let ret = unsafe { CGPDFStringCopyDate(string) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}
