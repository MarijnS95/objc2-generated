//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterref?language=objc)
#[repr(C)]
pub struct CGPSConverterRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGPSConverter"]
    unsafe impl CGPSConverterRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterbegindocumentcallback?language=objc)
pub type CGPSConverterBeginDocumentCallback = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterenddocumentcallback?language=objc)
pub type CGPSConverterEndDocumentCallback = Option<unsafe extern "C-unwind" fn(*mut c_void, bool)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterbeginpagecallback?language=objc)
pub type CGPSConverterBeginPageCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, usize, NonNull<CFDictionaryRef>)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterendpagecallback?language=objc)
pub type CGPSConverterEndPageCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, usize, NonNull<CFDictionaryRef>)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterprogresscallback?language=objc)
pub type CGPSConverterProgressCallback = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconvertermessagecallback?language=objc)
pub type CGPSConverterMessageCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, NonNull<CFStringRef>)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconverterreleaseinfocallback?language=objc)
pub type CGPSConverterReleaseInfoCallback = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpsconvertercallbacks?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CGPSConverterCallbacks {
    pub version: c_uint,
    pub beginDocument: CGPSConverterBeginDocumentCallback,
    pub endDocument: CGPSConverterEndDocumentCallback,
    pub beginPage: CGPSConverterBeginPageCallback,
    pub endPage: CGPSConverterEndPageCallback,
    pub noteProgress: CGPSConverterProgressCallback,
    pub noteMessage: CGPSConverterMessageCallback,
    pub releaseInfo: CGPSConverterReleaseInfoCallback,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGPSConverterCallbacks {
    const ENCODING: Encoding = Encoding::Struct(
        "CGPSConverterCallbacks",
        &[
            <c_uint>::ENCODING,
            <CGPSConverterBeginDocumentCallback>::ENCODING,
            Encoding::Pointer(&Encoding::Unknown),
            <CGPSConverterBeginPageCallback>::ENCODING,
            <CGPSConverterEndPageCallback>::ENCODING,
            <CGPSConverterProgressCallback>::ENCODING,
            <CGPSConverterMessageCallback>::ENCODING,
            <CGPSConverterReleaseInfoCallback>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPSConverterCallbacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CGPSConverterCreate(
        info: *mut c_void,
        callbacks: NonNull<CGPSConverterCallbacks>,
        options: Option<&CFDictionaryRef>,
    ) -> *mut CGPSConverterRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGDataConsumer", feature = "CGDataProvider"))]
    pub fn CGPSConverterConvert(
        converter: &CGPSConverterRef,
        provider: &CGDataProviderRef,
        consumer: &CGDataConsumerRef,
        options: Option<&CFDictionaryRef>,
    ) -> bool;
}

extern "C-unwind" {
    pub fn CGPSConverterAbort(converter: &CGPSConverterRef) -> bool;
}

extern "C-unwind" {
    pub fn CGPSConverterIsConverting(converter: &CGPSConverterRef) -> bool;
}

extern "C-unwind" {
    pub fn CGPSConverterGetTypeID() -> CFTypeID;
}
