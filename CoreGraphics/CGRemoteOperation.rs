//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgeventerr?language=objc)
#[cfg(feature = "CGError")]
pub type CGEventErr = CGError;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgbuttoncount?language=objc)
pub type CGButtonCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgwheelcount?language=objc)
pub type CGWheelCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcharcode?language=objc)
pub type CGCharCode = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgkeycode?language=objc)
pub type CGKeyCode = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgscreenrefreshcallback?language=objc)
pub type CGScreenRefreshCallback =
    Option<unsafe extern "C-unwind" fn(u32, NonNull<CGRect>, *mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGRegisterScreenRefreshCallback(
        callback: CGScreenRefreshCallback,
        user_info: *mut c_void,
    ) -> CGError;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGUnregisterScreenRefreshCallback(
        callback: CGScreenRefreshCallback,
        user_info: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGWaitForScreenRefreshRects(rects: *mut *mut CGRect, count: *mut u32) -> CGError;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgscreenupdateoperation?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGScreenUpdateOperation(pub u32);
bitflags::bitflags! {
    impl CGScreenUpdateOperation: u32 {
        #[doc(alias = "kCGScreenUpdateOperationRefresh")]
        const Refresh = 0;
        #[doc(alias = "kCGScreenUpdateOperationMove")]
        const Move = 1<<0;
        #[doc(alias = "kCGScreenUpdateOperationReducedDirtyRectangleCount")]
        const ReducedDirtyRectangleCount = 1<<31;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGScreenUpdateOperation {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGScreenUpdateOperation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgscreenupdatemovedelta?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CGScreenUpdateMoveDelta {
    pub dX: i32,
    pub dY: i32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGScreenUpdateMoveDelta {
    const ENCODING: Encoding = Encoding::Struct(
        "CGScreenUpdateMoveDelta",
        &[<i32>::ENCODING, <i32>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGScreenUpdateMoveDelta {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgscreenupdatemovecallback?language=objc)
pub type CGScreenUpdateMoveCallback = Option<
    unsafe extern "C-unwind" fn(CGScreenUpdateMoveDelta, usize, NonNull<CGRect>, *mut c_void),
>;

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGScreenRegisterMoveCallback(
        callback: CGScreenUpdateMoveCallback,
        user_info: *mut c_void,
    ) -> CGError;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGScreenUnregisterMoveCallback(
        callback: CGScreenUpdateMoveCallback,
        user_info: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGWaitForScreenUpdateRects(
        requested_operations: CGScreenUpdateOperation,
        current_operation: *mut CGScreenUpdateOperation,
        rects: *mut *mut CGRect,
        rect_count: *mut usize,
        delta: *mut CGScreenUpdateMoveDelta,
    ) -> CGError;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGReleaseScreenRefreshRects(rects: *mut CGRect);
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    #[deprecated = "No longer supported"]
    pub fn CGCursorIsVisible() -> libc::boolean_t;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    #[deprecated = "No longer supported"]
    pub fn CGCursorIsDrawnInFramebuffer() -> libc::boolean_t;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGWarpMouseCursorPosition(new_cursor_position: CGPoint) -> CGError;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "libc"))]
    pub fn CGAssociateMouseAndMouseCursorPosition(connected: libc::boolean_t) -> CGError;
}

extern "C-unwind" {
    pub fn CGWindowServerCreateServerPort() -> *mut CFMachPort;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "libc"))]
    #[deprecated = "No longer supported"]
    pub fn CGEnableEventStateCombining(combine_state: libc::boolean_t) -> CGError;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "libc"))]
    #[deprecated = "No longer supported"]
    pub fn CGInhibitLocalEvents(inhibit: libc::boolean_t) -> CGError;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "libc"))]
    #[deprecated = "No longer supported"]
    pub fn CGPostKeyboardEvent(
        key_char: CGCharCode,
        virtual_key: CGKeyCode,
        key_down: libc::boolean_t,
    ) -> CGError;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgeventfiltermask?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGEventFilterMask(pub u32);
bitflags::bitflags! {
    impl CGEventFilterMask: u32 {
        #[doc(alias = "kCGEventFilterMaskPermitLocalMouseEvents")]
        const PermitLocalMouseEvents = 0x00000001;
        #[doc(alias = "kCGEventFilterMaskPermitLocalKeyboardEvents")]
        const PermitLocalKeyboardEvents = 0x00000002;
        #[doc(alias = "kCGEventFilterMaskPermitSystemDefinedEvents")]
        const PermitSystemDefinedEvents = 0x00000004;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGEventFilterMask {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGEventFilterMask {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgeventsuppressionstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGEventSuppressionState(pub u32);
impl CGEventSuppressionState {
    #[doc(alias = "kCGEventSuppressionStateSuppressionInterval")]
    pub const EventSuppressionStateSuppressionInterval: Self = Self(0);
    #[doc(alias = "kCGEventSuppressionStateRemoteMouseDrag")]
    pub const EventSuppressionStateRemoteMouseDrag: Self = Self(1);
    #[doc(alias = "kCGNumberOfEventSuppressionStates")]
    pub const NumberOfEventSuppressionStates: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGEventSuppressionState {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGEventSuppressionState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGSetLocalEventsFilterDuringSuppressionState(
        filter: CGEventFilterMask,
        state: CGEventSuppressionState,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    #[deprecated = "No longer supported"]
    pub fn CGSetLocalEventsSuppressionInterval(seconds: CFTimeInterval) -> CGError;
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn CGWindowServerCFMachPort() -> *mut CFMachPort;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgrectcount?language=objc)
pub type CGRectCount = u32;
