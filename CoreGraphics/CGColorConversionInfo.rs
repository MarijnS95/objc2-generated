//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcolorconversioninforef?language=objc)
#[repr(C)]
pub struct CGColorConversionInfoRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGColorConversionInfo"]
    unsafe impl CGColorConversionInfoRef {}
);

extern "C-unwind" {
    pub fn CGColorConversionInfoGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcolorconversioninfotransformtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGColorConversionInfoTransformType(pub u32);
impl CGColorConversionInfoTransformType {
    #[doc(alias = "kCGColorConversionTransformFromSpace")]
    pub const TransformFromSpace: Self = Self(0);
    #[doc(alias = "kCGColorConversionTransformToSpace")]
    pub const TransformToSpace: Self = Self(1);
    #[doc(alias = "kCGColorConversionTransformApplySpace")]
    pub const TransformApplySpace: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGColorConversionInfoTransformType {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGColorConversionInfoTransformType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorConversionInfoCreate(
        src: Option<&CGColorSpaceRef>,
        dst: Option<&CGColorSpaceRef>,
    ) -> *mut CGColorConversionInfoRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGColorConversionInfoCreateWithOptions(
        src: &CGColorSpaceRef,
        dst: &CGColorSpaceRef,
        options: Option<&CFDictionaryRef>,
    ) -> *mut CGColorConversionInfoRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGToneMapping"))]
    pub fn CGColorConversionInfoCreateForToneMapping(
        from: &CGColorSpaceRef,
        source_headroom: c_float,
        to: &CGColorSpaceRef,
        target_headroom: c_float,
        method: CGToneMapping,
        options: Option<&CFDictionaryRef>,
        error: *mut CFErrorRef,
    ) -> *mut CGColorConversionInfoRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcolorbufferformat?language=objc)
#[cfg(feature = "CGImage")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CGColorBufferFormat {
    pub version: u32,
    pub bitmapInfo: CGBitmapInfo,
    pub bitsPerComponent: usize,
    pub bitsPerPixel: usize,
    pub bytesPerRow: usize,
}

#[cfg(all(feature = "CGImage", feature = "objc2"))]
unsafe impl Encode for CGColorBufferFormat {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <u32>::ENCODING,
            <CGBitmapInfo>::ENCODING,
            <usize>::ENCODING,
            <usize>::ENCODING,
            <usize>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CGImage", feature = "objc2"))]
unsafe impl RefEncode for CGColorBufferFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CGImage")]
    pub fn CGColorConversionInfoConvertData(
        info: &CGColorConversionInfoRef,
        width: usize,
        height: usize,
        dst_data: NonNull<c_void>,
        dst_format: CGColorBufferFormat,
        src_data: NonNull<c_void>,
        src_format: CGColorBufferFormat,
        options: Option<&CFDictionaryRef>,
    ) -> bool;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorconversionblackpointcompensation?language=objc)
    pub static kCGColorConversionBlackPointCompensation: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgcolorconversiontrcsize?language=objc)
    pub static kCGColorConversionTRCSize: &'static CFStringRef;
}
