//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cggradientref?language=objc)
#[repr(C)]
pub struct CGGradientRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGGradient"]
    unsafe impl CGGradientRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cggradientdrawingoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGGradientDrawingOptions(pub u32);
bitflags::bitflags! {
    impl CGGradientDrawingOptions: u32 {
        #[doc(alias = "kCGGradientDrawsBeforeStartLocation")]
        const DrawsBeforeStartLocation = 1<<0;
        #[doc(alias = "kCGGradientDrawsAfterEndLocation")]
        const DrawsAfterEndLocation = 1<<1;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGGradientDrawingOptions {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGGradientDrawingOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CGGradientGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGGradientCreateWithColorComponents(
        space: Option<&CGColorSpaceRef>,
        components: *const CGFloat,
        locations: *const CGFloat,
        count: usize,
    ) -> *mut CGGradientRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGColorSpace")]
    pub fn CGGradientCreateWithColors(
        space: Option<&CGColorSpaceRef>,
        colors: Option<&CFArrayRef>,
        locations: *const CGFloat,
    ) -> *mut CGGradientRef;
}

extern "C-unwind" {
    pub fn CGGradientRetain(gradient: Option<&CGGradientRef>) -> *mut CGGradientRef;
}

extern "C-unwind" {
    pub fn CGGradientRelease(gradient: Option<&CGGradientRef>);
}
