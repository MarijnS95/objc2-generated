//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgbitmapcontextreleasedatacallback?language=objc)
pub type CGBitmapContextReleaseDataCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void)>;

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGContext"))]
    pub fn CGBitmapContextCreateWithData(
        data: *mut c_void,
        width: usize,
        height: usize,
        bits_per_component: usize,
        bytes_per_row: usize,
        space: Option<&CGColorSpace>,
        bitmap_info: u32,
        release_callback: CGBitmapContextReleaseDataCallback,
        release_info: *mut c_void,
    ) -> *mut CGContext;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGContext"))]
    pub fn CGBitmapContextCreate(
        data: *mut c_void,
        width: usize,
        height: usize,
        bits_per_component: usize,
        bytes_per_row: usize,
        space: Option<&CGColorSpace>,
        bitmap_info: u32,
    ) -> *mut CGContext;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetData(context: Option<&CGContext>) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetWidth(context: Option<&CGContext>) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetHeight(context: Option<&CGContext>) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetBitsPerComponent(context: Option<&CGContext>) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetBitsPerPixel(context: Option<&CGContext>) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGBitmapContextGetBytesPerRow(context: Option<&CGContext>) -> usize;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGContext"))]
    pub fn CGBitmapContextGetColorSpace(context: Option<&CGContext>) -> *mut CGColorSpace;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "CGImage"))]
    pub fn CGBitmapContextGetAlphaInfo(context: Option<&CGContext>) -> CGImageAlphaInfo;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "CGImage"))]
    pub fn CGBitmapContextGetBitmapInfo(context: Option<&CGContext>) -> CGBitmapInfo;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGContext", feature = "CGImage"))]
    pub fn CGBitmapContextCreateImage(context: Option<&CGContext>) -> *mut CGImage;
}
