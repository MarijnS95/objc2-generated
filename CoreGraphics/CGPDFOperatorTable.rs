//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfoperatortable?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct CGPDFOperatorTable {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFOperatorTable {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("CGPDFOperatorTable", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfoperatortableref?language=objc)
pub type CGPDFOperatorTableRef = *mut CGPDFOperatorTable;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfoperatorcallback?language=objc)
#[cfg(feature = "CGPDFScanner")]
pub type CGPDFOperatorCallback = Option<unsafe extern "C-unwind" fn(CGPDFScannerRef, *mut c_void)>;

extern "C-unwind" {
    pub fn CGPDFOperatorTableCreate() -> CGPDFOperatorTableRef;
}

extern "C-unwind" {
    pub fn CGPDFOperatorTableRetain(table: CGPDFOperatorTableRef) -> CGPDFOperatorTableRef;
}

extern "C-unwind" {
    pub fn CGPDFOperatorTableRelease(table: CGPDFOperatorTableRef);
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFScanner")]
    pub fn CGPDFOperatorTableSetCallback(
        table: CGPDFOperatorTableRef,
        name: *const c_char,
        callback: CGPDFOperatorCallback,
    );
}
