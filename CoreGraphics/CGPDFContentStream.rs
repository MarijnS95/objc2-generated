//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfcontentstream?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct CGPDFContentStream {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGPDFContentStream {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("CGPDFContentStream", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfcontentstreamref?language=objc)
pub type CGPDFContentStreamRef = *mut CGPDFContentStream;

extern "C-unwind" {
    #[cfg(feature = "CGPDFPage")]
    pub fn CGPDFContentStreamCreateWithPage(page: &CGPDFPage) -> CGPDFContentStreamRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGPDFDictionary", feature = "CGPDFStream"))]
    pub fn CGPDFContentStreamCreateWithStream(
        stream: CGPDFStreamRef,
        stream_resources: CGPDFDictionaryRef,
        parent: CGPDFContentStreamRef,
    ) -> CGPDFContentStreamRef;
}

extern "C-unwind" {
    pub fn CGPDFContentStreamRetain(cs: CGPDFContentStreamRef) -> CGPDFContentStreamRef;
}

extern "C-unwind" {
    pub fn CGPDFContentStreamRelease(cs: CGPDFContentStreamRef);
}

#[inline]
pub unsafe extern "C-unwind" fn CGPDFContentStreamGetStreams(
    cs: CGPDFContentStreamRef,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn CGPDFContentStreamGetStreams(cs: CGPDFContentStreamRef) -> *mut CFArray;
    }
    let ret = unsafe { CGPDFContentStreamGetStreams(cs) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CGPDFObject")]
    pub fn CGPDFContentStreamGetResource(
        cs: CGPDFContentStreamRef,
        category: NonNull<c_char>,
        name: NonNull<c_char>,
    ) -> CGPDFObjectRef;
}
