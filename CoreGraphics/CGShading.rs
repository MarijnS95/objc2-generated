//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgshadingref?language=objc)
#[repr(C)]
pub struct CGShadingRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGShading"]
    unsafe impl CGShadingRef {}
);

extern "C-unwind" {
    pub fn CGShadingGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGFunction"))]
    pub fn CGShadingCreateAxial(
        space: Option<&CGColorSpaceRef>,
        start: CGPoint,
        end: CGPoint,
        function: Option<&CGFunctionRef>,
        extend_start: bool,
        extend_end: bool,
    ) -> *mut CGShadingRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGColorSpace", feature = "CGFunction"))]
    pub fn CGShadingCreateRadial(
        space: Option<&CGColorSpaceRef>,
        start: CGPoint,
        start_radius: CGFloat,
        end: CGPoint,
        end_radius: CGFloat,
        function: Option<&CGFunctionRef>,
        extend_start: bool,
        extend_end: bool,
    ) -> *mut CGShadingRef;
}

extern "C-unwind" {
    pub fn CGShadingRetain(shading: Option<&CGShadingRef>) -> *mut CGShadingRef;
}

extern "C-unwind" {
    pub fn CGShadingRelease(shading: Option<&CGShadingRef>);
}
