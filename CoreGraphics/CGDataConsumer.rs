//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdataconsumer?language=objc)
#[repr(C)]
pub struct CGDataConsumer {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "CGDataConsumer"]
    unsafe impl CGDataConsumer {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdataconsumerputbytescallback?language=objc)
pub type CGDataConsumerPutBytesCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, NonNull<c_void>, usize) -> usize>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdataconsumerreleaseinfocallback?language=objc)
pub type CGDataConsumerReleaseInfoCallback = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdataconsumercallbacks?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CGDataConsumerCallbacks {
    pub putBytes: CGDataConsumerPutBytesCallback,
    pub releaseConsumer: CGDataConsumerReleaseInfoCallback,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGDataConsumerCallbacks {
    const ENCODING: Encoding = Encoding::Struct(
        "CGDataConsumerCallbacks",
        &[
            <CGDataConsumerPutBytesCallback>::ENCODING,
            <CGDataConsumerReleaseInfoCallback>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGDataConsumerCallbacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CGDataConsumerGetTypeID() -> CFTypeID;
}

#[inline]
pub unsafe extern "C-unwind" fn CGDataConsumerCreate(
    info: *mut c_void,
    cbks: *const CGDataConsumerCallbacks,
) -> Option<CFRetained<CGDataConsumer>> {
    extern "C-unwind" {
        fn CGDataConsumerCreate(
            info: *mut c_void,
            cbks: *const CGDataConsumerCallbacks,
        ) -> *mut CGDataConsumer;
    }
    let ret = unsafe { CGDataConsumerCreate(info, cbks) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CGDataConsumerCreateWithURL(
    url: Option<&CFURL>,
) -> Option<CFRetained<CGDataConsumer>> {
    extern "C-unwind" {
        fn CGDataConsumerCreateWithURL(url: Option<&CFURL>) -> *mut CGDataConsumer;
    }
    let ret = unsafe { CGDataConsumerCreateWithURL(url) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CGDataConsumerCreateWithCFData(
    data: Option<&CFMutableData>,
) -> Option<CFRetained<CGDataConsumer>> {
    extern "C-unwind" {
        fn CGDataConsumerCreateWithCFData(data: Option<&CFMutableData>) -> *mut CGDataConsumer;
    }
    let ret = unsafe { CGDataConsumerCreateWithCFData(data) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}
