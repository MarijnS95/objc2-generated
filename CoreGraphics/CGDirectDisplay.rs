//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdirectdisplayid?language=objc)
pub type CGDirectDisplayID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgopengldisplaymask?language=objc)
pub type CGOpenGLDisplayMask = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgrefreshrate?language=objc)
pub type CGRefreshRate = c_double;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdisplaymoderef?language=objc)
pub type CGDisplayModeRef = *mut c_void;

extern "C-unwind" {
    pub fn CGMainDisplayID() -> CGDirectDisplayID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "objc2-core-foundation"))]
    pub fn CGGetDisplaysWithPoint(
        point: CGPoint,
        max_displays: u32,
        displays: *mut CGDirectDisplayID,
        matching_display_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "objc2-core-foundation"))]
    pub fn CGGetDisplaysWithRect(
        rect: CGRect,
        max_displays: u32,
        displays: *mut CGDirectDisplayID,
        matching_display_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGGetDisplaysWithOpenGLDisplayMask(
        mask: CGOpenGLDisplayMask,
        max_displays: u32,
        displays: *mut CGDirectDisplayID,
        matching_display_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGGetActiveDisplayList(
        max_displays: u32,
        active_displays: *mut CGDirectDisplayID,
        display_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGGetOnlineDisplayList(
        max_displays: u32,
        online_displays: *mut CGDirectDisplayID,
        display_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    pub fn CGDisplayIDToOpenGLDisplayMask(display: CGDirectDisplayID) -> CGOpenGLDisplayMask;
}

extern "C-unwind" {
    pub fn CGOpenGLDisplayMaskToDisplayID(mask: CGOpenGLDisplayMask) -> CGDirectDisplayID;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGDisplayBounds(display: CGDirectDisplayID) -> CGRect;
}

extern "C-unwind" {
    pub fn CGDisplayPixelsWide(display: CGDirectDisplayID) -> usize;
}

extern "C-unwind" {
    pub fn CGDisplayPixelsHigh(display: CGDirectDisplayID) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGDisplayCopyAllDisplayModes(
        display: CGDirectDisplayID,
        options: CFDictionaryRef,
    ) -> CFArrayRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/kcgdisplayshowduplicatelowresolutionmodes?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCGDisplayShowDuplicateLowResolutionModes: CFStringRef;
}

extern "C-unwind" {
    pub fn CGDisplayCopyDisplayMode(display: CGDirectDisplayID) -> CGDisplayModeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "objc2-core-foundation"))]
    pub fn CGDisplaySetDisplayMode(
        display: CGDirectDisplayID,
        mode: CGDisplayModeRef,
        options: CFDictionaryRef,
    ) -> CGError;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetWidth(mode: CGDisplayModeRef) -> usize;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetHeight(mode: CGDisplayModeRef) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayModeCopyPixelEncoding(mode: CGDisplayModeRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetRefreshRate(mode: CGDisplayModeRef) -> c_double;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetIOFlags(mode: CGDisplayModeRef) -> u32;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetIODisplayModeID(mode: CGDisplayModeRef) -> i32;
}

extern "C-unwind" {
    pub fn CGDisplayModeIsUsableForDesktopGUI(mode: CGDisplayModeRef) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CGDisplayModeGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CGDisplayModeRetain(mode: CGDisplayModeRef) -> CGDisplayModeRef;
}

extern "C-unwind" {
    pub fn CGDisplayModeRelease(mode: CGDisplayModeRef);
}

extern "C-unwind" {
    pub fn CGDisplayModeGetPixelWidth(mode: CGDisplayModeRef) -> usize;
}

extern "C-unwind" {
    pub fn CGDisplayModeGetPixelHeight(mode: CGDisplayModeRef) -> usize;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cggammavalue?language=objc)
pub type CGGammaValue = c_float;

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGSetDisplayTransferByFormula(
        display: CGDirectDisplayID,
        red_min: CGGammaValue,
        red_max: CGGammaValue,
        red_gamma: CGGammaValue,
        green_min: CGGammaValue,
        green_max: CGGammaValue,
        green_gamma: CGGammaValue,
        blue_min: CGGammaValue,
        blue_max: CGGammaValue,
        blue_gamma: CGGammaValue,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGGetDisplayTransferByFormula(
        display: CGDirectDisplayID,
        red_min: *mut CGGammaValue,
        red_max: *mut CGGammaValue,
        red_gamma: *mut CGGammaValue,
        green_min: *mut CGGammaValue,
        green_max: *mut CGGammaValue,
        green_gamma: *mut CGGammaValue,
        blue_min: *mut CGGammaValue,
        blue_max: *mut CGGammaValue,
        blue_gamma: *mut CGGammaValue,
    ) -> CGError;
}

extern "C-unwind" {
    pub fn CGDisplayGammaTableCapacity(display: CGDirectDisplayID) -> u32;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGSetDisplayTransferByTable(
        display: CGDirectDisplayID,
        table_size: u32,
        red_table: *mut CGGammaValue,
        green_table: *mut CGGammaValue,
        blue_table: *mut CGGammaValue,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGGetDisplayTransferByTable(
        display: CGDirectDisplayID,
        capacity: u32,
        red_table: *mut CGGammaValue,
        green_table: *mut CGGammaValue,
        blue_table: *mut CGGammaValue,
        sample_count: *mut u32,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGSetDisplayTransferByByteTable(
        display: CGDirectDisplayID,
        table_size: u32,
        red_table: NonNull<u8>,
        green_table: NonNull<u8>,
        blue_table: NonNull<u8>,
    ) -> CGError;
}

extern "C-unwind" {
    pub fn CGDisplayRestoreColorSyncSettings();
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgcaptureoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CGCaptureOptions(pub u32);
bitflags::bitflags! {
    impl CGCaptureOptions: u32 {
        const kCGCaptureNoOptions = 0;
        const kCGCaptureNoFill = 1<<0;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CGCaptureOptions {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CGCaptureOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayIsCaptured(display: CGDirectDisplayID) -> libc::boolean_t;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGDisplayCapture(display: CGDirectDisplayID) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGDisplayCaptureWithOptions(
        display: CGDirectDisplayID,
        options: CGCaptureOptions,
    ) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGDisplayRelease(display: CGDirectDisplayID) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGCaptureAllDisplays() -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGReleaseAllDisplays() -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGWindow")]
    pub fn CGShieldingWindowID(display: CGDirectDisplayID) -> CGWindowID;
}

extern "C-unwind" {
    #[cfg(feature = "CGWindowLevel")]
    pub fn CGShieldingWindowLevel() -> CGWindowLevel;
}

extern "C-unwind" {
    #[cfg(feature = "CGImage")]
    #[deprecated = "Please use ScreenCaptureKit instead."]
    pub fn CGDisplayCreateImage(display_id: CGDirectDisplayID) -> CGImageRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGImage", feature = "objc2-core-foundation"))]
    #[deprecated = "Please use ScreenCaptureKit instead."]
    pub fn CGDisplayCreateImageForRect(display: CGDirectDisplayID, rect: CGRect) -> CGImageRef;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGDisplayHideCursor(display: CGDirectDisplayID) -> CGError;
}

extern "C-unwind" {
    #[cfg(feature = "CGError")]
    pub fn CGDisplayShowCursor(display: CGDirectDisplayID) -> CGError;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "objc2-core-foundation"))]
    pub fn CGDisplayMoveCursorToPoint(display: CGDirectDisplayID, point: CGPoint) -> CGError;
}

extern "C-unwind" {
    pub fn CGGetLastMouseDelta(delta_x: *mut i32, delta_y: *mut i32);
}

extern "C-unwind" {
    #[cfg(feature = "CGContext")]
    pub fn CGDisplayGetDrawingContext(display: CGDirectDisplayID) -> CGContextRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdisplaycount?language=objc)
pub type CGDisplayCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgdisplayerr?language=objc)
#[cfg(feature = "CGError")]
pub type CGDisplayErr = CGError;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayAvailableModes(dsp: CGDirectDisplayID) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "libc", feature = "objc2-core-foundation"))]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayBestModeForParameters(
        display: CGDirectDisplayID,
        bits_per_pixel: usize,
        width: usize,
        height: usize,
        exact_match: *mut libc::boolean_t,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "libc", feature = "objc2-core-foundation"))]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayBestModeForParametersAndRefreshRate(
        display: CGDirectDisplayID,
        bits_per_pixel: usize,
        width: usize,
        height: usize,
        refresh_rate: CGRefreshRate,
        exact_match: *mut libc::boolean_t,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "No longer supported"]
    pub fn CGDisplayCurrentMode(display: CGDirectDisplayID) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CGError", feature = "objc2-core-foundation"))]
    #[deprecated = "No longer supported"]
    pub fn CGDisplaySwitchToMode(display: CGDirectDisplayID, mode: CFDictionaryRef) -> CGError;
}
