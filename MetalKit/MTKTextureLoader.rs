//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadererror?language=objc)
// NS_TYPED_ENUM
pub type MTKTextureLoaderError = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadererrordomain?language=objc)
    pub static MTKTextureLoaderErrorDomain: &'static MTKTextureLoaderError;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadererrorkey?language=objc)
    pub static MTKTextureLoaderErrorKey: &'static MTKTextureLoaderError;
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoption?language=objc)
// NS_TYPED_ENUM
pub type MTKTextureLoaderOption = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptionallocatemipmaps?language=objc)
    pub static MTKTextureLoaderOptionAllocateMipmaps: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptiongeneratemipmaps?language=objc)
    pub static MTKTextureLoaderOptionGenerateMipmaps: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptionsrgb?language=objc)
    pub static MTKTextureLoaderOptionSRGB: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptiontextureusage?language=objc)
    pub static MTKTextureLoaderOptionTextureUsage: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptiontexturecpucachemode?language=objc)
    pub static MTKTextureLoaderOptionTextureCPUCacheMode: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptiontexturestoragemode?language=objc)
    pub static MTKTextureLoaderOptionTextureStorageMode: &'static MTKTextureLoaderOption;
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadercubelayout?language=objc)
// NS_TYPED_ENUM
pub type MTKTextureLoaderCubeLayout = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptioncubelayout?language=objc)
    pub static MTKTextureLoaderOptionCubeLayout: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadercubelayoutvertical?language=objc)
    pub static MTKTextureLoaderCubeLayoutVertical: &'static MTKTextureLoaderCubeLayout;
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderorigin?language=objc)
// NS_TYPED_ENUM
pub type MTKTextureLoaderOrigin = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptionorigin?language=objc)
    pub static MTKTextureLoaderOptionOrigin: &'static MTKTextureLoaderOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderorigintopleft?language=objc)
    pub static MTKTextureLoaderOriginTopLeft: &'static MTKTextureLoaderOrigin;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoriginbottomleft?language=objc)
    pub static MTKTextureLoaderOriginBottomLeft: &'static MTKTextureLoaderOrigin;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoriginflippedvertically?language=objc)
    pub static MTKTextureLoaderOriginFlippedVertically: &'static MTKTextureLoaderOrigin;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderoptionloadasarray?language=objc)
    pub static MTKTextureLoaderOptionLoadAsArray: &'static MTKTextureLoaderOption;
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloadercallback?language=objc)
#[cfg(feature = "block2")]
pub type MTKTextureLoaderCallback =
    *mut block2::Block<dyn Fn(*mut ProtocolObject<dyn MTLTexture>, *mut NSError)>;

/// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloaderarraycallback?language=objc)
#[cfg(feature = "block2")]
pub type MTKTextureLoaderArrayCallback =
    *mut block2::Block<dyn Fn(NonNull<NSArray<ProtocolObject<dyn MTLTexture>>>, *mut NSError)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalkit/mtktextureloader?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTKTextureLoader;
);

unsafe impl NSObjectProtocol for MTKTextureLoader {}

extern_methods!(
    unsafe impl MTKTextureLoader {
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Retained<ProtocolObject<dyn MTLDevice>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method(newTextureWithContentsOfURL:options:completionHandler:)]
        pub unsafe fn newTextureWithContentsOfURL_options_completionHandler(
            &self,
            url: &NSURL,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderCallback,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
        #[method(newTextureWithName:scaleFactor:bundle:options:completionHandler:)]
        pub unsafe fn newTextureWithName_scaleFactor_bundle_options_completionHandler(
            &self,
            name: &NSString,
            scale_factor: CGFloat,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderCallback,
        );

        #[cfg(all(
            feature = "block2",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        #[method(newTextureWithName:scaleFactor:displayGamut:bundle:options:completionHandler:)]
        pub unsafe fn newTextureWithName_scaleFactor_displayGamut_bundle_options_completionHandler(
            &self,
            name: &NSString,
            scale_factor: CGFloat,
            display_gamut: NSDisplayGamut,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderCallback,
        );

        #[cfg(feature = "block2")]
        #[method(newTexturesWithContentsOfURLs:options:completionHandler:)]
        pub unsafe fn newTexturesWithContentsOfURLs_options_completionHandler(
            &self,
            ur_ls: &NSArray<NSURL>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderArrayCallback,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
        #[method(newTexturesWithNames:scaleFactor:bundle:options:completionHandler:)]
        pub unsafe fn newTexturesWithNames_scaleFactor_bundle_options_completionHandler(
            &self,
            names: &NSArray<NSString>,
            scale_factor: CGFloat,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderArrayCallback,
        );

        #[cfg(all(
            feature = "block2",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        #[method(newTexturesWithNames:scaleFactor:displayGamut:bundle:options:completionHandler:)]
        pub unsafe fn newTexturesWithNames_scaleFactor_displayGamut_bundle_options_completionHandler(
            &self,
            names: &NSArray<NSString>,
            scale_factor: CGFloat,
            display_gamut: NSDisplayGamut,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderArrayCallback,
        );

        #[cfg(feature = "block2")]
        #[method(newTextureWithData:options:completionHandler:)]
        pub unsafe fn newTextureWithData_options_completionHandler(
            &self,
            data: &NSData,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderCallback,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-graphics"))]
        #[method(newTextureWithCGImage:options:completionHandler:)]
        pub unsafe fn newTextureWithCGImage_options_completionHandler(
            &self,
            cg_image: CGImageRef,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
            completion_handler: MTKTextureLoaderCallback,
        );

        #[method_id(@__retain_semantics New newTextureWithContentsOfURL:options:error:_)]
        pub unsafe fn newTextureWithContentsOfURL_options_error(
            &self,
            url: &NSURL,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLTexture>>, Retained<NSError>>;

        #[method_id(@__retain_semantics New newTextureWithData:options:error:_)]
        pub unsafe fn newTextureWithData_options_error(
            &self,
            data: &NSData,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLTexture>>, Retained<NSError>>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__retain_semantics New newTextureWithCGImage:options:error:_)]
        pub unsafe fn newTextureWithCGImage_options_error(
            &self,
            cg_image: CGImageRef,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLTexture>>, Retained<NSError>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics New newTextureWithName:scaleFactor:bundle:options:error:_)]
        pub unsafe fn newTextureWithName_scaleFactor_bundle_options_error(
            &self,
            name: &NSString,
            scale_factor: CGFloat,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLTexture>>, Retained<NSError>>;

        #[cfg(all(feature = "objc2-app-kit", feature = "objc2-core-foundation"))]
        #[cfg(target_os = "macos")]
        #[method_id(@__retain_semantics New newTextureWithName:scaleFactor:displayGamut:bundle:options:error:_)]
        pub unsafe fn newTextureWithName_scaleFactor_displayGamut_bundle_options_error(
            &self,
            name: &NSString,
            scale_factor: CGFloat,
            display_gamut: NSDisplayGamut,
            bundle: Option<&NSBundle>,
            options: Option<&NSDictionary<MTKTextureLoaderOption, AnyObject>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLTexture>>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTKTextureLoader {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
