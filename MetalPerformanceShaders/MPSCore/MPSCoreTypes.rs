//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpskerneloptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSKernelOptions(pub NSUInteger);
bitflags::bitflags! {
    impl MPSKernelOptions: NSUInteger {
        #[doc(alias = "MPSKernelOptionsNone")]
        const None = 0;
        #[doc(alias = "MPSKernelOptionsSkipAPIValidation")]
        const SkipAPIValidation = 1<<0;
        #[doc(alias = "MPSKernelOptionsAllowReducedPrecision")]
        const AllowReducedPrecision = 1<<1;
        #[doc(alias = "MPSKernelOptionsDisableInternalTiling")]
        const DisableInternalTiling = 1<<2;
        #[doc(alias = "MPSKernelOptionsInsertDebugGroups")]
        const InsertDebugGroups = 1<<3;
        #[doc(alias = "MPSKernelOptionsVerbose")]
        const Verbose = 1<<4;
    }
}

unsafe impl Encode for MPSKernelOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSKernelOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimageedgemode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSImageEdgeMode(pub NSUInteger);
impl MPSImageEdgeMode {
    #[doc(alias = "MPSImageEdgeModeZero")]
    pub const Zero: Self = Self(0);
    #[doc(alias = "MPSImageEdgeModeClamp")]
    pub const Clamp: Self = Self(1);
    #[doc(alias = "MPSImageEdgeModeMirror")]
    pub const Mirror: Self = Self(2);
    #[doc(alias = "MPSImageEdgeModeMirrorWithEdge")]
    pub const MirrorWithEdge: Self = Self(3);
    #[doc(alias = "MPSImageEdgeModeConstant")]
    pub const Constant: Self = Self(4);
}

unsafe impl Encode for MPSImageEdgeMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSImageEdgeMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimagefeaturechannelformat?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSImageFeatureChannelFormat(pub NSUInteger);
impl MPSImageFeatureChannelFormat {
    #[doc(alias = "MPSImageFeatureChannelFormatNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MPSImageFeatureChannelFormatUnorm8")]
    pub const Unorm8: Self = Self(1);
    #[doc(alias = "MPSImageFeatureChannelFormatUnorm16")]
    pub const Unorm16: Self = Self(2);
    #[doc(alias = "MPSImageFeatureChannelFormatFloat16")]
    pub const Float16: Self = Self(3);
    #[doc(alias = "MPSImageFeatureChannelFormatFloat32")]
    pub const Float32: Self = Self(4);
    #[doc(alias = "MPSImageFeatureChannelFormat_reserved0")]
    pub const _reserved0: Self = Self(5);
    #[doc(alias = "MPSImageFeatureChannelFormatCount")]
    pub const Count: Self = Self(6);
}

unsafe impl Encode for MPSImageFeatureChannelFormat {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSImageFeatureChannelFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsfloatdatatypebit?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSFloatDataTypeBit(pub u32);
impl MPSFloatDataTypeBit {
    pub const MPSFloatDataTypeSignBit: Self = Self(0x00800000);
    pub const MPSFloatDataTypeExponentBit: Self = Self(0x007C0000);
    pub const MPSFloatDataTypeMantissaBit: Self = Self(0x0003FC00);
}

unsafe impl Encode for MPSFloatDataTypeBit {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for MPSFloatDataTypeBit {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsfloatdatatypeshift?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSFloatDataTypeShift(pub u32);
impl MPSFloatDataTypeShift {
    pub const MPSFloatDataTypeSignShift: Self = Self(23);
    pub const MPSFloatDataTypeExponentShift: Self = Self(18);
    pub const MPSFloatDataTypeMantissaShift: Self = Self(10);
}

unsafe impl Encode for MPSFloatDataTypeShift {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for MPSFloatDataTypeShift {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsdatatype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSDataType(pub u32);
impl MPSDataType {
    #[doc(alias = "MPSDataTypeInvalid")]
    pub const Invalid: Self = Self(0);
    #[doc(alias = "MPSDataTypeFloatBit")]
    pub const FloatBit: Self = Self(0x10000000);
    #[doc(alias = "MPSDataTypeFloat32")]
    pub const Float32: Self = Self(MPSDataType::FloatBit.0 | 32);
    #[doc(alias = "MPSDataTypeFloat16")]
    pub const Float16: Self = Self(MPSDataType::FloatBit.0 | 16);
    #[doc(alias = "MPSDataTypeComplexBit")]
    pub const ComplexBit: Self = Self(0x01000000);
    #[doc(alias = "MPSDataTypeComplexFloat32")]
    pub const ComplexFloat32: Self = Self(MPSDataType::FloatBit.0 | MPSDataType::ComplexBit.0 | 64);
    #[doc(alias = "MPSDataTypeComplexFloat16")]
    pub const ComplexFloat16: Self = Self(MPSDataType::FloatBit.0 | MPSDataType::ComplexBit.0 | 32);
    #[doc(alias = "MPSDataTypeSignedBit")]
    pub const SignedBit: Self = Self(0x20000000);
    #[doc(alias = "MPSDataTypeIntBit")]
    pub const IntBit: Self = Self(MPSDataType::SignedBit.0);
    #[doc(alias = "MPSDataTypeInt4")]
    pub const Int4: Self = Self(MPSDataType::SignedBit.0 | 4);
    #[doc(alias = "MPSDataTypeInt8")]
    pub const Int8: Self = Self(MPSDataType::SignedBit.0 | 8);
    #[doc(alias = "MPSDataTypeInt16")]
    pub const Int16: Self = Self(MPSDataType::SignedBit.0 | 16);
    #[doc(alias = "MPSDataTypeInt32")]
    pub const Int32: Self = Self(MPSDataType::SignedBit.0 | 32);
    #[doc(alias = "MPSDataTypeInt64")]
    pub const Int64: Self = Self(MPSDataType::SignedBit.0 | 64);
    #[doc(alias = "MPSDataTypeUInt4")]
    pub const UInt4: Self = Self(4);
    #[doc(alias = "MPSDataTypeUInt8")]
    pub const UInt8: Self = Self(8);
    #[doc(alias = "MPSDataTypeUInt16")]
    pub const UInt16: Self = Self(16);
    #[doc(alias = "MPSDataTypeUInt32")]
    pub const UInt32: Self = Self(32);
    #[doc(alias = "MPSDataTypeUInt64")]
    pub const UInt64: Self = Self(64);
    #[doc(alias = "MPSDataTypeAlternateEncodingBit")]
    pub const AlternateEncodingBit: Self = Self(0x80000000);
    #[doc(alias = "MPSDataTypeBool")]
    pub const Bool: Self = Self(MPSDataType::AlternateEncodingBit.0 | 8);
    #[doc(alias = "MPSDataTypeBFloat16")]
    pub const BFloat16: Self = Self(MPSDataType::AlternateEncodingBit.0 | MPSDataType::Float16.0);
    #[doc(alias = "MPSDataTypeNormalizedBit")]
    pub const NormalizedBit: Self = Self(0x40000000);
    #[doc(alias = "MPSDataTypeUnorm1")]
    pub const Unorm1: Self = Self(MPSDataType::NormalizedBit.0 | 1);
    #[doc(alias = "MPSDataTypeUnorm8")]
    pub const Unorm8: Self = Self(MPSDataType::NormalizedBit.0 | 8);
}

unsafe impl Encode for MPSDataType {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for MPSDataType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsaliasingstrategy?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSAliasingStrategy(pub NSUInteger);
bitflags::bitflags! {
    impl MPSAliasingStrategy: NSUInteger {
        #[doc(alias = "MPSAliasingStrategyDefault")]
        const Default = 0;
        #[doc(alias = "MPSAliasingStrategyDontCare")]
        const DontCare = MPSAliasingStrategy::Default.0;
        #[doc(alias = "MPSAliasingStrategyShallAlias")]
        const ShallAlias = 1<<0;
        #[doc(alias = "MPSAliasingStrategyShallNotAlias")]
        const ShallNotAlias = 1<<1;
        #[doc(alias = "MPSAliasingStrategyAliasingReserved")]
        const AliasingReserved = MPSAliasingStrategy::ShallAlias.0|MPSAliasingStrategy::ShallNotAlias.0;
        #[doc(alias = "MPSAliasingStrategyPreferTemporaryMemory")]
        const PreferTemporaryMemory = 1<<2;
        #[doc(alias = "MPSAliasingStrategyPreferNonTemporaryMemory")]
        const PreferNonTemporaryMemory = 1<<3;
    }
}

unsafe impl Encode for MPSAliasingStrategy {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSAliasingStrategy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsoffset?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSOffset {
    pub x: NSInteger,
    pub y: NSInteger,
    pub z: NSInteger,
}

unsafe impl Encode for MPSOffset {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <NSInteger>::ENCODING,
            <NSInteger>::ENCODING,
            <NSInteger>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSOffset {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsorigin?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSOrigin {
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
}

unsafe impl Encode for MPSOrigin {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSOrigin",
        &[
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSOrigin {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpssize?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSSize {
    pub width: c_double,
    pub height: c_double,
    pub depth: c_double,
}

unsafe impl Encode for MPSSize {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSSize",
        &[
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSSize {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsdimensionslice?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSDimensionSlice {
    pub start: NSUInteger,
    pub length: NSUInteger,
}

unsafe impl Encode for MPSDimensionSlice {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSDimensionSlice",
        &[<NSUInteger>::ENCODING, <NSUInteger>::ENCODING],
    );
}

unsafe impl RefEncode for MPSDimensionSlice {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsregion?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSRegion {
    pub origin: MPSOrigin,
    pub size: MPSSize,
}

unsafe impl Encode for MPSRegion {
    const ENCODING: Encoding =
        Encoding::Struct("MPSRegion", &[<MPSOrigin>::ENCODING, <MPSSize>::ENCODING]);
}

unsafe impl RefEncode for MPSRegion {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsscaletransform?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSScaleTransform {
    pub scaleX: c_double,
    pub scaleY: c_double,
    pub translateX: c_double,
    pub translateY: c_double,
}

unsafe impl Encode for MPSScaleTransform {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSScaleTransform",
        &[
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSScaleTransform {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimagecoordinate?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSImageCoordinate {
    pub x: NSUInteger,
    pub y: NSUInteger,
    pub channel: NSUInteger,
}

unsafe impl Encode for MPSImageCoordinate {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSImageCoordinate",
        &[
            <NSUInteger>::ENCODING,
            <NSUInteger>::ENCODING,
            <NSUInteger>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSImageCoordinate {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimageregion?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MPSImageRegion {
    pub offset: MPSImageCoordinate,
    pub size: MPSImageCoordinate,
}

unsafe impl Encode for MPSImageRegion {
    const ENCODING: Encoding = Encoding::Struct(
        "MPSImageRegion",
        &[
            <MPSImageCoordinate>::ENCODING,
            <MPSImageCoordinate>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MPSImageRegion {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsrectnoclip?language=objc)
    pub static MPSRectNoClip: MTLRegion;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsdeviceprovider?language=objc)
    pub unsafe trait MPSDeviceProvider {
        #[method_id(@__retain_semantics Other mpsMTLDevice)]
        unsafe fn mpsMTLDevice(&self) -> Option<Retained<ProtocolObject<dyn MTLDevice>>>;
    }

    unsafe impl ProtocolType for dyn MPSDeviceProvider {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsshape?language=objc)
pub type MPSShape = NSArray<NSNumber>;

// TODO: pub fn MPSDataTypeBitsCount(t: MPSDataType,) -> usize;

// TODO: pub fn MPSSizeofMPSDataType(t: MPSDataType,) -> usize;
