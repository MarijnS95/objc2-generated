//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsmatrixmultiplication?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSMatrixMultiplication;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSMatrixMultiplication {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSMatrixMultiplication {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSMatrixMultiplication {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSMatrixMultiplication {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSMatrixMultiplication {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixMultiplication {
        #[method(resultMatrixOrigin)]
        pub unsafe fn resultMatrixOrigin(&self) -> MTLOrigin;

        #[method(setResultMatrixOrigin:)]
        pub unsafe fn setResultMatrixOrigin(&self, result_matrix_origin: MTLOrigin);

        #[method(leftMatrixOrigin)]
        pub unsafe fn leftMatrixOrigin(&self) -> MTLOrigin;

        #[method(setLeftMatrixOrigin:)]
        pub unsafe fn setLeftMatrixOrigin(&self, left_matrix_origin: MTLOrigin);

        #[method(rightMatrixOrigin)]
        pub unsafe fn rightMatrixOrigin(&self) -> MTLOrigin;

        #[method(setRightMatrixOrigin:)]
        pub unsafe fn setRightMatrixOrigin(&self, right_matrix_origin: MTLOrigin);

        #[method(batchStart)]
        pub unsafe fn batchStart(&self) -> NSUInteger;

        #[method(setBatchStart:)]
        pub unsafe fn setBatchStart(&self, batch_start: NSUInteger);

        #[method(batchSize)]
        pub unsafe fn batchSize(&self) -> NSUInteger;

        #[method(setBatchSize:)]
        pub unsafe fn setBatchSize(&self, batch_size: NSUInteger);

        #[method_id(@__retain_semantics Init initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:)]
        pub unsafe fn initWithDevice_transposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            transpose_left: bool,
            transpose_right: bool,
            result_rows: NSUInteger,
            result_columns: NSUInteger,
            interior_columns: NSUInteger,
            alpha: c_double,
            beta: c_double,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:resultRows:resultColumns:interiorColumns:)]
        pub unsafe fn initWithDevice_resultRows_resultColumns_interiorColumns(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            result_rows: NSUInteger,
            result_columns: NSUInteger,
            interior_columns: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSMatrix")]
        #[method(encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:)]
        pub unsafe fn encodeToCommandBuffer_leftMatrix_rightMatrix_resultMatrix(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            left_matrix: &MPSMatrix,
            right_matrix: &MPSMatrix,
            result_matrix: &MPSMatrix,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixMultiplication {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixMultiplication {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsmatrixvectormultiplication?language=objc)
    #[unsafe(super(MPSMatrixBinaryKernel, MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
    pub struct MPSMatrixVectorMultiplication;
);

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
unsafe impl NSCoding for MPSMatrixVectorMultiplication {}

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
unsafe impl NSCopying for MPSMatrixVectorMultiplication {}

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
unsafe impl CopyingHelper for MPSMatrixVectorMultiplication {
    type Result = Self;
}

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
unsafe impl NSObjectProtocol for MPSMatrixVectorMultiplication {}

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
unsafe impl NSSecureCoding for MPSMatrixVectorMultiplication {}

extern_methods!(
    #[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
    unsafe impl MPSMatrixVectorMultiplication {
        #[method_id(@__retain_semantics Init initWithDevice:transpose:rows:columns:alpha:beta:)]
        pub unsafe fn initWithDevice_transpose_rows_columns_alpha_beta(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            transpose: bool,
            rows: NSUInteger,
            columns: NSUInteger,
            alpha: c_double,
            beta: c_double,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:rows:columns:)]
        pub unsafe fn initWithDevice_rows_columns(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            rows: NSUInteger,
            columns: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSMatrix")]
        #[method(encodeToCommandBuffer:inputMatrix:inputVector:resultVector:)]
        pub unsafe fn encodeToCommandBuffer_inputMatrix_inputVector_resultVector(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            input_matrix: &MPSMatrix,
            input_vector: &MPSVector,
            result_vector: &MPSVector,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
    unsafe impl MPSMatrixVectorMultiplication {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
    unsafe impl MPSMatrixVectorMultiplication {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
