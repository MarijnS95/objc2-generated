//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "MPSMatrixCombination")]
#[path = "MPSMatrixCombination.rs"]
mod __MPSMatrixCombination;
#[cfg(feature = "MPSMatrixDecomposition")]
#[path = "MPSMatrixDecomposition.rs"]
mod __MPSMatrixDecomposition;
#[cfg(feature = "MPSMatrixFindTopK")]
#[path = "MPSMatrixFindTopK.rs"]
mod __MPSMatrixFindTopK;
#[cfg(feature = "MPSMatrixMultiplication")]
#[path = "MPSMatrixMultiplication.rs"]
mod __MPSMatrixMultiplication;
#[cfg(feature = "MPSMatrixRandom")]
#[path = "MPSMatrixRandom.rs"]
mod __MPSMatrixRandom;
#[cfg(feature = "MPSMatrixSoftMax")]
#[path = "MPSMatrixSoftMax.rs"]
mod __MPSMatrixSoftMax;
#[cfg(feature = "MPSMatrixSolve")]
#[path = "MPSMatrixSolve.rs"]
mod __MPSMatrixSolve;
#[cfg(feature = "MPSMatrixTypes")]
#[path = "MPSMatrixTypes.rs"]
mod __MPSMatrixTypes;

#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixCombination"))]
pub use self::__MPSMatrixCombination::MPSMatrixCopy;
#[cfg(feature = "MPSMatrixCombination")]
pub use self::__MPSMatrixCombination::MPSMatrixCopyDescriptor;
#[cfg(feature = "MPSMatrixCombination")]
pub use self::__MPSMatrixCombination::MPSMatrixCopyOffsets;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixDecomposition",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixDecomposition::MPSMatrixDecompositionCholesky;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixDecomposition",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixDecomposition::MPSMatrixDecompositionLU;
#[cfg(feature = "MPSMatrixDecomposition")]
pub use self::__MPSMatrixDecomposition::MPSMatrixDecompositionStatus;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixFindTopK",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixFindTopK::MPSMatrixFindTopK;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixMultiplication"))]
pub use self::__MPSMatrixMultiplication::MPSMatrixMultiplication;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixMultiplication",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixMultiplication::MPSMatrixVectorMultiplication;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixRandom"))]
pub use self::__MPSMatrixRandom::MPSMatrixRandom;
#[cfg(feature = "MPSMatrixRandom")]
pub use self::__MPSMatrixRandom::MPSMatrixRandomDistribution;
#[cfg(feature = "MPSMatrixRandom")]
pub use self::__MPSMatrixRandom::MPSMatrixRandomDistributionDescriptor;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixRandom"))]
pub use self::__MPSMatrixRandom::MPSMatrixRandomMTGP32;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixRandom"))]
pub use self::__MPSMatrixRandom::MPSMatrixRandomPhilox;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSoftMax",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSoftMax::MPSMatrixLogSoftMax;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSoftMax",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSoftMax::MPSMatrixLogSoftMaxGradient;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSoftMax",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSoftMax::MPSMatrixSoftMax;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSoftMax",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSoftMax::MPSMatrixSoftMaxGradient;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSolve",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSolve::MPSMatrixSolveCholesky;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSolve",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSolve::MPSMatrixSolveLU;
#[cfg(all(
    feature = "MPSKernel",
    feature = "MPSMatrixSolve",
    feature = "MPSMatrixTypes"
))]
pub use self::__MPSMatrixSolve::MPSMatrixSolveTriangular;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
pub use self::__MPSMatrixTypes::MPSMatrixBinaryKernel;
#[cfg(all(feature = "MPSKernel", feature = "MPSMatrixTypes"))]
pub use self::__MPSMatrixTypes::MPSMatrixUnaryKernel;
