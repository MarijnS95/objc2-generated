//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// Dependencies: This depends on Metal.framework
    ///
    /// A MPSMatrixUnaryKernel consumes one MPSMatrix and produces one MPSMatrix.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsmatrixunarykernel?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSMatrixUnaryKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSMatrixUnaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSMatrixUnaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSMatrixUnaryKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSMatrixUnaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSMatrixUnaryKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixUnaryKernel {
        /// The origin, relative to [0, 0] in the source matrix, at which to
        /// start reading values.  This property is modifiable and defaults to
        /// [0, 0] at initialization time.  If a different origin is desired then
        /// this should be modified prior to encoding the kernel.  The z value
        /// must be 0.
        #[method(sourceMatrixOrigin)]
        pub unsafe fn sourceMatrixOrigin(&self) -> MTLOrigin;

        /// Setter for [`sourceMatrixOrigin`][Self::sourceMatrixOrigin].
        #[method(setSourceMatrixOrigin:)]
        pub unsafe fn setSourceMatrixOrigin(&self, source_matrix_origin: MTLOrigin);

        /// The origin, relative to [0, 0] in the result matrix, at which to
        /// start writing results.  This property is modifiable and defaults
        /// to [0, 0] at initialization time.  If a different origin is desired
        /// then this should be modified prior to encoding the kernel.  The z
        /// value must be 0.
        #[method(resultMatrixOrigin)]
        pub unsafe fn resultMatrixOrigin(&self) -> MTLOrigin;

        /// Setter for [`resultMatrixOrigin`][Self::resultMatrixOrigin].
        #[method(setResultMatrixOrigin:)]
        pub unsafe fn setResultMatrixOrigin(&self, result_matrix_origin: MTLOrigin);

        /// The index of the first matrix in the batch.  This property is
        /// modifiable and defaults to 0 at initialization time.  If
        /// batch processing should begin at a different matrix this value
        /// should be modified prior to encoding the kernel.
        #[method(batchStart)]
        pub unsafe fn batchStart(&self) -> NSUInteger;

        /// Setter for [`batchStart`][Self::batchStart].
        #[method(setBatchStart:)]
        pub unsafe fn setBatchStart(&self, batch_start: NSUInteger);

        /// The number of matrices in the batch to process.  This property
        /// is modifiable and by default allows all matrices available at
        /// encoding time to be processed.  If a single matrix should be
        /// processed set this value to 1.
        #[method(batchSize)]
        pub unsafe fn batchSize(&self) -> NSUInteger;

        /// Setter for [`batchSize`][Self::batchSize].
        #[method(setBatchSize:)]
        pub unsafe fn setBatchSize(&self, batch_size: NSUInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixUnaryKernel {
        /// Standard init with default properties per filter type
        ///
        /// Parameter `device`: The device that the filter will be used on. May not be NULL.
        ///
        /// Returns: a pointer to the newly initialized object. This will fail, returning
        /// nil if the device is not supported. Devices must be
        /// MTLFeatureSet_iOS_GPUFamily2_v1 or later.
        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        /// NSSecureCoding compatability
        ///
        /// While the standard NSSecureCoding/NSCoding method
        /// -initWithCoder: should work, since the file can't
        /// know which device your data is allocated on, we
        /// have to guess and may guess incorrectly.  To avoid
        /// that problem, use initWithCoder:device instead.
        ///
        /// Parameter `aDecoder`: The NSCoder subclass with your serialized MPSKernel
        ///
        /// Parameter `device`: The MTLDevice on which to make the MPSKernel
        ///
        /// Returns: A new MPSKernel object, or nil if failure.
        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixUnaryKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Dependencies: This depends on Metal.framework
    ///
    /// A MPSMatrixBinaryKernel consumes two MPSMatrix objects and produces
    /// one MPSMatrix object.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsmatrixbinarykernel?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSMatrixBinaryKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSMatrixBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSMatrixBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSMatrixBinaryKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSMatrixBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSMatrixBinaryKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixBinaryKernel {
        /// The origin, relative to [0, 0] in the primary source matrix, at which to
        /// start reading values.  This property is modifiable and defaults to
        /// [0, 0] at initialization time.  If a different origin is desired then
        /// this should be modified prior to encoding the kernel.  The z value
        /// must be 0.
        #[method(primarySourceMatrixOrigin)]
        pub unsafe fn primarySourceMatrixOrigin(&self) -> MTLOrigin;

        /// Setter for [`primarySourceMatrixOrigin`][Self::primarySourceMatrixOrigin].
        #[method(setPrimarySourceMatrixOrigin:)]
        pub unsafe fn setPrimarySourceMatrixOrigin(&self, primary_source_matrix_origin: MTLOrigin);

        /// The origin, relative to [0, 0] in the secondary source matrix, at which to
        /// start reading values.  This property is modifiable and defaults to
        /// [0, 0] at initialization time.  If a different origin is desired then
        /// this should be modified prior to encoding the kernel.  The z value
        /// must be 0.
        #[method(secondarySourceMatrixOrigin)]
        pub unsafe fn secondarySourceMatrixOrigin(&self) -> MTLOrigin;

        /// Setter for [`secondarySourceMatrixOrigin`][Self::secondarySourceMatrixOrigin].
        #[method(setSecondarySourceMatrixOrigin:)]
        pub unsafe fn setSecondarySourceMatrixOrigin(
            &self,
            secondary_source_matrix_origin: MTLOrigin,
        );

        /// The origin, relative to [0, 0] in the result matrix, at which to
        /// start writing results.  This property is modifiable and defaults
        /// to [0, 0] at initialization time.  If a different origin is desired
        /// then this should be modified prior to encoding the kernel.  The z
        /// value must be 0.
        #[method(resultMatrixOrigin)]
        pub unsafe fn resultMatrixOrigin(&self) -> MTLOrigin;

        /// Setter for [`resultMatrixOrigin`][Self::resultMatrixOrigin].
        #[method(setResultMatrixOrigin:)]
        pub unsafe fn setResultMatrixOrigin(&self, result_matrix_origin: MTLOrigin);

        /// The index of the first matrix in the batch.  This property is
        /// modifiable and defaults to 0 at initialization time.  If
        /// batch processing should begin at a different matrix this value
        /// should be modified prior to encoding the kernel.
        #[method(batchStart)]
        pub unsafe fn batchStart(&self) -> NSUInteger;

        /// Setter for [`batchStart`][Self::batchStart].
        #[method(setBatchStart:)]
        pub unsafe fn setBatchStart(&self, batch_start: NSUInteger);

        /// The number of matrices in the batch to process.  This property
        /// is modifiable and by default allows all matrices available at
        /// encoding time to be processed.  If a single matrix should be
        /// processed set this value to 1.
        #[method(batchSize)]
        pub unsafe fn batchSize(&self) -> NSUInteger;

        /// Setter for [`batchSize`][Self::batchSize].
        #[method(setBatchSize:)]
        pub unsafe fn setBatchSize(&self, batch_size: NSUInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixBinaryKernel {
        /// Standard init with default properties per filter type
        ///
        /// Parameter `device`: The device that the filter will be used on. May not be NULL.
        ///
        /// Returns: a pointer to the newly initialized object. This will fail, returning
        /// nil if the device is not supported. Devices must be
        /// MTLFeatureSet_iOS_GPUFamily2_v1 or later.
        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        /// NSSecureCoding compatability
        ///
        /// While the standard NSSecureCoding/NSCoding method
        /// -initWithCoder: should work, since the file can't
        /// know which device your data is allocated on, we
        /// have to guess and may guess incorrectly.  To avoid
        /// that problem, use initWithCoder:device instead.
        ///
        /// Parameter `aDecoder`: The NSCoder subclass with your serialized MPSKernel
        ///
        /// Parameter `device`: The MTLDevice on which to make the MPSKernel
        ///
        /// Returns: A new MPSKernel object, or nil if failure.
        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSMatrixBinaryKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
