//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// Dependencies: This depends on Metal.framework.
    ///
    /// A quantized matrix multiplication kernel: C = AB, where each input A and B can be quantized.
    ///
    /// The kernel works with 2-8 inputs, order of inputs: First all LHS inputs, then all RHS inputs.
    /// The order of inputs for LUT based LHS or RHS: 1) quantized input 2) Lookup Table.
    /// The order of inputs for affine LHS or RHS: 1) quantized input 2) scale 3) zeropoint 4) minValue.
    /// The full order of inputs for the encode methods is:
    /// `[LHS, RHS,
    /// <LHS
    /// quantization inputs>,
    /// <RHS
    /// quantization inputs>]`,
    /// where `LHS` is the left input (quantized or float) `RHS` is the right input (quantized or float) and
    /// `
    /// <LHS
    /// quantization inputs>` are the auxiliary quantization inputs for the LHS array (scales, zeropoints etc).
    /// and `
    /// <RHS
    /// quantization inputs>` are the auxiliary quantization input for the RHS array.
    /// The inputs are provided as a compacted `NSArray
    /// <MPSNDArray
    /// *>`, for example for computing
    /// `C = A * B^T` where `A` is quantized with a LUT and `B` is quantized with affine quantization that
    /// uses scale and minValue the array of inputs is:
    /// ` [ Aq, Bq^T, ALUT, BScale^T, BMin^T ] `.
    /// NOTE: For affine scale, zeropoint and minValue must have same transposes as quantized input.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsndarrayquantizedmatrixmultiplication?language=objc)
    #[unsafe(super(
        MPSNDArrayMatrixMultiplication,
        MPSNDArrayMultiaryKernel,
        MPSNDArrayMultiaryBase,
        MPSKernel,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    pub struct MPSNDArrayQuantizedMatrixMultiplication;
);

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel",
    feature = "MPSNDArrayMatrixMultiplication"
))]
unsafe impl NSCoding for MPSNDArrayQuantizedMatrixMultiplication {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel",
    feature = "MPSNDArrayMatrixMultiplication"
))]
unsafe impl NSCopying for MPSNDArrayQuantizedMatrixMultiplication {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel",
    feature = "MPSNDArrayMatrixMultiplication"
))]
unsafe impl CopyingHelper for MPSNDArrayQuantizedMatrixMultiplication {
    type Result = Self;
}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel",
    feature = "MPSNDArrayMatrixMultiplication"
))]
unsafe impl NSObjectProtocol for MPSNDArrayQuantizedMatrixMultiplication {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel",
    feature = "MPSNDArrayMatrixMultiplication"
))]
unsafe impl NSSecureCoding for MPSNDArrayQuantizedMatrixMultiplication {}

extern_methods!(
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    unsafe impl MPSNDArrayQuantizedMatrixMultiplication {
        #[method_id(initWithDevice:sourceCount:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_sourceCount(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            source_count: NSUInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNDArrayQuantization")]
        /// Initializes a quantized matrix multiplication kernel.
        ///
        /// Parameter `leftQuantizationDescriptor`: The quantization definition for the LHS input.
        ///
        /// Parameter `rightQuantizationDescriptor`: The quantization definition for the RHS input.
        ///
        /// Returns: A new valid quantized matrix multiplication kernel.
        #[method_id(initWithDevice:leftQuantizationDescriptor:rightQuantizationDescriptor:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_leftQuantizationDescriptor_rightQuantizationDescriptor(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            left_quantization_descriptor: Option<&MPSNDArrayQuantizationDescriptor>,
            right_quantization_descriptor: Option<&MPSNDArrayQuantizationDescriptor>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    unsafe impl MPSNDArrayQuantizedMatrixMultiplication {
        #[method_id(initWithCoder:device:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            coder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryBase`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    unsafe impl MPSNDArrayQuantizedMatrixMultiplication {
        #[method_id(initWithDevice:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    unsafe impl MPSNDArrayQuantizedMatrixMultiplication {
        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel",
        feature = "MPSNDArrayMatrixMultiplication"
    ))]
    unsafe impl MPSNDArrayQuantizedMatrixMultiplication {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Dependencies: This depends on Metal.framework.
    ///
    /// A kernel which dequantizes a lookup-table based NDArray.
    ///
    /// The kernel works with 2 inputs: 1) The quantized input, 2) The LookUp table array.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsndarraylutdequantize?language=objc)
    #[unsafe(super(MPSNDArrayMultiaryKernel, MPSNDArrayMultiaryBase, MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    pub struct MPSNDArrayLUTDequantize;
);

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCoding for MPSNDArrayLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCopying for MPSNDArrayLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl CopyingHelper for MPSNDArrayLUTDequantize {
    type Result = Self;
}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSObjectProtocol for MPSNDArrayLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSSecureCoding for MPSNDArrayLUTDequantize {}

extern_methods!(
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayLUTDequantize {
        #[method_id(initWithDevice:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[method_id(initWithDevice:sourceCount:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_sourceCount(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            source_count: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayLUTDequantize {
        #[method_id(initWithCoder:device:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            coder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayLUTDequantize {
        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayLUTDequantize {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Dependencies: This depends on Metal.framework.
    ///
    /// A kernel which dequantizes a lookup-table based NDArray with vector LUT support.
    ///
    /// The kernel works with 2 inputs: 1) The quantized input, 2) The LookUp table array.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsndarrayvectorlutdequantize?language=objc)
    #[unsafe(super(MPSNDArrayMultiaryKernel, MPSNDArrayMultiaryBase, MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    pub struct MPSNDArrayVectorLUTDequantize;
);

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCoding for MPSNDArrayVectorLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCopying for MPSNDArrayVectorLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl CopyingHelper for MPSNDArrayVectorLUTDequantize {
    type Result = Self;
}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSObjectProtocol for MPSNDArrayVectorLUTDequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSSecureCoding for MPSNDArrayVectorLUTDequantize {}

extern_methods!(
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayVectorLUTDequantize {
        /// Which axis in the destination will receive the vector component, must be less than 4.
        #[method(vectorAxis)]
        pub unsafe fn vectorAxis(&self) -> NSUInteger;

        /// Setter for [`vectorAxis`][Self::vectorAxis].
        #[method(setVectorAxis:)]
        pub unsafe fn setVectorAxis(&self, vector_axis: NSUInteger);

        /// Initializes a kernel for vector-based LUT dequantization.
        ///
        /// Parameter `device`: The Metal device to be used with this kernel.
        ///
        /// Parameter `axis`: The vector axis in the output.
        ///
        /// Returns: A new vector LUT dequantization kernel.
        #[method_id(initWithDevice:axis:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_axis(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            axis: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(initWithDevice:sourceCount:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_sourceCount(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            source_count: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayVectorLUTDequantize {
        #[method_id(initWithCoder:device:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            coder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryBase`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayVectorLUTDequantize {
        #[method_id(initWithDevice:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayVectorLUTDequantize {
        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayVectorLUTDequantize {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Dependencies: This depends on Metal.framework.
    ///
    /// A kernel which dequantizes an input with affine quantization scheme.
    ///
    /// The kernel works with 2-4 inputs, order of inputs: 1) quantized input, 2) scale, 3) zeropoint, 4) minValue
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsndarrayaffineint4dequantize?language=objc)
    #[unsafe(super(MPSNDArrayMultiaryKernel, MPSNDArrayMultiaryBase, MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    pub struct MPSNDArrayAffineInt4Dequantize;
);

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCoding for MPSNDArrayAffineInt4Dequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSCopying for MPSNDArrayAffineInt4Dequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl CopyingHelper for MPSNDArrayAffineInt4Dequantize {
    type Result = Self;
}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSObjectProtocol for MPSNDArrayAffineInt4Dequantize {}

#[cfg(all(
    feature = "MPSCore",
    feature = "MPSKernel",
    feature = "MPSNDArrayKernel"
))]
unsafe impl NSSecureCoding for MPSNDArrayAffineInt4Dequantize {}

extern_methods!(
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayAffineInt4Dequantize {
        #[method_id(initWithDevice:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNDArrayQuantization")]
        /// Initializes a kernel for 4-bit affine dequantization.
        ///
        /// Parameter `device`: The Metal device to be used with this kernel.
        ///
        /// Parameter `quantizationDescriptor`: Describes the quantization scheme.
        ///
        /// Returns: A new vector LUT dequantization kernel.
        #[method_id(initWithDevice:quantizationDescriptor:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_quantizationDescriptor(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            quantization_descriptor: &MPSNDArrayAffineQuantizationDescriptor,
        ) -> Retained<Self>;

        #[method_id(initWithDevice:sourceCount:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDevice_sourceCount(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            source_count: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNDArrayMultiaryKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayAffineInt4Dequantize {
        #[method_id(initWithCoder:device:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            coder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayAffineInt4Dequantize {
        /// Called by NSCoder to decode MPSKernels
        ///
        /// This isn't the right interface to decode a MPSKernel, but
        /// it is the one that NSCoder uses. To enable your NSCoder
        /// (e.g. NSKeyedUnarchiver) to set which device to use
        /// extend the object to adopt the MPSDeviceProvider
        /// protocol. Otherwise, the Metal system default device
        /// will be used.
        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "MPSCore",
        feature = "MPSKernel",
        feature = "MPSNDArrayKernel"
    ))]
    unsafe impl MPSNDArrayAffineInt4Dequantize {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
