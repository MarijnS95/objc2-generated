//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngraphcompletionhandler?language=objc)
#[cfg(all(feature = "MPSImage", feature = "block2"))]
pub type MPSNNGraphCompletionHandler = *mut block2::Block<dyn Fn(*mut MPSImage, *mut NSError)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngraph?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSNNGraph;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSNNGraph {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSNNGraph {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSNNGraph {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSNNGraph {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSNNGraph {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSNNGraph {
        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Init initWithDevice:resultImage:resultImageIsNeeded:)]
        pub unsafe fn initWithDevice_resultImage_resultImageIsNeeded(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            result_image: &MPSNNImageNode,
            result_is_needed: bool,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other graphWithDevice:resultImage:resultImageIsNeeded:)]
        pub unsafe fn graphWithDevice_resultImage_resultImageIsNeeded(
            device: &ProtocolObject<dyn MTLDevice>,
            result_image: &MPSNNImageNode,
            result_is_needed: bool,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Init initWithDevice:resultImages:resultsAreNeeded:)]
        pub unsafe fn initWithDevice_resultImages_resultsAreNeeded(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            result_images: &NSArray<MPSNNImageNode>,
            are_results_needed: *mut Bool,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other graphWithDevice:resultImages:resultsAreNeeded:)]
        pub unsafe fn graphWithDevice_resultImages_resultsAreNeeded(
            device: &ProtocolObject<dyn MTLDevice>,
            result_images: &NSArray<MPSNNImageNode>,
            are_results_needed: *mut Bool,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[deprecated]
        #[method_id(@__retain_semantics Init initWithDevice:resultImage:)]
        pub unsafe fn initWithDevice_resultImage(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            result_image: &MPSNNImageNode,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[deprecated]
        #[method_id(@__retain_semantics Other graphWithDevice:resultImage:)]
        pub unsafe fn graphWithDevice_resultImage(
            device: &ProtocolObject<dyn MTLDevice>,
            result_image: &MPSNNImageNode,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other sourceImageHandles)]
        pub unsafe fn sourceImageHandles(&self)
            -> Retained<NSArray<ProtocolObject<dyn MPSHandle>>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other sourceStateHandles)]
        pub unsafe fn sourceStateHandles(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MPSHandle>>>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other intermediateImageHandles)]
        pub unsafe fn intermediateImageHandles(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MPSHandle>>>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other resultStateHandles)]
        pub unsafe fn resultStateHandles(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MPSHandle>>>>;

        #[cfg(feature = "MPSNNGraphNodes")]
        #[method_id(@__retain_semantics Other resultHandle)]
        pub unsafe fn resultHandle(&self) -> Option<Retained<ProtocolObject<dyn MPSHandle>>>;

        #[method(outputStateIsTemporary)]
        pub unsafe fn outputStateIsTemporary(&self) -> bool;

        #[method(setOutputStateIsTemporary:)]
        pub unsafe fn setOutputStateIsTemporary(&self, output_state_is_temporary: bool);

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other destinationImageAllocator)]
        pub unsafe fn destinationImageAllocator(
            &self,
        ) -> Retained<ProtocolObject<dyn MPSImageAllocator>>;

        #[cfg(feature = "MPSImage")]
        #[method(setDestinationImageAllocator:)]
        pub unsafe fn setDestinationImageAllocator(
            &self,
            destination_image_allocator: &ProtocolObject<dyn MPSImageAllocator>,
        );

        #[cfg(feature = "MPSCoreTypes")]
        #[method(format)]
        pub unsafe fn format(&self) -> MPSImageFeatureChannelFormat;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setFormat:)]
        pub unsafe fn setFormat(&self, format: MPSImageFeatureChannelFormat);

        #[method(resultImageIsNeeded)]
        pub unsafe fn resultImageIsNeeded(&self) -> bool;

        #[method(reloadFromDataSources)]
        pub unsafe fn reloadFromDataSources(&self);

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:)]
        pub unsafe fn encodeToCommandBuffer_sourceImages_sourceStates_intermediateImages_destinationStates(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
            intermediate_images: Option<&NSMutableArray<MPSImage>>,
            destination_states: Option<&NSMutableArray<MPSState>>,
        ) -> Option<Retained<MPSImage>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_sourceStates_intermediateImages_destinationStates(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImageBatch>,
            source_states: Option<&NSArray<MPSStateBatch>>,
            intermediate_images: Option<&NSMutableArray<MPSImageBatch>>,
            destination_states: Option<&NSMutableArray<MPSStateBatch>>,
        ) -> Option<Retained<MPSImageBatch>>;

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImages:)]
        pub unsafe fn encodeToCommandBuffer_sourceImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImage>,
        ) -> Option<Retained<MPSImage>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:sourceStates:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_sourceStates(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImageBatch>,
            source_states: Option<&NSArray<MPSStateBatch>>,
        ) -> Option<Retained<MPSImageBatch>>;

        #[cfg(all(feature = "MPSImage", feature = "block2"))]
        #[method_id(@__retain_semantics Other executeAsyncWithSourceImages:completionHandler:)]
        pub unsafe fn executeAsyncWithSourceImages_completionHandler(
            &self,
            source_images: &NSArray<MPSImage>,
            handler: MPSNNGraphCompletionHandler,
        ) -> Retained<MPSImage>;

        #[method(readCountForSourceImageAtIndex:)]
        pub unsafe fn readCountForSourceImageAtIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(readCountForSourceStateAtIndex:)]
        pub unsafe fn readCountForSourceStateAtIndex(&self, index: NSUInteger) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSNNGraph {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSNNGraph {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
