//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutionflags?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSCNNConvolutionFlags(pub NSUInteger);
impl MPSCNNConvolutionFlags {
    #[deprecated]
    #[doc(alias = "MPSCNNConvolutionFlagsNone")]
    pub const None: Self = Self(0);
}

unsafe impl Encode for MPSCNNConvolutionFlags {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSCNNConvolutionFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinaryconvolutionflags?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSCNNBinaryConvolutionFlags(pub NSUInteger);
impl MPSCNNBinaryConvolutionFlags {
    #[doc(alias = "MPSCNNBinaryConvolutionFlagsNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MPSCNNBinaryConvolutionFlagsUseBetaScaling")]
    pub const UseBetaScaling: Self = Self(1 << 0);
}

unsafe impl Encode for MPSCNNBinaryConvolutionFlags {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSCNNBinaryConvolutionFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinaryconvolutiontype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSCNNBinaryConvolutionType(pub NSUInteger);
impl MPSCNNBinaryConvolutionType {
    #[doc(alias = "MPSCNNBinaryConvolutionTypeBinaryWeights")]
    pub const BinaryWeights: Self = Self(0);
    #[doc(alias = "MPSCNNBinaryConvolutionTypeXNOR")]
    pub const XNOR: Self = Self(1);
    #[doc(alias = "MPSCNNBinaryConvolutionTypeAND")]
    pub const AND: Self = Self(2);
}

unsafe impl Encode for MPSCNNBinaryConvolutionType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSCNNBinaryConvolutionType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnconvolutionaccumulatorprecisionoption?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSNNConvolutionAccumulatorPrecisionOption(pub NSUInteger);
bitflags::bitflags! {
    impl MPSNNConvolutionAccumulatorPrecisionOption: NSUInteger {
        #[doc(alias = "MPSNNConvolutionAccumulatorPrecisionOptionHalf")]
        const Half = 0;
        #[doc(alias = "MPSNNConvolutionAccumulatorPrecisionOptionFloat")]
        const Float = 1<<0;
    }
}

unsafe impl Encode for MPSNNConvolutionAccumulatorPrecisionOption {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSNNConvolutionAccumulatorPrecisionOption {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnntrainingstyle?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSNNTrainingStyle(pub NSUInteger);
bitflags::bitflags! {
    impl MPSNNTrainingStyle: NSUInteger {
        #[doc(alias = "MPSNNTrainingStyleUpdateDeviceNone")]
        const UpdateDeviceNone = 0;
        #[doc(alias = "MPSNNTrainingStyleUpdateDeviceCPU")]
        const UpdateDeviceCPU = 1;
        #[doc(alias = "MPSNNTrainingStyleUpdateDeviceGPU")]
        const UpdateDeviceGPU = 2;
    }
}

unsafe impl Encode for MPSNNTrainingStyle {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSNNTrainingStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbatchnormalizationflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSCNNBatchNormalizationFlags(pub NSUInteger);
bitflags::bitflags! {
    impl MPSCNNBatchNormalizationFlags: NSUInteger {
        #[doc(alias = "MPSCNNBatchNormalizationFlagsDefault")]
        const Default = 0;
        #[doc(alias = "MPSCNNBatchNormalizationFlagsCalculateStatisticsAutomatic")]
        const CalculateStatisticsAutomatic = MPSCNNBatchNormalizationFlags::Default.0;
        #[doc(alias = "MPSCNNBatchNormalizationFlagsCalculateStatisticsAlways")]
        const CalculateStatisticsAlways = 1;
        #[doc(alias = "MPSCNNBatchNormalizationFlagsCalculateStatisticsNever")]
        const CalculateStatisticsNever = 2;
        #[doc(alias = "MPSCNNBatchNormalizationFlagsCalculateStatisticsMask")]
        const CalculateStatisticsMask = 3;
    }
}

unsafe impl Encode for MPSCNNBatchNormalizationFlags {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSCNNBatchNormalizationFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnpaddingmethod?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSNNPaddingMethod(pub NSUInteger);
bitflags::bitflags! {
    impl MPSNNPaddingMethod: NSUInteger {
        #[doc(alias = "MPSNNPaddingMethodAlignCentered")]
        const AlignCentered = 0;
        #[doc(alias = "MPSNNPaddingMethodAlignTopLeft")]
        const AlignTopLeft = 1;
        #[doc(alias = "MPSNNPaddingMethodAlignBottomRight")]
        const AlignBottomRight = 2;
        #[doc(alias = "MPSNNPaddingMethodAlign_reserved")]
        const Align_reserved = 3;
        #[doc(alias = "MPSNNPaddingMethodAlignMask")]
        const AlignMask = MPSNNPaddingMethod::Align_reserved.0;
        #[doc(alias = "MPSNNPaddingMethodAddRemainderToTopLeft")]
        const AddRemainderToTopLeft = 0<<2;
        #[doc(alias = "MPSNNPaddingMethodAddRemainderToTopRight")]
        const AddRemainderToTopRight = 1<<2;
        #[doc(alias = "MPSNNPaddingMethodAddRemainderToBottomLeft")]
        const AddRemainderToBottomLeft = 2<<2;
        #[doc(alias = "MPSNNPaddingMethodAddRemainderToBottomRight")]
        const AddRemainderToBottomRight = 3<<2;
        #[doc(alias = "MPSNNPaddingMethodAddRemainderToMask")]
        const AddRemainderToMask = MPSNNPaddingMethod::AddRemainderToBottomRight.0;
        #[doc(alias = "MPSNNPaddingMethodSizeValidOnly")]
        const SizeValidOnly = 0;
        #[doc(alias = "MPSNNPaddingMethodSizeSame")]
        const SizeSame = 1<<4;
        #[doc(alias = "MPSNNPaddingMethodSizeFull")]
        const SizeFull = 2<<4;
        #[doc(alias = "MPSNNPaddingMethodSize_reserved")]
        const Size_reserved = 3<<4;
#[deprecated]
        #[doc(alias = "MPSNNPaddingMethodCustomWhitelistForNodeFusion")]
        const CustomWhitelistForNodeFusion = 1<<13;
        #[doc(alias = "MPSNNPaddingMethodCustomAllowForNodeFusion")]
        const CustomAllowForNodeFusion = 1<<13;
        #[doc(alias = "MPSNNPaddingMethodCustom")]
        const Custom = 1<<14;
        #[doc(alias = "MPSNNPaddingMethodSizeMask")]
        const SizeMask = 0x7f0;
        #[doc(alias = "MPSNNPaddingMethodExcludeEdges")]
        const ExcludeEdges = 1<<15;
    }
}

unsafe impl Encode for MPSNNPaddingMethod {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSNNPaddingMethod {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnpadding?language=objc)
    pub unsafe trait MPSNNPadding: NSObjectProtocol + NSSecureCoding {
        #[method(paddingMethod)]
        unsafe fn paddingMethod(&self) -> MPSNNPaddingMethod;

        #[optional]
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Retained<NSString>;

        #[cfg(all(feature = "MPSImage", feature = "MPSKernel", feature = "MPSState"))]
        #[optional]
        #[method_id(@__retain_semantics Other destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:)]
        unsafe fn destinationImageDescriptorForSourceImages_sourceStates_forKernel_suggestedDescriptor(
            &self,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
            kernel: &MPSKernel,
            in_descriptor: &MPSImageDescriptor,
        ) -> Retained<MPSImageDescriptor>;

        #[optional]
        #[method_id(@__retain_semantics Other inverse)]
        unsafe fn inverse(&self) -> Option<Retained<Self>>;
    }

    unsafe impl ProtocolType for dyn MPSNNPadding {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnndefaultpadding?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNDefaultPadding;
);

unsafe impl MPSNNPadding for MPSNNDefaultPadding {}

unsafe impl NSCoding for MPSNNDefaultPadding {}

unsafe impl NSObjectProtocol for MPSNNDefaultPadding {}

unsafe impl NSSecureCoding for MPSNNDefaultPadding {}

extern_methods!(
    unsafe impl MPSNNDefaultPadding {
        #[method_id(@__retain_semantics Other paddingWithMethod:)]
        pub unsafe fn paddingWithMethod(method: MPSNNPaddingMethod) -> Retained<Self>;

        #[method_id(@__retain_semantics Other paddingForTensorflowAveragePooling)]
        pub unsafe fn paddingForTensorflowAveragePooling() -> Retained<Self>;

        #[method_id(@__retain_semantics Other paddingForTensorflowAveragePoolingValidOnly)]
        pub unsafe fn paddingForTensorflowAveragePoolingValidOnly() -> Retained<Self>;

        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Retained<NSString>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNDefaultPadding {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimagesizeencodingstate?language=objc)
    pub unsafe trait MPSImageSizeEncodingState: NSObjectProtocol {
        #[method(sourceWidth)]
        unsafe fn sourceWidth(&self) -> NSUInteger;

        #[method(sourceHeight)]
        unsafe fn sourceHeight(&self) -> NSUInteger;
    }

    unsafe impl ProtocolType for dyn MPSImageSizeEncodingState {}
);
