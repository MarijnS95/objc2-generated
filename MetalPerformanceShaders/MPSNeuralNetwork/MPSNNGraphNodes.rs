//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_protocol!(
    /// MPS resource identification
    ///
    /// Most of the time, there is only one image and one or fewer states needed as
    /// input to a graph, so the order of the images and states passed to
    /// [MPSNNGraph encodeToCommandBuffer:sourceImages:] or
    /// [MPSNNGraph encodeToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:]
    /// is clear. There is only one order. However, sometimes graphs have more than one
    /// input image or state. What order should they appear in the NSArray passed to
    /// these methods?
    ///
    /// Each MPSNNImageNode or MPSNNStateNode can be tagged with a MPSHandle. MPSNNGraph
    /// keeps track of these. You can request that the MPSNNGraph return them to you in
    /// an array in the same order as needed to encode the MPSNNGraph, using
    /// MPSNNGraph.sourceImageHandles and MPSNNGraph.sourceStateHandles.
    ///
    /// Example:
    ///
    /// ```text
    ///               @interface MyHandle : NSObject <MPSHandle>
    ///                   // Add a method for my use to get the image needed based on the handle to it.
    ///                   // This isn't part of the MPSHandle protocol, but we need it for MyEncodeGraph
    ///                   // below. Since it is my code calling my object, we can add whatever we want like this.
    ///                   -(MPSImage*__nonnull) image;    // return the MPSImage corresponding to the handle
    ///
    ///                   // required by MPSHandle protocol
    ///                   -(NSString * __nullable) label;
    ///
    ///                   // MPSHandle implies NSSecureCoding too
    ///                   +(BOOL) supportsSecureCoding;
    ///                   - (void)encodeWithCoder:(NSCoder * __nonnull )aCoder;
    ///                   - (nullable instancetype)initWithCoder:(NSCoder * __nonnull )aDecoder; // NS_DESIGNATED_INITIALIZER
    ///               @end
    ///
    ///               // Encode a graph to cmdBuf using handles for images
    ///               // Here we assume that the MPSNNImageNodes that are graph inputs (not produced
    ///               // by the graph) are tagged with a unique instance of MyHandle that can be used
    ///               // to get the appropriate image for that node.
    ///               static void MyEncodeGraph( MPSNNGraph * graph, id <MTLCommandBuffer> cmdBuf )
    ///               {
    ///                   @autoreleasepool{
    ///                       // prepare an array of source images, using the handles
    ///                       NSArray<MyHandle*> * handles = graph.sourceImageHandles;
    ///                       unsigned long count = handles.count;
    ///                       NSMutableArray<MPSImage*> * __nonnull images = [NSMutableArray arrayWithCapacity: count];
    ///                       for( unsigned long i = 0; i < count; i++ )
    ///                           images[i] = handles[i].image;
    ///
    ///                       // encode the graph using the array
    ///                       [ graph encodeToCommandBuffer: cmdBuf
    ///                                        sourceImages: images ];
    ///                   }
    ///               }
    /// ```
    ///
    /// But what is a handle?  Here MPS is giving you enough rope with which to hang
    /// yourself. Don't panic! As long as your response is not to start tying nooses,
    /// you should be fine. It is just rope. More precisely, it is just a pointer to a
    /// NSObject. MPS doesn't know or care what it is or does, so long as it conforms
    /// to the MPSHandle protocol. What it does is entirely up to you. We imagine it
    /// will be an object that describes the data that you intend to pass later to the graph.
    /// It could be a file reference, or an input to your own software component that wraps
    /// the graph or even the MPSImage / MPSState that you plan to use.
    ///
    /// Do take note of the NSSecureCoding requirement in the MPSHandle protocol, however.
    /// This is needed if you attempt to use NSSecureCoding to serialize the MPSNNGraph.
    /// Normal MPSImages and MPSStates don't do that part.
    ///
    /// Your application should be able to use the handle to locate / create the correct
    /// image / state or batch thereof to pass as input to the graph.  Handles are also
    /// used to disambiguate graph intermediate images and state outputs. They aren't used
    /// to disambiguate image results (see -[MPSNNGraph initWithDevice:resultImages:resultsAreNeeded:]
    /// as you should already know the ordering of outputs there. It is the same as what
    /// you asked for.
    ///
    /// Do take note of the NSSecureCoding requirement in the MPSHandle protocol, however.
    /// This is needed if you attempt to use NSSecureCoding to serialize the MPSNNGraph.
    /// Normal MPSImages and MPSStates don't do that part.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpshandle?language=objc)
    pub unsafe trait MPSHandle: NSObjectProtocol + NSSecureCoding {
        /// A label to be attached to associated MTLResources for this node
        ///
        /// Returns: A human readable string for debugging purposes
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Option<Retained<NSString>>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnntrainablenode?language=objc)
    pub unsafe trait MPSNNTrainableNode: NSObjectProtocol {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Configure whether and when neural network training parameters are updated
        ///
        /// Default: MPSNNTrainingStyleUpdateDeviceGPU
        #[method(trainingStyle)]
        unsafe fn trainingStyle(&self) -> MPSNNTrainingStyle;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`trainingStyle`][Self::trainingStyle].
        #[method(setTrainingStyle:)]
        unsafe fn setTrainingStyle(&self, training_style: MPSNNTrainingStyle);
    }
);

extern_class!(
    /// A placeholder node denoting the position of a MPSImage in a graph
    ///
    /// MPS neural network graphs are made up of filter nodes connected by
    /// image (or state) nodes. An image node is produced by one filter but
    /// may be consumed by more than one filter.
    ///
    /// Most image nodes will be created by MPS and made available through
    /// MPSNNFilterNode.resultImage. Image nodes that are not created by MPS
    /// (i.e. "the graph inputs") must be created by you.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnimagenode?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNImageNode;
);

unsafe impl NSObjectProtocol for MPSNNImageNode {}

extern_methods!(
    unsafe impl MPSNNImageNode {
        #[method_id(@__retain_semantics Init initWithHandle:)]
        pub unsafe fn initWithHandle(
            this: Allocated<Self>,
            handle: Option<&NSObject>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other nodeWithHandle:)]
        pub unsafe fn nodeWithHandle(handle: Option<&NSObject>) -> Retained<Self>;

        /// Create a autoreleased MPSNNImageNode with exportFromGraph = YES.
        ///
        /// Note: image is still temporary. See MPSNNImageNode.imageAllocator parameter.
        #[method_id(@__retain_semantics Other exportedNodeWithHandle:)]
        pub unsafe fn exportedNodeWithHandle(handle: Option<&NSObject>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// MPS resource identifier
        ///
        /// See MPSHandle protocol description.  Default: nil
        #[method_id(@__retain_semantics Other handle)]
        pub unsafe fn handle(&self) -> Option<Retained<ProtocolObject<dyn MPSHandle>>>;

        /// Setter for [`handle`][Self::handle].
        #[method(setHandle:)]
        pub unsafe fn setHandle(&self, handle: Option<&ProtocolObject<dyn MPSHandle>>);

        #[cfg(feature = "MPSCoreTypes")]
        /// The preferred precision for the image
        ///
        /// Default: MPSImageFeatureChannelFormatNone, meaning MPS should pick a format
        /// Typically, this is 16-bit floating-point.
        #[method(format)]
        pub unsafe fn format(&self) -> MPSImageFeatureChannelFormat;

        #[cfg(feature = "MPSCoreTypes")]
        /// Setter for [`format`][Self::format].
        #[method(setFormat:)]
        pub unsafe fn setFormat(&self, format: MPSImageFeatureChannelFormat);

        #[cfg(feature = "MPSImage")]
        /// Configurability for image allocation
        ///
        /// Allows you to influence how the image is allocated
        /// Default: MPSTemporaryImage.defaultAllocator
        #[method_id(@__retain_semantics Other imageAllocator)]
        pub unsafe fn imageAllocator(&self) -> Retained<ProtocolObject<dyn MPSImageAllocator>>;

        #[cfg(feature = "MPSImage")]
        /// Setter for [`imageAllocator`][Self::imageAllocator].
        #[method(setImageAllocator:)]
        pub unsafe fn setImageAllocator(
            &self,
            image_allocator: &ProtocolObject<dyn MPSImageAllocator>,
        );

        /// Tag a image node for view later
        ///
        /// Most image nodes are private to the graph. These alias memory heavily and
        /// consequently generally have invalid state when the graph exits.  When
        /// exportFromGraph = YES, the image is preserved and made available through
        /// the [MPSNNGraph encode... intermediateImages:... list.
        ///
        /// CAUTION: exporting an image from a graph prevents MPS from
        /// recycling memory. It will nearly always cause the
        /// amount of memory used by the graph to increase by the size
        /// of the image. There will probably be a performance
        /// regression accordingly.  This feature should generally
        /// be used only when the node is needed as an input for
        /// further work and recomputing it is prohibitively costly.
        ///
        /// Default: NO
        #[method(exportFromGraph)]
        pub unsafe fn exportFromGraph(&self) -> bool;

        /// Setter for [`exportFromGraph`][Self::exportFromGraph].
        #[method(setExportFromGraph:)]
        pub unsafe fn setExportFromGraph(&self, export_from_graph: bool);

        /// Set to true to cause the resource to be synchronized with the CPU
        ///
        /// It is not needed on iOS/tvOS devices, where it does nothing.
        #[method(synchronizeResource)]
        pub unsafe fn synchronizeResource(&self) -> bool;

        /// Setter for [`synchronizeResource`][Self::synchronizeResource].
        #[method(setSynchronizeResource:)]
        pub unsafe fn setSynchronizeResource(&self, synchronize_resource: bool);

        /// Stop training graph automatic creation at this node.
        ///
        /// An inference graph of MPSNNFilterNodes, MPSNNStateNodes and MPSNNImageNodes can be automatically
        /// converted to a training graph using -[MPSNNFilterNode trainingGraphWithSourceGradient:nodeHandler:].
        /// Sometimes, an inference graph may contain extra nodes at start to do operations like resampling or range
        /// adjustment that should not be part of the training graph. To prevent gradient operations for these extra
        /// nodes from being included in the training graph, set
        /// <undesired
        /// node>.resultImage.stopGradient = YES.
        /// This will prevent gradient propagation beyond this MPSNNImageNode.
        /// Default: NO
        #[method(stopGradient)]
        pub unsafe fn stopGradient(&self) -> bool;

        /// Setter for [`stopGradient`][Self::stopGradient].
        #[method(setStopGradient:)]
        pub unsafe fn setStopGradient(&self, stop_gradient: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNImageNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A placeholder node denoting the position in the graph of a MPSState object
    ///
    /// Some filters need additional information about an image in order to function. For example
    /// a max-pooling gradient filter needs to know which position the max result came from in the
    /// original pooling filter in order to select the right data for gradient computation.  In other cases,
    /// state may be moved into a MPSState object in order to keep the filter itself immutable.
    /// The MPSState object typically encapsulates one or more MTLResource objects.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnstatenode?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNStateNode;
);

unsafe impl NSObjectProtocol for MPSNNStateNode {}

extern_methods!(
    unsafe impl MPSNNStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// MPS resource identification
        ///
        /// See MPSHandle protocol reference.  Default: nil
        #[method_id(@__retain_semantics Other handle)]
        pub unsafe fn handle(&self) -> Option<Retained<ProtocolObject<dyn MPSHandle>>>;

        /// Setter for [`handle`][Self::handle].
        #[method(setHandle:)]
        pub unsafe fn setHandle(&self, handle: Option<&ProtocolObject<dyn MPSHandle>>);

        /// Tag a state node for view later
        ///
        /// Most state nodes are private to the graph. These alias memory heavily and
        /// consequently generally have invalid state when the graph exits.  When
        /// exportFromGraph = YES, the image is preserved and made available through
        /// the [MPSNNGraph encode... resultStates:... list.
        ///
        /// CAUTION: exporting an state from a graph prevents MPS from
        /// recycling memory. It will nearly always cause the
        /// amount of memory used by the graph to increase by the size
        /// of the state. There will probably be a performance
        /// regression accordingly.  This feature should generally
        /// be used only when the node is needed as an input for
        /// further work and recomputing it is prohibitively costly.
        ///
        /// Default: NO
        #[method(exportFromGraph)]
        pub unsafe fn exportFromGraph(&self) -> bool;

        /// Setter for [`exportFromGraph`][Self::exportFromGraph].
        #[method(setExportFromGraph:)]
        pub unsafe fn setExportFromGraph(&self, export_from_graph: bool);

        /// Set to true to cause the resource to be synchronized with the CPU
        ///
        /// Ignored on non-MacOS.
        #[method(synchronizeResource)]
        pub unsafe fn synchronizeResource(&self) -> bool;

        /// Setter for [`synchronizeResource`][Self::synchronizeResource].
        #[method(setSynchronizeResource:)]
        pub unsafe fn setSynchronizeResource(&self, synchronize_resource: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// During training, each MPSNNFilterNode has a corresponding
    /// MPSNNGradientFilterNode for the gradient computation for
    /// trainable parameter update. The two communicate through a
    /// MPSNNGradientStateNode or subclass which carries information
    /// about the inference pass settings to the gradient pass.
    /// You can avoid managing these -- there will be many! -- by
    /// using -[MPSNNFilterNode gradientFilterWithSources:] to make
    /// the MPSNNGradientFilterNodes. That method will append
    /// the necessary extra information like MPSNNGradientState
    /// nodes and inference filter source image nodes to the object as
    /// needed.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngradientstatenode?language=objc)
    #[unsafe(super(MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSNNGradientStateNode {}

extern_methods!(
    unsafe impl MPSNNGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSNNGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutiongradientstatenode?language=objc)
    #[unsafe(super(MPSNNGradientStateNode, MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSCNNConvolutionGradientStateNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSCNNConvolutionGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutiontransposegradientstatenode?language=objc)
    #[unsafe(super(
        MPSCNNConvolutionGradientStateNode,
        MPSNNGradientStateNode,
        MPSNNStateNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionTransposeGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSCNNConvolutionTransposeGradientStateNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionTransposeGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSCNNConvolutionTransposeGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionTransposeGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnbinarygradientstatenode?language=objc)
    #[unsafe(super(MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNBinaryGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSNNBinaryGradientStateNode {}

extern_methods!(
    unsafe impl MPSNNBinaryGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSNNBinaryGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNBinaryGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnmultiarygradientstatenode?language=objc)
    #[unsafe(super(MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNMultiaryGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSNNMultiaryGradientStateNode {}

extern_methods!(
    unsafe impl MPSNNMultiaryGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSNNMultiaryGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNMultiaryGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnarithmeticgradientstatenode?language=objc)
    #[unsafe(super(MPSNNBinaryGradientStateNode, MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNArithmeticGradientStateNode;
);

unsafe impl NSObjectProtocol for MPSNNArithmeticGradientStateNode {}

extern_methods!(
    unsafe impl MPSNNArithmeticGradientStateNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSNNArithmeticGradientStateNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNArithmeticGradientStateNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// Block callback for customizing gradient nodes as they are constructed
///
/// Example code for copying handles from inference image nodes to corresponding gradient nodes:
///
/// ```text
///               MPSNodeCustomizationBlock myCopyHandleBlock = ^( MPSNNFilterNode * __nonnull gradientNode,
///                                                                MPSNNFilterNode * __nonnull inferenceNode,
///                                                                MPSNNImageNode * __nonnull inferenceSource )
///               {
///                   gradientNode.resultImage.handle = inferenceSource.handle;
///               }
/// ```
///
///
/// Parameter `gradientNode`: The new gradient node created to mirror inferenceNode
///
/// Parameter `inferenceNode`: The preexisting inference node mirrored by gradient node.
/// If nil, an extra node was automatically inserted into the graph.
/// An MPSNNAdditionNode may be inserted at junctions
/// where multiple inference MPSNNFilterNodes read from the
/// same MPSNNImageNode.
///
/// Parameter `inferenceSource`: The  source image argument to the inference node to which the gradient result corresponds
///
/// Parameter `gradientSource`: The source gradient argument to the new gradient node.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsgradientnodeblock?language=objc)
#[cfg(feature = "block2")]
pub type MPSGradientNodeBlock = *mut block2::Block<
    dyn Fn(
        NonNull<MPSNNFilterNode>,
        NonNull<MPSNNFilterNode>,
        NonNull<MPSNNImageNode>,
        NonNull<MPSNNImageNode>,
    ),
>;

extern_class!(
    /// A placeholder node denoting a neural network filter stage
    ///
    /// There are as many MPSNNFilterNode subclasses as there are
    /// MPS neural network filter objects. Make one of those.
    /// This class defines an polymorphic interface for them.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnfilternode?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNFilterNode;
);

unsafe impl NSObjectProtocol for MPSNNFilterNode {}

extern_methods!(
    unsafe impl MPSNNFilterNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Get the node representing the image result of the filter
        ///
        /// Except where otherwise noted, the precision used for the
        /// result image (see format property) is copied from the precision
        /// from the first input image node.
        #[method_id(@__retain_semantics Other resultImage)]
        pub unsafe fn resultImage(&self) -> Retained<MPSNNImageNode>;

        /// convenience method for resultStates[0]
        ///
        /// If resultStates is nil, returns nil
        #[method_id(@__retain_semantics Other resultState)]
        pub unsafe fn resultState(&self) -> Option<Retained<MPSNNStateNode>>;

        /// Get the node representing the state result of the filter
        ///
        /// If more than one, see description of subclass for ordering.
        #[method_id(@__retain_semantics Other resultStates)]
        pub unsafe fn resultStates(&self) -> Option<Retained<NSArray<MPSNNStateNode>>>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// The padding method used for the filter node
        ///
        /// The padding policy configures how the filter centers
        /// the region of interest in the source image. It principally
        /// is responsible for setting the MPSCNNKernel.offset and
        /// the size of the image produced, and sometimes will also
        /// configure .sourceFeatureChannelOffset, .sourceFeatureChannelMaxCount,
        /// and .edgeMode.  It is permitted to set any other filter properties
        /// as needed using a custom padding policy. The default padding
        /// policy varies per filter to conform to consensus expectation for
        /// the behavior of that filter.  In some cases, pre-made padding
        /// policies are provided to match the behavior of common neural
        /// networking frameworks with particularly complex or unexpected
        /// behavior for specific nodes. See MPSNNDefaultPadding class methods
        /// in MPSNeuralNetworkTypes.h for more.
        ///
        /// BUG: MPS doesn't provide a good way to reset the MPSKernel properties
        /// in the context of a MPSNNGraph after the kernel is finished encoding.
        /// These values carry on to the next time the graph is used. Consequently,
        /// if your custom padding policy modifies the property as a function of the
        /// previous value, e.g.:
        ///
        /// kernel.someProperty += 2;
        ///
        /// then the second time the graph runs, the property may have an inconsistent
        /// value, leading to unexpected behavior. The default padding computation
        /// runs before the custom padding method to provide it with a sense of
        /// what is expected for the default configuration and will reinitialize the value
        /// in the case of the .offset. However, that computation usually doesn't reset
        /// other properties. In such cases, the custom padding policy may need to keep
        /// a record of the original value to enable consistent behavior.
        #[method_id(@__retain_semantics Other paddingPolicy)]
        pub unsafe fn paddingPolicy(&self) -> Retained<ProtocolObject<dyn MPSNNPadding>>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`paddingPolicy`][Self::paddingPolicy].
        #[method(setPaddingPolicy:)]
        pub unsafe fn setPaddingPolicy(&self, padding_policy: &ProtocolObject<dyn MPSNNPadding>);

        /// A string to help identify this object.
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        /// Setter for [`label`][Self::label].
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);

        /// Return the gradient (backwards) version of this filter.
        ///
        /// The backwards training version of the filter will be returned.
        /// The non-gradient image and state arguments for the filter are automatically
        /// obtained from the target.
        ///
        /// Parameter `gradientImage`: The gradient images corresponding with the resultImage
        /// of the target
        #[method_id(@__retain_semantics Other gradientFilterWithSource:)]
        pub unsafe fn gradientFilterWithSource(
            &self,
            gradient_image: &MPSNNImageNode,
        ) -> Retained<MPSNNGradientFilterNode>;

        /// Return the gradient (backwards) version of this filter.
        ///
        /// The backwards training version of the filter will be returned.
        /// The non-gradient image and state arguments for the filter are automatically
        /// obtained from the target.
        ///
        /// Parameter `gradientImages`: The gradient images corresponding with the resultImage
        /// of the target
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;

        /// Return multiple gradient versions of the filter
        ///
        /// MPSNNFilters that consume multiple inputs generally result in
        /// multiple conjugate filters for the gradient computation at
        /// the end of training. For example, a single concatenation operation
        /// that concatenates multple images will result in an array of slice
        /// operators that carve out subsections of the input gradient image.
        #[method_id(@__retain_semantics Other gradientFiltersWithSources:)]
        pub unsafe fn gradientFiltersWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<NSArray<MPSNNGradientFilterNode>>;

        /// Return multiple gradient versions of the filter
        ///
        /// MPSNNFilters that consume multiple inputs generally result in
        /// multiple conjugate filters for the gradient computation at
        /// the end of training. For example, a single concatenation operation
        /// that concatenates multple images will result in an array of slice
        /// operators that carve out subsections of the input gradient image.
        #[method_id(@__retain_semantics Other gradientFiltersWithSource:)]
        pub unsafe fn gradientFiltersWithSource(
            &self,
            gradient_image: &MPSNNImageNode,
        ) -> Retained<NSArray<MPSNNGradientFilterNode>>;

        #[cfg(feature = "block2")]
        /// Build training graph from inference graph
        ///
        /// This method will iteratively build the training portion of a graph based
        /// on an inference graph. Self should be the last node in the
        /// inference graph. It is typically a loss layer, but can be anything.
        /// Typically, the "inference graph" used here is the desired inference
        /// graph with a dropout node and a loss layer node appended.
        ///
        /// The nodes that are created will have default properties. In certain cases,
        /// these may not be appropriate (e.g. if you want to do CPU based updates
        /// of convolution weights instead of default GPU updates.) In such cases, your
        /// application should use the nodeHandler to configure the new nodes as they are
        /// created.
        ///
        /// BUG: This method can not follow links to regions of the graph that are
        /// connected to the rest of the graph solely via MPSNNStateNodes. A gradient
        /// image input is required to construct a MPSNNGradientFilterNode from a
        /// inference filter node.
        ///
        ///
        /// Parameter `gradientImage`: The input gradient image for the first gradient
        /// node in the training section of the graph. If nil,
        /// self.resultImage is used. This results in a standard monolithic
        /// training graph. If the graph is instead divided into multiple
        /// subgraphs (potentially to allow for your custom code to appear
        /// inbetween MPSNNGraph segments) a new MPSImageNode*
        /// may be substituted.
        ///
        /// Parameter `nodeHandler`: An optional block to allow for customization of gradient
        /// nodes and intermediate images as the graph is constructed.
        /// It may also be used to prune braches of the developing
        /// training graph. If nil, the default handler is used. It builds
        /// the full graph, and assigns any inferenceNodeSources[i].handle
        /// to their gradient counterparts.
        ///
        /// Returns: The list of new MPSNNFilterNode training graph termini. These MPSNNFilterNodes
        /// are not necessarily all MPSNNGradientFilterNodes. To build a full list of nodes
        /// created, use a custom nodeHandler. If no nodes are created nil is returned.
        #[method_id(@__retain_semantics Other trainingGraphWithSourceGradient:nodeHandler:)]
        pub unsafe fn trainingGraphWithSourceGradient_nodeHandler(
            &self,
            gradient_image: Option<&MPSNNImageNode>,
            node_handler: MPSGradientNodeBlock,
        ) -> Option<Retained<NSArray<MPSNNFilterNode>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNFilterNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// For each MPSNNFilterNode, there is a corresponding MPSNNGradientFilterNode
    /// used for training that back propagates image gradients to refine the
    /// various parameters in each node. Generally, it takes as input a gradient
    /// corresponding to the result image from the MPSNNFilterNode and returns
    /// a gradient image corresponding to the source image of the MPSNNFilterNode.
    /// In addition, there is generally a MPSNNState produced by the MPSNNFilterNode
    /// that is consumed by the MPSNNGradientNode and the MPSNNGradientNode generally
    /// needs to look at the MPSNNFilterNode source image.
    ///
    /// If you have a simple method to traverse your inference graph backwards, then
    /// -[MPSNNFilterNode gradientFilterWithSource:] is a simple way to construct
    /// these.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngradientfilternode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNGradientFilterNode;
);

unsafe impl NSObjectProtocol for MPSNNGradientFilterNode {}

extern_methods!(
    unsafe impl MPSNNGradientFilterNode {
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            source_gradient: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;

        #[method_id(@__retain_semantics Other gradientFiltersWithSources:)]
        pub unsafe fn gradientFiltersWithSources(
            &self,
            source_gradient: &NSArray<MPSNNImageNode>,
        ) -> Retained<NSArray<MPSNNGradientFilterNode>>;

        #[method_id(@__retain_semantics Other gradientFilterWithSource:)]
        pub unsafe fn gradientFilterWithSource(
            &self,
            source_gradient: &MPSNNImageNode,
        ) -> Retained<MPSNNGradientFilterNode>;

        #[method_id(@__retain_semantics Other gradientFiltersWithSource:)]
        pub unsafe fn gradientFiltersWithSource(
            &self,
            source_gradient: &MPSNNImageNode,
        ) -> Retained<NSArray<MPSNNGradientFilterNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNGradientFilterNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNGradientFilterNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNFilterNode representing a MPSCNNConvolution kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutionnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNConvolutionNode {}

unsafe impl NSObjectProtocol for MPSCNNConvolutionNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// The training style of the forward node will be propagated to gradient nodes made from it
        #[method(trainingStyle)]
        pub unsafe fn trainingStyle(&self) -> MPSNNTrainingStyle;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`trainingStyle`][Self::trainingStyle].
        #[method(setTrainingStyle:)]
        pub unsafe fn setTrainingStyle(&self, training_style: MPSNNTrainingStyle);

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Set the floating-point precision used by the convolution accumulator
        ///
        /// Default:  MPSNNConvolutionAccumulatorPrecisionOptionFloat
        #[method(accumulatorPrecision)]
        pub unsafe fn accumulatorPrecision(&self) -> MPSNNConvolutionAccumulatorPrecisionOption;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`accumulatorPrecision`][Self::accumulatorPrecision].
        #[method(setAccumulatorPrecision:)]
        pub unsafe fn setAccumulatorPrecision(
            &self,
            accumulator_precision: MPSNNConvolutionAccumulatorPrecisionOption,
        );

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:)]
        pub unsafe fn nodeWithSource_weights(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:)]
        pub unsafe fn initWithSource_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        /// A node to represent a MPSCNNConvolutionGradientState object
        ///
        /// Use this if the convolution is mirrored by a convolution transpose node
        /// later on in the graph to make sure that the size of the image returned
        /// from the convolution transpose matches the size of the image passed in
        /// to this node.
        #[method_id(@__retain_semantics Other convolutionGradientState)]
        pub unsafe fn convolutionGradientState(
            &self,
        ) -> Option<Retained<MPSCNNConvolutionGradientStateNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNConvolutionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNFilterNode representing a MPSCNNFullyConnected kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnfullyconnectednode?language=objc)
    #[unsafe(super(MPSCNNConvolutionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNFullyConnectedNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNFullyConnectedNode {}

unsafe impl NSObjectProtocol for MPSCNNFullyConnectedNode {}

extern_methods!(
    unsafe impl MPSCNNFullyConnectedNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:)]
        pub unsafe fn nodeWithSource_weights(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNFullyConnected kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:)]
        pub unsafe fn initWithSource_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNFullyConnectedNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNFullyConnectedNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNFilterNode representing a MPSCNNBinaryConvolution kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinaryconvolutionnode?language=objc)
    #[unsafe(super(MPSCNNConvolutionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNBinaryConvolutionNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNBinaryConvolutionNode {}

unsafe impl NSObjectProtocol for MPSCNNBinaryConvolutionNode {}

extern_methods!(
    unsafe impl MPSCNNBinaryConvolutionNode {
        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init an autoreleased node representing a MPSCNNBinaryConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `scaleValue`: A floating point value used to scale the entire convolution.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:scaleValue:type:flags:)]
        pub unsafe fn nodeWithSource_weights_scaleValue_type_flags(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            scale_value: c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init a node representing a MPSCNNBinaryConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `scaleValue`: A floating point value used to scale the entire convolution.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:scaleValue:type:flags:)]
        pub unsafe fn initWithSource_weights_scaleValue_type_flags(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            scale_value: c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init an autoreleased node representing a MPSCNNBinaryConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `outputBiasTerms`: A pointer to bias terms to be applied to the convolution output.
        /// See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `outputScaleTerms`: A pointer to scale terms to be applied to binary convolution
        /// results per output feature channel. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputBiasTerms`: A pointer to offset terms to be applied to the input before convolution and
        /// before input scaling. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputScaleTerms`: A pointer to scale terms to be applied to the input before convolution,
        /// but after input biasing. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:)]
        pub unsafe fn nodeWithSource_weights_outputBiasTerms_outputScaleTerms_inputBiasTerms_inputScaleTerms_type_flags(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            output_bias_terms: *const c_float,
            output_scale_terms: *const c_float,
            input_bias_terms: *const c_float,
            input_scale_terms: *const c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init a node representing a MPSCNNBinaryConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `outputBiasTerms`: A pointer to bias terms to be applied to the convolution output.
        /// See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `outputScaleTerms`: A pointer to scale terms to be applied to binary convolution
        /// results per output feature channel. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputBiasTerms`: A pointer to offset terms to be applied to the input before convolution and
        /// before input scaling. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputScaleTerms`: A pointer to scale terms to be applied to the input before convolution,
        /// but after input biasing. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:)]
        pub unsafe fn initWithSource_weights_outputBiasTerms_outputScaleTerms_inputBiasTerms_inputScaleTerms_type_flags(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            output_bias_terms: *const c_float,
            output_scale_terms: *const c_float,
            input_bias_terms: *const c_float,
            input_scale_terms: *const c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        /// unavailable
        #[method_id(@__retain_semantics Other convolutionGradientState)]
        pub unsafe fn convolutionGradientState(
            &self,
        ) -> Option<Retained<MPSCNNConvolutionGradientStateNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNConvolutionNode`
    unsafe impl MPSCNNBinaryConvolutionNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:)]
        pub unsafe fn nodeWithSource_weights(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:)]
        pub unsafe fn initWithSource_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNBinaryConvolutionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNBinaryConvolutionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNFilterNode representing a MPSCNNBinaryFullyConnected kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinaryfullyconnectednode?language=objc)
    #[unsafe(super(
        MPSCNNBinaryConvolutionNode,
        MPSCNNConvolutionNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNBinaryFullyConnectedNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNBinaryFullyConnectedNode {}

unsafe impl NSObjectProtocol for MPSCNNBinaryFullyConnectedNode {}

extern_methods!(
    unsafe impl MPSCNNBinaryFullyConnectedNode {
        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init an autoreleased node representing a MPSCNNBinaryFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `scaleValue`: A floating point value used to scale the entire convolution.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryFullyConnected kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:scaleValue:type:flags:)]
        pub unsafe fn nodeWithSource_weights_scaleValue_type_flags(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            scale_value: c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init a node representing a MPSCNNBinaryFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `scaleValue`: A floating point value used to scale the entire convolution.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryFullyConnected kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:scaleValue:type:flags:)]
        pub unsafe fn initWithSource_weights_scaleValue_type_flags(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            scale_value: c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init an autoreleased node representing a MPSCNNBinaryFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `outputBiasTerms`: A pointer to bias terms to be applied to the convolution output.
        /// See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `outputScaleTerms`: A pointer to scale terms to be applied to binary convolution
        /// results per output feature channel. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputBiasTerms`: A pointer to offset terms to be applied to the input before convolution and
        /// before input scaling. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputScaleTerms`: A pointer to scale terms to be applied to the input before convolution,
        /// but after input biasing. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryFullyConnected kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:)]
        pub unsafe fn nodeWithSource_weights_outputBiasTerms_outputScaleTerms_inputBiasTerms_inputScaleTerms_type_flags(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            output_bias_terms: *const c_float,
            output_scale_terms: *const c_float,
            input_bias_terms: *const c_float,
            input_scale_terms: *const c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;

        #[cfg(all(feature = "MPSCNNConvolution", feature = "MPSNeuralNetworkTypes"))]
        /// Init a node representing a MPSCNNBinaryFullyConnected kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Parameter `outputBiasTerms`: A pointer to bias terms to be applied to the convolution output.
        /// See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `outputScaleTerms`: A pointer to scale terms to be applied to binary convolution
        /// results per output feature channel. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputBiasTerms`: A pointer to offset terms to be applied to the input before convolution and
        /// before input scaling. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `inputScaleTerms`: A pointer to scale terms to be applied to the input before convolution,
        /// but after input biasing. See MPSCNNBinaryConvolution for more details.
        ///
        /// Parameter `type`: What kind of binarization strategy is to be used.
        ///
        /// Parameter `flags`: See documentation of MPSCNNBinaryConvolutionFlags.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNBinaryFullyConnected kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:)]
        pub unsafe fn initWithSource_weights_outputBiasTerms_outputScaleTerms_inputBiasTerms_inputScaleTerms_type_flags(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
            output_bias_terms: *const c_float,
            output_scale_terms: *const c_float,
            input_bias_terms: *const c_float,
            input_scale_terms: *const c_float,
            r#type: MPSCNNBinaryConvolutionType,
            flags: MPSCNNBinaryConvolutionFlags,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNConvolutionNode`
    unsafe impl MPSCNNBinaryFullyConnectedNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:)]
        pub unsafe fn nodeWithSource_weights(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:)]
        pub unsafe fn initWithSource_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNBinaryFullyConnectedNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNBinaryFullyConnectedNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNFilterNode representing a MPSCNNConvolutionTranspose kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutiontransposenode?language=objc)
    #[unsafe(super(MPSCNNConvolutionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionTransposeNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNConvolutionTransposeNode {}

unsafe impl NSObjectProtocol for MPSCNNConvolutionTransposeNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionTransposeNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNConvolutionTransposeNode kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `convolutionGradientState`: When the convolution transpose is used to 'undo' an earlier convolution
        /// in the graph, it is generally desired that the output image be the same
        /// size as the input image to the earlier convolution. You may optionally
        /// specify this size identity by passing in the MPSNNConvolutionGradientStateNode
        /// created by the convolution node here.
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolutionTransposeNode kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:convolutionGradientState:weights:)]
        pub unsafe fn nodeWithSource_convolutionGradientState_weights(
            source_node: &MPSNNImageNode,
            convolution_gradient_state: Option<&MPSCNNConvolutionGradientStateNode>,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNConvolutionTransposeNode kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `convolutionGradientState`: When the convolution transpose is used to 'undo' an earlier convolution
        /// in the graph, it is generally desired that the output image be the same
        /// size as the input image to the earlier convolution. You may optionally
        /// specify this size identity by passing in the MPSCNNConvolutionGradientState node
        /// here.
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolutionTransposeNode kernel.
        #[method_id(@__retain_semantics Init initWithSource:convolutionGradientState:weights:)]
        pub unsafe fn initWithSource_convolutionGradientState_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            convolution_gradient_state: Option<&MPSCNNConvolutionGradientStateNode>,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        /// unavailable
        #[method_id(@__retain_semantics Other convolutionGradientState)]
        pub unsafe fn convolutionGradientState(
            &self,
        ) -> Option<Retained<MPSCNNConvolutionGradientStateNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNConvolutionNode`
    unsafe impl MPSCNNConvolutionTransposeNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// Init an autoreleased not representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:weights:)]
        pub unsafe fn nodeWithSource_weights(
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// Init a node representing a MPSCNNConvolution kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `weights`: A pointer to a valid object conforming to the MPSCNNConvolutionDataSource
        /// protocol. This object is provided by you to encapsulate storage for
        /// convolution weights and biases. If it is used for training, it may not
        /// have a neuron embedded in the convolution descriptor.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNConvolution kernel.
        #[method_id(@__retain_semantics Init initWithSource:weights:)]
        pub unsafe fn initWithSource_weights(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            weights: &ProtocolObject<dyn MPSCNNConvolutionDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNConvolutionTransposeNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionTransposeNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutiongradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNConvolutionGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNConvolutionGradientNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionGradientNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution
        ///
        /// Parameter `weights`: The data source from the forward convolution. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution pass.
        ///
        /// Returns: A MPSCNNConvolutionGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_convolutionGradientState_weights(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution
        ///
        /// Parameter `weights`: The data source from the forward convolution. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution pass.
        ///
        /// Returns: A MPSCNNConvolutionGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn initWithSourceGradient_sourceImage_convolutionGradientState_weights(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNConvolutionGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnfullyconnectedgradientnode?language=objc)
    #[unsafe(super(
        MPSCNNConvolutionGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNFullyConnectedGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNFullyConnectedGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNFullyConnectedGradientNode {}

extern_methods!(
    unsafe impl MPSCNNFullyConnectedGradientNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for fully connected training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward fully connected node
        ///
        /// Parameter `gradientState`: The gradient state from the forward fully connected
        ///
        /// Parameter `weights`: The data source from the forward fully connected. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward fully connected pass.
        ///
        /// Returns: A MPSCNNFullyConnectedGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_convolutionGradientState_weights(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for fully connectd training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward fully connected node
        ///
        /// Parameter `gradientState`: The gradient state from the forward fully connected
        ///
        /// Parameter `weights`: The data source from the forward fully connected. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution pass.
        ///
        /// Returns: A MPSCNNFullyConnectedGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn initWithSourceGradient_sourceImage_convolutionGradientState_weights(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNFullyConnectedGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNFullyConnectedGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnconvolutiontransposegradientnode?language=objc)
    #[unsafe(super(
        MPSCNNConvolutionGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNConvolutionTransposeGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNConvolutionTransposeGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNConvolutionTransposeGradientNode {}

extern_methods!(
    unsafe impl MPSCNNConvolutionTransposeGradientNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution transpose training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution transpose node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution transpose
        ///
        /// Parameter `weights`: The data source from the forward convolution transpose. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution transpose pass.
        ///
        /// Returns: A MPSCNNConvolutionTransposeGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:convolutionTransposeGradientState:weights:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_convolutionTransposeGradientState_weights(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionTransposeGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution transpose training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution transpose node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution transpose
        ///
        /// Parameter `weights`: The data source from the forward convolution transpose. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution transpose pass.
        ///
        /// Returns: A MPSCNNConvolutionTransposeGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:convolutionTransposeGradientState:weights:)]
        pub unsafe fn initWithSourceGradient_sourceImage_convolutionTransposeGradientState_weights(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionTransposeGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNConvolutionGradientNode`
    unsafe impl MPSCNNConvolutionTransposeGradientNode {
        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution
        ///
        /// Parameter `weights`: The data source from the forward convolution. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution pass.
        ///
        /// Returns: A MPSCNNConvolutionGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_convolutionGradientState_weights(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNConvolution")]
        /// A node to represent the gradient calculation for convolution training.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter. Often
        /// that is a neuron gradient filter node.
        ///
        /// Parameter `sourceImage`: The input image from the forward convolution node
        ///
        /// Parameter `gradientState`: The gradient state from the forward convolution
        ///
        /// Parameter `weights`: The data source from the forward convolution. It may not contain
        /// an integrated neuron. Similary, any normalization should be
        /// broken out into a separate node. Pass nil to use the weights
        /// from the forward convolution pass.
        ///
        /// Returns: A MPSCNNConvolutionGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:convolutionGradientState:weights:)]
        pub unsafe fn initWithSourceGradient_sourceImage_convolutionGradientState_weights(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSCNNConvolutionGradientStateNode,
            weights: Option<&ProtocolObject<dyn MPSCNNConvolutionDataSource>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNConvolutionTransposeGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNConvolutionTransposeGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// virtual base class for MPSCNNNeuron nodes
    ///
    /// This is a virtual base class only. Please create a
    /// subclass using +newNeuronNodeWithSouce:descriptor or
    /// by making one of the subclasses directly. Better yet, skip
    /// the node entirely and specify the neuron function directly in
    /// your MPSCNNConvolutionDataSource.descriptor.neuronDescriptor.
    ///
    /// MPSCNNNeuronNodes are provided as a representational convenience.
    /// However, you are usually better off incorporating your neuron
    /// into the MPSCNNConvolutionDataSource when possible. The MPSNNGraph
    /// will attempt to optimize away the neuron pass by fusing it with a
    /// preceeding convolution, but it might be prevented from doing so
    /// if the neuron pass has a custom padding method or more than one
    /// node reads from the convolution result. The graph -debugDescription
    /// should reveal what happened.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        /// filter parameter a
        #[method(a)]
        pub unsafe fn a(&self) -> c_float;

        /// filter parameter b
        #[method(b)]
        pub unsafe fn b(&self) -> c_float;

        /// filter parameter c
        #[method(c)]
        pub unsafe fn c(&self) -> c_float;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronAbsolute kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = fabs(x)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronabsolutenode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronAbsoluteNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronAbsoluteNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronAbsoluteNode {
        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronAbsoluteNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronAbsoluteNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronELU kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = a * exp(x) - 1, x <  0
    ///              x             , x >= 0
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronelunode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronELUNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronELUNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronELUNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:)]
        pub unsafe fn nodeWithSource_a(source_node: &MPSNNImageNode, a: c_float) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:a:)]
        pub unsafe fn initWithSource_a(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronELUNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronELUNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronReLUN kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = min((x >= 0 ? x : a * x), b)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronrelunnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronReLUNNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronReLUNNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronReLUNNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:)]
        pub unsafe fn nodeWithSource_a_b(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:a:b:)]
        pub unsafe fn initWithSource_a_b(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronReLUNNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronReLUNNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronLinear kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = a * x + b
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronlinearnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronLinearNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronLinearNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronLinearNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:)]
        pub unsafe fn nodeWithSource_a_b(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronLinear kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronLinear kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:)]
        pub unsafe fn initWithSource_a_b(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronLinearNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronLinearNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronReLU kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = x            if x >= 0
    ///            = a * x        if x < 0
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronrelunode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronReLUNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronReLUNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronReLUNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:)]
        pub unsafe fn nodeWithSource_a(source_node: &MPSNNImageNode, a: c_float) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:a:)]
        pub unsafe fn initWithSource_a(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronReLUNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronReLUNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronSigmoid kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = 1 / (1 + e^-x)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronsigmoidnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronSigmoidNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronSigmoidNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronSigmoidNode {
        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronSigmoidNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronSigmoidNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronHardSigmoid kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = clamp((a * x) + b, 0, 1)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronhardsigmoidnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronHardSigmoidNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronHardSigmoidNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronHardSigmoidNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:)]
        pub unsafe fn nodeWithSource_a_b(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronHardSigmoid kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronHardSigmoid kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:)]
        pub unsafe fn initWithSource_a_b(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronHardSigmoidNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronHardSigmoidNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronSoftPlus kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = a * log(1 + e^(b * x))
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronsoftplusnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronSoftPlusNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronSoftPlusNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronSoftPlusNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:)]
        pub unsafe fn nodeWithSource_a_b(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronSoftPlus kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronSoftPlus kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:)]
        pub unsafe fn initWithSource_a_b(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronSoftPlusNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronSoftPlusNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronSoftSign kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = x / (1 + abs(x))
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronsoftsignnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronSoftSignNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronSoftSignNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronSoftSignNode {
        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronSoftSignNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronSoftSignNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronTanH kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = a * tanh(b * x)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneurontanhnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronTanHNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronTanHNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronTanHNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:)]
        pub unsafe fn nodeWithSource_a_b(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronTanH kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// ```text
        ///       f(x) = a * tanh(b * x)
        /// ```
        ///
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronTanH kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:)]
        pub unsafe fn initWithSource_a_b(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a
        /// &
        /// b
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronTanHNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronTanHNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A ReLU node with parameter a provided independently for each feature channel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = x                if x >= 0
    ///            = aData[i] * x     if x < 0,  i is the index of the feature channel
    ///   @param      sourceNode              The MPSNNImageNode representing the source MPSImage for the filter
    ///   @param      aData                   An array of single precision floating-point alpha values to use
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronprelunode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronPReLUNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronPReLUNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronPReLUNode {
        #[method_id(@__retain_semantics Other nodeWithSource:aData:)]
        pub unsafe fn nodeWithSource_aData(
            source_node: &MPSNNImageNode,
            a_data: &NSData,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronTanH kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// ```text
        ///       f(x) = x                if x >= 0
        ///            = aData[i] * x     if x < 0,  i is the index of the feature channel
        /// ```
        ///
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `aData`: An array of single precision floating-point alpha values to use
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronTanH kernel.
        #[method_id(@__retain_semantics Init initWithSource:aData:)]
        pub unsafe fn initWithSource_aData(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a_data: &NSData,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronPReLUNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronPReLUNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronPower kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = (a * x + b) ^ c
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronpowernode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronPowerNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronPowerNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronPowerNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:c:)]
        pub unsafe fn nodeWithSource_a_b_c(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronPower kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// ```text
        ///       f(x) = (a * x + b) ^ c
        /// ```
        ///
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Parameter `c`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronPower kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:c:)]
        pub unsafe fn initWithSource_a_b_c(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronPowerNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronPowerNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronExponential kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = c ^ (a * x + b)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronexponentialnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronExponentialNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronExponentialNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronExponentialNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:c:)]
        pub unsafe fn nodeWithSource_a_b_c(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronExponential kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// ```text
        ///       f(x) = c ^ (a * x + b)
        /// ```
        ///
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Parameter `c`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronExponential kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:c:)]
        pub unsafe fn initWithSource_a_b_c(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronExponentialNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronExponentialNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronLogarithm kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// ```text
    ///       f(x) = log_c(a * x + b)
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneuronlogarithmnode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronLogarithmNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronLogarithmNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronLogarithmNode {
        #[method_id(@__retain_semantics Other nodeWithSource:a:b:c:)]
        pub unsafe fn nodeWithSource_a_b_c(
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNNeuronLogarithm kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// ```text
        ///       f(x) = log_c(a * x + b)
        /// ```
        ///
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `a`: See discussion above.
        ///
        /// Parameter `b`: See discussion above.
        ///
        /// Parameter `c`: See discussion above.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronLogarithm kernel.
        #[method_id(@__retain_semantics Init initWithSource:a:b:c:)]
        pub unsafe fn initWithSource_a_b_c(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            a: c_float,
            b: c_float,
            c: c_float,
        ) -> Retained<Self>;

        /// Create an autoreleased node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node with default values for parameters a, b, and c
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronLogarithmNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronLogarithmNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronGeLU kernel
    ///
    /// For each pixel, applies the following function:
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneurongelunode?language=objc)
    #[unsafe(super(MPSCNNNeuronNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronGeLUNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronGeLUNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronGeLUNode {
        /// Init a node representing a MPSCNNNeuronGeLU kernel
        ///
        /// For each pixel, applies the following function:
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNNeuronLogarithm kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// Create an autoreleased node
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNeuronNode`
    unsafe impl MPSCNNNeuronGeLUNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// Create a neuron node of the appropriate type with a MPSNNNeuronDescriptor
        #[method_id(@__retain_semantics Other nodeWithSource:descriptor:)]
        pub unsafe fn nodeWithSource_descriptor(
            source_node: &MPSNNImageNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronGeLUNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNNeuronGradient
    ///
    /// We use one generic neuron gradient node
    /// instead of having dozens of subclasses.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnneurongradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNeuronGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNNeuronGradientNode {}

extern_methods!(
    unsafe impl MPSCNNNeuronGradientNode {
        #[cfg(feature = "MPSCNNNeuron")]
        /// create a new neuron gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodeWithSources:]
        /// for an easier way to do this
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:descriptor:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_descriptor(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNNeuron")]
        /// create a new neuron gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodeWithSources:]
        /// for an easier way to do this
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:descriptor:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_descriptor(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            descriptor: &MPSNNNeuronDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNNeuron")]
        /// The neuron descriptor
        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor(&self) -> Retained<MPSNNNeuronDescriptor>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNeuronGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a unary MPSNNReduce node.
    ///
    /// This is an abstract base class that does not correspond with any
    /// particular MPSCNNKernel. Please make one of the MPSNNReduction
    /// subclasses instead.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnunaryreductionnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNUnaryReductionNode;
);

unsafe impl NSObjectProtocol for MPSNNUnaryReductionNode {}

extern_methods!(
    unsafe impl MPSNNUnaryReductionNode {
        /// The clip rectangle to apply to the source image.
        #[method(clipRectSource)]
        pub unsafe fn clipRectSource(&self) -> MTLRegion;

        /// Setter for [`clipRectSource`][Self::clipRectSource].
        #[method(setClipRectSource:)]
        pub unsafe fn setClipRectSource(&self, clip_rect_source: MTLRegion);

        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNUnaryReductionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNUnaryReductionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionrowminnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionRowMinNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionRowMinNode {}

extern_methods!(
    unsafe impl MPSNNReductionRowMinNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionRowMinNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionRowMinNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionRowMinNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductioncolumnminnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionColumnMinNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionColumnMinNode {}

extern_methods!(
    unsafe impl MPSNNReductionColumnMinNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionColumnMinNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionColumnMinNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionColumnMinNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelsminnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsMinNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsMinNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsMinNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsMinNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsMinNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsMinNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelsargumentminnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsArgumentMinNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsArgumentMinNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsArgumentMinNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMinNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMinNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMinNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionrowmaxnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionRowMaxNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionRowMaxNode {}

extern_methods!(
    unsafe impl MPSNNReductionRowMaxNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionRowMaxNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionRowMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionRowMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductioncolumnmaxnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionColumnMaxNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionColumnMaxNode {}

extern_methods!(
    unsafe impl MPSNNReductionColumnMaxNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionColumnMaxNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionColumnMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionColumnMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelsmaxnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsMaxNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsMaxNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsMaxNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsMaxNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelsargumentmaxnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsArgumentMaxNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsArgumentMaxNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsArgumentMaxNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMaxNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsArgumentMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionrowmeannode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionRowMeanNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionRowMeanNode {}

extern_methods!(
    unsafe impl MPSNNReductionRowMeanNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionRowMeanNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionRowMeanNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionRowMeanNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductioncolumnmeannode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionColumnMeanNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionColumnMeanNode {}

extern_methods!(
    unsafe impl MPSNNReductionColumnMeanNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionColumnMeanNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionColumnMeanNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionColumnMeanNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelsmeannode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsMeanNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsMeanNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsMeanNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsMeanNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsMeanNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsMeanNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionspatialmeannode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionSpatialMeanNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionSpatialMeanNode {}

extern_methods!(
    unsafe impl MPSNNReductionSpatialMeanNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionSpatialMeanNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionSpatialMeanNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionSpatialMeanNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionrowsumnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionRowSumNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionRowSumNode {}

extern_methods!(
    unsafe impl MPSNNReductionRowSumNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionRowSumNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionRowSumNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionRowSumNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductioncolumnsumnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionColumnSumNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionColumnSumNode {}

extern_methods!(
    unsafe impl MPSNNReductionColumnSumNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionColumnSumNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionColumnSumNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionColumnSumNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionfeaturechannelssumnode?language=objc)
    #[unsafe(super(MPSNNUnaryReductionNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionFeatureChannelsSumNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionFeatureChannelsSumNode {}

extern_methods!(
    unsafe impl MPSNNReductionFeatureChannelsSumNode {
        /// A scale factor to apply to each feature channel sum.
        #[method(weight)]
        pub unsafe fn weight(&self) -> c_float;

        /// Setter for [`weight`][Self::weight].
        #[method(setWeight:)]
        pub unsafe fn setWeight(&self, weight: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNUnaryReductionNode`
    unsafe impl MPSNNReductionFeatureChannelsSumNode {
        /// Create an autoreleased node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing an MPS reduction kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for an MPS reduction kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionFeatureChannelsSumNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionFeatureChannelsSumNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a MPSCNNPooling kernel
    ///
    /// This is an abstract base class that does not correspond with any
    /// particular MPSCNNKernel. Please make one of the MPSCNNPooling
    /// subclasses instead.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingNode {
        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        #[method(strideInPixelsX)]
        pub unsafe fn strideInPixelsX(&self) -> NSUInteger;

        #[method(strideInPixelsY)]
        pub unsafe fn strideInPixelsY(&self) -> NSUInteger;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:)]
        pub unsafe fn nodeWithSource_filterSize(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels and a different stride
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:stride:)]
        pub unsafe fn nodeWithSource_filterSize_stride(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNPooling kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `kernelWidth`: The width of the max filter window
        ///
        /// Parameter `kernelHeight`: The height of the max filter window
        ///
        /// Parameter `strideInPixelsX`: The output stride (downsampling factor) in the x dimension.
        ///
        /// Parameter `strideInPixelsY`: The output stride (downsampling factor) in the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:)]
        pub unsafe fn initWithSource_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:stride:)]
        pub unsafe fn initWithSource_filterSize_stride(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:)]
        pub unsafe fn initWithSource_filterSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNPoolingAverage kernel
    ///
    /// The default edge mode is MPSImageEdgeModeClamp
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingaveragenode?language=objc)
    #[unsafe(super(MPSCNNPoolingNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingAverageNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingAverageNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingAverageNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingNode`
    unsafe impl MPSCNNPoolingAverageNode {
        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:)]
        pub unsafe fn nodeWithSource_filterSize(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels and a different stride
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:stride:)]
        pub unsafe fn nodeWithSource_filterSize_stride(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNPooling kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `kernelWidth`: The width of the max filter window
        ///
        /// Parameter `kernelHeight`: The height of the max filter window
        ///
        /// Parameter `strideInPixelsX`: The output stride (downsampling factor) in the x dimension.
        ///
        /// Parameter `strideInPixelsY`: The output stride (downsampling factor) in the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:)]
        pub unsafe fn initWithSource_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:stride:)]
        pub unsafe fn initWithSource_filterSize_stride(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:)]
        pub unsafe fn initWithSource_filterSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingAverageNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingAverageNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNPoolingL2Norm kernel
    ///
    /// The default edge mode is MPSImageEdgeModeClamp
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingl2normnode?language=objc)
    #[unsafe(super(MPSCNNPoolingNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingL2NormNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingL2NormNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingL2NormNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingNode`
    unsafe impl MPSCNNPoolingL2NormNode {
        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:)]
        pub unsafe fn nodeWithSource_filterSize(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels and a different stride
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:stride:)]
        pub unsafe fn nodeWithSource_filterSize_stride(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNPooling kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `kernelWidth`: The width of the max filter window
        ///
        /// Parameter `kernelHeight`: The height of the max filter window
        ///
        /// Parameter `strideInPixelsX`: The output stride (downsampling factor) in the x dimension.
        ///
        /// Parameter `strideInPixelsY`: The output stride (downsampling factor) in the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:)]
        pub unsafe fn initWithSource_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:stride:)]
        pub unsafe fn initWithSource_filterSize_stride(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:)]
        pub unsafe fn initWithSource_filterSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingL2NormNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingL2NormNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing a MPSCNNPoolingMax kernel
    ///
    /// The default edge mode is MPSImageEdgeModeClamp
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingmaxnode?language=objc)
    #[unsafe(super(MPSCNNPoolingNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingMaxNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingMaxNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingMaxNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingNode`
    unsafe impl MPSCNNPoolingMaxNode {
        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:)]
        pub unsafe fn nodeWithSource_filterSize(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels and a different stride
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:stride:)]
        pub unsafe fn nodeWithSource_filterSize_stride(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNPooling kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `kernelWidth`: The width of the max filter window
        ///
        /// Parameter `kernelHeight`: The height of the max filter window
        ///
        /// Parameter `strideInPixelsX`: The output stride (downsampling factor) in the x dimension.
        ///
        /// Parameter `strideInPixelsY`: The output stride (downsampling factor) in the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:)]
        pub unsafe fn initWithSource_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:stride:)]
        pub unsafe fn initWithSource_filterSize_stride(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:)]
        pub unsafe fn initWithSource_filterSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a MPSCNNDilatedPooling kernel
    ///
    /// This class corresponds to the MPSCNNDilatedPooling class.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnndilatedpoolingmaxnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNDilatedPoolingMaxNode;
);

unsafe impl NSObjectProtocol for MPSCNNDilatedPoolingMaxNode {}

extern_methods!(
    unsafe impl MPSCNNDilatedPoolingMaxNode {
        #[method(dilationRateX)]
        pub unsafe fn dilationRateX(&self) -> NSUInteger;

        #[method(dilationRateY)]
        pub unsafe fn dilationRateY(&self) -> NSUInteger;

        /// Convenience initializer for MPSCNNDilatedPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = dilationRateX = dilationRateY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNDilatedPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:)]
        pub unsafe fn nodeWithSource_filterSize(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNDilatedPooling nodes with square kernels and equal dilation factors
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Parameter `dilationRate`: dilationRateX = dilationRateY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNDilatedPooling kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:filterSize:stride:dilationRate:)]
        pub unsafe fn nodeWithSource_filterSize_stride_dilationRate(
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
            dilation_rate: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNPooling kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `kernelWidth`: The width of the max filter window
        ///
        /// Parameter `kernelHeight`: The height of the max filter window
        ///
        /// Parameter `strideInPixelsX`: The output stride (downsampling factor) in the x dimension.
        ///
        /// Parameter `strideInPixelsY`: The output stride (downsampling factor) in the y dimension.
        ///
        /// Parameter `dilationRateX`: The dilation factor in the x dimension.
        ///
        /// Parameter `dilationRateY`: The dilation factor in the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:)]
        pub unsafe fn initWithSource_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            dilation_rate_x: NSUInteger,
            dilation_rate_y: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNDilatedPooling nodes with square kernels and equal dilation factors
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = size
        ///
        /// Parameter `stride`: strideInPixelsX = strideInPixelsY = stride
        ///
        /// Parameter `dilationRate`: dilationRateX = dilationRateY = stride
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNDilatedPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:stride:dilationRate:)]
        pub unsafe fn initWithSource_filterSize_stride_dilationRate(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
            stride: NSUInteger,
            dilation_rate: NSUInteger,
        ) -> Retained<Self>;

        /// Convenience initializer for MPSCNNDilatedPooling nodes with square non-overlapping kernels
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `size`: kernelWidth = kernelHeight = strideInPixelsX = strideInPixelsY = dilationRateX = dilationRateY = size
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNDilatedPooling kernel.
        #[method_id(@__retain_semantics Init initWithSource:filterSize:)]
        pub unsafe fn initWithSource_filterSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNDilatedPoolingMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNDilatedPoolingMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolinggradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingGradientNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingGradientNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        #[method(strideInPixelsX)]
        pub unsafe fn strideInPixelsX(&self) -> NSUInteger;

        #[method(strideInPixelsY)]
        pub unsafe fn strideInPixelsY(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingmaxgradientnode?language=objc)
    #[unsafe(super(
        MPSCNNPoolingGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingMaxGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingMaxGradientNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingMaxGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingGradientNode`
    unsafe impl MPSCNNPoolingMaxGradientNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingMaxGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingMaxGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingaveragegradientnode?language=objc)
    #[unsafe(super(
        MPSCNNPoolingGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingAverageGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingAverageGradientNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingAverageGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingGradientNode`
    unsafe impl MPSCNNPoolingAverageGradientNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingAverageGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingAverageGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnpoolingl2normgradientnode?language=objc)
    #[unsafe(super(
        MPSCNNPoolingGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNPoolingL2NormGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNPoolingL2NormGradientNode {}

extern_methods!(
    unsafe impl MPSCNNPoolingL2NormGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingGradientNode`
    unsafe impl MPSCNNPoolingL2NormGradientNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNPoolingL2NormGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNPoolingL2NormGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnndilatedpoolingmaxgradientnode?language=objc)
    #[unsafe(super(
        MPSCNNPoolingGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNDilatedPoolingMaxGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNDilatedPoolingMaxGradientNode {}

extern_methods!(
    unsafe impl MPSCNNDilatedPoolingMaxGradientNode {
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            dilation_rate_x: NSUInteger,
            dilation_rate_y: NSUInteger,
        ) -> Retained<Self>;

        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            dilation_rate_x: NSUInteger,
            dilation_rate_y: NSUInteger,
        ) -> Retained<Self>;

        #[method(dilationRateX)]
        pub unsafe fn dilationRateX(&self) -> NSUInteger;

        #[method(dilationRateY)]
        pub unsafe fn dilationRateY(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNPoolingGradientNode`
    unsafe impl MPSCNNDilatedPoolingMaxGradientNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// make a pooling gradient node
        ///
        /// It would be much easier to use [inferencePoolingNode gradientNodeForSourceGradient:] instead.
        ///
        /// Parameter `sourceGradient`: The gradient from the downstream gradient filter.
        ///
        /// Parameter `sourceImage`: The input image to the inference pooling filter
        ///
        /// Parameter `gradientState`: The gradient state produced by the inference poolin filter
        ///
        /// Parameter `kernelWidth`: The kernel width of the inference filter
        ///
        /// Parameter `kernelHeight`: The kernel height of the inference filter
        ///
        /// Parameter `strideInPixelsX`: The X stride from the inference filter
        ///
        /// Parameter `strideInPixelsY`: The Y stride from the inference filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_paddingPolicy(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_pixels_x: NSUInteger,
            stride_in_pixels_y: NSUInteger,
            padding_policy: Option<&ProtocolObject<dyn MPSNNPadding>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNDilatedPoolingMaxGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNDilatedPoolingMaxGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// virtual base class for CNN normalization nodes
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnnormalizationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNNormalizationNode;
);

unsafe impl NSObjectProtocol for MPSCNNNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNNormalizationNode {
        /// The value of alpha.  Default is 1.0. Must be non-negative.
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> c_float;

        /// Setter for [`alpha`][Self::alpha].
        #[method(setAlpha:)]
        pub unsafe fn setAlpha(&self, alpha: c_float);

        /// The value of beta.  Default is 5.0
        #[method(beta)]
        pub unsafe fn beta(&self) -> c_float;

        /// Setter for [`beta`][Self::beta].
        #[method(setBeta:)]
        pub unsafe fn setBeta(&self, beta: c_float);

        /// The value of delta.  Default is 1.0
        #[method(delta)]
        pub unsafe fn delta(&self) -> c_float;

        /// Setter for [`delta`][Self::delta].
        #[method(setDelta:)]
        pub unsafe fn setDelta(&self, delta: c_float);

        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing MPSCNNSpatialNormalization
    ///
    /// For each feature channel, the function computes the sum of squares of X inside each rectangle, N2(i,j).
    /// It then divides each element of X as follows:
    /// Y(i,j) = X(i,j) / (delta + alpha/(kw*kh) * N2(i,j))^beta,
    /// where kw and kh are the kernelWidth and the kernelHeight.
    ///
    ///
    /// ```text
    ///         Defaults:
    ///              alpha = 1.0f
    ///              beta  = 5.0f
    ///              delta = 1.0f
    ///              kernelHeight = kernelWidth = kernelSize
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnspatialnormalizationnode?language=objc)
    #[unsafe(super(MPSCNNNormalizationNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNSpatialNormalizationNode;
);

unsafe impl NSObjectProtocol for MPSCNNSpatialNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNSpatialNormalizationNode {
        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// Setter for [`kernelWidth`][Self::kernelWidth].
        #[method(setKernelWidth:)]
        pub unsafe fn setKernelWidth(&self, kernel_width: NSUInteger);

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Setter for [`kernelHeight`][Self::kernelHeight].
        #[method(setKernelHeight:)]
        pub unsafe fn setKernelHeight(&self, kernel_height: NSUInteger);

        #[method_id(@__retain_semantics Other nodeWithSource:kernelSize:)]
        pub unsafe fn nodeWithSource_kernelSize(
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:kernelSize:)]
        pub unsafe fn initWithSource_kernelSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNormalizationNode`
    unsafe impl MPSCNNSpatialNormalizationNode {
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNSpatialNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNSpatialNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnspatialnormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNSpatialNormalizationGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNSpatialNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNSpatialNormalizationGradientNode {
        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// Setter for [`kernelWidth`][Self::kernelWidth].
        #[method(setKernelWidth:)]
        pub unsafe fn setKernelWidth(&self, kernel_width: NSUInteger);

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Setter for [`kernelHeight`][Self::kernelHeight].
        #[method(setKernelHeight:)]
        pub unsafe fn setKernelHeight(&self, kernel_height: NSUInteger);

        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelSize:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelSize(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelSize:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelSize(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        /// The value of alpha.  Default is 1.0. Must be non-negative.
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> c_float;

        /// Setter for [`alpha`][Self::alpha].
        #[method(setAlpha:)]
        pub unsafe fn setAlpha(&self, alpha: c_float);

        /// The value of beta.  Default is 5.0
        #[method(beta)]
        pub unsafe fn beta(&self) -> c_float;

        /// Setter for [`beta`][Self::beta].
        #[method(setBeta:)]
        pub unsafe fn setBeta(&self, beta: c_float);

        /// The value of delta.  Default is 1.0
        #[method(delta)]
        pub unsafe fn delta(&self) -> c_float;

        /// Setter for [`delta`][Self::delta].
        #[method(setDelta:)]
        pub unsafe fn setDelta(&self, delta: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNSpatialNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNSpatialNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing MPSCNNLocalContrastNormalization
    ///
    /// The result is computed for each element of X as follows:
    ///
    /// Y(i,j) = pm + ps * ( X(i,j) - p0 * M(i,j)) / pow((delta + alpha * variance(i,j)), beta),
    ///
    /// where kw and kh are the kernelWidth and the kernelHeight and pm, ps and p0 are parameters that
    /// can be used to offset and scale the result in various ways. *
    ///
    /// ```text
    ///         Defaults:
    ///              alpha = 1.0f
    ///              beta  = 0.5f
    ///              delta = 2^-10
    ///              pm = 0
    ///              ps = 1
    ///              p0 = 1
    ///              kernelHeight = kernelWidth = kernelSize
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnlocalcontrastnormalizationnode?language=objc)
    #[unsafe(super(MPSCNNNormalizationNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNLocalContrastNormalizationNode;
);

unsafe impl NSObjectProtocol for MPSCNNLocalContrastNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNLocalContrastNormalizationNode {
        #[method(pm)]
        pub unsafe fn pm(&self) -> c_float;

        /// Setter for [`pm`][Self::pm].
        #[method(setPm:)]
        pub unsafe fn setPm(&self, pm: c_float);

        #[method(ps)]
        pub unsafe fn ps(&self) -> c_float;

        /// Setter for [`ps`][Self::ps].
        #[method(setPs:)]
        pub unsafe fn setPs(&self, ps: c_float);

        #[method(p0)]
        pub unsafe fn p0(&self) -> c_float;

        /// Setter for [`p0`][Self::p0].
        #[method(setP0:)]
        pub unsafe fn setP0(&self, p0: c_float);

        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// Setter for [`kernelWidth`][Self::kernelWidth].
        #[method(setKernelWidth:)]
        pub unsafe fn setKernelWidth(&self, kernel_width: NSUInteger);

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Setter for [`kernelHeight`][Self::kernelHeight].
        #[method(setKernelHeight:)]
        pub unsafe fn setKernelHeight(&self, kernel_height: NSUInteger);

        #[method_id(@__retain_semantics Other nodeWithSource:kernelSize:)]
        pub unsafe fn nodeWithSource_kernelSize(
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:kernelSize:)]
        pub unsafe fn initWithSource_kernelSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNormalizationNode`
    unsafe impl MPSCNNLocalContrastNormalizationNode {
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNLocalContrastNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNLocalContrastNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnlocalcontrastnormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNLocalContrastNormalizationGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNLocalContrastNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNLocalContrastNormalizationGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelWidth_kernelHeight(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
        ) -> Retained<Self>;

        /// The value of alpha.  Default is 0.0
        ///
        /// The default value 0.0 is not recommended and is
        /// preserved for backwards compatibility. With alpha 0,
        /// it performs a local mean subtraction. The
        /// MPSCNNLocalContrastNormalizationNode used with
        /// the MPSNNGraph uses 1.0 as a default.
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> c_float;

        /// Setter for [`alpha`][Self::alpha].
        #[method(setAlpha:)]
        pub unsafe fn setAlpha(&self, alpha: c_float);

        /// The value of beta.  Default is 0.5
        #[method(beta)]
        pub unsafe fn beta(&self) -> c_float;

        /// Setter for [`beta`][Self::beta].
        #[method(setBeta:)]
        pub unsafe fn setBeta(&self, beta: c_float);

        /// The value of delta.  Default is 1/1024
        #[method(delta)]
        pub unsafe fn delta(&self) -> c_float;

        /// Setter for [`delta`][Self::delta].
        #[method(setDelta:)]
        pub unsafe fn setDelta(&self, delta: c_float);

        /// The value of p0.  Default is 1.0
        #[method(p0)]
        pub unsafe fn p0(&self) -> c_float;

        /// Setter for [`p0`][Self::p0].
        #[method(setP0:)]
        pub unsafe fn setP0(&self, p0: c_float);

        /// The value of pm.  Default is 0.0
        #[method(pm)]
        pub unsafe fn pm(&self) -> c_float;

        /// Setter for [`pm`][Self::pm].
        #[method(setPm:)]
        pub unsafe fn setPm(&self, pm: c_float);

        /// The value of ps.  Default is 1.0
        #[method(ps)]
        pub unsafe fn ps(&self) -> c_float;

        /// Setter for [`ps`][Self::ps].
        #[method(setPs:)]
        pub unsafe fn setPs(&self, ps: c_float);

        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNLocalContrastNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNLocalContrastNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing MPSCNNCrossChannelNormalization
    ///
    /// The normalized output is given by:
    /// Y(i,j,k) = X(i,j,k) / L(i,j,k)^beta,
    /// where the normalizing factor is:
    /// L(i,j,k) = delta + alpha/N * (sum_{q in Q(k)} X(i,j,q)^2, where
    /// N is the kernel size. The window Q(k) itself is defined as:
    /// Q(k) = [max(0, k-floor(N/2)), min(D-1, k+floor((N-1)/2)], where
    ///
    /// k is the feature channel index (running from 0 to D-1) and
    /// D is the number of feature channels, and alpha, beta and delta are paremeters.
    ///
    /// ```text
    ///         Defaults:
    ///              alpha = 1.0f
    ///              beta  = 5.0f
    ///              delta = 1.0f
    ///              kernelHeight = kernelWidth = kernelSize
    /// ```
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnncrosschannelnormalizationnode?language=objc)
    #[unsafe(super(MPSCNNNormalizationNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNCrossChannelNormalizationNode;
);

unsafe impl NSObjectProtocol for MPSCNNCrossChannelNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNCrossChannelNormalizationNode {
        #[method(kernelSizeInFeatureChannels)]
        pub unsafe fn kernelSizeInFeatureChannels(&self) -> NSUInteger;

        /// Setter for [`kernelSizeInFeatureChannels`][Self::kernelSizeInFeatureChannels].
        #[method(setKernelSizeInFeatureChannels:)]
        pub unsafe fn setKernelSizeInFeatureChannels(
            &self,
            kernel_size_in_feature_channels: NSUInteger,
        );

        #[method_id(@__retain_semantics Other nodeWithSource:kernelSize:)]
        pub unsafe fn nodeWithSource_kernelSize(
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:kernelSize:)]
        pub unsafe fn initWithSource_kernelSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSCNNNormalizationNode`
    unsafe impl MPSCNNCrossChannelNormalizationNode {
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNCrossChannelNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNCrossChannelNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnncrosschannelnormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNCrossChannelNormalizationGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNCrossChannelNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNCrossChannelNormalizationGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:kernelSize:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_kernelSize(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:kernelSize:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_kernelSize(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            kernel_size: NSUInteger,
        ) -> Retained<Self>;

        #[method(kernelSize)]
        pub unsafe fn kernelSize(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNCrossChannelNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNCrossChannelNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnninstancenormalizationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNInstanceNormalizationNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNInstanceNormalizationNode {}

unsafe impl NSObjectProtocol for MPSCNNInstanceNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNInstanceNormalizationNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// The training style of the forward node will be propagated to gradient nodes made from it
        #[method(trainingStyle)]
        pub unsafe fn trainingStyle(&self) -> MPSNNTrainingStyle;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`trainingStyle`][Self::trainingStyle].
        #[method(setTrainingStyle:)]
        pub unsafe fn setTrainingStyle(&self, training_style: MPSNNTrainingStyle);

        #[cfg(feature = "MPSCNNInstanceNormalization")]
        #[method_id(@__retain_semantics Other nodeWithSource:dataSource:)]
        pub unsafe fn nodeWithSource_dataSource(
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNInstanceNormalizationDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNInstanceNormalization")]
        #[method_id(@__retain_semantics Init initWithSource:dataSource:)]
        pub unsafe fn initWithSource_dataSource(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNInstanceNormalizationDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNInstanceNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNInstanceNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnninstancenormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNInstanceNormalizationGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNInstanceNormalizationGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNInstanceNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNInstanceNormalizationGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNInstanceNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNInstanceNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnngroupnormalizationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNGroupNormalizationNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNGroupNormalizationNode {}

unsafe impl NSObjectProtocol for MPSCNNGroupNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNGroupNormalizationNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// The training style of the forward node will be propagated to gradient nodes made from it
        #[method(trainingStyle)]
        pub unsafe fn trainingStyle(&self) -> MPSNNTrainingStyle;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`trainingStyle`][Self::trainingStyle].
        #[method(setTrainingStyle:)]
        pub unsafe fn setTrainingStyle(&self, training_style: MPSNNTrainingStyle);

        #[cfg(feature = "MPSCNNGroupNormalization")]
        #[method_id(@__retain_semantics Other nodeWithSource:dataSource:)]
        pub unsafe fn nodeWithSource_dataSource(
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNGroupNormalizationDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNGroupNormalization")]
        #[method_id(@__retain_semantics Init initWithSource:dataSource:)]
        pub unsafe fn initWithSource_dataSource(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNGroupNormalizationDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNGroupNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNGroupNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnngroupnormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNGroupNormalizationGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNGroupNormalizationGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNGroupNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNGroupNormalizationGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNGroupNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNGroupNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing batch normalization for inference or training
    ///
    /// Batch normalization operates differently for inference and training.
    /// For inference, the normalization is done according to a static statistical
    /// representation of data saved during training. For training, this representation
    /// is ever evolving.  In the low level MPS batch normalization interface,
    /// during training, the batch normalization is broken up into two steps:
    /// calculation of the statistical representation of input data, followed
    /// by normalization once the statistics are known for the entire batch.
    /// These are MPSCNNBatchNormalizationStatistics and MPSCNNBatchNormalization,
    /// respectively.
    ///
    /// When this node appears in a graph and is not required to produce a
    /// MPSCNNBatchNormalizationState -- that is, MPSCNNBatchNormalizationNode.resultState
    /// is not used within the graph -- then it operates in inference mode
    /// and new batch-only statistics are not calculated. When this state node
    /// is consumed, then the node is assumed to be in training mode and
    /// new statistics will be calculated and written to the MPSCNNBatchNormalizationState
    /// and passed along to the MPSCNNBatchNormalizationGradient and
    /// MPSCNNBatchNormalizationStatisticsGradient as necessary. This should
    /// allow you to construct an identical sequence of nodes for inference
    /// and training and expect the right thing to happen.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbatchnormalizationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNBatchNormalizationNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNBatchNormalizationNode {}

unsafe impl NSObjectProtocol for MPSCNNBatchNormalizationNode {}

extern_methods!(
    unsafe impl MPSCNNBatchNormalizationNode {
        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Options controlling how batch normalization is calculated
        ///
        /// Default: MPSCNNBatchNormalizationFlagsDefault
        #[method(flags)]
        pub unsafe fn flags(&self) -> MPSCNNBatchNormalizationFlags;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`flags`][Self::flags].
        #[method(setFlags:)]
        pub unsafe fn setFlags(&self, flags: MPSCNNBatchNormalizationFlags);

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// The training style of the forward node will be propagated to gradient nodes made from it
        #[method(trainingStyle)]
        pub unsafe fn trainingStyle(&self) -> MPSNNTrainingStyle;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        /// Setter for [`trainingStyle`][Self::trainingStyle].
        #[method(setTrainingStyle:)]
        pub unsafe fn setTrainingStyle(&self, training_style: MPSNNTrainingStyle);

        #[cfg(feature = "MPSCNNBatchNormalization")]
        #[method_id(@__retain_semantics Other nodeWithSource:dataSource:)]
        pub unsafe fn nodeWithSource_dataSource(
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNBatchNormalizationDataSource>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNBatchNormalization")]
        #[method_id(@__retain_semantics Init initWithSource:dataSource:)]
        pub unsafe fn initWithSource_dataSource(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            data_source: &ProtocolObject<dyn MPSCNNBatchNormalizationDataSource>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNBatchNormalizationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNBatchNormalizationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node representing batch normalization gradient for training
    ///
    /// This filter encapsulates the MPSCNNBatchNormalizationStatisticsGradient
    /// and MPSCNNBatchNormalizationGradient low level filters as a single
    /// node. They will be called in sequence: statistics gradient until the
    /// batch is complete, then batch normalization gradient on the result.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbatchnormalizationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNBatchNormalizationGradientNode;
);

unsafe impl MPSNNTrainableNode for MPSCNNBatchNormalizationGradientNode {}

unsafe impl NSObjectProtocol for MPSCNNBatchNormalizationGradientNode {}

extern_methods!(
    unsafe impl MPSCNNBatchNormalizationGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNBatchNormalizationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNBatchNormalizationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsimagetransformprovider?language=objc)
    pub unsafe trait MPSImageTransformProvider: NSObjectProtocol + NSSecureCoding {
        #[cfg(all(feature = "MPSCoreTypes", feature = "MPSImage"))]
        #[method(transformForSourceImage:handle:)]
        unsafe fn transformForSourceImage_handle(
            &self,
            image: &MPSImage,
            handle: Option<&ProtocolObject<dyn MPSHandle>>,
        ) -> MPSScaleTransform;
    }
);

extern_class!(
    /// Abstract Node representing a image resampling operation
    ///
    /// Please make a MPSNNBilinearScale or MPSNNLanczosScale object instead
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnscalenode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNScaleNode;
);

unsafe impl NSObjectProtocol for MPSNNScaleNode {}

extern_methods!(
    unsafe impl MPSNNScaleNode {
        /// create an autoreleased node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:outputSize:)]
        pub unsafe fn nodeWithSource_outputSize(
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// create an autoreleased node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:transformProvider:outputSize:)]
        pub unsafe fn nodeWithSource_transformProvider_outputSize(
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:outputSize:)]
        pub unsafe fn initWithSource_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:transformProvider:outputSize:)]
        pub unsafe fn initWithSource_transformProvider_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNScaleNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNScaleNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNScale object that uses bilinear interpolation for resampling
    ///
    /// Caution: bilinear downscaling by more than a factor of
    /// two in any dimension causes loss of information if a
    /// low pass filter is not run over the image first. Details
    /// may be omitted.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnbilinearscalenode?language=objc)
    #[unsafe(super(MPSNNScaleNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNBilinearScaleNode;
);

unsafe impl NSObjectProtocol for MPSNNBilinearScaleNode {}

extern_methods!(
    unsafe impl MPSNNBilinearScaleNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNScaleNode`
    unsafe impl MPSNNBilinearScaleNode {
        /// create an autoreleased node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:outputSize:)]
        pub unsafe fn nodeWithSource_outputSize(
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// create an autoreleased node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:transformProvider:outputSize:)]
        pub unsafe fn nodeWithSource_transformProvider_outputSize(
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:outputSize:)]
        pub unsafe fn initWithSource_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:transformProvider:outputSize:)]
        pub unsafe fn initWithSource_transformProvider_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNBilinearScaleNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNBilinearScaleNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNScale object that uses the Lanczos resampling filter
    ///
    /// This method does not require a low pass filter for downsampling
    /// by more than a factor of two. Caution: may cause ringing, which
    /// could prove distracting to a neural network unused to seeing it.
    /// You should use the resampling method that was used to train the
    /// network.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnlanczosscalenode?language=objc)
    #[unsafe(super(MPSNNScaleNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNLanczosScaleNode;
);

unsafe impl NSObjectProtocol for MPSNNLanczosScaleNode {}

extern_methods!(
    unsafe impl MPSNNLanczosScaleNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNScaleNode`
    unsafe impl MPSNNLanczosScaleNode {
        /// create an autoreleased node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:outputSize:)]
        pub unsafe fn nodeWithSource_outputSize(
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// create an autoreleased node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Other nodeWithSource:transformProvider:outputSize:)]
        pub unsafe fn nodeWithSource_transformProvider_outputSize(
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:outputSize:)]
        pub unsafe fn initWithSource_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            size: MTLSize,
        ) -> Retained<Self>;

        /// init a node to convert a MPSImage to the desired size for a region of interest
        ///
        /// Parameter `sourceNode`: A valid MPSNNImageNode
        ///
        /// Parameter `transformProvider`: If non-nil, a valid MPSImageTransformProvider that provides the region of interest
        ///
        /// Parameter `size`: The size of the output image {width, height, depth}
        #[method_id(@__retain_semantics Init initWithSource:transformProvider:outputSize:)]
        pub unsafe fn initWithSource_transformProvider_outputSize(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            transform_provider: Option<&ProtocolObject<dyn MPSImageTransformProvider>>,
            size: MTLSize,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNLanczosScaleNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNLanczosScaleNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// virtual base class for basic arithmetic nodes
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnbinaryarithmeticnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNBinaryArithmeticNode;
);

unsafe impl NSObjectProtocol for MPSNNBinaryArithmeticNode {}

extern_methods!(
    unsafe impl MPSNNBinaryArithmeticNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        #[method(gradientClass)]
        pub unsafe fn gradientClass(&self) -> &'static AnyClass;

        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;

        /// create new arithmetic gradient nodes
        ///
        /// Create two new arithmetic gradient nodes - one that computes the gradient for the primary
        /// source image and one that computes the gradient for the secondary sourcefrom the inference pass.
        #[method_id(@__retain_semantics Other gradientFiltersWithSources:)]
        pub unsafe fn gradientFiltersWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<NSArray<MPSNNGradientFilterNode>>;

        #[method(primaryScale)]
        pub unsafe fn primaryScale(&self) -> c_float;

        /// Setter for [`primaryScale`][Self::primaryScale].
        #[method(setPrimaryScale:)]
        pub unsafe fn setPrimaryScale(&self, primary_scale: c_float);

        #[method(secondaryScale)]
        pub unsafe fn secondaryScale(&self) -> c_float;

        /// Setter for [`secondaryScale`][Self::secondaryScale].
        #[method(setSecondaryScale:)]
        pub unsafe fn setSecondaryScale(&self, secondary_scale: c_float);

        #[method(bias)]
        pub unsafe fn bias(&self) -> c_float;

        /// Setter for [`bias`][Self::bias].
        #[method(setBias:)]
        pub unsafe fn setBias(&self, bias: c_float);

        #[method(primaryStrideInPixelsX)]
        pub unsafe fn primaryStrideInPixelsX(&self) -> NSUInteger;

        /// Setter for [`primaryStrideInPixelsX`][Self::primaryStrideInPixelsX].
        #[method(setPrimaryStrideInPixelsX:)]
        pub unsafe fn setPrimaryStrideInPixelsX(&self, primary_stride_in_pixels_x: NSUInteger);

        #[method(primaryStrideInPixelsY)]
        pub unsafe fn primaryStrideInPixelsY(&self) -> NSUInteger;

        /// Setter for [`primaryStrideInPixelsY`][Self::primaryStrideInPixelsY].
        #[method(setPrimaryStrideInPixelsY:)]
        pub unsafe fn setPrimaryStrideInPixelsY(&self, primary_stride_in_pixels_y: NSUInteger);

        #[method(primaryStrideInFeatureChannels)]
        pub unsafe fn primaryStrideInFeatureChannels(&self) -> NSUInteger;

        /// Setter for [`primaryStrideInFeatureChannels`][Self::primaryStrideInFeatureChannels].
        #[method(setPrimaryStrideInFeatureChannels:)]
        pub unsafe fn setPrimaryStrideInFeatureChannels(
            &self,
            primary_stride_in_feature_channels: NSUInteger,
        );

        #[method(secondaryStrideInPixelsX)]
        pub unsafe fn secondaryStrideInPixelsX(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInPixelsX`][Self::secondaryStrideInPixelsX].
        #[method(setSecondaryStrideInPixelsX:)]
        pub unsafe fn setSecondaryStrideInPixelsX(&self, secondary_stride_in_pixels_x: NSUInteger);

        #[method(secondaryStrideInPixelsY)]
        pub unsafe fn secondaryStrideInPixelsY(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInPixelsY`][Self::secondaryStrideInPixelsY].
        #[method(setSecondaryStrideInPixelsY:)]
        pub unsafe fn setSecondaryStrideInPixelsY(&self, secondary_stride_in_pixels_y: NSUInteger);

        #[method(secondaryStrideInFeatureChannels)]
        pub unsafe fn secondaryStrideInFeatureChannels(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInFeatureChannels`][Self::secondaryStrideInFeatureChannels].
        #[method(setSecondaryStrideInFeatureChannels:)]
        pub unsafe fn setSecondaryStrideInFeatureChannels(
            &self,
            secondary_stride_in_feature_channels: NSUInteger,
        );

        #[method(minimumValue)]
        pub unsafe fn minimumValue(&self) -> c_float;

        /// Setter for [`minimumValue`][Self::minimumValue].
        #[method(setMinimumValue:)]
        pub unsafe fn setMinimumValue(&self, minimum_value: c_float);

        #[method(maximumValue)]
        pub unsafe fn maximumValue(&self) -> c_float;

        /// Setter for [`maximumValue`][Self::maximumValue].
        #[method(setMaximumValue:)]
        pub unsafe fn setMaximumValue(&self, maximum_value: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNBinaryArithmeticNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNBinaryArithmeticNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns elementwise sum of left + right
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnadditionnode?language=objc)
    #[unsafe(super(MPSNNBinaryArithmeticNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNAdditionNode;
);

unsafe impl NSObjectProtocol for MPSNNAdditionNode {}

extern_methods!(
    unsafe impl MPSNNAdditionNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNBinaryArithmeticNode`
    unsafe impl MPSNNAdditionNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNAdditionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNAdditionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns elementwise difference of left - right
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnsubtractionnode?language=objc)
    #[unsafe(super(MPSNNBinaryArithmeticNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNSubtractionNode;
);

unsafe impl NSObjectProtocol for MPSNNSubtractionNode {}

extern_methods!(
    unsafe impl MPSNNSubtractionNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNBinaryArithmeticNode`
    unsafe impl MPSNNSubtractionNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNSubtractionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNSubtractionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns elementwise product of left * right
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnmultiplicationnode?language=objc)
    #[unsafe(super(MPSNNBinaryArithmeticNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNMultiplicationNode;
);

unsafe impl NSObjectProtocol for MPSNNMultiplicationNode {}

extern_methods!(
    unsafe impl MPSNNMultiplicationNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNBinaryArithmeticNode`
    unsafe impl MPSNNMultiplicationNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNMultiplicationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNMultiplicationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns elementwise quotient of left / right
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnndivisionnode?language=objc)
    #[unsafe(super(MPSNNBinaryArithmeticNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNDivisionNode;
);

unsafe impl NSObjectProtocol for MPSNNDivisionNode {}

extern_methods!(
    unsafe impl MPSNNDivisionNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNBinaryArithmeticNode`
    unsafe impl MPSNNDivisionNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNDivisionNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNDivisionNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns elementwise comparison of left and right
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnncomparisonnode?language=objc)
    #[unsafe(super(MPSNNBinaryArithmeticNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNComparisonNode;
);

unsafe impl NSObjectProtocol for MPSNNComparisonNode {}

extern_methods!(
    unsafe impl MPSNNComparisonNode {
        #[cfg(feature = "MPSCNNMath")]
        /// The comparison type to set on the underlying kernel.  Defaults
        /// to MPSNNComparisonTypeEqual.
        #[method(comparisonType)]
        pub unsafe fn comparisonType(&self) -> MPSNNComparisonType;

        #[cfg(feature = "MPSCNNMath")]
        /// Setter for [`comparisonType`][Self::comparisonType].
        #[method(setComparisonType:)]
        pub unsafe fn setComparisonType(&self, comparison_type: MPSNNComparisonType);
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNBinaryArithmeticNode`
    unsafe impl MPSNNComparisonNode {
        /// create an autoreleased arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// create an autoreleased arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Other nodeWithLeftSource:rightSource:)]
        pub unsafe fn nodeWithLeftSource_rightSource(
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// init an arithemtic node with an array of sources
        ///
        /// Parameter `sourceNodes`: A valid NSArray containing two sources
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// init an arithemtic node with two sources
        ///
        /// Parameter `left`: the left operand
        ///
        /// Parameter `right`: the right operand
        #[method_id(@__retain_semantics Init initWithLeftSource:rightSource:)]
        pub unsafe fn initWithLeftSource_rightSource(
            this: Allocated<Self>,
            left: &MPSNNImageNode,
            right: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNComparisonNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNComparisonNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnarithmeticgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNArithmeticGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNArithmeticGradientNode {}

extern_methods!(
    unsafe impl MPSNNArithmeticGradientNode {
        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `gradientImages`: The input gradient from the 'downstream' gradient filter and the source input image
        /// from the forward pass (primary or secondary).
        ///
        /// Parameter `filter`: The matching filter node from the forward pass.
        ///
        /// Parameter `isSecondarySourceFilter`: The isSecondarySourceFilter property is used to indicate whether the arithmetic
        /// gradient filter is operating on the primary or secondary source image from the
        /// forward pass.
        #[method_id(@__retain_semantics Init initWithGradientImages:forwardFilter:isSecondarySourceFilter:)]
        pub unsafe fn initWithGradientImages_forwardFilter_isSecondarySourceFilter(
            this: Allocated<Self>,
            gradient_images: &NSArray<MPSNNImageNode>,
            filter: &MPSNNFilterNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        #[method(primaryScale)]
        pub unsafe fn primaryScale(&self) -> c_float;

        /// Setter for [`primaryScale`][Self::primaryScale].
        #[method(setPrimaryScale:)]
        pub unsafe fn setPrimaryScale(&self, primary_scale: c_float);

        #[method(secondaryScale)]
        pub unsafe fn secondaryScale(&self) -> c_float;

        /// Setter for [`secondaryScale`][Self::secondaryScale].
        #[method(setSecondaryScale:)]
        pub unsafe fn setSecondaryScale(&self, secondary_scale: c_float);

        #[method(bias)]
        pub unsafe fn bias(&self) -> c_float;

        /// Setter for [`bias`][Self::bias].
        #[method(setBias:)]
        pub unsafe fn setBias(&self, bias: c_float);

        #[method(secondaryStrideInPixelsX)]
        pub unsafe fn secondaryStrideInPixelsX(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInPixelsX`][Self::secondaryStrideInPixelsX].
        #[method(setSecondaryStrideInPixelsX:)]
        pub unsafe fn setSecondaryStrideInPixelsX(&self, secondary_stride_in_pixels_x: NSUInteger);

        #[method(secondaryStrideInPixelsY)]
        pub unsafe fn secondaryStrideInPixelsY(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInPixelsY`][Self::secondaryStrideInPixelsY].
        #[method(setSecondaryStrideInPixelsY:)]
        pub unsafe fn setSecondaryStrideInPixelsY(&self, secondary_stride_in_pixels_y: NSUInteger);

        #[method(secondaryStrideInFeatureChannels)]
        pub unsafe fn secondaryStrideInFeatureChannels(&self) -> NSUInteger;

        /// Setter for [`secondaryStrideInFeatureChannels`][Self::secondaryStrideInFeatureChannels].
        #[method(setSecondaryStrideInFeatureChannels:)]
        pub unsafe fn setSecondaryStrideInFeatureChannels(
            &self,
            secondary_stride_in_feature_channels: NSUInteger,
        );

        #[method(minimumValue)]
        pub unsafe fn minimumValue(&self) -> c_float;

        /// Setter for [`minimumValue`][Self::minimumValue].
        #[method(setMinimumValue:)]
        pub unsafe fn setMinimumValue(&self, minimum_value: c_float);

        #[method(maximumValue)]
        pub unsafe fn maximumValue(&self) -> c_float;

        /// Setter for [`maximumValue`][Self::maximumValue].
        #[method(setMaximumValue:)]
        pub unsafe fn setMaximumValue(&self, maximum_value: c_float);

        #[method(isSecondarySourceFilter)]
        pub unsafe fn isSecondarySourceFilter(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNArithmeticGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNArithmeticGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns gradient for either primary or secondary source image from the inference pass.
    /// Use the isSecondarySourceFilter property to indicate whether this filter is computing the gradient
    /// for the primary or secondary source image from the inference pass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnadditiongradientnode?language=objc)
    #[unsafe(super(
        MPSNNArithmeticGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNAdditionGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNAdditionGradientNode {}

extern_methods!(
    unsafe impl MPSNNAdditionGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNArithmeticGradientNode`
    unsafe impl MPSNNAdditionGradientNode {
        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `gradientImages`: The input gradient from the 'downstream' gradient filter and the source input image
        /// from the forward pass (primary or secondary).
        ///
        /// Parameter `filter`: The matching filter node from the forward pass.
        ///
        /// Parameter `isSecondarySourceFilter`: The isSecondarySourceFilter property is used to indicate whether the arithmetic
        /// gradient filter is operating on the primary or secondary source image from the
        /// forward pass.
        #[method_id(@__retain_semantics Init initWithGradientImages:forwardFilter:isSecondarySourceFilter:)]
        pub unsafe fn initWithGradientImages_forwardFilter_isSecondarySourceFilter(
            this: Allocated<Self>,
            gradient_images: &NSArray<MPSNNImageNode>,
            filter: &MPSNNFilterNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNAdditionGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNAdditionGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns gradient for either primary or secondary source image from the inference pass.
    /// Use the isSecondarySourceFilter property to indicate whether this filter is computing the gradient
    /// for the primary or secondary source image from the inference pass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnsubtractiongradientnode?language=objc)
    #[unsafe(super(
        MPSNNArithmeticGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNSubtractionGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNSubtractionGradientNode {}

extern_methods!(
    unsafe impl MPSNNSubtractionGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNArithmeticGradientNode`
    unsafe impl MPSNNSubtractionGradientNode {
        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `gradientImages`: The input gradient from the 'downstream' gradient filter and the source input image
        /// from the forward pass (primary or secondary).
        ///
        /// Parameter `filter`: The matching filter node from the forward pass.
        ///
        /// Parameter `isSecondarySourceFilter`: The isSecondarySourceFilter property is used to indicate whether the arithmetic
        /// gradient filter is operating on the primary or secondary source image from the
        /// forward pass.
        #[method_id(@__retain_semantics Init initWithGradientImages:forwardFilter:isSecondarySourceFilter:)]
        pub unsafe fn initWithGradientImages_forwardFilter_isSecondarySourceFilter(
            this: Allocated<Self>,
            gradient_images: &NSArray<MPSNNImageNode>,
            filter: &MPSNNFilterNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNSubtractionGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNSubtractionGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// returns gradient for either primary or secondary source image from the inference pass.
    /// Use the isSecondarySourceFilter property to indicate whether this filter is computing the gradient
    /// for the primary or secondary source image from the inference pass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnmultiplicationgradientnode?language=objc)
    #[unsafe(super(
        MPSNNArithmeticGradientNode,
        MPSNNGradientFilterNode,
        MPSNNFilterNode,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNMultiplicationGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNMultiplicationGradientNode {}

extern_methods!(
    unsafe impl MPSNNMultiplicationGradientNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNArithmeticGradientNode`
    unsafe impl MPSNNMultiplicationGradientNode {
        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The source input image from the forward pass (primary or secondary).
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter.
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_isSecondarySourceFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNBinaryGradientStateNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;

        /// create a new arithmetic gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodesWithSources:]
        /// for an easier way to do this.
        ///
        /// Parameter `gradientImages`: The input gradient from the 'downstream' gradient filter and the source input image
        /// from the forward pass (primary or secondary).
        ///
        /// Parameter `filter`: The matching filter node from the forward pass.
        ///
        /// Parameter `isSecondarySourceFilter`: The isSecondarySourceFilter property is used to indicate whether the arithmetic
        /// gradient filter is operating on the primary or secondary source image from the
        /// forward pass.
        #[method_id(@__retain_semantics Init initWithGradientImages:forwardFilter:isSecondarySourceFilter:)]
        pub unsafe fn initWithGradientImages_forwardFilter_isSecondarySourceFilter(
            this: Allocated<Self>,
            gradient_images: &NSArray<MPSNNImageNode>,
            filter: &MPSNNFilterNode,
            is_secondary_source_filter: bool,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNMultiplicationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNMultiplicationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnndropoutnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNDropoutNode;
);

unsafe impl NSObjectProtocol for MPSCNNDropoutNode {}

extern_methods!(
    unsafe impl MPSCNNDropoutNode {
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source: &MPSNNImageNode) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other nodeWithSource:keepProbability:)]
        pub unsafe fn nodeWithSource_keepProbability(
            source: &MPSNNImageNode,
            keep_probability: c_float,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:keepProbability:)]
        pub unsafe fn initWithSource_keepProbability(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            keep_probability: c_float,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other nodeWithSource:keepProbability:seed:maskStrideInPixels:)]
        pub unsafe fn nodeWithSource_keepProbability_seed_maskStrideInPixels(
            source: &MPSNNImageNode,
            keep_probability: c_float,
            seed: NSUInteger,
            mask_stride_in_pixels: MTLSize,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSource:keepProbability:seed:maskStrideInPixels:)]
        pub unsafe fn initWithSource_keepProbability_seed_maskStrideInPixels(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            keep_probability: c_float,
            seed: NSUInteger,
            mask_stride_in_pixels: MTLSize,
        ) -> Retained<Self>;

        #[method(keepProbability)]
        pub unsafe fn keepProbability(&self) -> c_float;

        #[method(seed)]
        pub unsafe fn seed(&self) -> NSUInteger;

        #[method(maskStrideInPixels)]
        pub unsafe fn maskStrideInPixels(&self) -> MTLSize;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNDropoutNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNDropoutNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnndropoutgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNDropoutGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNDropoutGradientNode {}

extern_methods!(
    unsafe impl MPSCNNDropoutGradientNode {
        /// create a new dropout gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodeWithSources:]
        /// for an easier way to do this
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:keepProbability:seed:maskStrideInPixels:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_keepProbability_seed_maskStrideInPixels(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            keep_probability: c_float,
            seed: NSUInteger,
            mask_stride_in_pixels: MTLSize,
        ) -> Retained<Self>;

        /// create a new dropout gradient node
        ///
        /// See also -[MPSCNNNeuronNode gradientFilterNodeWithSources:]
        /// for an easier way to do this
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:keepProbability:seed:maskStrideInPixels:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_keepProbability_seed_maskStrideInPixels(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            keep_probability: c_float,
            seed: NSUInteger,
            mask_stride_in_pixels: MTLSize,
        ) -> Retained<Self>;

        #[method(keepProbability)]
        pub unsafe fn keepProbability(&self) -> c_float;

        #[method(seed)]
        pub unsafe fn seed(&self) -> NSUInteger;

        #[method(maskStrideInPixels)]
        pub unsafe fn maskStrideInPixels(&self) -> MTLSize;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNDropoutGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNDropoutGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The labels and weights for each MPSImage are passed in
    /// separately to the graph in a MPSNNLabels object. If
    /// the batch interface is used then there will be a
    /// MPSStateBatch of these of the same size as the MPSImageBatch
    /// that holds the images.  The MPSNNLabelsNode is a place
    /// holder in the graph for these nodes. The MPSNNLabels node
    /// is taken as an input to the Loss node
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnlabelsnode?language=objc)
    #[unsafe(super(MPSNNStateNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNLabelsNode;
);

unsafe impl NSObjectProtocol for MPSNNLabelsNode {}

extern_methods!(
    unsafe impl MPSNNLabelsNode {}
);

extern_methods!(
    /// Methods declared on superclass `MPSNNStateNode`
    unsafe impl MPSNNLabelsNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNLabelsNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// This node calculates loss information during training
    /// typically immediately after the inference portion
    /// of network evaluation is performed. The result image
    /// of the loss operations is typically the first gradient
    /// image to be comsumed by the gradient passes that work
    /// their way back up the graph. In addition, the node will
    /// update the loss image in the MPSNNLabels with the
    /// desired estimate of correctness.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnlossnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNLossNode;
);

unsafe impl NSObjectProtocol for MPSCNNLossNode {}

extern_methods!(
    unsafe impl MPSCNNLossNode {
        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSource:lossDescriptor:)]
        pub unsafe fn nodeWithSource_lossDescriptor(
            source: &MPSNNImageNode,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSource:lossDescriptor:)]
        pub unsafe fn initWithSource_lossDescriptor(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        /// Get the input node for labes and weights, for example to set the handle
        #[method_id(@__retain_semantics Other inputLabels)]
        pub unsafe fn inputLabels(&self) -> Retained<MPSNNLabelsNode>;

        /// The loss filter is its own gradient filter and doesn't provide a corresponding gradient node.
        ///
        /// The image returned by the loss filter is the gradient image to be consumed by
        /// the gradient filters corresponding to preceeding inference nodes.
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNLossNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNLossNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// This node calculates loss information during training
    /// typically immediately after the inference portion
    /// of network evaluation is performed. The result image
    /// of the loss operations is typically the first gradient
    /// image to be comsumed by the gradient passes that work
    /// their way back up the graph. In addition, the node will
    /// update the loss image in the MPSNNLabels with the
    /// desired estimate of correctness.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnyololossnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNYOLOLossNode;
);

unsafe impl NSObjectProtocol for MPSCNNYOLOLossNode {}

extern_methods!(
    unsafe impl MPSCNNYOLOLossNode {
        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSource:lossDescriptor:)]
        pub unsafe fn nodeWithSource_lossDescriptor(
            source: &MPSNNImageNode,
            descriptor: &MPSCNNYOLOLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSource:lossDescriptor:)]
        pub unsafe fn initWithSource_lossDescriptor(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            descriptor: &MPSCNNYOLOLossDescriptor,
        ) -> Retained<Self>;

        /// Get the input node for labes and weights, for example to set the handle
        #[method_id(@__retain_semantics Other inputLabels)]
        pub unsafe fn inputLabels(&self) -> Retained<MPSNNLabelsNode>;

        /// The loss filter is its own gradient filter and doesn't provide a corresponding gradient node.
        ///
        /// The image returned by the loss filter is the gradient image to be consumed by
        /// the gradient filters corresponding to preceeding inference nodes.
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNYOLOLossNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNYOLOLossNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a the concatenation (in the feature channel dimension) of the results from one or more kernels
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnconcatenationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNConcatenationNode;
);

unsafe impl NSObjectProtocol for MPSNNConcatenationNode {}

extern_methods!(
    unsafe impl MPSNNConcatenationNode {
        /// Init a autoreleased node that concatenates feature channels from multiple images
        ///
        /// In some neural network designs, it is necessary to append feature channels
        /// from one neural network filter to the results of another. If we have three
        /// image nodes with M, N and O feature channels in them, passed to -initWithSources:
        /// as
        /// @
        /// [imageM, imageN, imageO], then feature channels [0,M-1] will be drawn from
        /// image M,  feature channels [M, M+N-1] will be drawn from image N and feature channels
        /// [M+N, M+N+O-1] will be drawn from image O.
        ///
        /// As all images are padded out to a multiple of four feature channels,
        /// M, N and O here are also multiples of four, even when the MPSImages
        /// are not. That is, if the image is 23 feature channels and one channel
        /// of padding, it takes up 24 feature channels worth of space in the
        /// concatenated result.
        ///
        /// Performance Note:  Generally, concatenation is free as long as all
        /// of the sourceNodes are produced by filters in the same MPSNNGraph.
        /// Most MPSCNNKernels have the ability to write their results  at a
        /// feature channel offset within a target MPSImage. However, if the
        /// MPSNNImageNode source nodes come from images external to the MPSNNGraph,
        /// then we have to do a copy operation to assemble the concatenated node.
        /// As a result, when deciding where to break a large logical graph into
        /// multiple smaller MPSNNGraphs, it is better for concatenations to
        /// appear at the ends of subgraphs when possible rather than at the start,
        /// to the extent that all the images used in the concatenation are
        /// produced by that subgraph.
        ///
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        ///
        /// Returns: A new MPSNNFilter node that concatenates its inputs.
        #[method_id(@__retain_semantics Other nodeWithSources:)]
        pub unsafe fn nodeWithSources(source_nodes: &NSArray<MPSNNImageNode>) -> Retained<Self>;

        /// Init a node that concatenates feature channels from multiple images
        ///
        /// In some neural network designs, it is necessary to append feature channels
        /// from one neural network filter to the results of another. If we have three
        /// image nodes with M, N and O feature channels in them, passed to -initWithSources:
        /// as
        /// @
        /// [imageM, imageN, imageO], then feature channels [0,M-1] will be drawn from
        /// image M,  feature channels [M, M+N-1] will be drawn from image N and feature channels
        /// [M+N, M+N+O-1] will be drawn from image O.
        ///
        /// As all images are padded out to a multiple of four feature channels,
        /// M, N and O here are also multiples of four, even when the MPSImages
        /// are not. That is, if the image is 23 feature channels and one channel
        /// of padding, it takes up 24 feature channels worth of space in the
        /// concatenated result.
        ///
        /// Performance Note:  Generally, concatenation is free as long as all
        /// of the sourceNodes are produced by filters in the same MPSNNGraph.
        /// Most MPSCNNKernels have the ability to write their results  at a
        /// feature channel offset within a target MPSImage. However, if the
        /// MPSNNImageNode source nodes come from images external to the MPSNNGraph,
        /// then we have to do a copy operation to assemble the concatenated node.
        /// As a result, when deciding where to break a large logical graph into
        /// multiple smaller MPSNNGraphs, it is better for concatenations to
        /// appear at the ends of subgraphs when possible rather than at the start,
        /// to the extent that all the images used in the concatenation are
        /// produced by that subgraph.
        ///
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        ///
        /// Returns: A new MPSNNFilter node that concatenates its inputs.
        #[method_id(@__retain_semantics Init initWithSources:)]
        pub unsafe fn initWithSources(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
        ) -> Retained<Self>;

        /// Concatenation returns multiple gradient filters. Use -gradientFiltersWithSources: instead.
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNConcatenationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNConcatenationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A MPSNNSlice filter that operates as the conjugate computation for concatentation operators during training
    ///
    /// As concatenation is formally just a copy and not a computation, there isn't a lot of arithmetic for
    /// the slice operator to do, but we still need to extract out the relevant portion
    /// of the gradient of the input signal that went into the corresponding concatenation
    /// destination image.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnconcatenationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNConcatenationGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNConcatenationGradientNode {}

extern_methods!(
    unsafe impl MPSNNConcatenationGradientNode {
        /// create a MPSNNConcatenationGradientNode
        ///
        /// Generally you should use [MPSNNConcatenationNode gradientFiltersWithSources:] instead.
        ///
        /// Parameter `gradientSourceNode`: The gradient image functioning as input for the operator
        ///
        /// Parameter `sourceImage`: The particular input image to the concatentation, if any, that the slice corresponds with
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            gradient_source_node: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        /// Init a MPSNNConcatenationGradientNode
        ///
        /// Generally you should use [MPSNNConcatenationNode gradientFiltersWithSources:] instead.
        ///
        /// Parameter `gradientSourceNode`: The gradient image functioning as input for the operator
        ///
        /// Parameter `sourceImage`: The particular input image to the concatentation, if any, that the slice corresponds with
        ///
        /// Parameter `gradientState`: The gradient state produced by the concatenation filter, consumed by this filter
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            gradient_source_node: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNConcatenationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNConcatenationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a MPSNNReshape kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreshapenode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReshapeNode;
);

unsafe impl NSObjectProtocol for MPSNNReshapeNode {}

extern_methods!(
    unsafe impl MPSNNReshapeNode {
        /// Init a node representing a autoreleased MPSNNReshape kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `resultWidth`: The width of the reshaped image.
        ///
        /// Parameter `resultHeight`: The height of the reshaped image.
        ///
        /// Parameter `resultFeatureChannels`: The number of feature channels in the reshaped image.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNReshape kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:resultWidth:resultHeight:resultFeatureChannels:)]
        pub unsafe fn nodeWithSource_resultWidth_resultHeight_resultFeatureChannels(
            source: &MPSNNImageNode,
            result_width: NSUInteger,
            result_height: NSUInteger,
            result_feature_channels: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSNNReshape kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `resultWidth`: The width of the reshaped image.
        ///
        /// Parameter `resultHeight`: The height of the reshaped image.
        ///
        /// Parameter `resultFeatureChannels`: The number of feature channels in the reshaped image.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNReshape kernel.
        #[method_id(@__retain_semantics Init initWithSource:resultWidth:resultHeight:resultFeatureChannels:)]
        pub unsafe fn initWithSource_resultWidth_resultHeight_resultFeatureChannels(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            result_width: NSUInteger,
            result_height: NSUInteger,
            result_feature_channels: NSUInteger,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReshapeNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReshapeNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreshapegradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReshapeGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNReshapeGradientNode {}

extern_methods!(
    unsafe impl MPSNNReshapeGradientNode {
        /// A node to represent the gradient of a reshape node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward reshape node.
        ///
        /// Returns: A MPSNNReshapeGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        /// A node to represent the gradient of a reshape node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward reshape node.
        ///
        /// Returns: A MPSCNNConvolutionGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReshapeGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReshapeGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnreductionspatialmeangradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNReductionSpatialMeanGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNReductionSpatialMeanGradientNode {}

extern_methods!(
    unsafe impl MPSNNReductionSpatialMeanGradientNode {
        /// A node to represent the gradient of a spatial mean reduction node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward spatial mean reduction node.
        ///
        /// Returns: A MPSNNReductionSpatialMeanGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        /// A node to represent the gradient of a spatial mean reduction node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward spatial mean reduction node.
        ///
        /// Returns: A MPSNNReductionSpatialMeanGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNReductionSpatialMeanGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNReductionSpatialMeanGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a MPSNNPad kernel
    ///
    /// You should not use this node to zero pad your data in the XY-plane.
    /// This node copies the input image and therefore should only be used in
    /// special circumstances where the normal padding operation, defined for most
    /// filters and nodes through
    /// MPSNNPadding,cannot achieve the necessary padding.
    /// Therefore use this node only when you need one of the special edge modes:
    /// MPSImageEdgeModeConstant,MPSImageEdgeModeMirror,MPSImageEdgeModeMirrorWithEdgeor, if you need padding in the
    /// feature-channel dimesion.
    /// In other cases use to
    /// MPSNNPaddingto get best performance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnpadnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNPadNode;
);

unsafe impl NSObjectProtocol for MPSNNPadNode {}

extern_methods!(
    unsafe impl MPSNNPadNode {
        /// Determines the constant value to apply when using
        /// MPSImageEdgeModeConstant.Default: 0.0f.
        #[method(fillValue)]
        pub unsafe fn fillValue(&self) -> c_float;

        /// Setter for [`fillValue`][Self::fillValue].
        #[method(setFillValue:)]
        pub unsafe fn setFillValue(&self, fill_value: c_float);

        #[cfg(feature = "MPSCoreTypes")]
        /// Init a node representing a autoreleased MPSNNPad kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `paddingSizeBefore`: The amount of padding to apply before the image in each dimension.
        ///
        /// Parameter `paddingSizeAfter`: The amount of padding to apply after the image in each dimension.
        ///
        /// Parameter `edgeMode`: The
        /// MPSImageEdgeModefor the padding node - Note that for now
        /// the pad-node and its gradient are the only nodes that support
        /// the extended edge-modes, ie. the ones beyond MPSImageEdgeModeClamp.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNPad kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:paddingSizeBefore:paddingSizeAfter:edgeMode:)]
        pub unsafe fn nodeWithSource_paddingSizeBefore_paddingSizeAfter_edgeMode(
            source: &MPSNNImageNode,
            padding_size_before: MPSImageCoordinate,
            padding_size_after: MPSImageCoordinate,
            edge_mode: MPSImageEdgeMode,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCoreTypes")]
        /// Init a node representing a MPSNNPad kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `paddingSizeBefore`: The amount of padding to apply before the image in each dimension.
        ///
        /// Parameter `paddingSizeAfter`: The amount of padding to apply after the image in each dimension.
        ///
        /// Parameter `edgeMode`: The
        /// MPSImageEdgeModefor the padding node - Note that for now
        /// the pad-node and its gradient are the only nodes that support
        /// the extended edge-modes, ie. the ones beyond MPSImageEdgeModeClamp.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNPad kernel.
        #[method_id(@__retain_semantics Init initWithSource:paddingSizeBefore:paddingSizeAfter:edgeMode:)]
        pub unsafe fn initWithSource_paddingSizeBefore_paddingSizeAfter_edgeMode(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            padding_size_before: MPSImageCoordinate,
            padding_size_after: MPSImageCoordinate,
            edge_mode: MPSImageEdgeMode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNPadNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNPadNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnpadgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNPadGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNPadGradientNode {}

extern_methods!(
    unsafe impl MPSNNPadGradientNode {
        /// A node to represent the gradient of a padding node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward padding node.
        ///
        /// Returns: A MPSNNPadGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        /// A node to represent the gradient of a padding node.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward reshape node.
        ///
        /// Returns: A MPSNNPadGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNPadGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNPadGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNSoftMax kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnsoftmaxnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNSoftMaxNode;
);

unsafe impl NSObjectProtocol for MPSCNNSoftMaxNode {}

extern_methods!(
    unsafe impl MPSCNNSoftMaxNode {
        /// Init a node representing a autoreleased MPSCNNSoftMax kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNSoftMax kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing a MPSCNNSoftMax kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNSoftMax kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNSoftMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNSoftMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNSoftMaxGradient kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnsoftmaxgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNSoftMaxGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNSoftMaxGradientNode {}

extern_methods!(
    unsafe impl MPSCNNSoftMaxGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNSoftMaxGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNSoftMaxGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNLogSoftMax kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnlogsoftmaxnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNLogSoftMaxNode;
);

unsafe impl NSObjectProtocol for MPSCNNLogSoftMaxNode {}

extern_methods!(
    unsafe impl MPSCNNLogSoftMaxNode {
        /// Init a node representing a autoreleased MPSCNNLogSoftMax kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNLogSoftMax kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing a MPSCNNLogSoftMax kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNLogSoftMax kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNLogSoftMaxNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNLogSoftMaxNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNLogSoftMaxGradient kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnlogsoftmaxgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNLogSoftMaxGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNLogSoftMaxGradientNode {}

extern_methods!(
    unsafe impl MPSCNNLogSoftMaxGradientNode {
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNLogSoftMaxGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNLogSoftMaxGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNUpsamplingNearest kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnupsamplingnearestnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNUpsamplingNearestNode;
);

unsafe impl NSObjectProtocol for MPSCNNUpsamplingNearestNode {}

extern_methods!(
    unsafe impl MPSCNNUpsamplingNearestNode {
        /// Convenience initializer for an autoreleased MPSCNNUpsamplingNearest nodes
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingNearest kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:integerScaleFactorX:integerScaleFactorY:)]
        pub unsafe fn nodeWithSource_integerScaleFactorX_integerScaleFactorY(
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNUpsamplingNearest kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingNearest kernel.
        #[method_id(@__retain_semantics Init initWithSource:integerScaleFactorX:integerScaleFactorY:)]
        pub unsafe fn initWithSource_integerScaleFactorX_integerScaleFactorY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
        ) -> Retained<Self>;

        #[method(scaleFactorX)]
        pub unsafe fn scaleFactorX(&self) -> c_double;

        #[method(scaleFactorY)]
        pub unsafe fn scaleFactorY(&self) -> c_double;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNUpsamplingNearestNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNUpsamplingNearestNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNUpsamplingBilinear kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnupsamplingbilinearnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNUpsamplingBilinearNode;
);

unsafe impl NSObjectProtocol for MPSCNNUpsamplingBilinearNode {}

extern_methods!(
    unsafe impl MPSCNNUpsamplingBilinearNode {
        /// Init a autoreleased node representing a MPSCNNUpsamplingBilinear kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingBilinear kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:integerScaleFactorX:integerScaleFactorY:)]
        pub unsafe fn nodeWithSource_integerScaleFactorX_integerScaleFactorY(
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
        ) -> Retained<Self>;

        /// Init a autoreleased node representing a MPSCNNUpsamplingBilinear kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Parameter `alignCorners`: Specifier whether the centers of the 4 corner pixels of the input and output regions are aligned,
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingBilinear kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:integerScaleFactorX:integerScaleFactorY:alignCorners:)]
        pub unsafe fn nodeWithSource_integerScaleFactorX_integerScaleFactorY_alignCorners(
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
            align_corners: bool,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNUpsamplingBilinear kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingBilinear kernel.
        #[method_id(@__retain_semantics Init initWithSource:integerScaleFactorX:integerScaleFactorY:)]
        pub unsafe fn initWithSource_integerScaleFactorX_integerScaleFactorY(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
        ) -> Retained<Self>;

        /// Init a node representing a MPSCNNUpsamplingBilinear kernel
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Parameter `integerScaleFactorX`: The upsampling factor for the x dimension.
        ///
        /// Parameter `integerScaleFactorY`: The upsampling factor for the y dimension.
        ///
        /// Parameter `alignCorners`: Specifier whether the centers of the 4 corner pixels of the input and output regions are aligned,
        ///
        /// Returns: A new MPSNNFilter node for a MPSCNNUpsamplingBilinear kernel.
        #[method_id(@__retain_semantics Init initWithSource:integerScaleFactorX:integerScaleFactorY:alignCorners:)]
        pub unsafe fn initWithSource_integerScaleFactorX_integerScaleFactorY_alignCorners(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            integer_scale_factor_x: NSUInteger,
            integer_scale_factor_y: NSUInteger,
            align_corners: bool,
        ) -> Retained<Self>;

        #[method(scaleFactorX)]
        pub unsafe fn scaleFactorX(&self) -> c_double;

        #[method(scaleFactorY)]
        pub unsafe fn scaleFactorY(&self) -> c_double;

        #[method(alignCorners)]
        pub unsafe fn alignCorners(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNUpsamplingBilinearNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNUpsamplingBilinearNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNUpsamplingNearest kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnupsamplingnearestgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNUpsamplingNearestGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNUpsamplingNearestGradientNode {}

extern_methods!(
    unsafe impl MPSCNNUpsamplingNearestGradientNode {
        /// A node to represent the gradient calculation for nearest upsampling training.
        ///
        /// [forwardFilter gradientFilterWithSources:] is a more convient way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward filter node
        ///
        /// Parameter `gradientState`: The gradient state from the forward filter
        ///
        /// Parameter `scaleFactorX`: The X scale factor from the forward pass
        ///
        /// Parameter `scaleFactorY`: The Y scale factor from the forward pass
        ///
        /// Returns: A MPSCNNUpsamplingNearestGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_scaleFactorX_scaleFactorY(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            scale_factor_x: c_double,
            scale_factor_y: c_double,
        ) -> Retained<Self>;

        /// A node to represent the gradient calculation for nearest upsampling training.
        ///
        /// [forwardFilter gradientFilterWithSources:] is a more convient way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward filter node
        ///
        /// Parameter `gradientState`: The gradient state from the forward filter
        ///
        /// Parameter `scaleFactorX`: The X scale factor from the forward pass
        ///
        /// Parameter `scaleFactorY`: The Y scale factor from the forward pass
        ///
        /// Returns: A MPSCNNUpsamplingNearestGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_scaleFactorX_scaleFactorY(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            scale_factor_x: c_double,
            scale_factor_y: c_double,
        ) -> Retained<Self>;

        #[method(scaleFactorX)]
        pub unsafe fn scaleFactorX(&self) -> c_double;

        #[method(scaleFactorY)]
        pub unsafe fn scaleFactorY(&self) -> c_double;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNUpsamplingNearestGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNUpsamplingNearestGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a MPSCNNUpsamplingBilinear kernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnupsamplingbilineargradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSCNNUpsamplingBilinearGradientNode;
);

unsafe impl NSObjectProtocol for MPSCNNUpsamplingBilinearGradientNode {}

extern_methods!(
    unsafe impl MPSCNNUpsamplingBilinearGradientNode {
        /// A node to represent the gradient calculation for nearest upsampling training.
        ///
        /// [forwardFilter gradientFilterWithSources:] is a more convient way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward filter node
        ///
        /// Parameter `gradientState`: The gradient state from the forward filter
        ///
        /// Parameter `scaleFactorX`: The X scale factor from the forward pass
        ///
        /// Parameter `scaleFactorY`: The Y scale factor from the forward pass
        ///
        /// Returns: A MPSCNNUpsamplingBilinearGradientNode
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_scaleFactorX_scaleFactorY(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            scale_factor_x: c_double,
            scale_factor_y: c_double,
        ) -> Retained<Self>;

        /// A node to represent the gradient calculation for nearest upsampling training.
        ///
        /// [forwardFilter gradientFilterWithSources:] is a more convient way to do this.
        ///
        /// Parameter `sourceGradient`: The input gradient from the 'downstream' gradient filter.
        ///
        /// Parameter `sourceImage`: The input image from the forward filter node
        ///
        /// Parameter `gradientState`: The gradient state from the forward filter
        ///
        /// Parameter `scaleFactorX`: The X scale factor from the forward pass
        ///
        /// Parameter `scaleFactorY`: The Y scale factor from the forward pass
        ///
        /// Returns: A MPSCNNUpsamplingBilinearGradientNode
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_scaleFactorX_scaleFactorY(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            scale_factor_x: c_double,
            scale_factor_y: c_double,
        ) -> Retained<Self>;

        #[method(scaleFactorX)]
        pub unsafe fn scaleFactorX(&self) -> c_double;

        #[method(scaleFactorY)]
        pub unsafe fn scaleFactorY(&self) -> c_double;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSCNNUpsamplingBilinearGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSCNNUpsamplingBilinearGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// MPSNNGramMatrixCallback Defines a callback protocol for
    /// MPSNNGramMatrixCalculationNodeto set the 'alpha'
    /// scaling value dynamically just before encoding the underlying MPSNNGramMatrixCalculation kernel.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngrammatrixcallback?language=objc)
    pub unsafe trait MPSNNGramMatrixCallback:
        NSCopying + NSObjectProtocol + NSSecureCoding
    {
        #[cfg(feature = "MPSImage")]
        /// Returns the desired alpha scaling value.
        ///
        /// Parameter `sourceImage`: One of the source images in the batch given as a reference for the alpha computation.
        ///
        /// Parameter `destinationImage`: One of the destination images in the batch given as a reference for the alpha computation.
        ///
        /// Returns: The desired alpha value.
        #[method(alphaForSourceImage:destinationImage:)]
        unsafe fn alphaForSourceImage_destinationImage(
            &self,
            source_image: &MPSImage,
            destination_image: &MPSImage,
        ) -> c_float;
    }
);

extern_class!(
    /// Node representing a
    /// MPSNNGramMatrixCalculationkernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngrammatrixcalculationnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNGramMatrixCalculationNode;
);

unsafe impl NSObjectProtocol for MPSNNGramMatrixCalculationNode {}

extern_methods!(
    unsafe impl MPSNNGramMatrixCalculationNode {
        /// Scaling factor for the output. Default: 1.0f.
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> c_float;

        /// Optional callback option - setting this allows the alpha value to be changed dynamically at encode time.
        /// Default value: nil.
        #[method_id(@__retain_semantics Other propertyCallBack)]
        pub unsafe fn propertyCallBack(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MPSNNGramMatrixCallback>>>;

        /// Setter for [`propertyCallBack`][Self::propertyCallBack].
        #[method(setPropertyCallBack:)]
        pub unsafe fn setPropertyCallBack(
            &self,
            property_call_back: Option<&ProtocolObject<dyn MPSNNGramMatrixCallback>>,
        );

        /// Init a node representing a autoreleased MPSNNGramMatrixCalculationNode kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNGramMatrixCalculationNode kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source_node: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing a MPSNNGramMatrixCalculationNode kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNGramMatrixCalculationNode kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// Init a node representing a autoreleased MPSNNGramMatrixCalculationNode kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter.
        ///
        /// Parameter `alpha`: Scaling factor for the output.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNGramMatrixCalculationNode kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:alpha:)]
        pub unsafe fn nodeWithSource_alpha(
            source_node: &MPSNNImageNode,
            alpha: c_float,
        ) -> Retained<Self>;

        /// Init a node representing a MPSNNGramMatrixCalculationNode kernel.
        ///
        /// Parameter `sourceNode`: The MPSNNImageNode representing the source MPSImage for the filter.
        ///
        /// Parameter `alpha`: Scaling factor for the output.
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNGramMatrixCalculationNode kernel.
        #[method_id(@__retain_semantics Init initWithSource:alpha:)]
        pub unsafe fn initWithSource_alpha(
            this: Allocated<Self>,
            source_node: &MPSNNImageNode,
            alpha: c_float,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNGramMatrixCalculationNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNGramMatrixCalculationNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a
    /// MPSNNGramMatrixCalculationGradientkernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnngrammatrixcalculationgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNGramMatrixCalculationGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNGramMatrixCalculationGradientNode {}

extern_methods!(
    unsafe impl MPSNNGramMatrixCalculationGradientNode {
        /// Scaling factor for the output. Default: 1.0f.
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> c_float;

        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:gradientState:alpha:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_gradientState_alpha(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            alpha: c_float,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:gradientState:alpha:)]
        pub unsafe fn initWithSourceGradient_sourceImage_gradientState_alpha(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            gradient_state: &MPSNNGradientStateNode,
            alpha: c_float,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNGramMatrixCalculationGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNGramMatrixCalculationGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// MPSNNLossCallback Defines a callback protocol for
    /// MPSNNForwardLossNodeand
    /// MPSNNLossGradientNodeto set the scalar weight value just before encoding the underlying kernels.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnlosscallback?language=objc)
    pub unsafe trait MPSNNLossCallback:
        NSCopying + NSObjectProtocol + NSSecureCoding
    {
        #[cfg(feature = "MPSImage")]
        /// Returns the desired loss scaling weight value.
        ///
        /// Parameter `sourceImage`: One of the source images in the batch given as a reference.
        ///
        /// Parameter `destinationImage`: One of the destination images in the batch given as a reference.
        ///
        /// Returns: The desired scalar weight value.
        #[method(scalarWeightForSourceImage:destinationImage:)]
        unsafe fn scalarWeightForSourceImage_destinationImage(
            &self,
            source_image: &MPSImage,
            destination_image: &MPSImage,
        ) -> c_float;
    }
);

extern_class!(
    /// Node representing a
    /// MPSNNForwardLosskernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnforwardlossnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNForwardLossNode;
);

unsafe impl NSObjectProtocol for MPSNNForwardLossNode {}

extern_methods!(
    unsafe impl MPSNNForwardLossNode {
        #[cfg(feature = "MPSCNNTypes")]
        #[method(lossType)]
        pub unsafe fn lossType(&self) -> MPSCNNLossType;

        #[cfg(feature = "MPSCNNTypes")]
        #[method(reductionType)]
        pub unsafe fn reductionType(&self) -> MPSCNNReductionType;

        #[method(numberOfClasses)]
        pub unsafe fn numberOfClasses(&self) -> NSUInteger;

        #[method(reduceAcrossBatch)]
        pub unsafe fn reduceAcrossBatch(&self) -> bool;

        #[method(weight)]
        pub unsafe fn weight(&self) -> c_float;

        #[method(labelSmoothing)]
        pub unsafe fn labelSmoothing(&self) -> c_float;

        #[method(epsilon)]
        pub unsafe fn epsilon(&self) -> c_float;

        #[method(delta)]
        pub unsafe fn delta(&self) -> c_float;

        /// Optional callback option - setting this allows the scalar weight value to be changed dynamically at encode time.
        /// Default value: nil.
        #[method_id(@__retain_semantics Other propertyCallBack)]
        pub unsafe fn propertyCallBack(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MPSNNLossCallback>>>;

        /// Setter for [`propertyCallBack`][Self::propertyCallBack].
        #[method(setPropertyCallBack:)]
        pub unsafe fn setPropertyCallBack(
            &self,
            property_call_back: Option<&ProtocolObject<dyn MPSNNLossCallback>>,
        );

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSource:labels:weights:lossDescriptor:)]
        pub unsafe fn nodeWithSource_labels_weights_lossDescriptor(
            source: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            weights: &MPSNNImageNode,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSource:labels:lossDescriptor:)]
        pub unsafe fn nodeWithSource_labels_lossDescriptor(
            source: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        /// Init a forward loss node from multiple images
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        /// Node0: logits, Node1: labels, Node2: weights
        ///
        /// Returns: A new MPSNNFilter node.
        #[method_id(@__retain_semantics Other nodeWithSources:lossDescriptor:)]
        pub unsafe fn nodeWithSources_lossDescriptor(
            source_nodes: &NSArray<MPSNNImageNode>,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSource:labels:weights:lossDescriptor:)]
        pub unsafe fn initWithSource_labels_weights_lossDescriptor(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            weights: Option<&MPSNNImageNode>,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSource:labels:lossDescriptor:)]
        pub unsafe fn initWithSource_labels_lossDescriptor(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        /// Init a forward loss node from multiple images
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        /// Node0: logits, Node1: labels, Node2: weights
        ///
        /// Returns: A new MPSNNFilter node.
        #[method_id(@__retain_semantics Init initWithSources:lossDescriptor:)]
        pub unsafe fn initWithSources_lossDescriptor(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
            descriptor: &MPSCNNLossDescriptor,
        ) -> Retained<Self>;

        /// Returns the gradient filter for predictions, if you want also gradients for labels then use -gradientFiltersWithSource(s):
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            source_gradient: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNLossGradientNode>;

        #[method_id(@__retain_semantics Other gradientFiltersWithSources:)]
        pub unsafe fn gradientFiltersWithSources(
            &self,
            source_gradient: &NSArray<MPSNNImageNode>,
        ) -> Retained<NSArray<MPSNNLossGradientNode>>;

        #[method_id(@__retain_semantics Other gradientFilterWithSource:)]
        pub unsafe fn gradientFilterWithSource(
            &self,
            source_gradient: &MPSNNImageNode,
        ) -> Retained<MPSNNLossGradientNode>;

        #[method_id(@__retain_semantics Other gradientFiltersWithSource:)]
        pub unsafe fn gradientFiltersWithSource(
            &self,
            source_gradient: &MPSNNImageNode,
        ) -> Retained<NSArray<MPSNNLossGradientNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNForwardLossNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNForwardLossNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Node representing a
    /// MPSNNLossGradientkernel
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnnlossgradientnode?language=objc)
    #[unsafe(super(MPSNNGradientFilterNode, MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNLossGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNLossGradientNode {}

extern_methods!(
    unsafe impl MPSNNLossGradientNode {
        #[cfg(feature = "MPSCNNTypes")]
        #[method(lossType)]
        pub unsafe fn lossType(&self) -> MPSCNNLossType;

        #[cfg(feature = "MPSCNNTypes")]
        #[method(reductionType)]
        pub unsafe fn reductionType(&self) -> MPSCNNReductionType;

        #[method(numberOfClasses)]
        pub unsafe fn numberOfClasses(&self) -> NSUInteger;

        #[method(reduceAcrossBatch)]
        pub unsafe fn reduceAcrossBatch(&self) -> bool;

        #[method(weight)]
        pub unsafe fn weight(&self) -> c_float;

        #[method(labelSmoothing)]
        pub unsafe fn labelSmoothing(&self) -> c_float;

        #[method(epsilon)]
        pub unsafe fn epsilon(&self) -> c_float;

        #[method(delta)]
        pub unsafe fn delta(&self) -> c_float;

        #[method(isLabelsGradientFilter)]
        pub unsafe fn isLabelsGradientFilter(&self) -> bool;

        /// Optional callback option - setting this allows the scalar weight value to be changed dynamically at encode time.
        /// Default value: nil.
        #[method_id(@__retain_semantics Other propertyCallBack)]
        pub unsafe fn propertyCallBack(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MPSNNLossCallback>>>;

        /// Setter for [`propertyCallBack`][Self::propertyCallBack].
        #[method(setPropertyCallBack:)]
        pub unsafe fn setPropertyCallBack(
            &self,
            property_call_back: Option<&ProtocolObject<dyn MPSNNLossCallback>>,
        );

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:labels:weights:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_labels_weights_gradientState_lossDescriptor_isLabelsGradientFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            weights: &MPSNNImageNode,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Other nodeWithSourceGradient:sourceImage:labels:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn nodeWithSourceGradient_sourceImage_labels_gradientState_lossDescriptor_isLabelsGradientFilter(
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        /// Init a gradient loss node from multiple images
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        /// Node0: logits, Node1: labels, Node2: weights
        ///
        /// Returns: A new MPSNNFilter node.
        #[method_id(@__retain_semantics Other nodeWithSources:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn nodeWithSources_gradientState_lossDescriptor_isLabelsGradientFilter(
            source_nodes: &NSArray<MPSNNImageNode>,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:labels:weights:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_labels_weights_gradientState_lossDescriptor_isLabelsGradientFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            weights: Option<&MPSNNImageNode>,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        #[method_id(@__retain_semantics Init initWithSourceGradient:sourceImage:labels:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn initWithSourceGradient_sourceImage_labels_gradientState_lossDescriptor_isLabelsGradientFilter(
            this: Allocated<Self>,
            source_gradient: &MPSNNImageNode,
            source_image: &MPSNNImageNode,
            labels: &MPSNNImageNode,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCNNLoss")]
        /// Init a gradient loss node from multiple images
        ///
        /// Parameter `sourceNodes`: The MPSNNImageNode representing the source MPSImages for the filter
        /// Node0: input gradients, Node1: logits, Node2: labels, Node3: weights
        ///
        /// Returns: A new MPSNNFilter node.
        #[method_id(@__retain_semantics Init initWithSources:gradientState:lossDescriptor:isLabelsGradientFilter:)]
        pub unsafe fn initWithSources_gradientState_lossDescriptor_isLabelsGradientFilter(
            this: Allocated<Self>,
            source_nodes: &NSArray<MPSNNImageNode>,
            gradient_state: Option<&MPSNNGradientStateNode>,
            descriptor: &MPSCNNLossDescriptor,
            is_labels_gradient_filter: bool,
        ) -> Retained<Self>;

        /// This is a gradient filter - there is no support gradients of gradients currently.
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNLossGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNLossGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A node for a MPSNNInitialGradient kernel
    ///
    /// This node can be used to generate a starting point for an arbitrary gradient computation.
    /// Simply add this node after the node for which you want to compute gradients and then
    /// call the function
    /// trainingGraphWithSourceGradient:of this node to automatically
    /// generate the nodes needed for gradient computations or add the desired nodes manually.
    /// This is generally used with MPSNNLossGradientNode and MPSNNForwardLossNode
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpsnninitialgradientnode?language=objc)
    #[unsafe(super(MPSNNFilterNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSNNInitialGradientNode;
);

unsafe impl NSObjectProtocol for MPSNNInitialGradientNode {}

extern_methods!(
    unsafe impl MPSNNInitialGradientNode {
        /// Init a node representing a MPSNNInitialGradient MPSNNPad kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNInitialGradient kernel.
        #[method_id(@__retain_semantics Other nodeWithSource:)]
        pub unsafe fn nodeWithSource(source: &MPSNNImageNode) -> Retained<Self>;

        /// Init a node representing a MPSNNInitialGradient MPSNNPad kernel
        ///
        /// Parameter `source`: The MPSNNImageNode representing the source MPSImage for the filter
        ///
        /// Returns: A new MPSNNFilter node for a MPSNNInitialGradient kernel.
        #[method_id(@__retain_semantics Init initWithSource:)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source: &MPSNNImageNode,
        ) -> Retained<Self>;

        /// The initial gradient filter is a gradient filter and we don't provide support for gradients of gradients currently.
        #[method_id(@__retain_semantics Other gradientFilterWithSources:)]
        pub unsafe fn gradientFilterWithSources(
            &self,
            gradient_images: &NSArray<MPSNNImageNode>,
        ) -> Retained<MPSNNGradientFilterNode>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSNNFilterNode`
    unsafe impl MPSNNInitialGradientNode {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSNNInitialGradientNode {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
