//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnkernel?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSCNNKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSCNNKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSCNNKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSCNNKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSCNNKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSCNNKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNKernel {
        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(offset)]
        pub unsafe fn offset(&self) -> MPSOffset;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setOffset:)]
        pub unsafe fn setOffset(&self, offset: MPSOffset);

        #[method(clipRect)]
        pub unsafe fn clipRect(&self) -> MTLRegion;

        #[method(setClipRect:)]
        pub unsafe fn setClipRect(&self, clip_rect: MTLRegion);

        #[method(destinationFeatureChannelOffset)]
        pub unsafe fn destinationFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setDestinationFeatureChannelOffset:)]
        pub unsafe fn setDestinationFeatureChannelOffset(
            &self,
            destination_feature_channel_offset: NSUInteger,
        );

        #[method(sourceFeatureChannelOffset)]
        pub unsafe fn sourceFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setSourceFeatureChannelOffset:)]
        pub unsafe fn setSourceFeatureChannelOffset(
            &self,
            source_feature_channel_offset: NSUInteger,
        );

        #[method(sourceFeatureChannelMaxCount)]
        pub unsafe fn sourceFeatureChannelMaxCount(&self) -> NSUInteger;

        #[method(setSourceFeatureChannelMaxCount:)]
        pub unsafe fn setSourceFeatureChannelMaxCount(
            &self,
            source_feature_channel_max_count: NSUInteger,
        );

        #[cfg(feature = "MPSCoreTypes")]
        #[method(edgeMode)]
        pub unsafe fn edgeMode(&self) -> MPSImageEdgeMode;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setEdgeMode:)]
        pub unsafe fn setEdgeMode(&self, edge_mode: MPSImageEdgeMode);

        #[method(kernelWidth)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        #[method(kernelHeight)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        #[method(strideInPixelsX)]
        pub unsafe fn strideInPixelsX(&self) -> NSUInteger;

        #[method(strideInPixelsY)]
        pub unsafe fn strideInPixelsY(&self) -> NSUInteger;

        #[method(dilationRateX)]
        pub unsafe fn dilationRateX(&self) -> NSUInteger;

        #[method(dilationRateY)]
        pub unsafe fn dilationRateY(&self) -> NSUInteger;

        #[method(isBackwards)]
        pub unsafe fn isBackwards(&self) -> bool;

        #[method(isStateModified)]
        pub unsafe fn isStateModified(&self) -> bool;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method_id(@__retain_semantics Other padding)]
        pub unsafe fn padding(&self) -> Retained<ProtocolObject<dyn MPSNNPadding>>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method(setPadding:)]
        pub unsafe fn setPadding(&self, padding: &ProtocolObject<dyn MPSNNPadding>);

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other destinationImageAllocator)]
        pub unsafe fn destinationImageAllocator(
            &self,
        ) -> Retained<ProtocolObject<dyn MPSImageAllocator>>;

        #[cfg(feature = "MPSImage")]
        #[method(setDestinationImageAllocator:)]
        pub unsafe fn setDestinationImageAllocator(
            &self,
            destination_image_allocator: &ProtocolObject<dyn MPSImageAllocator>,
        );

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSImage")]
        #[method(encodeToCommandBuffer:sourceImage:destinationImage:)]
        pub unsafe fn encodeToCommandBuffer_sourceImage_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImage,
            destination_image: &MPSImage,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method(encodeToCommandBuffer:sourceImage:destinationState:destinationImage:)]
        pub unsafe fn encodeToCommandBuffer_sourceImage_destinationState_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImage,
            destination_state: &MPSState,
            destination_image: &MPSImage,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method(encodeBatchToCommandBuffer:sourceImages:destinationImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_destinationImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &MPSImageBatch,
            destination_images: &MPSImageBatch,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method(encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_destinationStates_destinationImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &MPSImageBatch,
            destination_states: Option<&MPSStateBatch>,
            destination_images: &MPSImageBatch,
        );

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImage:)]
        pub unsafe fn encodeToCommandBuffer_sourceImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImage,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImage:destinationState:destinationStateIsTemporary:)]
        pub unsafe fn encodeToCommandBuffer_sourceImage_destinationState_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImage,
            out_state: &mut Option<Retained<MPSState>>,
            is_temporary: bool,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &MPSImageBatch,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_destinationStates_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &MPSImageBatch,
            out_states: &mut Option<Retained<MPSStateBatch>>,
            is_temporary: bool,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateForSourceImage:sourceStates:destinationImage:)]
        pub unsafe fn resultStateForSourceImage_sourceStates_destinationImage(
            &self,
            source_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateBatchForSourceImage:sourceStates:destinationImage:)]
        pub unsafe fn resultStateBatchForSourceImage_sourceStates_destinationImage(
            &self,
            source_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateForCommandBuffer_sourceImage_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateBatchForCommandBuffer_sourceImage_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[method(isResultStateReusedAcrossBatch)]
        pub unsafe fn isResultStateReusedAcrossBatch(&self) -> bool;

        #[method(appendBatchBarrier)]
        pub unsafe fn appendBatchBarrier(&self) -> bool;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other destinationImageDescriptorForSourceImages:sourceStates:)]
        pub unsafe fn destinationImageDescriptorForSourceImages_sourceStates(
            &self,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
        ) -> Retained<MPSImageDescriptor>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method(encodingStorageSizeForSourceImage:sourceStates:destinationImage:)]
        pub unsafe fn encodingStorageSizeForSourceImage_sourceStates_destinationImage(
            &self,
            source_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: Option<&MPSImage>,
        ) -> NSUInteger;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method(batchEncodingStorageSizeForSourceImage:sourceStates:destinationImage:)]
        pub unsafe fn batchEncodingStorageSizeForSourceImage_sourceStates_destinationImage(
            &self,
            source_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: Option<&MPSImageBatch>,
        ) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNKernel {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinarykernel?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSCNNBinaryKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSCNNBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSCNNBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSCNNBinaryKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSCNNBinaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSCNNBinaryKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNBinaryKernel {
        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(primaryOffset)]
        pub unsafe fn primaryOffset(&self) -> MPSOffset;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setPrimaryOffset:)]
        pub unsafe fn setPrimaryOffset(&self, primary_offset: MPSOffset);

        #[cfg(feature = "MPSCoreTypes")]
        #[method(secondaryOffset)]
        pub unsafe fn secondaryOffset(&self) -> MPSOffset;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setSecondaryOffset:)]
        pub unsafe fn setSecondaryOffset(&self, secondary_offset: MPSOffset);

        #[method(clipRect)]
        pub unsafe fn clipRect(&self) -> MTLRegion;

        #[method(setClipRect:)]
        pub unsafe fn setClipRect(&self, clip_rect: MTLRegion);

        #[method(destinationFeatureChannelOffset)]
        pub unsafe fn destinationFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setDestinationFeatureChannelOffset:)]
        pub unsafe fn setDestinationFeatureChannelOffset(
            &self,
            destination_feature_channel_offset: NSUInteger,
        );

        #[method(primarySourceFeatureChannelOffset)]
        pub unsafe fn primarySourceFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setPrimarySourceFeatureChannelOffset:)]
        pub unsafe fn setPrimarySourceFeatureChannelOffset(
            &self,
            primary_source_feature_channel_offset: NSUInteger,
        );

        #[method(secondarySourceFeatureChannelOffset)]
        pub unsafe fn secondarySourceFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setSecondarySourceFeatureChannelOffset:)]
        pub unsafe fn setSecondarySourceFeatureChannelOffset(
            &self,
            secondary_source_feature_channel_offset: NSUInteger,
        );

        #[method(primarySourceFeatureChannelMaxCount)]
        pub unsafe fn primarySourceFeatureChannelMaxCount(&self) -> NSUInteger;

        #[method(setPrimarySourceFeatureChannelMaxCount:)]
        pub unsafe fn setPrimarySourceFeatureChannelMaxCount(
            &self,
            primary_source_feature_channel_max_count: NSUInteger,
        );

        #[method(secondarySourceFeatureChannelMaxCount)]
        pub unsafe fn secondarySourceFeatureChannelMaxCount(&self) -> NSUInteger;

        #[method(setSecondarySourceFeatureChannelMaxCount:)]
        pub unsafe fn setSecondarySourceFeatureChannelMaxCount(
            &self,
            secondary_source_feature_channel_max_count: NSUInteger,
        );

        #[cfg(feature = "MPSCoreTypes")]
        #[method(primaryEdgeMode)]
        pub unsafe fn primaryEdgeMode(&self) -> MPSImageEdgeMode;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setPrimaryEdgeMode:)]
        pub unsafe fn setPrimaryEdgeMode(&self, primary_edge_mode: MPSImageEdgeMode);

        #[cfg(feature = "MPSCoreTypes")]
        #[method(secondaryEdgeMode)]
        pub unsafe fn secondaryEdgeMode(&self) -> MPSImageEdgeMode;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setSecondaryEdgeMode:)]
        pub unsafe fn setSecondaryEdgeMode(&self, secondary_edge_mode: MPSImageEdgeMode);

        #[method(primaryKernelWidth)]
        pub unsafe fn primaryKernelWidth(&self) -> NSUInteger;

        #[method(primaryKernelHeight)]
        pub unsafe fn primaryKernelHeight(&self) -> NSUInteger;

        #[method(secondaryKernelWidth)]
        pub unsafe fn secondaryKernelWidth(&self) -> NSUInteger;

        #[method(secondaryKernelHeight)]
        pub unsafe fn secondaryKernelHeight(&self) -> NSUInteger;

        #[method(primaryStrideInPixelsX)]
        pub unsafe fn primaryStrideInPixelsX(&self) -> NSUInteger;

        #[method(setPrimaryStrideInPixelsX:)]
        pub unsafe fn setPrimaryStrideInPixelsX(&self, primary_stride_in_pixels_x: NSUInteger);

        #[method(primaryStrideInPixelsY)]
        pub unsafe fn primaryStrideInPixelsY(&self) -> NSUInteger;

        #[method(setPrimaryStrideInPixelsY:)]
        pub unsafe fn setPrimaryStrideInPixelsY(&self, primary_stride_in_pixels_y: NSUInteger);

        #[method(secondaryStrideInPixelsX)]
        pub unsafe fn secondaryStrideInPixelsX(&self) -> NSUInteger;

        #[method(setSecondaryStrideInPixelsX:)]
        pub unsafe fn setSecondaryStrideInPixelsX(&self, secondary_stride_in_pixels_x: NSUInteger);

        #[method(secondaryStrideInPixelsY)]
        pub unsafe fn secondaryStrideInPixelsY(&self) -> NSUInteger;

        #[method(setSecondaryStrideInPixelsY:)]
        pub unsafe fn setSecondaryStrideInPixelsY(&self, secondary_stride_in_pixels_y: NSUInteger);

        #[method(primaryDilationRateX)]
        pub unsafe fn primaryDilationRateX(&self) -> NSUInteger;

        #[method(primaryDilationRateY)]
        pub unsafe fn primaryDilationRateY(&self) -> NSUInteger;

        #[method(secondaryDilationRateX)]
        pub unsafe fn secondaryDilationRateX(&self) -> NSUInteger;

        #[method(secondaryDilationRateY)]
        pub unsafe fn secondaryDilationRateY(&self) -> NSUInteger;

        #[method(isBackwards)]
        pub unsafe fn isBackwards(&self) -> bool;

        #[method(isStateModified)]
        pub unsafe fn isStateModified(&self) -> bool;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method_id(@__retain_semantics Other padding)]
        pub unsafe fn padding(&self) -> Retained<ProtocolObject<dyn MPSNNPadding>>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method(setPadding:)]
        pub unsafe fn setPadding(&self, padding: &ProtocolObject<dyn MPSNNPadding>);

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other destinationImageAllocator)]
        pub unsafe fn destinationImageAllocator(
            &self,
        ) -> Retained<ProtocolObject<dyn MPSImageAllocator>>;

        #[cfg(feature = "MPSImage")]
        #[method(setDestinationImageAllocator:)]
        pub unsafe fn setDestinationImageAllocator(
            &self,
            destination_image_allocator: &ProtocolObject<dyn MPSImageAllocator>,
        );

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSImage")]
        #[method(encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:)]
        pub unsafe fn encodeToCommandBuffer_primaryImage_secondaryImage_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
            destination_image: &MPSImage,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method(encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_primaryImages_secondaryImages_destinationImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_images: &MPSImageBatch,
            secondary_images: &MPSImageBatch,
            destination_images: &MPSImageBatch,
        );

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:primaryImage:secondaryImage:)]
        pub unsafe fn encodeToCommandBuffer_primaryImage_secondaryImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:primaryImages:secondaryImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_primaryImages_secondaryImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImageBatch,
            secondary_image: &MPSImageBatch,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:primaryImage:secondaryImage:destinationState:destinationStateIsTemporary:)]
        pub unsafe fn encodeToCommandBuffer_primaryImage_secondaryImage_destinationState_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
            out_state: &mut Option<Retained<MPSState>>,
            is_temporary: bool,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationStates:destinationStateIsTemporary:)]
        pub unsafe fn encodeBatchToCommandBuffer_primaryImages_secondaryImages_destinationStates_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_images: &MPSImageBatch,
            secondary_images: &MPSImageBatch,
            out_state: &mut Option<Retained<MPSStateBatch>>,
            is_temporary: bool,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateForPrimaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn resultStateForPrimaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateBatchForPrimaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn resultStateBatchForPrimaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            primary_image: &MPSImageBatch,
            secondary_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateForCommandBuffer:primaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateForCommandBuffer_primaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateBatchForCommandBuffer:primaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateBatchForCommandBuffer_primaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            primary_image: &MPSImageBatch,
            secondary_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[method(isResultStateReusedAcrossBatch)]
        pub unsafe fn isResultStateReusedAcrossBatch(&self) -> bool;

        #[method(appendBatchBarrier)]
        pub unsafe fn appendBatchBarrier(&self) -> bool;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other destinationImageDescriptorForSourceImages:sourceStates:)]
        pub unsafe fn destinationImageDescriptorForSourceImages_sourceStates(
            &self,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
        ) -> Retained<MPSImageDescriptor>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method(encodingStorageSizeForPrimaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn encodingStorageSizeForPrimaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            primary_image: &MPSImage,
            secondary_image: &MPSImage,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: Option<&MPSImage>,
        ) -> NSUInteger;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method(batchEncodingStorageSizeForPrimaryImage:secondaryImage:sourceStates:destinationImage:)]
        pub unsafe fn batchEncodingStorageSizeForPrimaryImage_secondaryImage_sourceStates_destinationImage(
            &self,
            primary_image: &MPSImageBatch,
            secondary_image: &MPSImageBatch,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: Option<&MPSImageBatch>,
        ) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNBinaryKernel {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNBinaryKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnngradientkernel?language=objc)
    #[unsafe(super(MPSCNNBinaryKernel, MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSCNNGradientKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSCNNGradientKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSCNNGradientKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSCNNGradientKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSCNNGradientKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSCNNGradientKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNGradientKernel {
        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;

        #[method(kernelOffsetX)]
        pub unsafe fn kernelOffsetX(&self) -> NSInteger;

        #[method(setKernelOffsetX:)]
        pub unsafe fn setKernelOffsetX(&self, kernel_offset_x: NSInteger);

        #[method(kernelOffsetY)]
        pub unsafe fn kernelOffsetY(&self) -> NSInteger;

        #[method(setKernelOffsetY:)]
        pub unsafe fn setKernelOffsetY(&self, kernel_offset_y: NSInteger);

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:)]
        pub unsafe fn encodeToCommandBuffer_sourceGradient_sourceImage_gradientState(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_gradient: &MPSImage,
            source_image: &MPSImage,
            gradient_state: &MPSState,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method(encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:destinationGradient:)]
        pub unsafe fn encodeToCommandBuffer_sourceGradient_sourceImage_gradientState_destinationGradient(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_gradient: &MPSImage,
            source_image: &MPSImage,
            gradient_state: &MPSState,
            destination_gradient: &MPSImage,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceGradients_sourceImages_gradientStates(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_gradients: &MPSImageBatch,
            source_images: &MPSImageBatch,
            gradient_states: &MPSStateBatch,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method(encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:destinationGradients:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceGradients_sourceImages_gradientStates_destinationGradients(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_gradients: &MPSImageBatch,
            source_images: &MPSImageBatch,
            gradient_states: &MPSStateBatch,
            destination_gradients: &MPSImageBatch,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNGradientKernel {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNGradientKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshaders/mpscnnmultiarykernel?language=objc)
    #[unsafe(super(MPSKernel, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSKernel")]
    pub struct MPSCNNMultiaryKernel;
);

#[cfg(feature = "MPSKernel")]
unsafe impl NSCoding for MPSCNNMultiaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSCopying for MPSCNNMultiaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl CopyingHelper for MPSCNNMultiaryKernel {
    type Result = Self;
}

#[cfg(feature = "MPSKernel")]
unsafe impl NSObjectProtocol for MPSCNNMultiaryKernel {}

#[cfg(feature = "MPSKernel")]
unsafe impl NSSecureCoding for MPSCNNMultiaryKernel {}

extern_methods!(
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNMultiaryKernel {
        #[method_id(@__retain_semantics Init initWithDevice:sourceCount:)]
        pub unsafe fn initWithDevice_sourceCount(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
            source_count: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDevice:)]
        pub unsafe fn initWithDevice(
            this: Allocated<Self>,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<Self>;

        #[method(sourceCount)]
        pub unsafe fn sourceCount(&self) -> NSUInteger;

        #[method(clipRect)]
        pub unsafe fn clipRect(&self) -> MTLRegion;

        #[method(setClipRect:)]
        pub unsafe fn setClipRect(&self, clip_rect: MTLRegion);

        #[method(destinationFeatureChannelOffset)]
        pub unsafe fn destinationFeatureChannelOffset(&self) -> NSUInteger;

        #[method(setDestinationFeatureChannelOffset:)]
        pub unsafe fn setDestinationFeatureChannelOffset(
            &self,
            destination_feature_channel_offset: NSUInteger,
        );

        #[method(isBackwards)]
        pub unsafe fn isBackwards(&self) -> bool;

        #[method(isStateModified)]
        pub unsafe fn isStateModified(&self) -> bool;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method_id(@__retain_semantics Other padding)]
        pub unsafe fn padding(&self) -> Retained<ProtocolObject<dyn MPSNNPadding>>;

        #[cfg(feature = "MPSNeuralNetworkTypes")]
        #[method(setPadding:)]
        pub unsafe fn setPadding(&self, padding: &ProtocolObject<dyn MPSNNPadding>);

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other destinationImageAllocator)]
        pub unsafe fn destinationImageAllocator(
            &self,
        ) -> Retained<ProtocolObject<dyn MPSImageAllocator>>;

        #[cfg(feature = "MPSImage")]
        #[method(setDestinationImageAllocator:)]
        pub unsafe fn setDestinationImageAllocator(
            &self,
            destination_image_allocator: &ProtocolObject<dyn MPSImageAllocator>,
        );

        #[cfg(feature = "MPSCoreTypes")]
        #[method(offsetAtIndex:)]
        pub unsafe fn offsetAtIndex(&self, index: NSUInteger) -> MPSOffset;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setOffset:atIndex:)]
        pub unsafe fn setOffset_atIndex(&self, offset: MPSOffset, index: NSUInteger);

        #[method(sourceFeatureChannelOffsetAtIndex:)]
        pub unsafe fn sourceFeatureChannelOffsetAtIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setSourceFeatureChannelOffset:atIndex:)]
        pub unsafe fn setSourceFeatureChannelOffset_atIndex(
            &self,
            offset: NSUInteger,
            index: NSUInteger,
        );

        #[method(sourceFeatureChannelMaxCountAtIndex:)]
        pub unsafe fn sourceFeatureChannelMaxCountAtIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setSourceFeatureChannelMaxCount:atIndex:)]
        pub unsafe fn setSourceFeatureChannelMaxCount_atIndex(
            &self,
            count: NSUInteger,
            index: NSUInteger,
        );

        #[cfg(feature = "MPSCoreTypes")]
        #[method(edgeModeAtIndex:)]
        pub unsafe fn edgeModeAtIndex(&self, index: NSUInteger) -> MPSImageEdgeMode;

        #[cfg(feature = "MPSCoreTypes")]
        #[method(setEdgeMode:atIndex:)]
        pub unsafe fn setEdgeMode_atIndex(&self, edge_mode: MPSImageEdgeMode, index: NSUInteger);

        #[method(kernelWidthAtIndex:)]
        pub unsafe fn kernelWidthAtIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setKernelWidth:atIndex:)]
        pub unsafe fn setKernelWidth_atIndex(&self, width: NSUInteger, index: NSUInteger);

        #[method(kernelHeightAtIndex:)]
        pub unsafe fn kernelHeightAtIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setKernelHeight:atIndex:)]
        pub unsafe fn setKernelHeight_atIndex(&self, height: NSUInteger, index: NSUInteger);

        #[method(strideInPixelsXatIndex:)]
        pub unsafe fn strideInPixelsXatIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setStrideInPixelsX:atIndex:)]
        pub unsafe fn setStrideInPixelsX_atIndex(&self, stride: NSUInteger, index: NSUInteger);

        #[method(strideInPixelsYatIndex:)]
        pub unsafe fn strideInPixelsYatIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setStrideInPixelsY:atIndex:)]
        pub unsafe fn setStrideInPixelsY_atIndex(&self, stride: NSUInteger, index: NSUInteger);

        #[method(dilationRateXatIndex:)]
        pub unsafe fn dilationRateXatIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setDilationRateX:atIndex:)]
        pub unsafe fn setDilationRateX_atIndex(&self, dilation_rate: NSUInteger, index: NSUInteger);

        #[method(dilationRateYatIndex:)]
        pub unsafe fn dilationRateYatIndex(&self, index: NSUInteger) -> NSUInteger;

        #[method(setDilationRateY:atIndex:)]
        pub unsafe fn setDilationRateY_atIndex(&self, dilation_rate: NSUInteger, index: NSUInteger);

        #[method_id(@__retain_semantics Init initWithCoder:device:)]
        pub unsafe fn initWithCoder_device(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "MPSImage")]
        #[method(encodeToCommandBuffer:sourceImages:destinationImage:)]
        pub unsafe fn encodeToCommandBuffer_sourceImages_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImage>,
            destination_image: &MPSImage,
        );

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method(encodeBatchToCommandBuffer:sourceImages:destinationImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_destinationImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImageBatch>,
            destination_images: &MPSImageBatch,
        );

        #[cfg(feature = "MPSImage")]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImages:)]
        pub unsafe fn encodeToCommandBuffer_sourceImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImage>,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image_batches: &NSArray<MPSImageBatch>,
        ) -> Retained<MPSImageBatch>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeToCommandBuffer:sourceImages:destinationState:destinationStateIsTemporary:)]
        pub unsafe fn encodeToCommandBuffer_sourceImages_destinationState_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_images: &NSArray<MPSImage>,
            out_state: &mut Option<Retained<MPSState>>,
            is_temporary: bool,
        ) -> Retained<MPSImage>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:)]
        pub unsafe fn encodeBatchToCommandBuffer_sourceImages_destinationStates_destinationStateIsTemporary(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image_batches: &NSArray<MPSImageBatch>,
            out_state: &mut Option<Retained<MPSStateBatch>>,
            is_temporary: bool,
        ) -> Retained<MPSImageBatch>;

        #[method(isResultStateReusedAcrossBatch)]
        pub unsafe fn isResultStateReusedAcrossBatch(&self) -> bool;

        #[method(appendBatchBarrier)]
        pub unsafe fn appendBatchBarrier(&self) -> bool;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateForSourceImages:sourceStates:destinationImage:)]
        pub unsafe fn resultStateForSourceImages_sourceStates_destinationImage(
            &self,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other resultStateBatchForSourceImages:sourceStates:destinationImage:)]
        pub unsafe fn resultStateBatchForSourceImages_sourceStates_destinationImage(
            &self,
            source_images: &NSArray<MPSImageBatch>,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateForCommandBuffer:sourceImages:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateForCommandBuffer_sourceImages_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
            destination_image: &MPSImage,
        ) -> Option<Retained<MPSState>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSNDArray", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other temporaryResultStateBatchForCommandBuffer:sourceImages:sourceStates:destinationImage:)]
        pub unsafe fn temporaryResultStateBatchForCommandBuffer_sourceImages_sourceStates_destinationImage(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            source_image: &NSArray<MPSImageBatch>,
            source_states: Option<&NSArray<MPSStateBatch>>,
            destination_image: &MPSImageBatch,
        ) -> Option<Retained<MPSStateBatch>>;

        #[cfg(all(feature = "MPSImage", feature = "MPSState"))]
        #[method_id(@__retain_semantics Other destinationImageDescriptorForSourceImages:sourceStates:)]
        pub unsafe fn destinationImageDescriptorForSourceImages_sourceStates(
            &self,
            source_images: &NSArray<MPSImage>,
            source_states: Option<&NSArray<MPSState>>,
        ) -> Retained<MPSImageDescriptor>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSKernel`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNMultiaryKernel {
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSKernel")]
    unsafe impl MPSCNNMultiaryKernel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
