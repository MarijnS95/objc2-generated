//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnsuccess?language=objc)
pub const kDAReturnSuccess: c_int = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnerror?language=objc)
pub const kDAReturnError: c_int = -119930879;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnbusy?language=objc)
pub const kDAReturnBusy: c_int = -119930878;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnbadargument?language=objc)
pub const kDAReturnBadArgument: c_int = -119930877;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnexclusiveaccess?language=objc)
pub const kDAReturnExclusiveAccess: c_int = -119930876;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnoresources?language=objc)
pub const kDAReturnNoResources: c_int = -119930875;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotfound?language=objc)
pub const kDAReturnNotFound: c_int = -119930874;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotmounted?language=objc)
pub const kDAReturnNotMounted: c_int = -119930873;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotpermitted?language=objc)
pub const kDAReturnNotPermitted: c_int = -119930872;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotprivileged?language=objc)
pub const kDAReturnNotPrivileged: c_int = -119930871;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotready?language=objc)
pub const kDAReturnNotReady: c_int = -119930870;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnnotwritable?language=objc)
pub const kDAReturnNotWritable: c_int = -119930869;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdareturnunsupported?language=objc)
pub const kDAReturnUnsupported: c_int = -119930868;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dareturn?language=objc)
#[cfg(feature = "libc")]
pub type DAReturn = libc::mach_error_t;

/// Type of a reference to DADissenter instances.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadissenter?language=objc)
#[repr(C)]
pub struct DADissenter {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__DADissenter"]
    unsafe impl DADissenter {}
);

/// Creates a new dissenter object.
///
/// Parameter `allocator`: The allocator object to be used to allocate memory.
///
/// Parameter `status`: The return code.
///
/// Parameter `string`: The return code string.  Pass NULL for no reason.
///
/// Returns: A reference to a new DADissenter.
#[cfg(feature = "libc")]
#[inline]
pub unsafe extern "C-unwind" fn DADissenterCreate(
    allocator: Option<&CFAllocator>,
    status: DAReturn,
    string: Option<&CFString>,
) -> CFRetained<DADissenter> {
    extern "C-unwind" {
        fn DADissenterCreate(
            allocator: Option<&CFAllocator>,
            status: DAReturn,
            string: Option<&CFString>,
        ) -> NonNull<DADissenter>;
    }
    let ret = unsafe { DADissenterCreate(allocator, status, string) };
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// Obtains the return code.
    ///
    /// Parameter `dissenter`: The DADissenter for which to obtain the return code.
    ///
    /// Returns: The return code.  A BSD return code, if applicable, is encoded with unix_err().
    #[cfg(feature = "libc")]
    pub fn DADissenterGetStatus(dissenter: &DADissenter) -> DAReturn;
}

/// Obtains the return code string.
///
/// Parameter `dissenter`: The DADissenter for which to obtain the return code string.
///
/// Returns: The return code string.
#[inline]
pub unsafe extern "C-unwind" fn DADissenterGetStatusString(
    dissenter: &DADissenter,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn DADissenterGetStatusString(dissenter: &DADissenter) -> *mut CFString;
    }
    let ret = unsafe { DADissenterGetStatusString(dissenter) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}
