//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/arkit/arquicklookpreviewitem?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct ARQuickLookPreviewItem;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for ARQuickLookPreviewItem {}
);

#[cfg(feature = "objc2")]
impl ARQuickLookPreviewItem {
    extern_methods!(
        #[cfg(feature = "objc2-foundation")]
        /// Creates an object representing the 3D content that will be previewed in AR Quick Look.
        ///
        ///
        /// This object will be previewed in AR Quick Look using the default
        /// behavior:
        ///
        /// - Start in Object mode without camera passthrough
        ///
        /// - Display the Share button for 3D content sharing
        ///
        /// - Allow scaling content in both Object and AR mode
        ///
        /// This is a promise to the ARQuickLookPreviewItem class that the URL points to a 3D content file. This class does not deal with the file's existence or content, and leaves it up to QuickLook to handle and process the URL.
        ///
        ///
        /// Parameter `url`: A file URL to 3D content file (e.g. usdz).
        ///
        /// Returns: The preview object to display in AR Quick Look.
        #[unsafe(method(initWithFileAtURL:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileAtURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "objc2-foundation")]
        /// An optional canonical web page URL for the 3D content that will be shared.
        ///
        ///
        /// If this is supplied, the URL to the canonical web page is shared instead of the 3D content file.
        /// For example, providing https://developer.apple.com/arkit/gallery/ as the canonical web page URL string will be shared via the Share button. If the web page URL string is malformed or not provided, then AR Quick Look will default to sharing the 3D content.
        #[unsafe(method(canonicalWebPageURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn canonicalWebPageURL(&self) -> Option<Retained<NSURL>>;

        #[cfg(feature = "objc2-foundation")]
        /// Setter for [`canonicalWebPageURL`][Self::canonicalWebPageURL].
        #[unsafe(method(setCanonicalWebPageURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCanonicalWebPageURL(&self, canonical_web_page_url: Option<&NSURL>);

        /// Whether or not AR Quick Look allows content scaling in AR mode.
        /// Defaults to `YES` which allows scaling content in AR mode.
        #[unsafe(method(allowsContentScaling))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsContentScaling(&self) -> bool;

        /// Setter for [`allowsContentScaling`][Self::allowsContentScaling].
        #[unsafe(method(setAllowsContentScaling:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsContentScaling(&self, allows_content_scaling: bool);

        /// Unavailable
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
