//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// A reference image to be detected in the scene.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/arkit/arreferenceimage?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct ARReferenceImage;
);

#[cfg(feature = "objc2")]
unsafe impl Send for ARReferenceImage {}

#[cfg(feature = "objc2")]
unsafe impl Sync for ARReferenceImage {}

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for ARReferenceImage {}

#[cfg(feature = "objc2")]
extern_methods!(
    #[cfg(feature = "objc2")]
    unsafe impl ARReferenceImage {
        #[cfg(feature = "objc2-foundation")]
        /// An optional name used to identify the image.
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "objc2-foundation")]
        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[cfg(feature = "objc2-core-foundation")]
        /// The physical size of the image in meters.
        #[method(physicalSize)]
        pub unsafe fn physicalSize(&self) -> CGSize;

        #[cfg(feature = "objc2-foundation")]
        /// The AR resource group name for this image.
        ///
        /// If this image was loaded via an AR resource group in the Xcode asset catalogue this property will have the name of the resource group,
        /// else be set to nil.
        #[method_id(@__retain_semantics Other resourceGroupName)]
        pub unsafe fn resourceGroupName(&self) -> Option<Retained<NSString>>;

        #[cfg(all(feature = "block2", feature = "objc2-foundation"))]
        /// Validate if this image can be used for image detection or tracking.
        ///
        /// When loading reference images from the asset catalog this verification is not needed as the same verification happens
        /// at compile time.
        ///
        /// Parameter `completionHandler`: Completion handler invoked when validation is done. The completion handler takes the following parameters:
        /// error - An error that indicates why the image is not suitable for tracking, or nil if no error occurred.
        #[method(validateWithCompletionHandler:)]
        pub unsafe fn validateWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "objc2-foundation")]
        /// Returns the set of ARReferenceImages in the specified resource group and bundle.
        ///
        ///
        /// Parameter `name`: The name of the resource group.
        ///
        /// Parameter `bundle`: The bundle containing the image file or asset catalog. Specify nil to search the appâ€™s main bundle.
        ///
        /// Returns: The set of reference images or nil on error.
        #[method_id(@__retain_semantics Other referenceImagesInGroupNamed:bundle:)]
        pub unsafe fn referenceImagesInGroupNamed_bundle(
            name: &NSString,
            bundle: Option<&NSBundle>,
        ) -> Option<Retained<NSSet<ARReferenceImage>>>;

        /// Unavailable
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
