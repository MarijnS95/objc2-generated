//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// Result of a raycast on a single target.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/arkit/arraycastresult?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct ARRaycastResult;
);

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for ARRaycastResult {}

#[cfg(feature = "objc2")]
extern_methods!(
    #[cfg(feature = "objc2")]
    unsafe impl ARRaycastResult {
        #[cfg(feature = "ARRaycastQuery")]
        /// Type of the target where the ray terminated.
        #[method(target)]
        pub unsafe fn target(&self) -> ARRaycastTarget;

        #[cfg(feature = "ARRaycastQuery")]
        /// Alignment of the target.
        #[method(targetAlignment)]
        pub unsafe fn targetAlignment(&self) -> ARRaycastTargetAlignment;

        #[cfg(feature = "ARAnchor")]
        /// The anchor that the ray intersected.
        ///
        ///
        /// In case of an existing plane target, an anchor will always be provided. In case of an estimated plane target,
        /// an anchor may be provided if the ray hit an existing plane.
        #[method_id(@__retain_semantics Other anchor)]
        pub unsafe fn anchor(&self) -> Option<Retained<ARAnchor>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(&self) -> Retained<Self>;
    }
);

#[cfg(feature = "objc2")]
extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2")]
    unsafe impl ARRaycastResult {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new_class() -> Retained<Self>;
    }
);
