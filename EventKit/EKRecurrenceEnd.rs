//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Class which represents when a recurrence should end.
    ///
    /// EKRecurrenceEnd is an attribute of EKRecurrenceRule that defines how long
    /// the recurrence is scheduled to repeat. The recurrence can be defined either
    /// with an NSUInteger that indicates the total number times it repeats, or with
    /// an NSDate, after which it no longer repeats. An event which is set to never
    /// end should have its EKRecurrenceEnd set to nil.
    ///
    /// If the end of the pattern is defines with an NSDate, the client must pass a
    /// valid NSDate, nil cannot be passed. If the end of the pattern is defined as
    /// terms of a number of occurrences, the occurrenceCount passed to the initializer
    /// must be positive, it cannot be 0. If the client attempts to initialize a
    /// EKRecurrenceEnd with a nil NSDate or OccurrenceCount of 0, an exception is raised.
    ///
    /// A EKRecurrenceEnd initialized with an end date will return 0 for occurrenceCount.
    /// One initialized with a number of occurrences will return nil for its endDate.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekrecurrenceend?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EKRecurrenceEnd;
);

unsafe impl NSCoding for EKRecurrenceEnd {}

unsafe impl NSCopying for EKRecurrenceEnd {}

unsafe impl CopyingHelper for EKRecurrenceEnd {
    type Result = Self;
}

unsafe impl NSObjectProtocol for EKRecurrenceEnd {}

unsafe impl NSSecureCoding for EKRecurrenceEnd {}

extern_methods!(
    unsafe impl EKRecurrenceEnd {
        /// Creates an autoreleased recurrence end with a specific end date.
        #[method_id(@__method_family Other recurrenceEndWithEndDate:)]
        pub unsafe fn recurrenceEndWithEndDate(end_date: &NSDate) -> Retained<Self>;

        /// Creates an autoreleased recurrence end with a maximum occurrence count.
        #[method_id(@__method_family Other recurrenceEndWithOccurrenceCount:)]
        pub unsafe fn recurrenceEndWithOccurrenceCount(
            occurrence_count: NSUInteger,
        ) -> Retained<Self>;

        /// The end date of this recurrence, or nil if it's count-based.
        #[method_id(@__method_family Other endDate)]
        pub unsafe fn endDate(&self) -> Option<Retained<NSDate>>;

        /// The maximum occurrence count, or 0 if it's date-based.
        #[method(occurrenceCount)]
        pub unsafe fn occurrenceCount(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl EKRecurrenceEnd {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
