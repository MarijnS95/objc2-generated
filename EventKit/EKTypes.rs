//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKAuthorizationStatus {
        #[doc(alias = "EKAuthorizationStatusNotDetermined")]
        NotDetermined = 0,
        #[doc(alias = "EKAuthorizationStatusRestricted")]
        Restricted = 1,
        #[doc(alias = "EKAuthorizationStatusDenied")]
        Denied = 2,
        #[doc(alias = "EKAuthorizationStatusFullAccess")]
        FullAccess = 3,
        #[doc(alias = "EKAuthorizationStatusWriteOnly")]
        WriteOnly = 4,
        #[deprecated = "Check for full access or write only access"]
        #[doc(alias = "EKAuthorizationStatusAuthorized")]
        Authorized = EKAuthorizationStatus::FullAccess.0,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKWeekday {
        #[doc(alias = "EKWeekdaySunday")]
        Sunday = 1,
        #[doc(alias = "EKWeekdayMonday")]
        Monday = 2,
        #[doc(alias = "EKWeekdayTuesday")]
        Tuesday = 3,
        #[doc(alias = "EKWeekdayWednesday")]
        Wednesday = 4,
        #[doc(alias = "EKWeekdayThursday")]
        Thursday = 5,
        #[doc(alias = "EKWeekdayFriday")]
        Friday = 6,
        #[doc(alias = "EKWeekdaySaturday")]
        Saturday = 7,
        #[deprecated = "Use EKWeekdaySunday instead"]
        EKSunday = EKWeekday::Sunday.0,
        #[deprecated = "Use EKWeekdayMonday instead"]
        EKMonday = EKWeekday::Monday.0,
        #[deprecated = "Use EKWeekdayTuesday instead"]
        EKTuesday = EKWeekday::Tuesday.0,
        #[deprecated = "Use EKWeekdayWednesday instead"]
        EKWednesday = EKWeekday::Wednesday.0,
        #[deprecated = "Use EKWeekdayThursday instead"]
        EKThursday = EKWeekday::Thursday.0,
        #[deprecated = "Use EKWeekdayFriday instead"]
        EKFriday = EKWeekday::Friday.0,
        #[deprecated = "Use EKWeekdaySaturday instead"]
        EKSaturday = EKWeekday::Saturday.0,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKRecurrenceFrequency {
        #[doc(alias = "EKRecurrenceFrequencyDaily")]
        Daily = 0,
        #[doc(alias = "EKRecurrenceFrequencyWeekly")]
        Weekly = 1,
        #[doc(alias = "EKRecurrenceFrequencyMonthly")]
        Monthly = 2,
        #[doc(alias = "EKRecurrenceFrequencyYearly")]
        Yearly = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKParticipantType {
        #[doc(alias = "EKParticipantTypeUnknown")]
        Unknown = 0,
        #[doc(alias = "EKParticipantTypePerson")]
        Person = 1,
        #[doc(alias = "EKParticipantTypeRoom")]
        Room = 2,
        #[doc(alias = "EKParticipantTypeResource")]
        Resource = 3,
        #[doc(alias = "EKParticipantTypeGroup")]
        Group = 4,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKParticipantRole {
        #[doc(alias = "EKParticipantRoleUnknown")]
        Unknown = 0,
        #[doc(alias = "EKParticipantRoleRequired")]
        Required = 1,
        #[doc(alias = "EKParticipantRoleOptional")]
        Optional = 2,
        #[doc(alias = "EKParticipantRoleChair")]
        Chair = 3,
        #[doc(alias = "EKParticipantRoleNonParticipant")]
        NonParticipant = 4,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKParticipantScheduleStatus {
        #[doc(alias = "EKParticipantScheduleStatusNone")]
        None = 0,
        #[doc(alias = "EKParticipantScheduleStatusPending")]
        Pending = 1,
        #[doc(alias = "EKParticipantScheduleStatusSent")]
        Sent = 2,
        #[doc(alias = "EKParticipantScheduleStatusDelivered")]
        Delivered = 3,
        #[doc(alias = "EKParticipantScheduleStatusRecipientNotRecognized")]
        RecipientNotRecognized = 4,
        #[doc(alias = "EKParticipantScheduleStatusNoPrivileges")]
        NoPrivileges = 5,
        #[doc(alias = "EKParticipantScheduleStatusDeliveryFailed")]
        DeliveryFailed = 6,
        #[doc(alias = "EKParticipantScheduleStatusCannotDeliver")]
        CannotDeliver = 7,
        #[doc(alias = "EKParticipantScheduleStatusRecipientNotAllowed")]
        RecipientNotAllowed = 8,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKParticipantStatus {
        #[doc(alias = "EKParticipantStatusUnknown")]
        Unknown = 0,
        #[doc(alias = "EKParticipantStatusPending")]
        Pending = 1,
        #[doc(alias = "EKParticipantStatusAccepted")]
        Accepted = 2,
        #[doc(alias = "EKParticipantStatusDeclined")]
        Declined = 3,
        #[doc(alias = "EKParticipantStatusTentative")]
        Tentative = 4,
        #[doc(alias = "EKParticipantStatusDelegated")]
        Delegated = 5,
        #[doc(alias = "EKParticipantStatusCompleted")]
        Completed = 6,
        #[doc(alias = "EKParticipantStatusInProcess")]
        InProcess = 7,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKCalendarType {
        #[doc(alias = "EKCalendarTypeLocal")]
        Local = 0,
        #[doc(alias = "EKCalendarTypeCalDAV")]
        CalDAV = 1,
        #[doc(alias = "EKCalendarTypeExchange")]
        Exchange = 2,
        #[doc(alias = "EKCalendarTypeSubscription")]
        Subscription = 3,
        #[doc(alias = "EKCalendarTypeBirthday")]
        Birthday = 4,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum EKCalendarEventAvailabilityMask {
        EKCalendarEventAvailabilityNone = 0,
        EKCalendarEventAvailabilityBusy = 1 << 0,
        EKCalendarEventAvailabilityFree = 1 << 1,
        EKCalendarEventAvailabilityTentative = 1 << 2,
        EKCalendarEventAvailabilityUnavailable = 1 << 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKSourceType {
        #[doc(alias = "EKSourceTypeLocal")]
        Local = 0,
        #[doc(alias = "EKSourceTypeExchange")]
        Exchange = 1,
        #[doc(alias = "EKSourceTypeCalDAV")]
        CalDAV = 2,
        #[doc(alias = "EKSourceTypeMobileMe")]
        MobileMe = 3,
        #[doc(alias = "EKSourceTypeSubscribed")]
        Subscribed = 4,
        #[doc(alias = "EKSourceTypeBirthdays")]
        Birthdays = 5,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum EKEntityType {
        #[doc(alias = "EKEntityTypeEvent")]
        Event = 0,
        #[doc(alias = "EKEntityTypeReminder")]
        Reminder = 1,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum EKEntityMask {
        #[doc(alias = "EKEntityMaskEvent")]
        Event = 1 << EKEntityType::Event.0,
        #[doc(alias = "EKEntityMaskReminder")]
        Reminder = 1 << EKEntityType::Reminder.0,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKAlarmProximity {
        #[doc(alias = "EKAlarmProximityNone")]
        None = 0,
        #[doc(alias = "EKAlarmProximityEnter")]
        Enter = 1,
        #[doc(alias = "EKAlarmProximityLeave")]
        Leave = 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum EKAlarmType {
        #[doc(alias = "EKAlarmTypeDisplay")]
        Display = 0,
        #[doc(alias = "EKAlarmTypeAudio")]
        Audio = 1,
        #[doc(alias = "EKAlarmTypeProcedure")]
        Procedure = 2,
        #[doc(alias = "EKAlarmTypeEmail")]
        Email = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum EKReminderPriority {
        #[doc(alias = "EKReminderPriorityNone")]
        None = 0,
        #[doc(alias = "EKReminderPriorityHigh")]
        High = 1,
        #[doc(alias = "EKReminderPriorityMedium")]
        Medium = 5,
        #[doc(alias = "EKReminderPriorityLow")]
        Low = 9,
    }
);
