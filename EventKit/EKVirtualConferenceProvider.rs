//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Provides virtual conferences to Calendar.
    ///
    /// Subclass this class in your extension and override the below two methods.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekvirtualconferenceprovider?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EKVirtualConferenceProvider;
);

unsafe impl NSExtensionRequestHandling for EKVirtualConferenceProvider {}

unsafe impl NSObjectProtocol for EKVirtualConferenceProvider {}

extern_methods!(
    unsafe impl EKVirtualConferenceProvider {
        #[cfg(all(feature = "EKVirtualConferenceDescriptor", feature = "block2"))]
        /// Called to determine the available virtual conference room types that the user can add to a calendar event.
        ///
        /// Your extension must override this method in order to present virtual conference options in Calendar's UI.
        /// When your extension has finished determining what room types are available, call the completion handler with
        /// an array of EKVirtualConferenceRoomTypeDescriptors. Most extensions will only need to provide one room type.
        ///
        /// Parameter `completionHandler`: A block to call when your extension has finished retrieving available room types. If
        /// your extension is unable to provide any room types at this time, call this block with nil
        /// for the first argument and an appropriate NSError object for the second argument. Do not
        /// call this block with nil for both arguments. Similarly, do not call this block with both
        /// a non-nil array and a non-nil NSError. This block must be called when your extension has
        /// finished its work.
        #[method(fetchAvailableRoomTypesWithCompletionHandler:)]
        pub unsafe fn fetchAvailableRoomTypesWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSArray<EKVirtualConferenceRoomTypeDescriptor>, *mut NSError),
            >,
        );

        #[cfg(all(feature = "EKVirtualConferenceDescriptor", feature = "block2"))]
        /// Called to fetch the specific virtual conference details to add to an event.
        ///
        /// Your extension must override this method in order to add virtual conferences to calendar events.
        /// When your extension has finished retrieving the requested virtual conference details, create an
        /// EKVirtualConferenceDescriptor object containing the virtual conference details and call the completion handler
        /// with the EKVirtualConferenceDescriptor object as the first argument.
        ///
        /// Parameter `identifier`: Represents the room type that the user chose. This is the same identifier that your extension
        /// chose for this EKVirtualConferenceRoomTypeDescriptor in an earlier call to
        /// fetchAvailableRoomTypesWithCompletionHandler:.
        ///
        /// Parameter `completionHandler`: A block to call when your extension has finished retrieving the virtual conference details.
        /// If your extension is unable to retrieve virtual conference details at this time (for example,
        /// because network access is not available), call this block with nil for the first argument and
        /// an appropriate NSError object for the second argument. Do not call this block with nil for
        /// both arguments. Similarly, do not call this block with both a non-nil
        /// EKVirtualConferenceDescriptor and a non-nil NSError.  This block must be called when your
        /// extension has finished its work.
        #[method(fetchVirtualConferenceForIdentifier:completionHandler:)]
        pub unsafe fn fetchVirtualConferenceForIdentifier_completionHandler(
            &self,
            identifier: &EKVirtualConferenceRoomTypeIdentifier,
            completion_handler: &block2::Block<
                dyn Fn(*mut EKVirtualConferenceDescriptor, *mut NSError),
            >,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl EKVirtualConferenceProvider {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
