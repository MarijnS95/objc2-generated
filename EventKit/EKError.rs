//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// Error domain for NSError values stemming from the EventKit Framework API.
    ///
    /// This error domain is used as the domain for all NSError instances stemming from the
    /// EventKit Framework.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekerrordomain?language=objc)
    pub static EKErrorDomain: Option<&'static NSString>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekerrorcode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct EKErrorCode(pub NSInteger);
impl EKErrorCode {
    #[doc(alias = "EKErrorEventNotMutable")]
    pub const EventNotMutable: Self = Self(0);
    #[doc(alias = "EKErrorNoCalendar")]
    pub const NoCalendar: Self = Self(1);
    #[doc(alias = "EKErrorNoStartDate")]
    pub const NoStartDate: Self = Self(2);
    #[doc(alias = "EKErrorNoEndDate")]
    pub const NoEndDate: Self = Self(3);
    #[doc(alias = "EKErrorDatesInverted")]
    pub const DatesInverted: Self = Self(4);
    #[doc(alias = "EKErrorInternalFailure")]
    pub const InternalFailure: Self = Self(5);
    #[doc(alias = "EKErrorCalendarReadOnly")]
    pub const CalendarReadOnly: Self = Self(6);
    #[doc(alias = "EKErrorDurationGreaterThanRecurrence")]
    pub const DurationGreaterThanRecurrence: Self = Self(7);
    #[doc(alias = "EKErrorAlarmGreaterThanRecurrence")]
    pub const AlarmGreaterThanRecurrence: Self = Self(8);
    #[doc(alias = "EKErrorStartDateTooFarInFuture")]
    pub const StartDateTooFarInFuture: Self = Self(9);
    #[doc(alias = "EKErrorStartDateCollidesWithOtherOccurrence")]
    pub const StartDateCollidesWithOtherOccurrence: Self = Self(10);
    #[doc(alias = "EKErrorObjectBelongsToDifferentStore")]
    pub const ObjectBelongsToDifferentStore: Self = Self(11);
    #[doc(alias = "EKErrorInvitesCannotBeMoved")]
    pub const InvitesCannotBeMoved: Self = Self(12);
    #[doc(alias = "EKErrorInvalidSpan")]
    pub const InvalidSpan: Self = Self(13);
    #[doc(alias = "EKErrorCalendarHasNoSource")]
    pub const CalendarHasNoSource: Self = Self(14);
    #[doc(alias = "EKErrorCalendarSourceCannotBeModified")]
    pub const CalendarSourceCannotBeModified: Self = Self(15);
    #[doc(alias = "EKErrorCalendarIsImmutable")]
    pub const CalendarIsImmutable: Self = Self(16);
    #[doc(alias = "EKErrorSourceDoesNotAllowCalendarAddDelete")]
    pub const SourceDoesNotAllowCalendarAddDelete: Self = Self(17);
    #[doc(alias = "EKErrorRecurringReminderRequiresDueDate")]
    pub const RecurringReminderRequiresDueDate: Self = Self(18);
    #[doc(alias = "EKErrorStructuredLocationsNotSupported")]
    pub const StructuredLocationsNotSupported: Self = Self(19);
    #[doc(alias = "EKErrorReminderLocationsNotSupported")]
    pub const ReminderLocationsNotSupported: Self = Self(20);
    #[doc(alias = "EKErrorAlarmProximityNotSupported")]
    pub const AlarmProximityNotSupported: Self = Self(21);
    #[doc(alias = "EKErrorCalendarDoesNotAllowEvents")]
    pub const CalendarDoesNotAllowEvents: Self = Self(22);
    #[doc(alias = "EKErrorCalendarDoesNotAllowReminders")]
    pub const CalendarDoesNotAllowReminders: Self = Self(23);
    #[doc(alias = "EKErrorSourceDoesNotAllowReminders")]
    pub const SourceDoesNotAllowReminders: Self = Self(24);
    #[doc(alias = "EKErrorSourceDoesNotAllowEvents")]
    pub const SourceDoesNotAllowEvents: Self = Self(25);
    #[doc(alias = "EKErrorPriorityIsInvalid")]
    pub const PriorityIsInvalid: Self = Self(26);
    #[doc(alias = "EKErrorInvalidEntityType")]
    pub const InvalidEntityType: Self = Self(27);
    #[doc(alias = "EKErrorProcedureAlarmsNotMutable")]
    pub const ProcedureAlarmsNotMutable: Self = Self(28);
    #[doc(alias = "EKErrorEventStoreNotAuthorized")]
    pub const EventStoreNotAuthorized: Self = Self(29);
    #[doc(alias = "EKErrorOSNotSupported")]
    pub const OSNotSupported: Self = Self(30);
    #[doc(alias = "EKErrorInvalidInviteReplyCalendar")]
    pub const InvalidInviteReplyCalendar: Self = Self(31);
    #[doc(alias = "EKErrorNotificationsCollectionFlagNotSet")]
    pub const NotificationsCollectionFlagNotSet: Self = Self(32);
    #[doc(alias = "EKErrorSourceMismatch")]
    pub const SourceMismatch: Self = Self(33);
    #[doc(alias = "EKErrorNotificationCollectionMismatch")]
    pub const NotificationCollectionMismatch: Self = Self(34);
    #[doc(alias = "EKErrorNotificationSavedWithoutCollection")]
    pub const NotificationSavedWithoutCollection: Self = Self(35);
    #[doc(alias = "EKErrorReminderAlarmContainsEmailOrUrl")]
    pub const ReminderAlarmContainsEmailOrUrl: Self = Self(36);
    #[doc(alias = "EKErrorLast")]
    pub const Last: Self = Self(37);
}

unsafe impl Encode for EKErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for EKErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
