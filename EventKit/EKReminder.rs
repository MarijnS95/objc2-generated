//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The EKReminder class represents a reminder (task/todo).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekreminder?language=objc)
    #[unsafe(super(EKCalendarItem, EKObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "EKCalendarItem", feature = "EKObject"))]
    pub struct EKReminder;
);

#[cfg(all(feature = "EKCalendarItem", feature = "EKObject"))]
unsafe impl NSObjectProtocol for EKReminder {}

extern_methods!(
    #[cfg(all(feature = "EKCalendarItem", feature = "EKObject"))]
    unsafe impl EKReminder {
        #[cfg(feature = "EKEventStore")]
        /// Creates a new reminder in the given event store.
        #[unsafe(method_family(none))]
        #[method_id(reminderWithEventStore:)]
        pub unsafe fn reminderWithEventStore(event_store: &EKEventStore) -> Retained<EKReminder>;

        /// The start date of the task, as date components.
        ///
        /// The use of date components allows the start date and its time zone to be represented in a single property.
        /// A nil time zone represents a floating date.  Setting a date component without a hour, minute and second component will set allDay to YES.
        /// If you set this property, the calendar must be set to NSCalendarIdentifierGregorian. An exception is raised otherwise.
        #[unsafe(method_family(none))]
        #[method_id(startDateComponents)]
        pub unsafe fn startDateComponents(&self) -> Option<Retained<NSDateComponents>>;

        /// Setter for [`startDateComponents`][Self::startDateComponents].
        #[method(setStartDateComponents:)]
        pub unsafe fn setStartDateComponents(
            &self,
            start_date_components: Option<&NSDateComponents>,
        );

        /// The date by which this reminder should be completed.
        ///
        /// The use of date components allows the due date and its time zone to be represented in a single property.
        /// A nil time zone represents a floating date.  Setting a date component without a hour, minute and second component will set allDay to YES.
        /// If you set this property, the calendar must be set to NSCalendarIdentifierGregorian. An exception is raised otherwise.
        ///
        /// On iOS, if you set the due date for a reminder, you must also set a start date, otherwise you will receive
        /// an error (EKErrorNoStartDate) when attempting to save this reminder. This is not a requirement on OS X.
        #[unsafe(method_family(none))]
        #[method_id(dueDateComponents)]
        pub unsafe fn dueDateComponents(&self) -> Option<Retained<NSDateComponents>>;

        /// Setter for [`dueDateComponents`][Self::dueDateComponents].
        #[method(setDueDateComponents:)]
        pub unsafe fn setDueDateComponents(&self, due_date_components: Option<&NSDateComponents>);

        /// Whether or not the reminder is completed.
        ///
        /// Setting it to YES will set the completed date to the current date.
        /// Setting it to NO will set the completed date to nil.
        #[method(isCompleted)]
        pub unsafe fn isCompleted(&self) -> bool;

        /// Setter for [`isCompleted`][Self::isCompleted].
        #[method(setCompleted:)]
        pub unsafe fn setCompleted(&self, completed: bool);

        /// The date on which this reminder was completed.
        #[unsafe(method_family(none))]
        #[method_id(completionDate)]
        pub unsafe fn completionDate(&self) -> Option<Retained<NSDate>>;

        /// Setter for [`completionDate`][Self::completionDate].
        #[method(setCompletionDate:)]
        pub unsafe fn setCompletionDate(&self, completion_date: Option<&NSDate>);

        /// The priority of the reminder.
        ///
        /// Priorities run from 1 (highest) to 9 (lowest).  A priority of 0 means no priority.
        /// Saving a reminder with any other priority will fail.
        /// Per RFC 5545, priorities of 1-4 are considered "high," a priority of 5 is "medium," and priorities of 6-9 are "low."
        #[method(priority)]
        pub unsafe fn priority(&self) -> NSUInteger;

        /// Setter for [`priority`][Self::priority].
        #[method(setPriority:)]
        pub unsafe fn setPriority(&self, priority: NSUInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "EKCalendarItem", feature = "EKObject"))]
    unsafe impl EKReminder {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
