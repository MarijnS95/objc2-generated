//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/eventkit/eksource?language=objc)
    #[unsafe(super(EKObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "EKObject")]
    pub struct EKSource;
);

#[cfg(feature = "EKObject")]
unsafe impl NSObjectProtocol for EKSource {}

extern_methods!(
    #[cfg(feature = "EKObject")]
    unsafe impl EKSource {
        #[method_id(@__method_family Other sourceIdentifier)]
        pub unsafe fn sourceIdentifier(&self) -> Retained<NSString>;

        #[cfg(feature = "EKTypes")]
        #[method(sourceType)]
        pub unsafe fn sourceType(&self) -> EKSourceType;

        #[method_id(@__method_family Other title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[cfg(feature = "EKCalendar")]
        /// This is now deprecated in favor of -[EKSource calendarsForEntityType:]
        #[method_id(@__method_family Other calendars)]
        pub unsafe fn calendars(&self) -> Retained<NSSet<EKCalendar>>;

        #[cfg(all(feature = "EKCalendar", feature = "EKTypes"))]
        /// Returns the calendars that belong to this source that
        /// support a given entity type (reminders, events)
        #[method_id(@__method_family Other calendarsForEntityType:)]
        pub unsafe fn calendarsForEntityType(
            &self,
            entity_type: EKEntityType,
        ) -> Retained<NSSet<EKCalendar>>;

        /// Returns YES if this EKSource represents an account delegated by another user.
        #[method(isDelegate)]
        pub unsafe fn isDelegate(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "EKObject")]
    unsafe impl EKSource {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
