//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypeidentifier?language=objc)
pub type EKVirtualConferenceRoomTypeIdentifier = NSString;

extern_class!(
    /// Describes a virtual conference room type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypedescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EKVirtualConferenceRoomTypeDescriptor;
);

unsafe impl NSObjectProtocol for EKVirtualConferenceRoomTypeDescriptor {}

extern_methods!(
    unsafe impl EKVirtualConferenceRoomTypeDescriptor {
        /// Initializes an instance of EKVirtualConferenceRoomTypeDescriptor.
        ///
        /// Parameter `title`: A user-readable title describing this room type. This string will be
        /// displayed in UI.
        ///
        /// Parameter `identifier`: An EKVirtualConferenceRoomTypeIdentifier that your extension can use to
        /// distinguish this room type from the other room types that your extension
        /// provides. This is chosen by your extension and is passed back to your
        /// extension if the user chooses to create a virtual conference of the
        /// associated room type.
        #[method_id(@__retain_semantics Init initWithTitle:identifier:)]
        pub unsafe fn initWithTitle_identifier(
            this: Allocated<Self>,
            title: &NSString,
            identifier: &EKVirtualConferenceRoomTypeIdentifier,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<EKVirtualConferenceRoomTypeIdentifier>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Describes a URL that can be used to join a virtual conference.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekvirtualconferenceurldescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EKVirtualConferenceURLDescriptor;
);

unsafe impl NSObjectProtocol for EKVirtualConferenceURLDescriptor {}

extern_methods!(
    unsafe impl EKVirtualConferenceURLDescriptor {
        /// Initializes an instance of EKVirtualConferenceURLDescriptor.
        ///
        /// Parameter `title`: A user-readable title describing this URL. This string may be displayed
        /// in the UI. This string is optional and may be left nil. If your virtual
        /// conference only has one way to join it, then you can probably leave this
        /// nil. However, if your virtual conference has multiple ways to join it,
        /// you should have a title for each URL so that users can better understand
        /// what each URL represents.
        ///
        /// Parameter `URL`: A URL that, when opened, will join the virtual conference.
        #[method_id(@__retain_semantics Init initWithTitle:URL:)]
        pub unsafe fn initWithTitle_URL(
            this: Allocated<Self>,
            title: Option<&NSString>,
            url: &NSURL,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Retained<NSURL>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Describes a virtual conference.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EKVirtualConferenceDescriptor;
);

unsafe impl NSObjectProtocol for EKVirtualConferenceDescriptor {}

extern_methods!(
    unsafe impl EKVirtualConferenceDescriptor {
        /// Initializes an instance of EKVirtualConferenceDescriptor.
        ///
        /// Parameter `title`: A user-readable title describing this virtual conference. This string
        /// may be displayed in the UI. This string is optional and may be left nil.
        ///
        /// Parameter `URLDescriptors`: An array of EKVirtualConferenceURLDescriptors, representing the various
        /// ways to join your virtual conference. Do not pass an empty array. Your
        /// array should be ordered such that the most preferred method of joining
        /// the virtual conference comes first in the array, with subsequent methods
        /// of joining appearing in descending priority.
        ///
        /// Parameter `conferenceDetails`: A user-readable string containing any other information you wish to
        /// communicate to the user about this virtual conference. This string will
        /// be displayed in the UI. This argument is optional and may be left nil.
        #[method_id(@__retain_semantics Init initWithTitle:URLDescriptors:conferenceDetails:)]
        pub unsafe fn initWithTitle_URLDescriptors_conferenceDetails(
            this: Allocated<Self>,
            title: Option<&NSString>,
            url_descriptors: &NSArray<EKVirtualConferenceURLDescriptor>,
            conference_details: Option<&NSString>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other URLDescriptors)]
        pub unsafe fn URLDescriptors(&self) -> Retained<NSArray<EKVirtualConferenceURLDescriptor>>;

        #[method_id(@__retain_semantics Other conferenceDetails)]
        pub unsafe fn conferenceDetails(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
