//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// SKRange object used to define a range of allowable values
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/spritekit/skrange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKRange;
);

unsafe impl NSCoding for SKRange {}

unsafe impl NSCopying for SKRange {}

unsafe impl CopyingHelper for SKRange {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SKRange {}

unsafe impl NSSecureCoding for SKRange {}

extern_methods!(
    unsafe impl SKRange {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Init initWithLowerLimit:upperLimit:)]
        pub unsafe fn initWithLowerLimit_upperLimit(
            this: Allocated<Self>,
            lower: CGFloat,
            upper: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other rangeWithLowerLimit:upperLimit:)]
        pub unsafe fn rangeWithLowerLimit_upperLimit(
            lower: CGFloat,
            upper: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other rangeWithLowerLimit:)]
        pub unsafe fn rangeWithLowerLimit(lower: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other rangeWithUpperLimit:)]
        pub unsafe fn rangeWithUpperLimit(upper: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other rangeWithConstantValue:)]
        pub unsafe fn rangeWithConstantValue(value: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other rangeWithValue:variance:)]
        pub unsafe fn rangeWithValue_variance(value: CGFloat, variance: CGFloat) -> Retained<Self>;

        #[method_id(@__method_family Other rangeWithNoLimits)]
        pub unsafe fn rangeWithNoLimits() -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lowerLimit)]
        pub unsafe fn lowerLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`lowerLimit`][Self::lowerLimit].
        #[method(setLowerLimit:)]
        pub unsafe fn setLowerLimit(&self, lower_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(upperLimit)]
        pub unsafe fn upperLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`upperLimit`][Self::upperLimit].
        #[method(setUpperLimit:)]
        pub unsafe fn setUpperLimit(&self, upper_limit: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKRange {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SKConstraints are evaluated each frame after actions and physics.
    /// The node's transform will be changed to staisfy the constarint
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/spritekit/skconstraint?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKConstraint;
);

unsafe impl NSCoding for SKConstraint {}

unsafe impl NSCopying for SKConstraint {}

unsafe impl CopyingHelper for SKConstraint {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SKConstraint {}

unsafe impl NSSecureCoding for SKConstraint {}

extern_methods!(
    unsafe impl SKConstraint {
        #[method(enabled)]
        pub unsafe fn enabled(&self) -> bool;

        /// Setter for [`enabled`][Self::enabled].
        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        #[method_id(@__method_family Other referenceNode)]
        pub unsafe fn referenceNode(&self, mtm: MainThreadMarker) -> Option<Retained<SKNode>>;

        #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Setter for [`referenceNode`][Self::referenceNode].
        #[method(setReferenceNode:)]
        pub unsafe fn setReferenceNode(&self, reference_node: Option<&SKNode>);

        /// Constrain the node's position to a range
        #[method_id(@__method_family Other positionX:)]
        pub unsafe fn positionX(range: &SKRange) -> Retained<Self>;

        #[method_id(@__method_family Other positionY:)]
        pub unsafe fn positionY(range: &SKRange) -> Retained<Self>;

        #[method_id(@__method_family Other positionX:Y:)]
        pub unsafe fn positionX_Y(x_range: &SKRange, y_range: &SKRange) -> Retained<Self>;

        #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Constrain the node's position to be within a distance of a point or node
        #[method_id(@__method_family Other distance:toNode:)]
        pub unsafe fn distance_toNode(range: &SKRange, node: &SKNode) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other distance:toPoint:)]
        pub unsafe fn distance_toPoint(range: &SKRange, point: CGPoint) -> Retained<Self>;

        #[cfg(all(
            feature = "SKNode",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        #[method_id(@__method_family Other distance:toPoint:inNode:)]
        pub unsafe fn distance_toPoint_inNode(
            range: &SKRange,
            point: CGPoint,
            node: &SKNode,
        ) -> Retained<Self>;

        /// Constrain the node's rotation to a range
        #[method_id(@__method_family Other zRotation:)]
        pub unsafe fn zRotation(z_range: &SKRange) -> Retained<Self>;

        #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Constrain the node's rotation to orient to a point or node
        #[method_id(@__method_family Other orientToNode:offset:)]
        pub unsafe fn orientToNode_offset(node: &SKNode, radians: &SKRange) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Other orientToPoint:offset:)]
        pub unsafe fn orientToPoint_offset(point: CGPoint, radians: &SKRange) -> Retained<Self>;

        #[cfg(all(
            feature = "SKNode",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        #[method_id(@__method_family Other orientToPoint:inNode:offset:)]
        pub unsafe fn orientToPoint_inNode_offset(
            point: CGPoint,
            node: &SKNode,
            radians: &SKRange,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKConstraint {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
