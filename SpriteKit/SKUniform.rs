//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skuniformtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SKUniformType(pub NSInteger);
impl SKUniformType {
    #[doc(alias = "SKUniformTypeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "SKUniformTypeFloat")]
    pub const Float: Self = Self(1);
    #[doc(alias = "SKUniformTypeFloatVector2")]
    pub const FloatVector2: Self = Self(2);
    #[doc(alias = "SKUniformTypeFloatVector3")]
    pub const FloatVector3: Self = Self(3);
    #[doc(alias = "SKUniformTypeFloatVector4")]
    pub const FloatVector4: Self = Self(4);
    #[doc(alias = "SKUniformTypeFloatMatrix2")]
    pub const FloatMatrix2: Self = Self(5);
    #[doc(alias = "SKUniformTypeFloatMatrix3")]
    pub const FloatMatrix3: Self = Self(6);
    #[doc(alias = "SKUniformTypeFloatMatrix4")]
    pub const FloatMatrix4: Self = Self(7);
    #[doc(alias = "SKUniformTypeTexture")]
    pub const Texture: Self = Self(8);
}

unsafe impl Encode for SKUniformType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SKUniformType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skuniform?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKUniform;
);

extern_conformance!(
    unsafe impl NSCoding for SKUniform {}
);

extern_conformance!(
    unsafe impl NSCopying for SKUniform {}
);

unsafe impl CopyingHelper for SKUniform {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SKUniform {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SKUniform {}
);

impl SKUniform {
    extern_methods!(
        /// Create a shader uniform with a given name.
        ///
        ///
        /// Parameter `name`: the name of the shader uniform.
        #[unsafe(method(uniformWithName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uniformWithName(name: &NSString) -> Retained<Self>;

        #[cfg(feature = "SKTexture")]
        /// Create a shader uniform with a given name, and texture data
        ///
        ///
        /// Parameter `name`: the name of the shader uniform.
        ///
        /// Parameter `texture`: the texture data associated with this uniform.
        #[unsafe(method(uniformWithName:texture:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uniformWithName_texture(
            name: &NSString,
            texture: Option<&SKTexture>,
        ) -> Retained<Self>;

        /// Create a shader uniform with a given name, and a float value
        ///
        ///
        /// Parameter `name`: the name of the shader uniform.
        ///
        /// Parameter `value`: the floating point value associated with this uniform.
        #[unsafe(method(uniformWithName:float:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uniformWithName_float(name: &NSString, value: c_float) -> Retained<Self>;

        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        #[unsafe(method(uniformType))]
        #[unsafe(method_family = none)]
        pub unsafe fn uniformType(&self) -> SKUniformType;

        #[cfg(feature = "SKTexture")]
        #[unsafe(method(textureValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn textureValue(&self) -> Option<Retained<SKTexture>>;

        #[cfg(feature = "SKTexture")]
        /// Setter for [`textureValue`][Self::textureValue].
        #[unsafe(method(setTextureValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextureValue(&self, texture_value: Option<&SKTexture>);

        #[unsafe(method(floatValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn floatValue(&self) -> c_float;

        /// Setter for [`floatValue`][Self::floatValue].
        #[unsafe(method(setFloatValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFloatValue(&self, float_value: c_float);

        #[unsafe(method(initWithName:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName(this: Allocated<Self>, name: &NSString) -> Retained<Self>;

        #[cfg(feature = "SKTexture")]
        #[unsafe(method(initWithName:texture:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_texture(
            this: Allocated<Self>,
            name: &NSString,
            texture: Option<&SKTexture>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:float:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_float(
            this: Allocated<Self>,
            name: &NSString,
            value: c_float,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SKUniform {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
