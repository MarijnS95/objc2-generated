//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjoint?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJoint;
);

unsafe impl NSCoding for SKPhysicsJoint {}

unsafe impl NSObjectProtocol for SKPhysicsJoint {}

unsafe impl NSSecureCoding for SKPhysicsJoint {}

extern_methods!(
    unsafe impl SKPhysicsJoint {
        #[cfg(feature = "SKPhysicsBody")]
        #[method_id(@__retain_semantics Other bodyA)]
        pub unsafe fn bodyA(&self) -> Retained<SKPhysicsBody>;

        #[cfg(feature = "SKPhysicsBody")]
        /// Setter for [`bodyA`][Self::bodyA].
        #[method(setBodyA:)]
        pub unsafe fn setBodyA(&self, body_a: &SKPhysicsBody);

        #[cfg(feature = "SKPhysicsBody")]
        #[method_id(@__retain_semantics Other bodyB)]
        pub unsafe fn bodyB(&self) -> Retained<SKPhysicsBody>;

        #[cfg(feature = "SKPhysicsBody")]
        /// Setter for [`bodyB`][Self::bodyB].
        #[method(setBodyB:)]
        pub unsafe fn setBodyB(&self, body_b: &SKPhysicsBody);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(reactionForce)]
        pub unsafe fn reactionForce(&self) -> CGVector;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(reactionTorque)]
        pub unsafe fn reactionTorque(&self) -> CGFloat;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJoint {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjointpin?language=objc)
    #[unsafe(super(SKPhysicsJoint, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJointPin;
);

unsafe impl NSCoding for SKPhysicsJointPin {}

unsafe impl NSObjectProtocol for SKPhysicsJointPin {}

unsafe impl NSSecureCoding for SKPhysicsJointPin {}

extern_methods!(
    unsafe impl SKPhysicsJointPin {
        #[cfg(all(feature = "SKPhysicsBody", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other jointWithBodyA:bodyB:anchor:)]
        pub unsafe fn jointWithBodyA_bodyB_anchor(
            body_a: &SKPhysicsBody,
            body_b: &SKPhysicsBody,
            anchor: CGPoint,
        ) -> Retained<SKPhysicsJointPin>;

        #[method(shouldEnableLimits)]
        pub unsafe fn shouldEnableLimits(&self) -> bool;

        /// Setter for [`shouldEnableLimits`][Self::shouldEnableLimits].
        #[method(setShouldEnableLimits:)]
        pub unsafe fn setShouldEnableLimits(&self, should_enable_limits: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lowerAngleLimit)]
        pub unsafe fn lowerAngleLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`lowerAngleLimit`][Self::lowerAngleLimit].
        #[method(setLowerAngleLimit:)]
        pub unsafe fn setLowerAngleLimit(&self, lower_angle_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(upperAngleLimit)]
        pub unsafe fn upperAngleLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`upperAngleLimit`][Self::upperAngleLimit].
        #[method(setUpperAngleLimit:)]
        pub unsafe fn setUpperAngleLimit(&self, upper_angle_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(frictionTorque)]
        pub unsafe fn frictionTorque(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`frictionTorque`][Self::frictionTorque].
        #[method(setFrictionTorque:)]
        pub unsafe fn setFrictionTorque(&self, friction_torque: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(rotationSpeed)]
        pub unsafe fn rotationSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`rotationSpeed`][Self::rotationSpeed].
        #[method(setRotationSpeed:)]
        pub unsafe fn setRotationSpeed(&self, rotation_speed: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJointPin {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjointspring?language=objc)
    #[unsafe(super(SKPhysicsJoint, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJointSpring;
);

unsafe impl NSCoding for SKPhysicsJointSpring {}

unsafe impl NSObjectProtocol for SKPhysicsJointSpring {}

unsafe impl NSSecureCoding for SKPhysicsJointSpring {}

extern_methods!(
    unsafe impl SKPhysicsJointSpring {
        #[cfg(all(feature = "SKPhysicsBody", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other jointWithBodyA:bodyB:anchorA:anchorB:)]
        pub unsafe fn jointWithBodyA_bodyB_anchorA_anchorB(
            body_a: &SKPhysicsBody,
            body_b: &SKPhysicsBody,
            anchor_a: CGPoint,
            anchor_b: CGPoint,
        ) -> Retained<SKPhysicsJointSpring>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(damping)]
        pub unsafe fn damping(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`damping`][Self::damping].
        #[method(setDamping:)]
        pub unsafe fn setDamping(&self, damping: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(frequency)]
        pub unsafe fn frequency(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`frequency`][Self::frequency].
        #[method(setFrequency:)]
        pub unsafe fn setFrequency(&self, frequency: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJointSpring {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjointfixed?language=objc)
    #[unsafe(super(SKPhysicsJoint, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJointFixed;
);

unsafe impl NSCoding for SKPhysicsJointFixed {}

unsafe impl NSObjectProtocol for SKPhysicsJointFixed {}

unsafe impl NSSecureCoding for SKPhysicsJointFixed {}

extern_methods!(
    unsafe impl SKPhysicsJointFixed {
        #[cfg(all(feature = "SKPhysicsBody", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other jointWithBodyA:bodyB:anchor:)]
        pub unsafe fn jointWithBodyA_bodyB_anchor(
            body_a: &SKPhysicsBody,
            body_b: &SKPhysicsBody,
            anchor: CGPoint,
        ) -> Retained<SKPhysicsJointFixed>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJointFixed {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjointsliding?language=objc)
    #[unsafe(super(SKPhysicsJoint, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJointSliding;
);

unsafe impl NSCoding for SKPhysicsJointSliding {}

unsafe impl NSObjectProtocol for SKPhysicsJointSliding {}

unsafe impl NSSecureCoding for SKPhysicsJointSliding {}

extern_methods!(
    unsafe impl SKPhysicsJointSliding {
        #[cfg(all(feature = "SKPhysicsBody", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other jointWithBodyA:bodyB:anchor:axis:)]
        pub unsafe fn jointWithBodyA_bodyB_anchor_axis(
            body_a: &SKPhysicsBody,
            body_b: &SKPhysicsBody,
            anchor: CGPoint,
            axis: CGVector,
        ) -> Retained<SKPhysicsJointSliding>;

        #[method(shouldEnableLimits)]
        pub unsafe fn shouldEnableLimits(&self) -> bool;

        /// Setter for [`shouldEnableLimits`][Self::shouldEnableLimits].
        #[method(setShouldEnableLimits:)]
        pub unsafe fn setShouldEnableLimits(&self, should_enable_limits: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lowerDistanceLimit)]
        pub unsafe fn lowerDistanceLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`lowerDistanceLimit`][Self::lowerDistanceLimit].
        #[method(setLowerDistanceLimit:)]
        pub unsafe fn setLowerDistanceLimit(&self, lower_distance_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(upperDistanceLimit)]
        pub unsafe fn upperDistanceLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`upperDistanceLimit`][Self::upperDistanceLimit].
        #[method(setUpperDistanceLimit:)]
        pub unsafe fn setUpperDistanceLimit(&self, upper_distance_limit: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJointSliding {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skphysicsjointlimit?language=objc)
    #[unsafe(super(SKPhysicsJoint, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SKPhysicsJointLimit;
);

unsafe impl NSCoding for SKPhysicsJointLimit {}

unsafe impl NSObjectProtocol for SKPhysicsJointLimit {}

unsafe impl NSSecureCoding for SKPhysicsJointLimit {}

extern_methods!(
    unsafe impl SKPhysicsJointLimit {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(maxLength)]
        pub unsafe fn maxLength(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maxLength`][Self::maxLength].
        #[method(setMaxLength:)]
        pub unsafe fn setMaxLength(&self, max_length: CGFloat);

        #[cfg(all(feature = "SKPhysicsBody", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other jointWithBodyA:bodyB:anchorA:anchorB:)]
        pub unsafe fn jointWithBodyA_bodyB_anchorA_anchorB(
            body_a: &SKPhysicsBody,
            body_b: &SKPhysicsBody,
            anchor_a: CGPoint,
            anchor_b: CGPoint,
        ) -> Retained<SKPhysicsJointLimit>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SKPhysicsJointLimit {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
