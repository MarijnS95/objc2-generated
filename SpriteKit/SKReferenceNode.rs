//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skreferencenode?language=objc)
    #[unsafe(super(SKNode, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    pub struct SKReferenceNode;
);

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for SKReferenceNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCopying for SKReferenceNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl CopyingHelper for SKReferenceNode {
    type Result = Self;
}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for SKReferenceNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSSecureCoding for SKReferenceNode {}

extern_methods!(
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKReferenceNode {
        /// Create a reference node with a url
        #[method(initWithURL:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: Option<&NSURL>) -> Retained<Self>;

        /// Create a reference node with a url
        #[method(initWithFileNamed:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileNamed(
            this: Allocated<Self>,
            file_name: Option<&NSString>,
        ) -> Retained<Self>;

        /// Support coding and decoding via NSKeyedArchiver.
        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        /// Create a reference node with a url
        #[method(referenceNodeWithFileNamed:)]
        #[unsafe(method_family = none)]
        pub unsafe fn referenceNodeWithFileNamed(
            file_name: &NSString,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Create a reference node with a url
        #[method(referenceNodeWithURL:)]
        #[unsafe(method_family = none)]
        pub unsafe fn referenceNodeWithURL(
            reference_url: &NSURL,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// called each time the url is loaded, after it has been added as a child
        #[method(didLoadReferenceNode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn didLoadReferenceNode(&self, node: Option<&SKNode>);

        /// Force the reference to be reloaded. The resolved node will added
        /// as a child of this node. If the resolved node has not yet been loaded,
        /// it will be automatically loaded when the resolved node is queryed or
        /// the refenece node is rendered.
        #[method(resolveReferenceNode)]
        #[unsafe(method_family = none)]
        pub unsafe fn resolveReferenceNode(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `SKNode`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKReferenceNode {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(node)]
        #[unsafe(method_family = none)]
        pub unsafe fn node(mtm: MainThreadMarker) -> Retained<Self>;

        #[method(nodeWithFileNamed:)]
        #[unsafe(method_family = none)]
        pub unsafe fn nodeWithFileNamed(
            filename: &NSString,
            mtm: MainThreadMarker,
        ) -> Option<Retained<Self>>;

        #[method(nodeWithFileNamed:securelyWithClasses:andError:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn nodeWithFileNamed_securelyWithClasses_andError(
            filename: &NSString,
            classes: &NSSet<AnyClass>,
            mtm: MainThreadMarker,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKReferenceNode {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
