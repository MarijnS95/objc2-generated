//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skparticlerenderorder?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SKParticleRenderOrder(pub NSUInteger);
impl SKParticleRenderOrder {
    #[doc(alias = "SKParticleRenderOrderOldestLast")]
    pub const OldestLast: Self = Self(0);
    #[doc(alias = "SKParticleRenderOrderOldestFirst")]
    pub const OldestFirst: Self = Self(1);
    #[doc(alias = "SKParticleRenderOrderDontCare")]
    pub const DontCare: Self = Self(2);
}

unsafe impl Encode for SKParticleRenderOrder {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for SKParticleRenderOrder {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// An emitter of particle sprites.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/spritekit/skemitternode?language=objc)
    #[unsafe(super(SKNode, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    pub struct SKEmitterNode;
);

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for SKEmitterNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCopying for SKEmitterNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl CopyingHelper for SKEmitterNode {
    type Result = Self;
}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for SKEmitterNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSSecureCoding for SKEmitterNode {}

extern_methods!(
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKEmitterNode {
        /// The particle simulation is stepped automatically each frame when present in the scene. This allows the user to manually advance the simulation by a fixed amount of time. Useful for pre-populating particles before adding them to the scene.
        #[method(advanceSimulationTime:)]
        pub unsafe fn advanceSimulationTime(&self, sec: NSTimeInterval);

        #[method(resetSimulation)]
        pub unsafe fn resetSimulation(&self);

        #[cfg(feature = "SKTexture")]
        /// The texture to be used for the particles.
        #[unsafe(method_family(none))]
        #[method_id(particleTexture)]
        pub unsafe fn particleTexture(&self) -> Option<Retained<SKTexture>>;

        #[cfg(feature = "SKTexture")]
        /// Setter for [`particleTexture`][Self::particleTexture].
        #[method(setParticleTexture:)]
        pub unsafe fn setParticleTexture(&self, particle_texture: Option<&SKTexture>);

        /// The blend mode for each particle. Defaults to SKBlendModeAlpha.
        #[method(particleBlendMode)]
        pub unsafe fn particleBlendMode(&self) -> SKBlendMode;

        /// Setter for [`particleBlendMode`][Self::particleBlendMode].
        #[method(setParticleBlendMode:)]
        pub unsafe fn setParticleBlendMode(&self, particle_blend_mode: SKBlendMode);

        /// The starting color for each particle. Defaults to clear.
        #[unsafe(method_family(none))]
        #[method_id(particleColor)]
        pub unsafe fn particleColor(&self) -> Retained<NSColor>;

        /// Setter for [`particleColor`][Self::particleColor].
        #[method(setParticleColor:)]
        pub unsafe fn setParticleColor(&self, particle_color: &NSColor);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about each color component for each particle. Defaults to 0.0.
        #[method(particleColorRedRange)]
        pub unsafe fn particleColorRedRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorRedRange`][Self::particleColorRedRange].
        #[method(setParticleColorRedRange:)]
        pub unsafe fn setParticleColorRedRange(&self, particle_color_red_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorGreenRange)]
        pub unsafe fn particleColorGreenRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorGreenRange`][Self::particleColorGreenRange].
        #[method(setParticleColorGreenRange:)]
        pub unsafe fn setParticleColorGreenRange(&self, particle_color_green_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorBlueRange)]
        pub unsafe fn particleColorBlueRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorBlueRange`][Self::particleColorBlueRange].
        #[method(setParticleColorBlueRange:)]
        pub unsafe fn setParticleColorBlueRange(&self, particle_color_blue_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorAlphaRange)]
        pub unsafe fn particleColorAlphaRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorAlphaRange`][Self::particleColorAlphaRange].
        #[method(setParticleColorAlphaRange:)]
        pub unsafe fn setParticleColorAlphaRange(&self, particle_color_alpha_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify each color component for each particle (per second).
        #[method(particleColorRedSpeed)]
        pub unsafe fn particleColorRedSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorRedSpeed`][Self::particleColorRedSpeed].
        #[method(setParticleColorRedSpeed:)]
        pub unsafe fn setParticleColorRedSpeed(&self, particle_color_red_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorGreenSpeed)]
        pub unsafe fn particleColorGreenSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorGreenSpeed`][Self::particleColorGreenSpeed].
        #[method(setParticleColorGreenSpeed:)]
        pub unsafe fn setParticleColorGreenSpeed(&self, particle_color_green_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorBlueSpeed)]
        pub unsafe fn particleColorBlueSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorBlueSpeed`][Self::particleColorBlueSpeed].
        #[method(setParticleColorBlueSpeed:)]
        pub unsafe fn setParticleColorBlueSpeed(&self, particle_color_blue_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleColorAlphaSpeed)]
        pub unsafe fn particleColorAlphaSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorAlphaSpeed`][Self::particleColorAlphaSpeed].
        #[method(setParticleColorAlphaSpeed:)]
        pub unsafe fn setParticleColorAlphaSpeed(&self, particle_color_alpha_speed: CGFloat);

        #[cfg(feature = "SKKeyframeSequence")]
        #[unsafe(method_family(none))]
        #[method_id(particleColorSequence)]
        pub unsafe fn particleColorSequence(&self) -> Option<Retained<SKKeyframeSequence>>;

        #[cfg(feature = "SKKeyframeSequence")]
        /// Setter for [`particleColorSequence`][Self::particleColorSequence].
        #[method(setParticleColorSequence:)]
        pub unsafe fn setParticleColorSequence(
            &self,
            particle_color_sequence: Option<&SKKeyframeSequence>,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting color blend for each particle. Behaves the same as SKSpriteNode. Defaults to 0.0.
        #[method(particleColorBlendFactor)]
        pub unsafe fn particleColorBlendFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorBlendFactor`][Self::particleColorBlendFactor].
        #[method(setParticleColorBlendFactor:)]
        pub unsafe fn setParticleColorBlendFactor(&self, particle_color_blend_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting color blend for each particle. Defaults to 0.0.
        #[method(particleColorBlendFactorRange)]
        pub unsafe fn particleColorBlendFactorRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorBlendFactorRange`][Self::particleColorBlendFactorRange].
        #[method(setParticleColorBlendFactorRange:)]
        pub unsafe fn setParticleColorBlendFactorRange(
            &self,
            particle_color_blend_factor_range: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify the color blend for each particle. Defaults to 0.0.
        #[method(particleColorBlendFactorSpeed)]
        pub unsafe fn particleColorBlendFactorSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleColorBlendFactorSpeed`][Self::particleColorBlendFactorSpeed].
        #[method(setParticleColorBlendFactorSpeed:)]
        pub unsafe fn setParticleColorBlendFactorSpeed(
            &self,
            particle_color_blend_factor_speed: CGFloat,
        );

        #[cfg(feature = "SKKeyframeSequence")]
        #[unsafe(method_family(none))]
        #[method_id(particleColorBlendFactorSequence)]
        pub unsafe fn particleColorBlendFactorSequence(
            &self,
        ) -> Option<Retained<SKKeyframeSequence>>;

        #[cfg(feature = "SKKeyframeSequence")]
        /// Setter for [`particleColorBlendFactorSequence`][Self::particleColorBlendFactorSequence].
        #[method(setParticleColorBlendFactorSequence:)]
        pub unsafe fn setParticleColorBlendFactorSequence(
            &self,
            particle_color_blend_factor_sequence: Option<&SKKeyframeSequence>,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting position for each particle in the emitter's coordinate space. Defaults to (0.0, 0,0).
        #[method(particlePosition)]
        pub unsafe fn particlePosition(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particlePosition`][Self::particlePosition].
        #[method(setParticlePosition:)]
        pub unsafe fn setParticlePosition(&self, particle_position: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting position for each particle in the emitter's coordinate space. Defaults to (0.0, 0,0).
        #[method(particlePositionRange)]
        pub unsafe fn particlePositionRange(&self) -> CGVector;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particlePositionRange`][Self::particlePositionRange].
        #[method(setParticlePositionRange:)]
        pub unsafe fn setParticlePositionRange(&self, particle_position_range: CGVector);

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting speed for each particle along its emission vector. Defaults to 0.0.
        #[method(particleSpeed)]
        pub unsafe fn particleSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleSpeed`][Self::particleSpeed].
        #[method(setParticleSpeed:)]
        pub unsafe fn setParticleSpeed(&self, particle_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting speed for each particle along its emission vector. Defaults to 0.0.
        #[method(particleSpeedRange)]
        pub unsafe fn particleSpeedRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleSpeedRange`][Self::particleSpeedRange].
        #[method(setParticleSpeedRange:)]
        pub unsafe fn setParticleSpeedRange(&self, particle_speed_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The angle at which to emit each new particle, in radians. Defaults to 0.0.
        #[method(emissionAngle)]
        pub unsafe fn emissionAngle(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionAngle`][Self::emissionAngle].
        #[method(setEmissionAngle:)]
        pub unsafe fn setEmissionAngle(&self, emission_angle: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the angle at which to emit each new particle, in radians. Defaults to 0.0.
        #[method(emissionAngleRange)]
        pub unsafe fn emissionAngleRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionAngleRange`][Self::emissionAngleRange].
        #[method(setEmissionAngleRange:)]
        pub unsafe fn setEmissionAngleRange(&self, emission_angle_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The acceleration to apply to each particles velocity. Useful for simulating effects such as wind or gravity. Defaults to 0.0.
        #[method(xAcceleration)]
        pub unsafe fn xAcceleration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`xAcceleration`][Self::xAcceleration].
        #[method(setXAcceleration:)]
        pub unsafe fn setXAcceleration(&self, x_acceleration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(yAcceleration)]
        pub unsafe fn yAcceleration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`yAcceleration`][Self::yAcceleration].
        #[method(setYAcceleration:)]
        pub unsafe fn setYAcceleration(&self, y_acceleration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which new particles are generated, in particles per second. Defaults to 0.0.
        #[method(particleBirthRate)]
        pub unsafe fn particleBirthRate(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleBirthRate`][Self::particleBirthRate].
        #[method(setParticleBirthRate:)]
        pub unsafe fn setParticleBirthRate(&self, particle_birth_rate: CGFloat);

        /// The number of particles that will be emitted. If set to 0, there is no limit. Defaults to 0.
        #[method(numParticlesToEmit)]
        pub unsafe fn numParticlesToEmit(&self) -> NSUInteger;

        /// Setter for [`numParticlesToEmit`][Self::numParticlesToEmit].
        #[method(setNumParticlesToEmit:)]
        pub unsafe fn setNumParticlesToEmit(&self, num_particles_to_emit: NSUInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// The lifetime of each particle, in seconds. Defaults to 0.0.
        #[method(particleLifetime)]
        pub unsafe fn particleLifetime(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleLifetime`][Self::particleLifetime].
        #[method(setParticleLifetime:)]
        pub unsafe fn setParticleLifetime(&self, particle_lifetime: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the lifetime of each particle, in seconds. Defaults to 0.0.
        #[method(particleLifetimeRange)]
        pub unsafe fn particleLifetimeRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleLifetimeRange`][Self::particleLifetimeRange].
        #[method(setParticleLifetimeRange:)]
        pub unsafe fn setParticleLifetimeRange(&self, particle_lifetime_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting z-rotation for each particle. Defaults to 0.0.
        #[method(particleRotation)]
        pub unsafe fn particleRotation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleRotation`][Self::particleRotation].
        #[method(setParticleRotation:)]
        pub unsafe fn setParticleRotation(&self, particle_rotation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting z-rotation for each particle. Defaults to 0.0.
        #[method(particleRotationRange)]
        pub unsafe fn particleRotationRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleRotationRange`][Self::particleRotationRange].
        #[method(setParticleRotationRange:)]
        pub unsafe fn setParticleRotationRange(&self, particle_rotation_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify the z-rotation for each particle. Defaults to 0.0.
        #[method(particleRotationSpeed)]
        pub unsafe fn particleRotationSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleRotationSpeed`][Self::particleRotationSpeed].
        #[method(setParticleRotationSpeed:)]
        pub unsafe fn setParticleRotationSpeed(&self, particle_rotation_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting size for each particle. If set to CGSizeZero (the default) the particles will start at the size of the texture assigned to particleTexture. Note that particleScale and particleScaleRange will also have an effect on the effective size of each new particle.
        #[method(particleSize)]
        pub unsafe fn particleSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleSize`][Self::particleSize].
        #[method(setParticleSize:)]
        pub unsafe fn setParticleSize(&self, particle_size: CGSize);

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting scale for each particle. Defaults to 1.0.
        #[method(particleScale)]
        pub unsafe fn particleScale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleScale`][Self::particleScale].
        #[method(setParticleScale:)]
        pub unsafe fn setParticleScale(&self, particle_scale: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting scale for each particle. Defaults to 0.0.
        #[method(particleScaleRange)]
        pub unsafe fn particleScaleRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleScaleRange`][Self::particleScaleRange].
        #[method(setParticleScaleRange:)]
        pub unsafe fn setParticleScaleRange(&self, particle_scale_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify the scale for each particle. Defaults to 0.0.
        #[method(particleScaleSpeed)]
        pub unsafe fn particleScaleSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleScaleSpeed`][Self::particleScaleSpeed].
        #[method(setParticleScaleSpeed:)]
        pub unsafe fn setParticleScaleSpeed(&self, particle_scale_speed: CGFloat);

        #[cfg(feature = "SKKeyframeSequence")]
        #[unsafe(method_family(none))]
        #[method_id(particleScaleSequence)]
        pub unsafe fn particleScaleSequence(&self) -> Option<Retained<SKKeyframeSequence>>;

        #[cfg(feature = "SKKeyframeSequence")]
        /// Setter for [`particleScaleSequence`][Self::particleScaleSequence].
        #[method(setParticleScaleSequence:)]
        pub unsafe fn setParticleScaleSequence(
            &self,
            particle_scale_sequence: Option<&SKKeyframeSequence>,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting alpha for each particle. Defaults to 1.0.
        #[method(particleAlpha)]
        pub unsafe fn particleAlpha(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAlpha`][Self::particleAlpha].
        #[method(setParticleAlpha:)]
        pub unsafe fn setParticleAlpha(&self, particle_alpha: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting alpha for each particle. Defaults to 1.0.
        #[method(particleAlphaRange)]
        pub unsafe fn particleAlphaRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAlphaRange`][Self::particleAlphaRange].
        #[method(setParticleAlphaRange:)]
        pub unsafe fn setParticleAlphaRange(&self, particle_alpha_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify the alpha for each particle. Defaults to 1.0.
        #[method(particleAlphaSpeed)]
        pub unsafe fn particleAlphaSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAlphaSpeed`][Self::particleAlphaSpeed].
        #[method(setParticleAlphaSpeed:)]
        pub unsafe fn setParticleAlphaSpeed(&self, particle_alpha_speed: CGFloat);

        #[cfg(feature = "SKKeyframeSequence")]
        #[unsafe(method_family(none))]
        #[method_id(particleAlphaSequence)]
        pub unsafe fn particleAlphaSequence(&self) -> Option<Retained<SKKeyframeSequence>>;

        #[cfg(feature = "SKKeyframeSequence")]
        /// Setter for [`particleAlphaSequence`][Self::particleAlphaSequence].
        #[method(setParticleAlphaSequence:)]
        pub unsafe fn setParticleAlphaSequence(
            &self,
            particle_alpha_sequence: Option<&SKKeyframeSequence>,
        );

        #[cfg(feature = "SKAction")]
        /// Specifies an action executed by new particles.
        #[unsafe(method_family(none))]
        #[method_id(particleAction)]
        pub unsafe fn particleAction(&self) -> Option<Retained<SKAction>>;

        #[cfg(feature = "SKAction")]
        /// Setter for [`particleAction`][Self::particleAction].
        #[method(setParticleAction:)]
        pub unsafe fn setParticleAction(&self, particle_action: Option<&SKAction>);

        /// Defines what logical 'categories' of fields this particles emitted respond to. Defaults to all bits set (all categories).
        /// Can be forced off via affectedByGravity.
        #[method(fieldBitMask)]
        pub unsafe fn fieldBitMask(&self) -> u32;

        /// Setter for [`fieldBitMask`][Self::fieldBitMask].
        #[method(setFieldBitMask:)]
        pub unsafe fn setFieldBitMask(&self, field_bit_mask: u32);

        /// Normally the particles are rendered as if they were a child of the SKEmitterNode, they can also be rendered as if they were a child of any other node in the scene by setting the targetNode property. Defaults to nil (standard behavior).
        #[unsafe(method_family(none))]
        #[method_id(targetNode)]
        pub unsafe fn targetNode(&self) -> Option<Retained<SKNode>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`targetNode`][Self::targetNode].
        #[method(setTargetNode:)]
        pub unsafe fn setTargetNode(&self, target_node: Option<&SKNode>);

        #[cfg(feature = "SKShader")]
        #[unsafe(method_family(none))]
        #[method_id(shader)]
        pub unsafe fn shader(&self) -> Option<Retained<SKShader>>;

        #[cfg(feature = "SKShader")]
        /// Setter for [`shader`][Self::shader].
        #[method(setShader:)]
        pub unsafe fn setShader(&self, shader: Option<&SKShader>);

        #[cfg(feature = "SKAttribute")]
        /// Optional dictionary of SKAttributeValues
        /// Attributes can be used with custom SKShaders.
        #[unsafe(method_family(none))]
        #[method_id(attributeValues)]
        pub unsafe fn attributeValues(&self) -> Retained<NSDictionary<NSString, SKAttributeValue>>;

        #[cfg(feature = "SKAttribute")]
        /// Setter for [`attributeValues`][Self::attributeValues].
        #[method(setAttributeValues:)]
        pub unsafe fn setAttributeValues(
            &self,
            attribute_values: &NSDictionary<NSString, SKAttributeValue>,
        );

        #[cfg(feature = "SKAttribute")]
        #[unsafe(method_family(none))]
        #[method_id(valueForAttributeNamed:)]
        pub unsafe fn valueForAttributeNamed(
            &self,
            key: &NSString,
        ) -> Option<Retained<SKAttributeValue>>;

        #[cfg(feature = "SKAttribute")]
        #[method(setValue:forAttributeNamed:)]
        pub unsafe fn setValue_forAttributeNamed(&self, value: &SKAttributeValue, key: &NSString);

        #[cfg(feature = "objc2-core-foundation")]
        /// The starting z-position for each particle. Defaults to 0.0.
        #[method(particleZPosition)]
        pub unsafe fn particleZPosition(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleZPosition`][Self::particleZPosition].
        #[method(setParticleZPosition:)]
        pub unsafe fn setParticleZPosition(&self, particle_z_position: CGFloat);

        /// The order in which particles will be rendered. Defaults to SKParticleRenderOrderOldestLast.
        #[method(particleRenderOrder)]
        pub unsafe fn particleRenderOrder(&self) -> SKParticleRenderOrder;

        /// Setter for [`particleRenderOrder`][Self::particleRenderOrder].
        #[method(setParticleRenderOrder:)]
        pub unsafe fn setParticleRenderOrder(&self, particle_render_order: SKParticleRenderOrder);

        #[cfg(feature = "objc2-core-foundation")]
        /// The random variance about the starting z-position for each particle. Defaults to 0.0.
        #[deprecated]
        #[method(particleZPositionRange)]
        pub unsafe fn particleZPositionRange(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleZPositionRange`][Self::particleZPositionRange].
        #[deprecated]
        #[method(setParticleZPositionRange:)]
        pub unsafe fn setParticleZPositionRange(&self, particle_z_position_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The rate at which to modify the z-position for each particle. Defaults to 0.0.
        #[deprecated]
        #[method(particleZPositionSpeed)]
        pub unsafe fn particleZPositionSpeed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleZPositionSpeed`][Self::particleZPositionSpeed].
        #[deprecated]
        #[method(setParticleZPositionSpeed:)]
        pub unsafe fn setParticleZPositionSpeed(&self, particle_z_position_speed: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `SKNode`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKEmitterNode {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Support coding and decoding via NSKeyedArchiver.
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(node)]
        pub unsafe fn node(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:)]
        pub unsafe fn nodeWithFileNamed(
            filename: &NSString,
            mtm: MainThreadMarker,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:securelyWithClasses:andError:_)]
        pub unsafe fn nodeWithFileNamed_securelyWithClasses_andError(
            filename: &NSString,
            classes: &NSSet<AnyClass>,
            mtm: MainThreadMarker,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKEmitterNode {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
