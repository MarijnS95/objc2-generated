//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A SpriteKit scene graph audio node that provides a way to link audio graphs to a SpriteKit scene.
    /// The currently presented scene is responsible for mixing the audio from nodes in the scene.
    ///
    /// Positional sounds will use their relative location and velocity to the scene's listener to apply distance
    /// attenuation, doppler shift and pan.
    ///
    ///
    /// See: AVAudio3DMixing
    ///
    /// See: SKScene.listener
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/spritekit/skaudionode?language=objc)
    #[unsafe(super(SKNode, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    pub struct SKAudioNode;
);

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for SKAudioNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCopying for SKAudioNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl CopyingHelper for SKAudioNode {
    type Result = Self;
}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for SKAudioNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSSecureCoding for SKAudioNode {}

extern_methods!(
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKAudioNode {
        #[cfg(feature = "objc2-avf-audio")]
        /// Creates a SpriteKit scene graph audio node from the given AVAudioNode.
        ///
        /// See: AVAudioNode
        #[unsafe(method_family(init))]
        #[method_id(initWithAVAudioNode:)]
        pub unsafe fn initWithAVAudioNode(
            this: Allocated<Self>,
            node: Option<&AVAudioNode>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        /// Convenience initializer that creates an AVAudioNode from the named audio asset in the main bundle.
        ///
        /// See: initWithAVAudioNode
        #[unsafe(method_family(init))]
        #[method_id(initWithFileNamed:)]
        pub unsafe fn initWithFileNamed(this: Allocated<Self>, name: &NSString) -> Retained<Self>;

        /// Convenience initializer that creates an AVAudioNode from the URL that contain a audio asset.
        ///
        /// See: initWithAVAudioNode
        #[unsafe(method_family(init))]
        #[method_id(initWithURL:)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Sets or gets the current AVAudioNode used by this instance.
        #[unsafe(method_family(none))]
        #[method_id(avAudioNode)]
        pub unsafe fn avAudioNode(&self) -> Option<Retained<AVAudioNode>>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Setter for [`avAudioNode`][Self::avAudioNode].
        #[method(setAvAudioNode:)]
        pub unsafe fn setAvAudioNode(&self, av_audio_node: Option<&AVAudioNode>);

        /// Specifies whether the node is to automatically play sound when added to a scene.
        /// If autoplaysLooped is NO, the node and its sound must be explicitly scheduled and played using
        /// the scene's engine.
        ///
        /// If YES, the node will automatically play sound when added to a scene.
        ///
        /// Defaults to YES.
        ///
        /// See: SKView.paused
        #[method(autoplayLooped)]
        pub unsafe fn autoplayLooped(&self) -> bool;

        /// Setter for [`autoplayLooped`][Self::autoplayLooped].
        #[method(setAutoplayLooped:)]
        pub unsafe fn setAutoplayLooped(&self, autoplay_looped: bool);

        /// Marks the audio source as positional so that the audio mix considers relative position and velocity
        /// with regards to the scene's current listener node.
        ///
        ///
        /// See: AVAudio3DMixing
        ///
        /// See: SKScene.listener
        #[method(isPositional)]
        pub unsafe fn isPositional(&self) -> bool;

        /// Setter for [`isPositional`][Self::isPositional].
        #[method(setPositional:)]
        pub unsafe fn setPositional(&self, positional: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `SKNode`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKAudioNode {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(node)]
        pub unsafe fn node(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:)]
        pub unsafe fn nodeWithFileNamed(
            filename: &NSString,
            mtm: MainThreadMarker,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:securelyWithClasses:andError:_)]
        pub unsafe fn nodeWithFileNamed_securelyWithClasses_andError(
            filename: &NSString,
            classes: &NSSet<AnyClass>,
            mtm: MainThreadMarker,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKAudioNode {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// SKAudioNode
    /// Actions that are to be used with audio nodes.
    #[cfg(feature = "SKAction")]
    unsafe impl SKAction {
        #[unsafe(method_family(none))]
        #[method_id(stereoPanTo:duration:)]
        pub unsafe fn stereoPanTo_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(stereoPanBy:duration:)]
        pub unsafe fn stereoPanBy_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeReverbTo:duration:)]
        pub unsafe fn changeReverbTo_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeReverbBy:duration:)]
        pub unsafe fn changeReverbBy_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeObstructionTo:duration:)]
        pub unsafe fn changeObstructionTo_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeObstructionBy:duration:)]
        pub unsafe fn changeObstructionBy_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeOcclusionTo:duration:)]
        pub unsafe fn changeOcclusionTo_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;

        #[unsafe(method_family(none))]
        #[method_id(changeOcclusionBy:duration:)]
        pub unsafe fn changeOcclusionBy_duration(
            v: c_float,
            duration: NSTimeInterval,
        ) -> Retained<SKAction>;
    }
);
