//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/spritekit/sklabelverticalalignmentmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SKLabelVerticalAlignmentMode(pub NSInteger);
impl SKLabelVerticalAlignmentMode {
    #[doc(alias = "SKLabelVerticalAlignmentModeBaseline")]
    pub const Baseline: Self = Self(0);
    #[doc(alias = "SKLabelVerticalAlignmentModeCenter")]
    pub const Center: Self = Self(1);
    #[doc(alias = "SKLabelVerticalAlignmentModeTop")]
    pub const Top: Self = Self(2);
    #[doc(alias = "SKLabelVerticalAlignmentModeBottom")]
    pub const Bottom: Self = Self(3);
}

unsafe impl Encode for SKLabelVerticalAlignmentMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SKLabelVerticalAlignmentMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/spritekit/sklabelhorizontalalignmentmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SKLabelHorizontalAlignmentMode(pub NSInteger);
impl SKLabelHorizontalAlignmentMode {
    #[doc(alias = "SKLabelHorizontalAlignmentModeCenter")]
    pub const Center: Self = Self(0);
    #[doc(alias = "SKLabelHorizontalAlignmentModeLeft")]
    pub const Left: Self = Self(1);
    #[doc(alias = "SKLabelHorizontalAlignmentModeRight")]
    pub const Right: Self = Self(2);
}

unsafe impl Encode for SKLabelHorizontalAlignmentMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SKLabelHorizontalAlignmentMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A node that displays a text label with a given font.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/spritekit/sklabelnode?language=objc)
    #[unsafe(super(SKNode, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    pub struct SKLabelNode;
);

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for SKLabelNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSCopying for SKLabelNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl CopyingHelper for SKLabelNode {
    type Result = Self;
}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for SKLabelNode {}

#[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
unsafe impl NSSecureCoding for SKLabelNode {}

extern_methods!(
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKLabelNode {
        #[unsafe(method_family(none))]
        #[method_id(labelNodeWithText:)]
        pub unsafe fn labelNodeWithText(
            text: Option<&NSString>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(labelNodeWithAttributedText:)]
        pub unsafe fn labelNodeWithAttributedText(
            attributed_text: Option<&NSAttributedString>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(labelNodeWithFontNamed:)]
        pub unsafe fn labelNodeWithFontNamed(
            font_name: Option<&NSString>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithFontNamed:)]
        pub unsafe fn initWithFontNamed(
            this: Allocated<Self>,
            font_name: Option<&NSString>,
        ) -> Retained<Self>;

        #[method(verticalAlignmentMode)]
        pub unsafe fn verticalAlignmentMode(&self) -> SKLabelVerticalAlignmentMode;

        /// Setter for [`verticalAlignmentMode`][Self::verticalAlignmentMode].
        #[method(setVerticalAlignmentMode:)]
        pub unsafe fn setVerticalAlignmentMode(
            &self,
            vertical_alignment_mode: SKLabelVerticalAlignmentMode,
        );

        #[method(horizontalAlignmentMode)]
        pub unsafe fn horizontalAlignmentMode(&self) -> SKLabelHorizontalAlignmentMode;

        /// Setter for [`horizontalAlignmentMode`][Self::horizontalAlignmentMode].
        #[method(setHorizontalAlignmentMode:)]
        pub unsafe fn setHorizontalAlignmentMode(
            &self,
            horizontal_alignment_mode: SKLabelHorizontalAlignmentMode,
        );

        /// Determines the number of lines to draw. The default value is 1 (single line). A value of 0 means no limit.
        /// If the height of the text reaches the # of lines the text will be truncated using the line break mode.
        #[method(numberOfLines)]
        pub unsafe fn numberOfLines(&self) -> NSInteger;

        /// Setter for [`numberOfLines`][Self::numberOfLines].
        #[method(setNumberOfLines:)]
        pub unsafe fn setNumberOfLines(&self, number_of_lines: NSInteger);

        /// Determines the line break mode for multiple lines.
        /// Default is NSLineBreakByTruncatingTail
        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

        /// Setter for [`lineBreakMode`][Self::lineBreakMode].
        #[method(setLineBreakMode:)]
        pub unsafe fn setLineBreakMode(&self, line_break_mode: NSLineBreakMode);

        #[cfg(feature = "objc2-core-foundation")]
        /// If nonzero, this is used when determining layout width for multiline labels.
        /// Default is zero.
        #[method(preferredMaxLayoutWidth)]
        pub unsafe fn preferredMaxLayoutWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`preferredMaxLayoutWidth`][Self::preferredMaxLayoutWidth].
        #[method(setPreferredMaxLayoutWidth:)]
        pub unsafe fn setPreferredMaxLayoutWidth(&self, preferred_max_layout_width: CGFloat);

        #[unsafe(method_family(none))]
        #[method_id(fontName)]
        pub unsafe fn fontName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`fontName`][Self::fontName].
        #[method(setFontName:)]
        pub unsafe fn setFontName(&self, font_name: Option<&NSString>);

        #[unsafe(method_family(none))]
        #[method_id(text)]
        pub unsafe fn text(&self) -> Option<Retained<NSString>>;

        /// Setter for [`text`][Self::text].
        #[method(setText:)]
        pub unsafe fn setText(&self, text: Option<&NSString>);

        #[unsafe(method_family(none))]
        #[method_id(attributedText)]
        pub unsafe fn attributedText(&self) -> Option<Retained<NSAttributedString>>;

        /// Setter for [`attributedText`][Self::attributedText].
        #[method(setAttributedText:)]
        pub unsafe fn setAttributedText(&self, attributed_text: Option<&NSAttributedString>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(fontSize)]
        pub unsafe fn fontSize(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`fontSize`][Self::fontSize].
        #[method(setFontSize:)]
        pub unsafe fn setFontSize(&self, font_size: CGFloat);

        /// Base color that the text is rendered with (if supported by the font)
        #[unsafe(method_family(none))]
        #[method_id(fontColor)]
        pub unsafe fn fontColor(&self) -> Option<Retained<NSColor>>;

        /// Setter for [`fontColor`][Self::fontColor].
        #[method(setFontColor:)]
        pub unsafe fn setFontColor(&self, font_color: Option<&NSColor>);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the blending between the rendered text and a color. The valid interval of values is from 0.0 up to and including 1.0. A value above or below that interval is clamped to the minimum (0.0) if below or the maximum (1.0) if above.
        #[method(colorBlendFactor)]
        pub unsafe fn colorBlendFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`colorBlendFactor`][Self::colorBlendFactor].
        #[method(setColorBlendFactor:)]
        pub unsafe fn setColorBlendFactor(&self, color_blend_factor: CGFloat);

        /// Color to be blended with the text based on the colorBlendFactor
        #[unsafe(method_family(none))]
        #[method_id(color)]
        pub unsafe fn color(&self) -> Option<Retained<NSColor>>;

        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        pub unsafe fn setColor(&self, color: Option<&NSColor>);

        /// Sets the blend mode to use when composing the sprite with the final framebuffer.
        ///
        /// See: SKNode.SKBlendMode
        #[method(blendMode)]
        pub unsafe fn blendMode(&self) -> SKBlendMode;

        /// Setter for [`blendMode`][Self::blendMode].
        #[method(setBlendMode:)]
        pub unsafe fn setBlendMode(&self, blend_mode: SKBlendMode);
    }
);

extern_methods!(
    /// Methods declared on superclass `SKNode`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKLabelNode {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Support coding and decoding via NSKeyedArchiver.
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(node)]
        pub unsafe fn node(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:)]
        pub unsafe fn nodeWithFileNamed(
            filename: &NSString,
            mtm: MainThreadMarker,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(none))]
        #[method_id(nodeWithFileNamed:securelyWithClasses:andError:_)]
        pub unsafe fn nodeWithFileNamed_securelyWithClasses_andError(
            filename: &NSString,
            classes: &NSSet<AnyClass>,
            mtm: MainThreadMarker,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "SKNode", feature = "objc2-app-kit"))]
    #[cfg(target_os = "macos")]
    unsafe impl SKLabelNode {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
