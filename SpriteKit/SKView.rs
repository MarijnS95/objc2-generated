//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct SKView;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibility for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAccessibilityElementProtocol for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAnimatablePropertyContainer for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSAppearanceCustomization for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSDraggingDestination for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSSecureCoding for SKView {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSUserInterfaceItemIdentification for SKView {}

extern_methods!(
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl SKView {
        /// Pause the entire view
        #[method(isPaused)]
        pub unsafe fn isPaused(&self) -> bool;

        /// Setter for [`isPaused`][Self::isPaused].
        #[method(setPaused:)]
        pub unsafe fn setPaused(&self, paused: bool);

        /// Toggles display of performance stats in the view. All default to false.
        #[method(showsFPS)]
        pub unsafe fn showsFPS(&self) -> bool;

        /// Setter for [`showsFPS`][Self::showsFPS].
        #[method(setShowsFPS:)]
        pub unsafe fn setShowsFPS(&self, shows_fps: bool);

        #[method(showsDrawCount)]
        pub unsafe fn showsDrawCount(&self) -> bool;

        /// Setter for [`showsDrawCount`][Self::showsDrawCount].
        #[method(setShowsDrawCount:)]
        pub unsafe fn setShowsDrawCount(&self, shows_draw_count: bool);

        #[method(showsNodeCount)]
        pub unsafe fn showsNodeCount(&self) -> bool;

        /// Setter for [`showsNodeCount`][Self::showsNodeCount].
        #[method(setShowsNodeCount:)]
        pub unsafe fn setShowsNodeCount(&self, shows_node_count: bool);

        #[method(showsQuadCount)]
        pub unsafe fn showsQuadCount(&self) -> bool;

        /// Setter for [`showsQuadCount`][Self::showsQuadCount].
        #[method(setShowsQuadCount:)]
        pub unsafe fn setShowsQuadCount(&self, shows_quad_count: bool);

        #[method(showsPhysics)]
        pub unsafe fn showsPhysics(&self) -> bool;

        /// Setter for [`showsPhysics`][Self::showsPhysics].
        #[method(setShowsPhysics:)]
        pub unsafe fn setShowsPhysics(&self, shows_physics: bool);

        #[method(showsFields)]
        pub unsafe fn showsFields(&self) -> bool;

        /// Setter for [`showsFields`][Self::showsFields].
        #[method(setShowsFields:)]
        pub unsafe fn setShowsFields(&self, shows_fields: bool);

        /// Toggles whether the view updates is rendered asynchronously or aligned with Core Animation updates. Defaults to YES.
        #[method(isAsynchronous)]
        pub unsafe fn isAsynchronous(&self) -> bool;

        /// Setter for [`isAsynchronous`][Self::isAsynchronous].
        #[method(setAsynchronous:)]
        pub unsafe fn setAsynchronous(&self, asynchronous: bool);

        /// Toggles whether the view allows transparent rendering. This allows content under the view to show through if
        /// a non-opaque backgroundColor is set on the scene. Defaults to NO.
        #[method(allowsTransparency)]
        pub unsafe fn allowsTransparency(&self) -> bool;

        /// Setter for [`allowsTransparency`][Self::allowsTransparency].
        #[method(setAllowsTransparency:)]
        pub unsafe fn setAllowsTransparency(&self, allows_transparency: bool);

        /// Ignores sibling and traversal order to sort the rendered contents of a scene into the most efficient batching possible.
        /// This will require zPosition to be used in the scenes to properly guarantee elements are in front or behind each other.
        ///
        /// This defaults to NO, meaning that sibling order overrides efficiency heuristics in the rendering of the scenes in the view.
        ///
        /// Setting this to YES for a complex scene may substantially increase performance, but care must be taken as only zPosition
        /// determines render order before the efficiency heuristics are used.
        #[method(ignoresSiblingOrder)]
        pub unsafe fn ignoresSiblingOrder(&self) -> bool;

        /// Setter for [`ignoresSiblingOrder`][Self::ignoresSiblingOrder].
        #[method(setIgnoresSiblingOrder:)]
        pub unsafe fn setIgnoresSiblingOrder(&self, ignores_sibling_order: bool);

        #[method(shouldCullNonVisibleNodes)]
        pub unsafe fn shouldCullNonVisibleNodes(&self) -> bool;

        /// Setter for [`shouldCullNonVisibleNodes`][Self::shouldCullNonVisibleNodes].
        #[method(setShouldCullNonVisibleNodes:)]
        pub unsafe fn setShouldCullNonVisibleNodes(&self, should_cull_non_visible_nodes: bool);

        #[method(preferredFramesPerSecond)]
        pub unsafe fn preferredFramesPerSecond(&self) -> NSInteger;

        /// Setter for [`preferredFramesPerSecond`][Self::preferredFramesPerSecond].
        #[method(setPreferredFramesPerSecond:)]
        pub unsafe fn setPreferredFramesPerSecond(&self, preferred_frames_per_second: NSInteger);

        #[method(disableDepthStencilBuffer)]
        pub unsafe fn disableDepthStencilBuffer(&self) -> bool;

        /// Setter for [`disableDepthStencilBuffer`][Self::disableDepthStencilBuffer].
        #[method(setDisableDepthStencilBuffer:)]
        pub unsafe fn setDisableDepthStencilBuffer(&self, disable_depth_stencil_buffer: bool);

        /// Optional view delegate, see SKViewDelegate.
        #[unsafe(method_family(none))]
        #[method_id(delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<NSObject>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&NSObject>);

        #[deprecated]
        #[method(frameInterval)]
        pub unsafe fn frameInterval(&self) -> NSInteger;

        /// Setter for [`frameInterval`][Self::frameInterval].
        #[deprecated]
        #[method(setFrameInterval:)]
        pub unsafe fn setFrameInterval(&self, frame_interval: NSInteger);

        #[deprecated]
        #[method(preferredFrameRate)]
        pub unsafe fn preferredFrameRate(&self) -> c_float;

        /// Setter for [`preferredFrameRate`][Self::preferredFrameRate].
        #[deprecated]
        #[method(setPreferredFrameRate:)]
        pub unsafe fn setPreferredFrameRate(&self, preferred_frame_rate: c_float);

        #[cfg(all(feature = "SKEffectNode", feature = "SKNode", feature = "SKScene"))]
        /// Present an SKScene in the view, replacing the current scene.
        ///
        ///
        /// Parameter `scene`: the scene to present.
        #[method(presentScene:)]
        pub unsafe fn presentScene(&self, scene: Option<&SKScene>);

        #[cfg(all(
            feature = "SKEffectNode",
            feature = "SKNode",
            feature = "SKScene",
            feature = "SKTransition"
        ))]
        /// Present an SKScene in the view, replacing the current scene.
        ///
        /// If there is currently a scene being presented in the view, the transition is used to swap between them.
        ///
        ///
        /// Parameter `scene`: the scene to present.
        ///
        /// Parameter `transition`: the transition to use when presenting the scene.
        #[method(presentScene:transition:)]
        pub unsafe fn presentScene_transition(&self, scene: &SKScene, transition: &SKTransition);

        #[cfg(all(feature = "SKEffectNode", feature = "SKNode", feature = "SKScene"))]
        /// The currently presented scene, otherwise nil. If in a transition, the 'incoming' scene is returned.
        #[unsafe(method_family(none))]
        #[method_id(scene)]
        pub unsafe fn scene(&self) -> Option<Retained<SKScene>>;

        #[cfg(all(feature = "SKNode", feature = "SKTexture"))]
        /// Create an SKTexture containing a snapshot of how it would have been rendered in this view.
        /// The texture is tightly cropped to the size of the node.
        ///
        /// Parameter `node`: the node subtree to render to the texture.
        #[unsafe(method_family(none))]
        #[method_id(textureFromNode:)]
        pub unsafe fn textureFromNode(&self, node: &SKNode) -> Option<Retained<SKTexture>>;

        #[cfg(all(
            feature = "SKNode",
            feature = "SKTexture",
            feature = "objc2-core-foundation"
        ))]
        /// Create an SKTexture containing a snapshot of how it would have been rendered in this view.
        /// The texture is cropped to the specified rectangle
        ///
        /// Parameter `node`: the node subtree to render to the texture.
        ///
        /// Parameter `crop`: the crop
        #[unsafe(method_family(none))]
        #[method_id(textureFromNode:crop:)]
        pub unsafe fn textureFromNode_crop(
            &self,
            node: &SKNode,
            crop: CGRect,
        ) -> Option<Retained<SKTexture>>;

        #[cfg(all(
            feature = "SKEffectNode",
            feature = "SKNode",
            feature = "SKScene",
            feature = "objc2-core-foundation"
        ))]
        /// Converts a point from view space to scene space.
        ///
        ///
        /// Parameter `point`: the point to convert.
        ///
        /// Parameter `scene`: the scene to convert the point into.
        #[method(convertPoint:toScene:)]
        pub unsafe fn convertPoint_toScene(&self, point: CGPoint, scene: &SKScene) -> CGPoint;

        #[cfg(all(
            feature = "SKEffectNode",
            feature = "SKNode",
            feature = "SKScene",
            feature = "objc2-core-foundation"
        ))]
        /// Converts a point from scene space to view space.
        ///
        ///
        /// Parameter `point`: the point to convert.
        ///
        /// Parameter `scene`: the scene to convert the point into.
        #[method(convertPoint:fromScene:)]
        pub unsafe fn convertPoint_fromScene(&self, point: CGPoint, scene: &SKScene) -> CGPoint;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl SKView {
        #[unsafe(method_family(init))]
        #[method_id(initWithFrame:)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl SKView {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl SKView {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/spritekit/skviewdelegate?language=objc)
    pub unsafe trait SKViewDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Allows the client to dynamically control the render rate.
        ///
        /// return YES to initiate an update and render for the target time.
        /// return NO to skip update and render for this target time.
        #[optional]
        #[method(view:shouldRenderAtTime:)]
        unsafe fn view_shouldRenderAtTime(&self, view: &SKView, time: NSTimeInterval) -> bool;
    }
);
