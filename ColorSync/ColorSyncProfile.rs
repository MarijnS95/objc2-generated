//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/colorsync/colorsyncprofile?language=objc)
#[repr(C)]
pub struct ColorSyncProfile {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "ColorSyncProfile"]
    unsafe impl ColorSyncProfile {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/colorsync/colorsyncmutableprofile?language=objc)
#[repr(C)]
pub struct ColorSyncMutableProfile {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "ColorSyncProfile"]
    unsafe impl ColorSyncMutableProfile: ColorSyncProfile {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericgrayprofile?language=objc)
    pub static kColorSyncGenericGrayProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericgraygamma22profile?language=objc)
    pub static kColorSyncGenericGrayGamma22Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericrgbprofile?language=objc)
    pub static kColorSyncGenericRGBProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericcmykprofile?language=objc)
    pub static kColorSyncGenericCMYKProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncdisplayp3profile?language=objc)
    pub static kColorSyncDisplayP3Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsrgbprofile?language=objc)
    pub static kColorSyncSRGBProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncadobergb1998profile?language=objc)
    pub static kColorSyncAdobeRGB1998Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericlabprofile?language=objc)
    pub static kColorSyncGenericLabProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncgenericxyzprofile?language=objc)
    pub static kColorSyncGenericXYZProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncacescglinearprofile?language=objc)
    pub static kColorSyncACESCGLinearProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncdcip3profile?language=objc)
    pub static kColorSyncDCIP3Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncitur709profile?language=objc)
    pub static kColorSyncITUR709Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncitur2020profile?language=objc)
    pub static kColorSyncITUR2020Profile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncrommrgbprofile?language=objc)
    pub static kColorSyncROMMRGBProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncwebsafecolorsprofile?language=objc)
    pub static kColorSyncWebSafeColorsProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofileheader?language=objc)
    pub static kColorSyncProfileHeader: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofileclass?language=objc)
    pub static kColorSyncProfileClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofilecolorspace?language=objc)
    pub static kColorSyncProfileColorSpace: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofilepcs?language=objc)
    pub static kColorSyncProfilePCS: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofileurl?language=objc)
    pub static kColorSyncProfileURL: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofiledescription?language=objc)
    pub static kColorSyncProfileDescription: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofilemd5digest?language=objc)
    pub static kColorSyncProfileMD5Digest: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofileisvalid?language=objc)
    pub static kColorSyncProfileIsValid: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigatob0tag?language=objc)
    pub static kColorSyncSigAToB0Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigatob1tag?language=objc)
    pub static kColorSyncSigAToB1Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigatob2tag?language=objc)
    pub static kColorSyncSigAToB2Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigbtoa0tag?language=objc)
    pub static kColorSyncSigBToA0Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigbtoa1tag?language=objc)
    pub static kColorSyncSigBToA1Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigbtoa2tag?language=objc)
    pub static kColorSyncSigBToA2Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigcmykdata?language=objc)
    pub static kColorSyncSigCmykData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiggraydata?language=objc)
    pub static kColorSyncSigGrayData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiglabdata?language=objc)
    pub static kColorSyncSigLabData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigrgbdata?language=objc)
    pub static kColorSyncSigRgbData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigxyzdata?language=objc)
    pub static kColorSyncSigXYZData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigabstractclass?language=objc)
    pub static kColorSyncSigAbstractClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigbluetrctag?language=objc)
    pub static kColorSyncSigBlueTRCTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigbluecoloranttag?language=objc)
    pub static kColorSyncSigBlueColorantTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigmediablackpointtag?language=objc)
    pub static kColorSyncSigMediaBlackPointTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigcopyrighttag?language=objc)
    pub static kColorSyncSigCopyrightTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigprofiledescriptiontag?language=objc)
    pub static kColorSyncSigProfileDescriptionTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigdevicemodeldesctag?language=objc)
    pub static kColorSyncSigDeviceModelDescTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigdevicemfgdesctag?language=objc)
    pub static kColorSyncSigDeviceMfgDescTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiggreentrctag?language=objc)
    pub static kColorSyncSigGreenTRCTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiggreencoloranttag?language=objc)
    pub static kColorSyncSigGreenColorantTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiggamuttag?language=objc)
    pub static kColorSyncSigGamutTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiggraytrctag?language=objc)
    pub static kColorSyncSigGrayTRCTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiglinkclass?language=objc)
    pub static kColorSyncSigLinkClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigdisplayclass?language=objc)
    pub static kColorSyncSigDisplayClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsignamedcolor2tag?language=objc)
    pub static kColorSyncSigNamedColor2Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsignamedcolorclass?language=objc)
    pub static kColorSyncSigNamedColorClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigpreview0tag?language=objc)
    pub static kColorSyncSigPreview0Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigpreview1tag?language=objc)
    pub static kColorSyncSigPreview1Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigpreview2tag?language=objc)
    pub static kColorSyncSigPreview2Tag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigoutputclass?language=objc)
    pub static kColorSyncSigOutputClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigprofilesequencedesctag?language=objc)
    pub static kColorSyncSigProfileSequenceDescTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigredtrctag?language=objc)
    pub static kColorSyncSigRedTRCTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigredcoloranttag?language=objc)
    pub static kColorSyncSigRedColorantTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsiginputclass?language=objc)
    pub static kColorSyncSigInputClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigcolorspaceclass?language=objc)
    pub static kColorSyncSigColorSpaceClass: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigtechnologytag?language=objc)
    pub static kColorSyncSigTechnologyTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigviewingconditionstag?language=objc)
    pub static kColorSyncSigViewingConditionsTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigviewingconddesctag?language=objc)
    pub static kColorSyncSigViewingCondDescTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncsigmediawhitepointtag?language=objc)
    pub static kColorSyncSigMediaWhitePointTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofilecomputerdomain?language=objc)
    pub static kColorSyncProfileComputerDomain: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofileuserdomain?language=objc)
    pub static kColorSyncProfileUserDomain: &'static CFString;
}

unsafe impl ConcreteType for ColorSyncProfile {
    #[doc(alias = "ColorSyncProfileGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn ColorSyncProfileGetTypeID() -> CFTypeID;
        }
        unsafe { ColorSyncProfileGetTypeID() }
    }
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreate(
    data: &CFData,
    error: *mut *mut CFError,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreate(data: &CFData, error: *mut *mut CFError)
            -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreate(data, error) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateWithURL(
    url: &CFURL,
    error: *mut *mut CFError,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateWithURL(
            url: &CFURL,
            error: *mut *mut CFError,
        ) -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateWithURL(url, error) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateWithName(
    name: &CFString,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateWithName(name: &CFString) -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateWithName(name) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateWithDisplayID(
    display_id: u32,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateWithDisplayID(display_id: u32) -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateWithDisplayID(display_id) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateDeviceProfile(
    device_class: &CFString,
    device_id: &CFUUID,
    profile_id: &CFType,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateDeviceProfile(
            device_class: &CFString,
            device_id: &CFUUID,
            profile_id: &CFType,
        ) -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateDeviceProfile(device_class, device_id, profile_id) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateMutable(
) -> Option<CFRetained<ColorSyncMutableProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateMutable() -> *mut ColorSyncMutableProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateMutable() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateMutableCopy(
    prof: &ColorSyncProfile,
) -> Option<CFRetained<ColorSyncMutableProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateMutableCopy(
            prof: &ColorSyncProfile,
        ) -> *mut ColorSyncMutableProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateMutableCopy(prof) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateLink(
    profile_info: &CFArray,
    options: Option<&CFDictionary>,
) -> Option<CFRetained<ColorSyncProfile>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateLink(
            profile_info: &CFArray,
            options: Option<&CFDictionary>,
        ) -> *mut ColorSyncProfile;
    }
    let ret = unsafe { ColorSyncProfileCreateLink(profile_info, options) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn ColorSyncProfileVerify(
        prof: &ColorSyncProfile,
        errors: *mut *mut CFError,
        warnings: *mut *mut CFError,
    ) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileIsWideGamut(param1: &ColorSyncProfile) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileIsMatrixBased(param1: &ColorSyncProfile) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileIsPQBased(param1: &ColorSyncProfile) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileIsHLGBased(param1: &ColorSyncProfile) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileEstimateGammaWithDisplayID(
        display_id: i32,
        error: *mut *mut CFError,
    ) -> c_float;
}

extern "C-unwind" {
    pub fn ColorSyncProfileEstimateGamma(
        prof: &ColorSyncProfile,
        error: *mut *mut CFError,
    ) -> c_float;
}

extern "C-unwind" {
    pub fn ColorSyncProfileGetDisplayTransferFormulaFromVCGT(
        profile: &ColorSyncProfile,
        red_min: NonNull<c_float>,
        red_max: NonNull<c_float>,
        red_gamma: NonNull<c_float>,
        green_min: NonNull<c_float>,
        green_max: NonNull<c_float>,
        green_gamma: NonNull<c_float>,
        blue_min: NonNull<c_float>,
        blue_max: NonNull<c_float>,
        blue_gamma: NonNull<c_float>,
    ) -> bool;
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCreateDisplayTransferTablesFromVCGT(
    profile: &ColorSyncProfile,
    n_samples_per_channel: NonNull<usize>,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn ColorSyncProfileCreateDisplayTransferTablesFromVCGT(
            profile: &ColorSyncProfile,
            n_samples_per_channel: NonNull<usize>,
        ) -> *mut CFData;
    }
    let ret = unsafe {
        ColorSyncProfileCreateDisplayTransferTablesFromVCGT(profile, n_samples_per_channel)
    };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

/// [Apple's documentation](https://developer.apple.com/documentation/colorsync/colorsyncmd5?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ColorSyncMD5 {
    pub digest: [u8; 16],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ColorSyncMD5 {
    const ENCODING: Encoding = Encoding::Struct("?", &[<[u8; 16]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ColorSyncMD5 {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn ColorSyncProfileGetMD5(prof: &ColorSyncProfile) -> ColorSyncMD5;
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCopyData(
    prof: &ColorSyncProfile,
    error: *mut *mut CFError,
) -> CFRetained<CFData> {
    extern "C-unwind" {
        fn ColorSyncProfileCopyData(
            prof: &ColorSyncProfile,
            error: *mut *mut CFError,
        ) -> NonNull<CFData>;
    }
    let ret = unsafe { ColorSyncProfileCopyData(prof, error) };
    unsafe { CFRetained::from_raw(ret) }
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileGetURL(
    prof: &ColorSyncProfile,
    error: *mut *mut CFError,
) -> CFRetained<CFURL> {
    extern "C-unwind" {
        fn ColorSyncProfileGetURL(
            prof: &ColorSyncProfile,
            error: *mut *mut CFError,
        ) -> NonNull<CFURL>;
    }
    let ret = unsafe { ColorSyncProfileGetURL(prof, error) };
    unsafe { CFRetained::retain(ret) }
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCopyHeader(
    prof: &ColorSyncProfile,
) -> CFRetained<CFData> {
    extern "C-unwind" {
        fn ColorSyncProfileCopyHeader(prof: &ColorSyncProfile) -> NonNull<CFData>;
    }
    let ret = unsafe { ColorSyncProfileCopyHeader(prof) };
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    pub fn ColorSyncProfileSetHeader(prof: &ColorSyncMutableProfile, header: &CFData);
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCopyDescriptionString(
    prof: &ColorSyncProfile,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn ColorSyncProfileCopyDescriptionString(prof: &ColorSyncProfile) -> *mut CFString;
    }
    let ret = unsafe { ColorSyncProfileCopyDescriptionString(prof) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCopyTagSignatures(
    prof: &ColorSyncProfile,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn ColorSyncProfileCopyTagSignatures(prof: &ColorSyncProfile) -> *mut CFArray;
    }
    let ret = unsafe { ColorSyncProfileCopyTagSignatures(prof) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn ColorSyncProfileContainsTag(prof: &ColorSyncProfile, signature: &CFString) -> bool;
}

#[inline]
pub unsafe extern "C-unwind" fn ColorSyncProfileCopyTag(
    prof: &ColorSyncProfile,
    signature: &CFString,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn ColorSyncProfileCopyTag(prof: &ColorSyncProfile, signature: &CFString) -> *mut CFData;
    }
    let ret = unsafe { ColorSyncProfileCopyTag(prof, signature) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn ColorSyncProfileSetTag(
        prof: &ColorSyncMutableProfile,
        signature: &CFString,
        data: &CFData,
    );
}

extern "C-unwind" {
    pub fn ColorSyncProfileRemoveTag(prof: &ColorSyncMutableProfile, signature: &CFString);
}

/// [Apple's documentation](https://developer.apple.com/documentation/colorsync/colorsyncprofileiteratecallback?language=objc)
pub type ColorSyncProfileIterateCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<CFDictionary>, NonNull<c_void>) -> bool>;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncprofilecacheseed?language=objc)
    pub static kColorSyncProfileCacheSeed: &'static CFString;
}

extern "C-unwind" {
    pub fn ColorSyncIterateInstalledProfiles(
        call_back: ColorSyncProfileIterateCallback,
        seed: *mut u32,
        user_info: *mut c_void,
        error: *mut *mut CFError,
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/colorsync/kcolorsyncwaitforcachereply?language=objc)
    pub static kColorSyncWaitForCacheReply: &'static CFString;
}

extern "C-unwind" {
    pub fn ColorSyncIterateInstalledProfilesWithOptions(
        call_back: ColorSyncProfileIterateCallback,
        seed: *mut u32,
        user_info: *mut c_void,
        options: Option<&CFDictionary>,
        error: *mut *mut CFError,
    );
}

extern "C-unwind" {
    pub fn ColorSyncProfileInstall(
        profile: &ColorSyncProfile,
        domain: &CFString,
        subpath: &CFString,
        error: *mut *mut CFError,
    ) -> bool;
}

extern "C-unwind" {
    pub fn ColorSyncProfileUninstall(profile: &ColorSyncProfile, error: *mut *mut CFError) -> bool;
}
