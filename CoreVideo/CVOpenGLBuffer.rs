//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopenglbufferwidth?language=objc)
    pub static kCVOpenGLBufferWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopenglbufferheight?language=objc)
    pub static kCVOpenGLBufferHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopenglbuffertarget?language=objc)
    pub static kCVOpenGLBufferTarget: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopenglbufferinternalformat?language=objc)
    pub static kCVOpenGLBufferInternalFormat: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopenglbuffermaximummipmaplevel?language=objc)
    pub static kCVOpenGLBufferMaximumMipmapLevel: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corevideo/cvopenglbuffer?language=objc)
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub type CVOpenGLBuffer = CVImageBuffer;

extern "C-unwind" {
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLBufferGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    /// Create a new CVOpenGLBuffer that may be used for OpenGL rendering purposes
    ///
    /// Parameter `width`: The width of the buffer in pixels
    ///
    /// Parameter `height`: The height of the buffer in pixels
    ///
    /// Parameter `attributes`: A CFDictionaryRef containing other desired attributes of the buffer (texture target, internal format, max mipmap level, etc.).
    /// May be NULL.  Defaults are GL_TEXTURE_RECTANGLE_EXT, GL_RGBA, and 0 for kCVOpenGLBufferTarget, kCVOpenGLBufferInternalFormat and kCVOpenGLBufferMaximumMipmapLevel,
    /// respectively.
    ///
    /// Parameter `bufferOut`: The newly created buffer will be placed here.
    ///
    /// Returns: kCVReturnSuccess if the attachment succeeded
    #[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer", feature = "CVReturn"))]
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLBufferCreate(
        allocator: Option<&CFAllocator>,
        width: usize,
        height: usize,
        attributes: Option<&CFDictionary>,
        buffer_out: NonNull<*mut CVOpenGLBuffer>,
    ) -> CVReturn;
}

/// Parameter `openGLBuffer`: Target OpenGL Buffer.
///
/// Returns: CVOpenGLBuffer attributes dictionary, NULL if not set.
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
#[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
#[inline]
pub unsafe extern "C-unwind" fn CVOpenGLBufferGetAttributes(
    open_gl_buffer: &CVOpenGLBuffer,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn CVOpenGLBufferGetAttributes(open_gl_buffer: &CVOpenGLBuffer) -> *mut CFDictionary;
    }
    let ret = unsafe { CVOpenGLBufferGetAttributes(open_gl_buffer) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}
