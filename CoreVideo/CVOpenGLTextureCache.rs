//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// CoreVideo OpenGL Texture Cache
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corevideo/cvopengltexturecache?language=objc)
#[repr(C)]
pub struct CVOpenGLTextureCache {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CVOpenGLTextureCache"]
    unsafe impl CVOpenGLTextureCache {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopengltexturecachechromasamplingmodekey?language=objc)
    pub static kCVOpenGLTextureCacheChromaSamplingModeKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopengltexturecachechromasamplingmodeautomatic?language=objc)
    pub static kCVOpenGLTextureCacheChromaSamplingModeAutomatic: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopengltexturecachechromasamplingmodehighestquality?language=objc)
    pub static kCVOpenGLTextureCacheChromaSamplingModeHighestQuality: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvopengltexturecachechromasamplingmodebestperformance?language=objc)
    pub static kCVOpenGLTextureCacheChromaSamplingModeBestPerformance: &'static CFString;
}

extern "C-unwind" {
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLTextureCacheGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    /// Retains a CVOpenGLTextureCache object
    ///
    /// Equivalent to CFRetain, but NULL safe
    ///
    /// Parameter `buffer`: A CVOpenGLTextureCache object that you want to retain.
    ///
    /// Returns: A CVOpenGLTextureCache object that is the same as the passed in buffer.
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLTextureCacheRetain(
        texture_cache: Option<&CVOpenGLTextureCache>,
    ) -> *mut CVOpenGLTextureCache;
}

extern "C-unwind" {
    /// Creates a CVOpenGLTexture object from an existing CVImageBuffer
    ///
    /// Parameter `allocator`: The CFAllocatorRef to use for allocating the CVOpenGLTexture object.  May be NULL.
    ///
    /// Parameter `textureCache`: The texture cache object that will manage the texture
    ///
    /// Parameter `sourceImage`: The CVImageBuffer that you want to create a CVOpenGLTexture from.
    ///
    /// Parameter `attributes`: For Future use only! - The desired buffer attributes for the CVOpenGLTexture.
    ///
    /// Parameter `textureOut`: The newly created texture object will be placed here.
    ///
    /// Returns: Returns kCVReturnSuccess on success
    #[cfg(all(
        feature = "CVBuffer",
        feature = "CVImageBuffer",
        feature = "CVOpenGLTexture",
        feature = "CVReturn"
    ))]
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLTextureCacheCreateTextureFromImage(
        allocator: Option<&CFAllocator>,
        texture_cache: &CVOpenGLTextureCache,
        source_image: &CVImageBuffer,
        attributes: Option<&CFDictionary>,
        texture_out: NonNull<*mut CVOpenGLTexture>,
    ) -> CVReturn;
}

extern "C-unwind" {
    /// Performs internal housekeeping/recycling operations
    ///
    /// This call must be made periodically to give the texture cache a chance to make OpenGL calls
    /// on the OpenGL context used to create it in order to do housekeeping operations.
    ///
    /// Parameter `textureCache`: The texture cache object to flush
    ///
    /// Parameter `options`: Currently unused, set to 0.
    ///
    /// Returns: Returns kCVReturnSuccess on success
    #[cfg(feature = "CVBase")]
    #[deprecated = "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)"]
    pub fn CVOpenGLTextureCacheFlush(texture_cache: &CVOpenGLTextureCache, options: CVOptionFlags);
}
