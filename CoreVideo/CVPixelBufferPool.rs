//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corevideo/cvpixelbufferpoolref?language=objc)
#[repr(C)]
pub struct CVPixelBufferPoolRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CVPixelBufferPool"]
    unsafe impl CVPixelBufferPoolRef {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvpixelbufferpoolminimumbuffercountkey?language=objc)
    pub static kCVPixelBufferPoolMinimumBufferCountKey: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvpixelbufferpoolmaximumbufferagekey?language=objc)
    pub static kCVPixelBufferPoolMaximumBufferAgeKey: &'static CFStringRef;
}

extern "C-unwind" {
    pub fn CVPixelBufferPoolGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    /// Retains a CVPixelBufferPoolRef object
    ///
    /// Equivalent to CFRetain, but NULL safe
    ///
    /// Parameter `buffer`: A CVPixelBufferPoolRef object that you want to retain.
    ///
    /// Returns: A CVPixelBufferPoolRef object that is the same as the passed in buffer.
    pub fn CVPixelBufferPoolRetain(
        pixel_buffer_pool: Option<&CVPixelBufferPoolRef>,
    ) -> *mut CVPixelBufferPoolRef;
}

extern "C-unwind" {
    /// Creates a new Pixel Buffer pool.
    ///
    /// Parameter `allocator`: The CFAllocatorRef to use for allocating this buffer pool.  May be NULL.
    ///
    /// Parameter `attributes`: A CFDictionaryRef containing the attributes to be used for creating new PixelBuffers within the pool.
    ///
    /// Parameter `poolOut`: The newly created pool will be placed here
    ///
    /// Returns: Returns kCVReturnSuccess on success
    #[cfg(feature = "CVReturn")]
    pub fn CVPixelBufferPoolCreate(
        allocator: Option<&CFAllocatorRef>,
        pool_attributes: Option<&CFDictionaryRef>,
        pixel_buffer_attributes: Option<&CFDictionaryRef>,
        pool_out: NonNull<CVPixelBufferPoolRef>,
    ) -> CVReturn;
}

extern "C-unwind" {
    /// Returns the pool attributes dictionary for a CVPixelBufferPool
    ///
    /// Parameter `pool`: The CVPixelBufferPoolRef to retrieve the attributes from
    ///
    /// Returns: Returns the pool attributes dictionary, or NULL on failure.
    pub fn CVPixelBufferPoolGetAttributes(pool: &CVPixelBufferPoolRef) -> *mut CFDictionaryRef;
}

extern "C-unwind" {
    /// Returns the attributes of pixel buffers that will be created from this pool.
    ///
    /// This function is provided for those cases where you may need to know some information about the buffers that
    /// will be created up front.
    ///
    /// Parameter `pool`: The CVPixelBufferPoolRef to retrieve the attributes from
    ///
    /// Returns: Returns the pixel buffer attributes dictionary, or NULL on failure.
    pub fn CVPixelBufferPoolGetPixelBufferAttributes(
        pool: &CVPixelBufferPoolRef,
    ) -> *mut CFDictionaryRef;
}

extern "C-unwind" {
    /// Creates a new PixelBuffer object from the pool.
    ///
    /// The function creates a new (attachment-free) CVPixelBuffer using the pixel buffer attributes specifed during pool creation.
    ///
    /// Parameter `allocator`: The CFAllocatorRef to use for creating the pixel buffer.  May be NULL.
    ///
    /// Parameter `pool`: The CVPixelBufferPool that should create the new CVPixelBuffer.
    ///
    /// Parameter `pixelBufferOut`: The newly created pixel buffer will be placed here
    ///
    /// Returns: Returns kCVReturnSuccess on success
    #[cfg(all(
        feature = "CVBuffer",
        feature = "CVImageBuffer",
        feature = "CVPixelBuffer",
        feature = "CVReturn"
    ))]
    pub fn CVPixelBufferPoolCreatePixelBuffer(
        allocator: Option<&CFAllocatorRef>,
        pixel_buffer_pool: &CVPixelBufferPoolRef,
        pixel_buffer_out: NonNull<CVPixelBufferRef>,
    ) -> CVReturn;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CVBuffer",
        feature = "CVImageBuffer",
        feature = "CVPixelBuffer",
        feature = "CVReturn"
    ))]
    pub fn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(
        allocator: Option<&CFAllocatorRef>,
        pixel_buffer_pool: &CVPixelBufferPoolRef,
        aux_attributes: Option<&CFDictionaryRef>,
        pixel_buffer_out: NonNull<CVPixelBufferRef>,
    ) -> CVReturn;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvpixelbufferpoolallocationthresholdkey?language=objc)
    pub static kCVPixelBufferPoolAllocationThresholdKey: &'static CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corevideo/kcvpixelbufferpoolfreebuffernotification?language=objc)
    pub static kCVPixelBufferPoolFreeBufferNotification: &'static CFStringRef;
}

/// Flags to pass to CVPixelBufferPoolFlush()
///
/// This flag will cause CVPixelBufferPoolFlush to flush all unused buffers regardless of age.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corevideo/cvpixelbufferpoolflushflags?language=objc)
// NS_OPTIONS
#[cfg(feature = "CVBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CVPixelBufferPoolFlushFlags(pub CVOptionFlags);
#[cfg(feature = "CVBase")]
bitflags::bitflags! {
    impl CVPixelBufferPoolFlushFlags: CVOptionFlags {
        #[doc(alias = "kCVPixelBufferPoolFlushExcessBuffers")]
        const ExcessBuffers = 1;
    }
}

#[cfg(all(feature = "CVBase", feature = "objc2"))]
unsafe impl Encode for CVPixelBufferPoolFlushFlags {
    const ENCODING: Encoding = CVOptionFlags::ENCODING;
}

#[cfg(all(feature = "CVBase", feature = "objc2"))]
unsafe impl RefEncode for CVPixelBufferPoolFlushFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    /// Frees as many buffers from the pool as possible.
    ///
    /// By default, this function will free all aged out buffers.  Setting the
    /// kCVPixelBufferPoolFlushExcessBuffers flag will cause this call to free all unused
    /// buffers regardless of age.
    ///
    /// Parameter `pool`: The CVPixelBufferPool to be flushed.
    ///
    /// Parameter `options`: Set to kCVPixelBufferPoolFlushExcessBuffers to free all unused buffers
    /// regardless of their age.
    #[cfg(feature = "CVBase")]
    pub fn CVPixelBufferPoolFlush(
        pool: &CVPixelBufferPoolRef,
        options: CVPixelBufferPoolFlushFlags,
    );
}
