//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// A sentinel value indicating that a distance measurement could not be produced
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/nearbyinteraction/ninearbyobjectdistancenotavailable?language=objc)
    pub static NINearbyObjectDistanceNotAvailable: c_float;
}

extern "C" {
    /// A sentinel value indicating that an angle could not be produced
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/nearbyinteraction/ninearbyobjectanglenotavailable?language=objc)
    pub static NINearbyObjectAngleNotAvailable: c_float;
}

/// [Apple's documentation](https://developer.apple.com/documentation/nearbyinteraction/ninearbyobjectverticaldirectionestimate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NINearbyObjectVerticalDirectionEstimate(pub NSInteger);
impl NINearbyObjectVerticalDirectionEstimate {
    #[doc(alias = "NINearbyObjectVerticalDirectionEstimateUnknown")]
    pub const Unknown: Self = Self(0);
    /// Represents the nearby object is approximately equal
    #[doc(alias = "NINearbyObjectVerticalDirectionEstimateSame")]
    pub const Same: Self = Self(1);
    /// Represents the nearby object is above the current device
    #[doc(alias = "NINearbyObjectVerticalDirectionEstimateAbove")]
    pub const Above: Self = Self(2);
    /// Represents the nearby object  is below the current device
    #[doc(alias = "NINearbyObjectVerticalDirectionEstimateBelow")]
    pub const Below: Self = Self(3);
    /// Represents the nearby object  is above or below the current device - i.e. not the same level
    #[doc(alias = "NINearbyObjectVerticalDirectionEstimateAboveOrBelow")]
    pub const AboveOrBelow: Self = Self(4);
}

unsafe impl Encode for NINearbyObjectVerticalDirectionEstimate {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NINearbyObjectVerticalDirectionEstimate {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A nearby object with distance and direction measurements.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/nearbyinteraction/ninearbyobject?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NINearbyObject;
);

unsafe impl NSCoding for NINearbyObject {}

unsafe impl NSCopying for NINearbyObject {}

unsafe impl CopyingHelper for NINearbyObject {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NINearbyObject {}

unsafe impl NSSecureCoding for NINearbyObject {}

extern_methods!(
    unsafe impl NINearbyObject {
        #[cfg(feature = "NIConfiguration")]
        /// Nearby interaction discovery token
        ///
        /// This discovery token will be equal to the token provided in the configuration with which the session was run.
        #[unsafe(method(discoveryToken))]
        #[unsafe(method_family = none)]
        pub unsafe fn discoveryToken(&self) -> Retained<NIDiscoveryToken>;

        /// Distance to the nearby object in meters. If not available in this update, the value of this property will be equal to NINearbyObjectDistanceNotAvailable in Objective C, or nil in Swift.
        #[unsafe(method(distance))]
        #[unsafe(method_family = none)]
        pub unsafe fn distance(&self) -> c_float;

        /// An indication of the positional relationship to the nearby object in the vertical dimension.
        #[unsafe(method(verticalDirectionEstimate))]
        #[unsafe(method_family = none)]
        pub unsafe fn verticalDirectionEstimate(&self) -> NINearbyObjectVerticalDirectionEstimate;

        /// An angle in radians indicating the azimuthal direction to the nearby object.
        ///
        /// when unavailable, the value will be set to `NINearbyObjectAngleNotAvailable`.
        #[unsafe(method(horizontalAngle))]
        #[unsafe(method_family = none)]
        pub unsafe fn horizontalAngle(&self) -> c_float;

        /// Unavailable
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
