//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NISession;

    unsafe impl ClassType for NISession {
        type Super = NSObject;
    }
);

unsafe impl NSObjectProtocol for NISession {}

extern_methods!(
    unsafe impl NISession {
        #[deprecated]
        #[method(isSupported)]
        pub unsafe fn isSupported() -> bool;

        #[cfg(feature = "NIDeviceCapability")]
        #[method_id(@__retain_semantics Other deviceCapabilities)]
        pub unsafe fn deviceCapabilities() -> Retained<ProtocolObject<dyn NIDeviceCapability>>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn NISessionDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NISessionDelegate>>);

        #[cfg(feature = "NIConfiguration")]
        #[method_id(@__retain_semantics Other discoveryToken)]
        pub unsafe fn discoveryToken(&self) -> Option<Retained<NIDiscoveryToken>>;

        #[cfg(feature = "NIConfiguration")]
        #[method_id(@__retain_semantics Other configuration)]
        pub unsafe fn configuration(&self) -> Option<Retained<NIConfiguration>>;

        #[cfg(feature = "NIConfiguration")]
        #[method(runWithConfiguration:)]
        pub unsafe fn runWithConfiguration(&self, configuration: &NIConfiguration);

        #[method(pause)]
        pub unsafe fn pause(&self);

        #[method(invalidate)]
        pub unsafe fn invalidate(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NISession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NINearbyObjectRemovalReason(pub NSInteger);
impl NINearbyObjectRemovalReason {
    #[doc(alias = "NINearbyObjectRemovalReasonTimeout")]
    pub const Timeout: Self = Self(0);
    #[doc(alias = "NINearbyObjectRemovalReasonPeerEnded")]
    pub const PeerEnded: Self = Self(1);
}

unsafe impl Encode for NINearbyObjectRemovalReason {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NINearbyObjectRemovalReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NIAlgorithmConvergenceStatus(pub NSInteger);
impl NIAlgorithmConvergenceStatus {
    #[doc(alias = "NIAlgorithmConvergenceStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "NIAlgorithmConvergenceStatusNotConverged")]
    pub const NotConverged: Self = Self(1);
    #[doc(alias = "NIAlgorithmConvergenceStatusConverged")]
    pub const Converged: Self = Self(2);
}

unsafe impl Encode for NIAlgorithmConvergenceStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NIAlgorithmConvergenceStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NIAlgorithmConvergence;

    unsafe impl ClassType for NIAlgorithmConvergence {
        type Super = NSObject;
    }
);

unsafe impl NSCoding for NIAlgorithmConvergence {}

unsafe impl NSCopying for NIAlgorithmConvergence {}

unsafe impl CopyingHelper for NIAlgorithmConvergence {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NIAlgorithmConvergence {}

unsafe impl NSSecureCoding for NIAlgorithmConvergence {}

extern_methods!(
    unsafe impl NIAlgorithmConvergence {
        #[method(status)]
        pub unsafe fn status(&self) -> NIAlgorithmConvergenceStatus;

        #[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
        #[method_id(@__retain_semantics Other reasons)]
        pub unsafe fn reasons(&self) -> Retained<NSArray<NIAlgorithmConvergenceStatusReason>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    pub unsafe trait NISessionDelegate: NSObjectProtocol {
        #[cfg(feature = "NINearbyObject")]
        #[optional]
        #[method(session:didUpdateNearbyObjects:)]
        unsafe fn session_didUpdateNearbyObjects(
            &self,
            session: &NISession,
            nearby_objects: &NSArray<NINearbyObject>,
        );

        #[cfg(feature = "NINearbyObject")]
        #[optional]
        #[method(session:didRemoveNearbyObjects:withReason:)]
        unsafe fn session_didRemoveNearbyObjects_withReason(
            &self,
            session: &NISession,
            nearby_objects: &NSArray<NINearbyObject>,
            reason: NINearbyObjectRemovalReason,
        );

        #[optional]
        #[method(sessionWasSuspended:)]
        unsafe fn sessionWasSuspended(&self, session: &NISession);

        #[optional]
        #[method(sessionSuspensionEnded:)]
        unsafe fn sessionSuspensionEnded(&self, session: &NISession);

        #[optional]
        #[method(session:didInvalidateWithError:)]
        unsafe fn session_didInvalidateWithError(&self, session: &NISession, error: &NSError);

        #[cfg(feature = "NINearbyObject")]
        #[optional]
        #[method(session:didGenerateShareableConfigurationData:forObject:)]
        unsafe fn session_didGenerateShareableConfigurationData_forObject(
            &self,
            session: &NISession,
            shareable_configuration_data: &NSData,
            object: &NINearbyObject,
        );

        #[cfg(feature = "NINearbyObject")]
        #[optional]
        #[method(session:didUpdateAlgorithmConvergence:forObject:)]
        unsafe fn session_didUpdateAlgorithmConvergence_forObject(
            &self,
            session: &NISession,
            convergence: &NIAlgorithmConvergence,
            object: Option<&NINearbyObject>,
        );

        #[optional]
        #[method(sessionDidStartRunning:)]
        unsafe fn sessionDidStartRunning(&self, session: &NISession);
    }

    unsafe impl ProtocolType for dyn NISessionDelegate {}
);
