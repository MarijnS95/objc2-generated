//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_allocationfailed?language=objc)
pub const kCMBufferQueueError_AllocationFailed: OSStatus = -12760;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_requiredparametermissing?language=objc)
pub const kCMBufferQueueError_RequiredParameterMissing: OSStatus = -12761;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_invalidcmbuffercallbacksstruct?language=objc)
pub const kCMBufferQueueError_InvalidCMBufferCallbacksStruct: OSStatus = -12762;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_enqueueafterendofdata?language=objc)
pub const kCMBufferQueueError_EnqueueAfterEndOfData: OSStatus = -12763;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_queueisfull?language=objc)
pub const kCMBufferQueueError_QueueIsFull: OSStatus = -12764;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_badtriggerduration?language=objc)
pub const kCMBufferQueueError_BadTriggerDuration: OSStatus = -12765;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_cannotmodifyqueuefromtriggercallback?language=objc)
pub const kCMBufferQueueError_CannotModifyQueueFromTriggerCallback: OSStatus = -12766;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_invalidtriggercondition?language=objc)
pub const kCMBufferQueueError_InvalidTriggerCondition: OSStatus = -12767;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_invalidtriggertoken?language=objc)
pub const kCMBufferQueueError_InvalidTriggerToken: OSStatus = -12768;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueueerror_invalidbuffer?language=objc)
pub const kCMBufferQueueError_InvalidBuffer: OSStatus = -12769;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferqueueref?language=objc)
pub type CMBufferQueueRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferref?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMBufferRef = CFTypeRef;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergettimecallback?language=objc)
#[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
pub type CMBufferGetTimeCallback =
    Option<unsafe extern "C-unwind" fn(CMBufferRef, *mut c_void) -> CMTime>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergettimehandler?language=objc)
#[cfg(all(
    feature = "CMTime",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
pub type CMBufferGetTimeHandler = *mut block2::Block<dyn Fn(CMBufferRef) -> CMTime>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergetbooleancallback?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMBufferGetBooleanCallback =
    Option<unsafe extern "C-unwind" fn(CMBufferRef, *mut c_void) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergetbooleanhandler?language=objc)
#[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
pub type CMBufferGetBooleanHandler = *mut block2::Block<dyn Fn(CMBufferRef) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffercomparecallback?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMBufferCompareCallback = Option<
    unsafe extern "C-unwind" fn(CMBufferRef, CMBufferRef, *mut c_void) -> CFComparisonResult,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffercomparehandler?language=objc)
#[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
pub type CMBufferCompareHandler =
    *mut block2::Block<dyn Fn(CMBufferRef, CMBufferRef) -> CFComparisonResult>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergetsizecallback?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMBufferGetSizeCallback =
    Option<unsafe extern "C-unwind" fn(CMBufferRef, *mut c_void) -> usize>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffergetsizehandler?language=objc)
#[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
pub type CMBufferGetSizeHandler = *mut block2::Block<dyn Fn(CMBufferRef) -> usize>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffercallbacks?language=objc)
#[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMBufferCallbacks {
    pub version: u32,
    pub refcon: *mut c_void,
    pub getDecodeTimeStamp: CMBufferGetTimeCallback,
    pub getPresentationTimeStamp: CMBufferGetTimeCallback,
    pub getDuration: CMBufferGetTimeCallback,
    pub isDataReady: CMBufferGetBooleanCallback,
    pub compare: CMBufferCompareCallback,
    pub dataBecameReadyNotification: CFStringRef,
    pub getSize: CMBufferGetSizeCallback,
}

#[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
unsafe impl Encode for CMBufferCallbacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <u32>::ENCODING,
            <*mut c_void>::ENCODING,
            <CMBufferGetTimeCallback>::ENCODING,
            <CMBufferGetTimeCallback>::ENCODING,
            <CMBufferGetTimeCallback>::ENCODING,
            <CMBufferGetBooleanCallback>::ENCODING,
            <CMBufferCompareCallback>::ENCODING,
            <CFStringRef>::ENCODING,
            <CMBufferGetSizeCallback>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
unsafe impl RefEncode for CMBufferCallbacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferhandlers?language=objc)
#[cfg(all(
    feature = "CMTime",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMBufferHandlers {
    pub version: usize,
    pub getDecodeTimeStamp: CMBufferGetTimeHandler,
    pub getPresentationTimeStamp: CMBufferGetTimeHandler,
    pub getDuration: CMBufferGetTimeHandler,
    pub isDataReady: CMBufferGetBooleanHandler,
    pub compare: CMBufferCompareHandler,
    pub dataBecameReadyNotification: CFStringRef,
    pub getSize: CMBufferGetSizeHandler,
}

#[cfg(all(
    feature = "CMTime",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
unsafe impl Encode for CMBufferHandlers {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <usize>::ENCODING,
            <CMBufferGetTimeHandler>::ENCODING,
            <CMBufferGetTimeHandler>::ENCODING,
            <CMBufferGetTimeHandler>::ENCODING,
            <CMBufferGetBooleanHandler>::ENCODING,
            <CMBufferCompareHandler>::ENCODING,
            <CFStringRef>::ENCODING,
            <CMBufferGetSizeHandler>::ENCODING,
        ],
    );
}

#[cfg(all(
    feature = "CMTime",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
unsafe impl RefEncode for CMBufferHandlers {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMBufferQueueGetCallbacksForUnsortedSampleBuffers() -> NonNull<CMBufferCallbacks>;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS() -> NonNull<CMBufferCallbacks>;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMBufferQueueCreate(
        allocator: CFAllocatorRef,
        capacity: CMItemCount,
        callbacks: NonNull<CMBufferCallbacks>,
        queue_out: NonNull<CMBufferQueueRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "block2",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMBufferQueueCreateWithHandlers(
        allocator: CFAllocatorRef,
        capacity: CMItemCount,
        handlers: NonNull<CMBufferHandlers>,
        queue_out: NonNull<CMBufferQueueRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueEnqueue(queue: CMBufferQueueRef, buf: CMBufferRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueDequeueAndRetain(queue: CMBufferQueueRef) -> CMBufferRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueDequeueIfDataReadyAndRetain(queue: CMBufferQueueRef) -> CMBufferRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CMBufferQueueGetHead(queue: CMBufferQueueRef) -> CMBufferRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueCopyHead(queue: CMBufferQueueRef) -> CMBufferRef;
}

extern "C-unwind" {
    pub fn CMBufferQueueIsEmpty(queue: CMBufferQueueRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMBufferQueueMarkEndOfData(queue: CMBufferQueueRef) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMBufferQueueContainsEndOfData(queue: CMBufferQueueRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMBufferQueueIsAtEndOfData(queue: CMBufferQueueRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMBufferQueueReset(queue: CMBufferQueueRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueResetWithCallback(
        queue: CMBufferQueueRef,
        callback: unsafe extern "C-unwind" fn(CMBufferRef, *mut c_void),
        refcon: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMBufferQueueGetBufferCount(queue: CMBufferQueueRef) -> CMItemCount;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetDuration(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetMinDecodeTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetFirstDecodeTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetMinPresentationTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetFirstPresentationTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetMaxPresentationTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueGetEndPresentationTimeStamp(queue: CMBufferQueueRef) -> CMTime;
}

extern "C-unwind" {
    pub fn CMBufferQueueGetTotalSize(queue: CMBufferQueueRef) -> usize;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferqueuetriggertoken?language=objc)
pub type CMBufferQueueTriggerToken = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferqueuetriggercallback?language=objc)
pub type CMBufferQueueTriggerCallback =
    Option<unsafe extern "C-unwind" fn(*mut c_void, CMBufferQueueTriggerToken)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferqueuetriggerhandler?language=objc)
#[cfg(feature = "block2")]
pub type CMBufferQueueTriggerHandler = *mut block2::Block<dyn Fn(CMBufferQueueTriggerToken)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbufferqueuetriggercondition?language=objc)
pub type CMBufferQueueTriggerCondition = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendurationbecomeslessthan?language=objc)
pub const kCMBufferQueueTrigger_WhenDurationBecomesLessThan: CMBufferQueueTriggerCondition = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendurationbecomeslessthanorequalto?language=objc)
pub const kCMBufferQueueTrigger_WhenDurationBecomesLessThanOrEqualTo:
    CMBufferQueueTriggerCondition = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendurationbecomesgreaterthan?language=objc)
pub const kCMBufferQueueTrigger_WhenDurationBecomesGreaterThan: CMBufferQueueTriggerCondition = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendurationbecomesgreaterthanorequalto?language=objc)
pub const kCMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualTo:
    CMBufferQueueTriggerCondition = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenminpresentationtimestampchanges?language=objc)
pub const kCMBufferQueueTrigger_WhenMinPresentationTimeStampChanges: CMBufferQueueTriggerCondition =
    5;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenmaxpresentationtimestampchanges?language=objc)
pub const kCMBufferQueueTrigger_WhenMaxPresentationTimeStampChanges: CMBufferQueueTriggerCondition =
    6;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendatabecomesready?language=objc)
pub const kCMBufferQueueTrigger_WhenDataBecomesReady: CMBufferQueueTriggerCondition = 7;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenendofdatareached?language=objc)
pub const kCMBufferQueueTrigger_WhenEndOfDataReached: CMBufferQueueTriggerCondition = 8;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenreset?language=objc)
pub const kCMBufferQueueTrigger_WhenReset: CMBufferQueueTriggerCondition = 9;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenbuffercountbecomeslessthan?language=objc)
pub const kCMBufferQueueTrigger_WhenBufferCountBecomesLessThan: CMBufferQueueTriggerCondition = 10;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whenbuffercountbecomesgreaterthan?language=objc)
pub const kCMBufferQueueTrigger_WhenBufferCountBecomesGreaterThan: CMBufferQueueTriggerCondition =
    11;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmbufferqueuetrigger_whendurationbecomesgreaterthanorequaltoandbuffercountbecomesgreaterthan?language=objc)
pub const kCMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualToAndBufferCountBecomesGreaterThan: CMBufferQueueTriggerCondition = 12;

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMBufferQueueInstallTrigger(
        queue: CMBufferQueueRef,
        callback: CMBufferQueueTriggerCallback,
        refcon: *mut c_void,
        condition: CMBufferQueueTriggerCondition,
        time: CMTime,
        trigger_token_out: *mut CMBufferQueueTriggerToken,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMBufferQueueInstallTriggerWithIntegerThreshold(
        queue: CMBufferQueueRef,
        callback: CMBufferQueueTriggerCallback,
        refcon: *mut c_void,
        condition: CMBufferQueueTriggerCondition,
        threshold: CMItemCount,
        trigger_token_out: *mut CMBufferQueueTriggerToken,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "block2"))]
    pub fn CMBufferQueueInstallTriggerHandler(
        queue: CMBufferQueueRef,
        condition: CMBufferQueueTriggerCondition,
        time: CMTime,
        trigger_token_out: *mut CMBufferQueueTriggerToken,
        handler: CMBufferQueueTriggerHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "block2",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMBufferQueueInstallTriggerHandlerWithIntegerThreshold(
        queue: CMBufferQueueRef,
        condition: CMBufferQueueTriggerCondition,
        threshold: CMItemCount,
        trigger_token_out: *mut CMBufferQueueTriggerToken,
        handler: CMBufferQueueTriggerHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMBufferQueueRemoveTrigger(
        queue: CMBufferQueueRef,
        trigger_token: CMBufferQueueTriggerToken,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMBufferQueueTestTrigger(
        queue: CMBufferQueueRef,
        trigger_token: CMBufferQueueTriggerToken,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueCallForEachBuffer(
        queue: CMBufferQueueRef,
        callback: unsafe extern "C-unwind" fn(CMBufferRef, *mut c_void) -> OSStatus,
        refcon: *mut c_void,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffervalidationcallback?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMBufferValidationCallback =
    Option<unsafe extern "C-unwind" fn(CMBufferQueueRef, CMBufferRef, *mut c_void) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmbuffervalidationhandler?language=objc)
#[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
pub type CMBufferValidationHandler =
    *mut block2::Block<dyn Fn(CMBufferQueueRef, CMBufferRef) -> OSStatus>;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMBufferQueueSetValidationCallback(
        queue: CMBufferQueueRef,
        callback: CMBufferValidationCallback,
        refcon: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CMBufferQueueSetValidationHandler(
        queue: CMBufferQueueRef,
        handler: CMBufferValidationHandler,
    ) -> OSStatus;
}
