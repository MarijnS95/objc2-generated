//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;

use crate::*;

/// The OSStatus errors returned from the CMTaggedBufferGroup routines.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtaggedbuffergrouperror?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMTaggedBufferGroupError(pub OSStatus);
impl CMTaggedBufferGroupError {
    #[doc(alias = "kCMTaggedBufferGroupError_ParamErr")]
    pub const ParamErr: Self = Self(-15780);
    #[doc(alias = "kCMTaggedBufferGroupError_AllocationFailed")]
    pub const AllocationFailed: Self = Self(-15781);
    #[doc(alias = "kCMTaggedBufferGroupError_InternalError")]
    pub const InternalError: Self = Self(-15782);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMTaggedBufferGroupError {
    const ENCODING: Encoding = OSStatus::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMTaggedBufferGroupError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// An object gathering zero or more buffers (CMSampleBuffer, CVPixelBuffer) each with a CMTagCollection.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtaggedbuffergroupref?language=objc)
pub type CMTaggedBufferGroupRef = *mut c_void;

extern "C-unwind" {
    pub fn CMTaggedBufferGroupGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    /// Creates a new tagged buffer group.
    ///
    /// Parameter `allocator`: The CFAllocator to use for allocating this buffer group.  May be NULL.
    ///
    /// Parameter `tagCollections`: A CFArray of CMTagCollections for the buffers.
    ///
    /// Parameter `buffers`: A CFArray of buffers, each of type CMSampleBuffer or CVPixelBuffer.  The group will retain these sample buffers and pixel buffers.
    /// The number of tagCollections must match the number of buffers.
    ///
    /// Parameter `groupOut`: The newly created group will be placed here.  The caller has a responsibility to call CFRelease on it.
    ///
    /// Returns: Returns noErr on success.
    pub fn CMTaggedBufferGroupCreate(
        allocator: CFAllocatorRef,
        tag_collections: CFArrayRef,
        buffers: CFArrayRef,
        group_out: NonNull<CMTaggedBufferGroupRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Creates a new tagged buffer group by combining all the tagged buffer groups in an array.
    ///
    /// Parameter `allocator`: The CFAllocator to use for allocating this buffer group.  May be NULL.
    ///
    /// Parameter `taggedBufferGroups`: A CFArray of CMTaggedBufferGroups.
    ///
    /// Parameter `groupOut`: The newly created group will be placed here.  The caller has a responsibility to call CFRelease on it.
    ///
    /// Returns: Returns noErr on success.
    pub fn CMTaggedBufferGroupCreateCombined(
        allocator: CFAllocatorRef,
        tagged_buffer_groups: CFArrayRef,
        group_out: NonNull<CMTaggedBufferGroupRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns the number of buffers in a CMTaggedBufferGroup.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the count from.
    ///
    /// Returns: Returns the number of buffers, or 0 on failure or if the group is empty.
    #[cfg(feature = "CMBase")]
    pub fn CMTaggedBufferGroupGetCount(group: CMTaggedBufferGroupRef) -> CMItemCount;
}

extern "C-unwind" {
    /// Returns a CMTagCollection from a CMTaggedBufferGroup by sequential indexing.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the tag collection from.
    ///
    /// Parameter `index`: An index from 0 to count-1.
    ///
    /// Returns: Returns the tag collection, or NULL on failure.
    #[cfg(feature = "CMTagCollection")]
    pub fn CMTaggedBufferGroupGetTagCollectionAtIndex(
        group: CMTaggedBufferGroupRef,
        index: CFIndex,
    ) -> CMTagCollectionRef;
}

extern "C-unwind" {
    /// Returns a CVPixelBuffer from a CMTaggedBufferGroup by sequential indexing.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CVPixelBuffer from.
    ///
    /// Parameter `index`: An index from 0 to count-1.
    ///
    /// Returns: Returns the CVPixelBuffer, or NULL on failure (including if the buffer at this index is not a CVPixelBuffer).
    #[cfg(feature = "objc2-core-video")]
    pub fn CMTaggedBufferGroupGetCVPixelBufferAtIndex(
        group: CMTaggedBufferGroupRef,
        index: CFIndex,
    ) -> CVPixelBufferRef;
}

extern "C-unwind" {
    /// Returns a CVPixelBuffer from a CMTaggedBufferGroup by looking for a unique match for the provided tag.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CVPixelBuffer from.
    ///
    /// Parameter `tag`: The tag to look up.  If more than one buffer's tag collection includes this tag, the lookup will fail.
    ///
    /// Parameter `indexOut`: On success, index of the returned CVPixelBuffer.  May be NULL.
    ///
    /// Returns: Returns the CVPixelBuffer, or NULL on failure (including if the buffer at this index is not a CVPixelBuffer).
    #[cfg(all(feature = "CMTag", feature = "objc2-core-video"))]
    pub fn CMTaggedBufferGroupGetCVPixelBufferForTag(
        group: CMTaggedBufferGroupRef,
        tag: CMTag,
        index_out: *mut CFIndex,
    ) -> CVPixelBufferRef;
}

extern "C-unwind" {
    /// Returns a CVPixelBuffer from a CMTaggedBufferGroup by looking for a unique match for the provided tag collection.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CVPixelBuffer from.
    ///
    /// Parameter `tagCollection`: The tag collection to look up.  If more than one buffer's tag collection includes this tag collection, the lookup will fail.
    ///
    /// Parameter `indexOut`: On success, index of the returned CVPixelBuffer.  May be NULL.
    ///
    /// Returns: Returns the CVPixelBuffer, or NULL on failure (including if the buffer at this index is not a CVPixelBuffer).
    #[cfg(all(feature = "CMTagCollection", feature = "objc2-core-video"))]
    pub fn CMTaggedBufferGroupGetCVPixelBufferForTagCollection(
        group: CMTaggedBufferGroupRef,
        tag_collection: CMTagCollectionRef,
        index_out: *mut CFIndex,
    ) -> CVPixelBufferRef;
}

extern "C-unwind" {
    /// Returns a CMSampleBuffer from a CMTaggedBufferGroup by sequential indexing.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CMSampleBuffer from.
    ///
    /// Parameter `index`: An index from 0 to count-1.
    ///
    /// Returns: Returns the CMSampleBuffer, or NULL on failure (including if the buffer at this index is not a CMSampleBuffer).
    #[cfg(feature = "CMSampleBuffer")]
    pub fn CMTaggedBufferGroupGetCMSampleBufferAtIndex(
        group: CMTaggedBufferGroupRef,
        index: CFIndex,
    ) -> CMSampleBufferRef;
}

extern "C-unwind" {
    /// Returns a CMSampleBuffer from a CMTaggedBufferGroup by looking for a unique match for the provided tag.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CMSampleBuffer from.
    ///
    /// Parameter `tag`: The tag to look up.  If more than one buffer's tag collection includes this tag, the lookup will fail.
    ///
    /// Parameter `indexOut`: On success, index of the returned CMSampleBuffer.  May be NULL.
    ///
    /// Returns: Returns the CMSampleBuffer, or NULL on failure (including if the buffer at this index is not a CMSampleBuffer).
    #[cfg(all(feature = "CMSampleBuffer", feature = "CMTag"))]
    pub fn CMTaggedBufferGroupGetCMSampleBufferForTag(
        group: CMTaggedBufferGroupRef,
        tag: CMTag,
        index_out: *mut CFIndex,
    ) -> CMSampleBufferRef;
}

extern "C-unwind" {
    /// Returns a CMSampleBuffer from a CMTaggedBufferGroup by looking for a unique match for the provided tag collection.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to retrieve the CMSampleBuffer from.
    ///
    /// Parameter `tagCollection`: The tag collection to look up.  If more than one buffer's tag collection includes this tag collection, the lookup will fail.
    ///
    /// Parameter `indexOut`: On success, index of the returned CMSampleBuffer.  May be NULL.
    ///
    /// Returns: Returns the CMSampleBuffer, or NULL on failure (including if the buffer at this index is not a CMSampleBuffer).
    #[cfg(all(feature = "CMSampleBuffer", feature = "CMTagCollection"))]
    pub fn CMTaggedBufferGroupGetCMSampleBufferForTagCollection(
        group: CMTaggedBufferGroupRef,
        tag_collection: CMTagCollectionRef,
        index_out: *mut CFIndex,
    ) -> CMSampleBufferRef;
}

extern "C-unwind" {
    /// Returns the number of matches that a tag collection has in a CMTaggedBufferGroup.
    ///
    /// If the returned count is less than or greater than 1, buffer lookups using this tag collection will fail and return NULL, since the lookups must be unique and unambiguous.
    ///
    /// Parameter `group`: The CMTaggedBufferGroupRef to examine.
    ///
    /// Parameter `tagCollection`: The tag collection to look up.
    ///
    /// Returns: Returns the number of entries in the CMTaggedBufferGroup that match tagCollection.
    #[cfg(all(feature = "CMBase", feature = "CMTagCollection"))]
    pub fn CMTaggedBufferGroupGetNumberOfMatchesForTagCollection(
        group: CMTaggedBufferGroupRef,
        tag_collection: CMTagCollectionRef,
    ) -> CMItemCount;
}

extern "C-unwind" {
    /// Creates a format description for a CMTaggedBufferGroup.
    ///
    /// Parameter `allocator`: CFAllocator to be used when creating the CMFormatDescription. Pass kCFAllocatorDefault to use the default allocator.
    ///
    /// Parameter `taggedBufferGroup`: The tagged buffer group for which we are creating the format description.
    ///
    /// Parameter `formatDescriptionOut`: Returned newly-created tagged buffer group CMFormatDescription
    ///
    /// The returned CMTaggedBufferGroupFormatDescription could be used to create a CMSampleBuffer
    /// wrapping the CMTaggedBufferGroup using CMSampleBufferCreateForTaggedBufferGroup.
    /// If you are going to call CMSampleBufferCreateForTaggedBufferGroup on a series of matching
    /// CMTaggedBufferGroups, it is more efficient to create the CMTaggedBufferGroupFormatDescription
    /// once and use it for all of the CMSampleBuffers.
    /// The caller owns the returned CMFormatDescription, and must release it when done with it.
    #[cfg(feature = "CMFormatDescription")]
    pub fn CMTaggedBufferGroupFormatDescriptionCreateForTaggedBufferGroup(
        allocator: CFAllocatorRef,
        tagged_buffer_group: CMTaggedBufferGroupRef,
        format_description_out: NonNull<CMTaggedBufferGroupFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Checks to see if a given format description matches a tagged buffer group.
    ///
    /// Parameter `desc`: The format description to validate.
    ///
    /// Parameter `taggedBufferGroup`: The tagged buffer group to validate against.
    ///
    /// Returns true if the CMTaggedBufferGroupFormatDescription could be used to create a
    /// CMSampleBuffer wrapping the CMTaggedBufferGroup using CMSampleBufferCreateForTaggedBufferGroup.
    #[cfg(feature = "CMFormatDescription")]
    pub fn CMTaggedBufferGroupFormatDescriptionMatchesTaggedBufferGroup(
        desc: CMTaggedBufferGroupFormatDescriptionRef,
        tagged_buffer_group: CMTaggedBufferGroupRef,
    ) -> Boolean;
}

extern "C-unwind" {
    /// Creates a new CMSampleBuffer object with the specified CMTaggedBufferGroup.
    ///
    /// Parameter `allocator`: CFAllocator with which to create the CMSampleBuffer object. Pass kCFAllocatorDefault to use the default allocator.
    ///
    /// Parameter `taggedBufferGroup`: The CMTaggedBufferGroup to be stored in the sample buffer. The CMSampleBuffer will retain the CMTaggedBufferGroup internally.
    ///
    /// Parameter `sbufPTS`: Media time PTS of the sample buffer.
    ///
    /// Parameter `sbufDuration`: Media time duration of the sample buffer. Can be kCMTimeInvalid if not known or not defined.
    ///
    /// Parameter `formatDescription`: A CMTaggedBufferGroupFormatDescription describing the CMTaggedBufferGroup.
    /// You may create this with CMTaggedBufferGroupFormatDescriptionCreateForTaggedBufferGroup.
    /// If you are creating a lot of CMSampleBuffers containing matching CMTaggedBufferGroups,
    /// it is more efficient to create the CMTaggedBufferGroupFormatDescription once and use it
    /// for all of the CMSampleBuffers.
    /// You may call CMTaggedBufferGroupFormatDescriptionMatchesTaggedBufferGroup to confirm that
    /// a reused CMTaggedBufferGroupFormatDescription matches a new CMTaggedBufferGroup.
    ///
    /// Parameter `sBufOut`: Returned newly created CMSampleBuffer.
    ///
    /// Returns: OSStatus with error or noErr if successful.
    #[cfg(all(
        feature = "CMFormatDescription",
        feature = "CMSampleBuffer",
        feature = "CMTime"
    ))]
    pub fn CMSampleBufferCreateForTaggedBufferGroup(
        allocator: CFAllocatorRef,
        tagged_buffer_group: CMTaggedBufferGroupRef,
        sbuf_pts: CMTime,
        sbuf_duration: CMTime,
        format_description: CMTaggedBufferGroupFormatDescriptionRef,
        s_buf_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns a CMSampleBuffer's TaggedBufferGroup of media data.
    ///
    /// Parameter `sbuf`: CMSampleBuffer being interrogated.
    ///
    /// The caller does not own the returned CMTaggedBufferGroup, and must retain it explicitly if the caller needs to maintain a reference to it.
    ///
    /// Returns: CMTaggedBufferGroup of media data. The result will be NULL if the CMSampleBuffer does not contain a CMTaggedBufferGroup, or if there is some other error.
    #[cfg(feature = "CMSampleBuffer")]
    pub fn CMSampleBufferGetTaggedBufferGroup(sbuf: CMSampleBufferRef) -> CMTaggedBufferGroupRef;
}
