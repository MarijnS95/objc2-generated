//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmclockref?language=objc)
pub type CMClockRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtimebaseref?language=objc)
pub type CMTimebaseRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmclockortimebaseref?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type CMClockOrTimebaseRef = CFTypeRef;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclockerror_missingrequiredparameter?language=objc)
pub const kCMClockError_MissingRequiredParameter: OSStatus = -12745;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclockerror_invalidparameter?language=objc)
pub const kCMClockError_InvalidParameter: OSStatus = -12746;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclockerror_allocationfailed?language=objc)
pub const kCMClockError_AllocationFailed: OSStatus = -12747;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclockerror_unsupportedoperation?language=objc)
pub const kCMClockError_UnsupportedOperation: OSStatus = -12756;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebaseerror_missingrequiredparameter?language=objc)
pub const kCMTimebaseError_MissingRequiredParameter: OSStatus = -12748;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebaseerror_invalidparameter?language=objc)
pub const kCMTimebaseError_InvalidParameter: OSStatus = -12749;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebaseerror_allocationfailed?language=objc)
pub const kCMTimebaseError_AllocationFailed: OSStatus = -12750;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebaseerror_timerintervaltooshort?language=objc)
pub const kCMTimebaseError_TimerIntervalTooShort: OSStatus = -12751;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebaseerror_readonly?language=objc)
pub const kCMTimebaseError_ReadOnly: OSStatus = -12757;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsyncerror_missingrequiredparameter?language=objc)
pub const kCMSyncError_MissingRequiredParameter: OSStatus = -12752;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsyncerror_invalidparameter?language=objc)
pub const kCMSyncError_InvalidParameter: OSStatus = -12753;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsyncerror_allocationfailed?language=objc)
pub const kCMSyncError_AllocationFailed: OSStatus = -12754;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsyncerror_ratemustbenonzero?language=objc)
pub const kCMSyncError_RateMustBeNonZero: OSStatus = -12755;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMClockGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CMClockGetHostTimeClock() -> CMClockRef;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMClockConvertHostTimeToSystemUnits(host_time: CMTime) -> u64;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMClockMakeHostTimeFromSystemUnits(host_time: u64) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMClockGetTime(clock: CMClockRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMClockGetAnchorTime(
        clock: CMClockRef,
        clock_time_out: NonNull<CMTime>,
        reference_clock_time_out: NonNull<CMTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMClockMightDrift(clock: CMClockRef, other_clock: CMClockRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMClockInvalidate(clock: CMClockRef);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTimebaseGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CMTimebaseCreateWithMasterClock(
        allocator: CFAllocatorRef,
        master_clock: CMClockRef,
        timebase_out: NonNull<CMTimebaseRef>,
    ) -> OSStatus;
}

// TODO: pub fn CMTimebaseCreateWithSourceClock(allocator: CFAllocatorRef,source_clock: CMClockRef,timebase_out: NonNull<CMTimebaseRef>,) -> OSStatus;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CMTimebaseCreateWithMasterTimebase(
        allocator: CFAllocatorRef,
        master_timebase: CMTimebaseRef,
        timebase_out: NonNull<CMTimebaseRef>,
    ) -> OSStatus;
}

// TODO: pub fn CMTimebaseCreateWithSourceTimebase(allocator: CFAllocatorRef,source_timebase: CMTimebaseRef,timebase_out: NonNull<CMTimebaseRef>,) -> OSStatus;

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseCopyMasterTimebase(timebase: CMTimebaseRef) -> CMTimebaseRef;
}

// TODO: pub fn CMTimebaseCopySourceTimebase(timebase: CMTimebaseRef,) -> CMTimebaseRef;

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseCopyMasterClock(timebase: CMTimebaseRef) -> CMClockRef;
}

// TODO: pub fn CMTimebaseCopySourceClock(timebase: CMTimebaseRef,) -> CMClockRef;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CMTimebaseCopyMaster(timebase: CMTimebaseRef) -> CMClockOrTimebaseRef;
}

// TODO: pub fn CMTimebaseCopySource(timebase: CMTimebaseRef,) -> CMClockOrTimebaseRef;

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseCopyUltimateMasterClock(timebase: CMTimebaseRef) -> CMClockRef;
}

// TODO: pub fn CMTimebaseCopyUltimateSourceClock(timebase: CMTimebaseRef,) -> CMClockRef;

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseGetMasterTimebase(timebase: CMTimebaseRef) -> CMTimebaseRef;
}

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseGetMasterClock(timebase: CMTimebaseRef) -> CMClockRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CMTimebaseGetMaster(timebase: CMTimebaseRef) -> CMClockOrTimebaseRef;
}

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseGetUltimateMasterClock(timebase: CMTimebaseRef) -> CMClockRef;
}

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseSetMasterClock(
        timebase: CMTimebaseRef,
        new_master_clock: CMClockRef,
    ) -> OSStatus;
}

// TODO: pub fn CMTimebaseSetSourceClock(timebase: CMTimebaseRef,new_source_clock: CMClockRef,) -> OSStatus;

extern "C-unwind" {
    #[deprecated]
    pub fn CMTimebaseSetMasterTimebase(
        timebase: CMTimebaseRef,
        new_master_timebase: CMTimebaseRef,
    ) -> OSStatus;
}

// TODO: pub fn CMTimebaseSetSourceTimebase(timebase: CMTimebaseRef,new_source_timebase: CMTimebaseRef,) -> OSStatus;

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseGetTime(timebase: CMTimebaseRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseGetTimeWithTimeScale(
        timebase: CMTimebaseRef,
        timescale: CMTimeScale,
        method: CMTimeRoundingMethod,
    ) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseSetTime(timebase: CMTimebaseRef, time: CMTime) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseSetAnchorTime(
        timebase: CMTimebaseRef,
        timebase_time: CMTime,
        immediate_source_time: CMTime,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTimebaseGetRate(timebase: CMTimebaseRef) -> f64;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseGetTimeAndRate(
        timebase: CMTimebaseRef,
        time_out: *mut CMTime,
        rate_out: *mut f64,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTimebaseSetRate(timebase: CMTimebaseRef, rate: f64) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMTimebaseSetRateAndAnchorTime(
        timebase: CMTimebaseRef,
        rate: f64,
        timebase_time: CMTime,
        immediate_source_time: CMTime,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTimebaseGetEffectiveRate(timebase: CMTimebaseRef) -> f64;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTimebaseAddTimer(
        timebase: CMTimebaseRef,
        timer: CFRunLoopTimerRef,
        runloop: CFRunLoopRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTimebaseRemoveTimer(timebase: CMTimebaseRef, timer: CFRunLoopTimerRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMTimebaseSetTimerNextFireTime(
        timebase: CMTimebaseRef,
        timer: CFRunLoopTimerRef,
        fire_time: CMTime,
        flags: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTimebaseSetTimerToFireImmediately(
        timebase: CMTimebaseRef,
        timer: CFRunLoopTimerRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSyncGetRelativeRate(
        of_clock_or_timebase: CMClockOrTimebaseRef,
        relative_to_clock_or_timebase: CMClockOrTimebaseRef,
    ) -> f64;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMSyncGetRelativeRateAndAnchorTime(
        of_clock_or_timebase: CMClockOrTimebaseRef,
        relative_to_clock_or_timebase: CMClockOrTimebaseRef,
        out_relative_rate: *mut f64,
        out_of_clock_or_timebase_anchor_time: *mut CMTime,
        out_relative_to_clock_or_timebase_anchor_time: *mut CMTime,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMSyncConvertTime(
        time: CMTime,
        from_clock_or_timebase: CMClockOrTimebaseRef,
        to_clock_or_timebase: CMClockOrTimebaseRef,
    ) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSyncMightDrift(
        clock_or_timebase1: CMClockOrTimebaseRef,
        clock_or_timebase2: CMClockOrTimebaseRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMTime", feature = "objc2-core-foundation"))]
    pub fn CMSyncGetTime(clock_or_timebase: CMClockOrTimebaseRef) -> CMTime;
}

extern "C-unwind" {
    pub fn CMTimebaseNotificationBarrier(timebase: CMTimebaseRef) -> OSStatus;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebasenotification_effectiveratechanged?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMTimebaseNotification_EffectiveRateChanged: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebasenotification_timejumped?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMTimebaseNotification_TimeJumped: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimebasenotificationkey_eventtime?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMTimebaseNotificationKey_EventTime: CFStringRef;
}
