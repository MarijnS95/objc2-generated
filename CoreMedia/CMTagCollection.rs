//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtagcollectionerror?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMTagCollectionError(pub OSStatus);
impl CMTagCollectionError {
    pub const kCMTagCollectionError_ParamErr: Self = Self(-15740);
    pub const kCMTagCollectionError_AllocationFailed: Self = Self(-15741);
    pub const kCMTagCollectionError_InternalError: Self = Self(-15742);
    pub const kCMTagCollectionError_InvalidTag: Self = Self(-15743);
    pub const kCMTagCollectionError_InvalidTagCollectionDictionary: Self = Self(-15744);
    pub const kCMTagCollectionError_InvalidTagCollectionData: Self = Self(-15745);
    pub const kCMTagCollectionError_TagNotFound: Self = Self(-15746);
    pub const kCMTagCollectionError_InvalidTagCollectionDataVersion: Self = Self(-15747);
    pub const kCMTagCollectionError_ExhaustedBufferSize: Self = Self(-15748);
    pub const kCMTagCollectionError_NotYetImplemented: Self = Self(-15749);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMTagCollectionError {
    const ENCODING: Encoding = OSStatus::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMTagCollectionError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtagcollectionref?language=objc)
pub type CMTagCollectionRef = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmutabletagcollectionref?language=objc)
pub type CMMutableTagCollectionRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtagcollectionapplierfunction?language=objc)
#[cfg(feature = "CMTag")]
pub type CMTagCollectionApplierFunction = Option<unsafe extern "C-unwind" fn(CMTag, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtagcollectiontagfilterfunction?language=objc)
#[cfg(feature = "CMTag")]
pub type CMTagCollectionTagFilterFunction =
    Option<unsafe extern "C-unwind" fn(CMTag, *mut c_void) -> Boolean>;

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionCreate(
        allocator: CFAllocatorRef,
        tags: *const CMTag,
        tag_count: CMItemCount,
        new_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        new_mutable_collection_out: NonNull<CMMutableTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCreateCopy(
        tag_collection: CMTagCollectionRef,
        allocator: CFAllocatorRef,
        new_collection_copy_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCreateMutableCopy(
        tag_collection: CMTagCollectionRef,
        allocator: CFAllocatorRef,
        new_mutable_collection_copy_out: NonNull<CMMutableTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCopyDescription(
        allocator: CFAllocatorRef,
        tag_collection: CMTagCollectionRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMTagCollectionGetCount(tag_collection: CMTagCollectionRef) -> CMItemCount;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionContainsTag(tag_collection: CMTagCollectionRef, tag: CMTag) -> Boolean;
}

extern "C-unwind" {
    pub fn CMTagCollectionContainsTagsOfCollection(
        tag_collection: CMTagCollectionRef,
        contained_tag_collection: CMTagCollectionRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionContainsSpecifiedTags(
        tag_collection: CMTagCollectionRef,
        contained_tags: NonNull<CMTag>,
        contained_tag_count: CMItemCount,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionContainsCategory(
        tag_collection: CMTagCollectionRef,
        category: CMTagCategory,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionGetCountOfCategory(
        tag_collection: CMTagCollectionRef,
        category: CMTagCategory,
    ) -> CMItemCount;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionGetTags(
        tag_collection: CMTagCollectionRef,
        tag_buffer: NonNull<CMTag>,
        tag_buffer_count: CMItemCount,
        number_of_tags_copied: *mut CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionGetTagsWithCategory(
        tag_collection: CMTagCollectionRef,
        category: CMTagCategory,
        tag_buffer: NonNull<CMTag>,
        tag_buffer_count: CMItemCount,
        number_of_tags_copied: *mut CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionCountTagsWithFilterFunction(
        tag_collection: CMTagCollectionRef,
        filter_applier: CMTagCollectionTagFilterFunction,
        context: *mut c_void,
    ) -> CMItemCount;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionGetTagsWithFilterFunction(
        tag_collection: CMTagCollectionRef,
        tag_buffer: NonNull<CMTag>,
        tag_buffer_count: CMItemCount,
        number_of_tags_copied: *mut CMItemCount,
        filter: CMTagCollectionTagFilterFunction,
        context: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionCopyTagsOfCategories(
        allocator: CFAllocatorRef,
        tag_collection: CMTagCollectionRef,
        categories: NonNull<CMTagCategory>,
        categories_count: CMItemCount,
        collection_with_tags_of_categories: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionApply(
        tag_collection: CMTagCollectionRef,
        applier: CMTagCollectionApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionApplyUntil(
        tag_collection: CMTagCollectionRef,
        applier: CMTagCollectionTagFilterFunction,
        context: *mut c_void,
    ) -> CMTag;
}

extern "C-unwind" {
    pub fn CMTagCollectionIsEmpty(tag_collection: CMTagCollectionRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMTagCollectionCreateIntersection(
        tag_collection1: CMTagCollectionRef,
        tag_collection2: CMTagCollectionRef,
        tag_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTagCollectionCreateUnion(
        tag_collection1: CMTagCollectionRef,
        tag_collection2: CMTagCollectionRef,
        tag_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTagCollectionCreateDifference(
        tag_collection_minuend: CMTagCollectionRef,
        tag_collection_subtrahend: CMTagCollectionRef,
        tag_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTagCollectionCreateExclusiveOr(
        tag_collection1: CMTagCollectionRef,
        tag_collection2: CMTagCollectionRef,
        tag_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionAddTag(
        tag_collection: CMMutableTagCollectionRef,
        tag_to_add: CMTag,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionRemoveTag(
        tag_collection: CMMutableTagCollectionRef,
        tag_to_remove: CMTag,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTagCollectionRemoveAllTags(tag_collection: CMMutableTagCollectionRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTag")]
    pub fn CMTagCollectionRemoveAllTagsOfCategory(
        tag_collection: CMMutableTagCollectionRef,
        category: CMTagCategory,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMTagCollectionAddTagsFromCollection(
        tag_collection: CMMutableTagCollectionRef,
        collection_with_tags_to_add: CMTagCollectionRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTag",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTagCollectionAddTagsFromArray(
        tag_collection: CMMutableTagCollectionRef,
        tags: NonNull<CMTag>,
        tag_count: CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCopyAsDictionary(
        tag_collection: CMTagCollectionRef,
        allocator: CFAllocatorRef,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCreateFromDictionary(
        dict: CFDictionaryRef,
        allocator: CFAllocatorRef,
        new_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCopyAsData(
        tag_collection: CMTagCollectionRef,
        allocator: CFAllocatorRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMTagCollectionCreateFromData(
        data: CFDataRef,
        allocator: CFAllocatorRef,
        new_collection_out: NonNull<CMTagCollectionRef>,
    ) -> OSStatus;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtagcollectiontagsarraykey?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMTagCollectionTagsArrayKey: CFStringRef;
}
