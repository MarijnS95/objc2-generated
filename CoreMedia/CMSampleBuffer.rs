//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-audio-types")]
use objc2_core_audio_types::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_allocationfailed?language=objc)
pub const kCMSampleBufferError_AllocationFailed: OSStatus = -12730;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_requiredparametermissing?language=objc)
pub const kCMSampleBufferError_RequiredParameterMissing: OSStatus = -12731;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_alreadyhasdatabuffer?language=objc)
pub const kCMSampleBufferError_AlreadyHasDataBuffer: OSStatus = -12732;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_buffernotready?language=objc)
pub const kCMSampleBufferError_BufferNotReady: OSStatus = -12733;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_sampleindexoutofrange?language=objc)
pub const kCMSampleBufferError_SampleIndexOutOfRange: OSStatus = -12734;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_bufferhasnosamplesizes?language=objc)
pub const kCMSampleBufferError_BufferHasNoSampleSizes: OSStatus = -12735;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_bufferhasnosampletiminginfo?language=objc)
pub const kCMSampleBufferError_BufferHasNoSampleTimingInfo: OSStatus = -12736;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_arraytoosmall?language=objc)
pub const kCMSampleBufferError_ArrayTooSmall: OSStatus = -12737;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_invalidentrycount?language=objc)
pub const kCMSampleBufferError_InvalidEntryCount: OSStatus = -12738;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_cannotsubdivide?language=objc)
pub const kCMSampleBufferError_CannotSubdivide: OSStatus = -12739;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_sampletiminginfoinvalid?language=objc)
pub const kCMSampleBufferError_SampleTimingInfoInvalid: OSStatus = -12740;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_invalidmediatypeforoperation?language=objc)
pub const kCMSampleBufferError_InvalidMediaTypeForOperation: OSStatus = -12741;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_invalidsampledata?language=objc)
pub const kCMSampleBufferError_InvalidSampleData: OSStatus = -12742;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_invalidmediaformat?language=objc)
pub const kCMSampleBufferError_InvalidMediaFormat: OSStatus = -12743;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_invalidated?language=objc)
pub const kCMSampleBufferError_Invalidated: OSStatus = -12744;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_datafailed?language=objc)
pub const kCMSampleBufferError_DataFailed: OSStatus = -16750;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffererror_datacanceled?language=objc)
pub const kCMSampleBufferError_DataCanceled: OSStatus = -16751;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferflag_audiobufferlist_assure16bytealignment?language=objc)
pub const kCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment: u32 = 1 << 0;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsamplebufferref?language=objc)
pub type CMSampleBufferRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsampletiminginfo?language=objc)
#[cfg(feature = "CMTime")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMSampleTimingInfo {
    pub duration: CMTime,
    pub presentationTimeStamp: CMTime,
    pub decodeTimeStamp: CMTime,
}

#[cfg(feature = "CMTime")]
unsafe impl Encode for CMSampleTimingInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[<CMTime>::ENCODING, <CMTime>::ENCODING, <CMTime>::ENCODING],
    );
}

#[cfg(feature = "CMTime")]
unsafe impl RefEncode for CMSampleTimingInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtiminginfoinvalid?language=objc)
    #[cfg(feature = "CMTime")]
    pub static kCMTimingInfoInvalid: CMSampleTimingInfo;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsamplebuffermakedatareadycallback?language=objc)
pub type CMSampleBufferMakeDataReadyCallback =
    Option<unsafe extern "C-unwind" fn(CMSampleBufferRef, *mut c_void) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsamplebuffermakedatareadyhandler?language=objc)
#[cfg(feature = "block2")]
pub type CMSampleBufferMakeDataReadyHandler =
    *mut block2::Block<dyn Fn(CMSampleBufferRef) -> OSStatus>;

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferCreate(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        data_ready: Boolean,
        make_data_ready_callback: CMSampleBufferMakeDataReadyCallback,
        make_data_ready_refcon: *mut c_void,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        num_sample_timing_entries: CMItemCount,
        sample_timing_array: *mut CMSampleTimingInfo,
        num_sample_size_entries: CMItemCount,
        sample_size_array: *mut usize,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "block2",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferCreateWithMakeDataReadyHandler(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        data_ready: Boolean,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        num_sample_timing_entries: CMItemCount,
        sample_timing_array: *mut CMSampleTimingInfo,
        num_sample_size_entries: CMItemCount,
        sample_size_array: *mut usize,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
        make_data_ready_handler: CMSampleBufferMakeDataReadyHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferCreateReady(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        num_sample_timing_entries: CMItemCount,
        sample_timing_array: *mut CMSampleTimingInfo,
        num_sample_size_entries: CMItemCount,
        sample_size_array: *mut usize,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-audio-types",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMAudioSampleBufferCreateWithPacketDescriptions(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        data_ready: Boolean,
        make_data_ready_callback: CMSampleBufferMakeDataReadyCallback,
        make_data_ready_refcon: *mut c_void,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        presentation_time_stamp: CMTime,
        packet_descriptions: *mut AudioStreamPacketDescription,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "block2",
        feature = "objc2-core-audio-types",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        data_ready: Boolean,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        presentation_time_stamp: CMTime,
        packet_descriptions: *mut AudioStreamPacketDescription,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
        make_data_ready_handler: CMSampleBufferMakeDataReadyHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-audio-types",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMAudioSampleBufferCreateReadyWithPacketDescriptions(
        allocator: CFAllocatorRef,
        data_buffer: CMBlockBufferRef,
        format_description: CMFormatDescriptionRef,
        num_samples: CMItemCount,
        presentation_time_stamp: CMTime,
        packet_descriptions: *mut AudioStreamPacketDescription,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-foundation",
        feature = "objc2-core-video"
    ))]
    pub fn CMSampleBufferCreateForImageBuffer(
        allocator: CFAllocatorRef,
        image_buffer: CVImageBufferRef,
        data_ready: Boolean,
        make_data_ready_callback: CMSampleBufferMakeDataReadyCallback,
        make_data_ready_refcon: *mut c_void,
        format_description: CMVideoFormatDescriptionRef,
        sample_timing: NonNull<CMSampleTimingInfo>,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "block2",
        feature = "objc2-core-foundation",
        feature = "objc2-core-video"
    ))]
    pub fn CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler(
        allocator: CFAllocatorRef,
        image_buffer: CVImageBufferRef,
        data_ready: Boolean,
        format_description: CMVideoFormatDescriptionRef,
        sample_timing: NonNull<CMSampleTimingInfo>,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
        make_data_ready_handler: CMSampleBufferMakeDataReadyHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMFormatDescription",
        feature = "CMTime",
        feature = "objc2-core-foundation",
        feature = "objc2-core-video"
    ))]
    pub fn CMSampleBufferCreateReadyWithImageBuffer(
        allocator: CFAllocatorRef,
        image_buffer: CVImageBufferRef,
        format_description: CMVideoFormatDescriptionRef,
        sample_timing: NonNull<CMSampleTimingInfo>,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSampleBufferCreateCopy(
        allocator: CFAllocatorRef,
        sbuf: CMSampleBufferRef,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferCreateCopyWithNewTiming(
        allocator: CFAllocatorRef,
        original_s_buf: CMSampleBufferRef,
        num_sample_timing_entries: CMItemCount,
        sample_timing_array: *mut CMSampleTimingInfo,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSampleBufferCopySampleBufferForRange(
        allocator: CFAllocatorRef,
        sbuf: CMSampleBufferRef,
        sample_range: CFRange,
        sample_buffer_out: NonNull<CMSampleBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSampleBufferGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CMBlockBuffer")]
    pub fn CMSampleBufferSetDataBuffer(
        sbuf: CMSampleBufferRef,
        data_buffer: CMBlockBufferRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMBlockBuffer")]
    pub fn CMSampleBufferGetDataBuffer(sbuf: CMSampleBufferRef) -> CMBlockBufferRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-video")]
    pub fn CMSampleBufferGetImageBuffer(sbuf: CMSampleBufferRef) -> CVImageBufferRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "objc2-core-audio-types", feature = "objc2-core-foundation"))]
    pub fn CMSampleBufferSetDataBufferFromAudioBufferList(
        sbuf: CMSampleBufferRef,
        block_buffer_structure_allocator: CFAllocatorRef,
        block_buffer_block_allocator: CFAllocatorRef,
        flags: u32,
        buffer_list: NonNull<AudioBufferList>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "objc2-core-audio-types",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(
        sbuf: CMSampleBufferRef,
        buffer_list_size_needed_out: *mut usize,
        buffer_list_out: *mut AudioBufferList,
        buffer_list_size: usize,
        block_buffer_structure_allocator: CFAllocatorRef,
        block_buffer_block_allocator: CFAllocatorRef,
        flags: u32,
        block_buffer_out: *mut CMBlockBufferRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMSampleBufferGetAudioStreamPacketDescriptions(
        sbuf: CMSampleBufferRef,
        packet_descriptions_size: usize,
        packet_descriptions_out: *mut AudioStreamPacketDescription,
        packet_descriptions_size_needed_out: *mut usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMSampleBufferGetAudioStreamPacketDescriptionsPtr(
        sbuf: CMSampleBufferRef,
        packet_descriptions_pointer_out: *mut *mut AudioStreamPacketDescription,
        packet_descriptions_size_out: *mut usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMSampleBufferCopyPCMDataIntoAudioBufferList(
        sbuf: CMSampleBufferRef,
        frame_offset: i32,
        num_frames: i32,
        buffer_list: NonNull<AudioBufferList>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferSetDataReady(sbuf: CMSampleBufferRef) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferDataIsReady(sbuf: CMSampleBufferRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CMSampleBufferSetDataFailed(sbuf: CMSampleBufferRef, status: OSStatus) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferHasDataFailed(
        sbuf: CMSampleBufferRef,
        status_out: *mut OSStatus,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CMSampleBufferMakeDataReady(sbuf: CMSampleBufferRef) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferTrackDataReadiness(
        sbuf: CMSampleBufferRef,
        sample_buffer_to_track: CMSampleBufferRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferInvalidate(sbuf: CMSampleBufferRef) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsamplebufferinvalidatecallback?language=objc)
pub type CMSampleBufferInvalidateCallback =
    Option<unsafe extern "C-unwind" fn(CMSampleBufferRef, u64)>;

extern "C-unwind" {
    pub fn CMSampleBufferSetInvalidateCallback(
        sbuf: CMSampleBufferRef,
        invalidate_callback: CMSampleBufferInvalidateCallback,
        invalidate_ref_con: u64,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsamplebufferinvalidatehandler?language=objc)
#[cfg(feature = "block2")]
pub type CMSampleBufferInvalidateHandler = *mut block2::Block<dyn Fn(CMSampleBufferRef)>;

extern "C-unwind" {
    #[cfg(feature = "block2")]
    pub fn CMSampleBufferSetInvalidateHandler(
        sbuf: CMSampleBufferRef,
        invalidate_handler: CMSampleBufferInvalidateHandler,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSampleBufferIsValid(sbuf: CMSampleBufferRef) -> Boolean;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffernotification_databecameready?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferNotification_DataBecameReady: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffernotification_datafailed?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferNotification_DataFailed: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebuffernotificationparameter_osstatus?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferNotificationParameter_OSStatus: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotification_inhibitoutputuntil?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotification_InhibitOutputUntil: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotificationparameter_resumetag?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotificationParameter_ResumeTag: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotification_resetoutput?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotification_ResetOutput: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotification_upcomingoutputptsrangechanged?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotificationparameter_upcomingoutputptsrangemayoverlapqueuedoutputptsrange?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange:
        CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotificationparameter_minupcomingoutputpts?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconduitnotificationparameter_maxupcomingoutputpts?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferconsumernotification_bufferconsumed?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferConsumerNotification_BufferConsumed: CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMSampleBufferGetNumSamples(sbuf: CMSampleBufferRef) -> CMItemCount;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetDuration(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetPresentationTimeStamp(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetDecodeTimeStamp(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetOutputDuration(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetOutputPresentationTimeStamp(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferSetOutputPresentationTimeStamp(
        sbuf: CMSampleBufferRef,
        output_presentation_time_stamp: CMTime,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    pub fn CMSampleBufferGetOutputDecodeTimeStamp(sbuf: CMSampleBufferRef) -> CMTime;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferGetSampleTimingInfoArray(
        sbuf: CMSampleBufferRef,
        num_sample_timing_entries: CMItemCount,
        timing_array_out: *mut CMSampleTimingInfo,
        timing_array_entries_needed_out: *mut CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferGetOutputSampleTimingInfoArray(
        sbuf: CMSampleBufferRef,
        timing_array_entries: CMItemCount,
        timing_array_out: *mut CMSampleTimingInfo,
        timing_array_entries_needed_out: *mut CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "CMTime",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferGetSampleTimingInfo(
        sbuf: CMSampleBufferRef,
        sample_index: CMItemIndex,
        timing_info_out: NonNull<CMSampleTimingInfo>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMSampleBufferGetSampleSizeArray(
        sbuf: CMSampleBufferRef,
        size_array_entries: CMItemCount,
        size_array_out: *mut usize,
        size_array_entries_needed_out: *mut CMItemCount,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMSampleBufferGetSampleSize(sbuf: CMSampleBufferRef, sample_index: CMItemIndex)
        -> usize;
}

extern "C-unwind" {
    pub fn CMSampleBufferGetTotalSampleSize(sbuf: CMSampleBufferRef) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "CMFormatDescription")]
    pub fn CMSampleBufferGetFormatDescription(sbuf: CMSampleBufferRef) -> CMFormatDescriptionRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMSampleBufferGetSampleAttachmentsArray(
        sbuf: CMSampleBufferRef,
        create_if_necessary: Boolean,
    ) -> CFArrayRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_notsync?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_NotSync: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_partialsync?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_PartialSync: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hasredundantcoding?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HasRedundantCoding: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_isdependedonbyothers?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_IsDependedOnByOthers: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_dependsonothers?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_DependsOnOthers: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_earlierdisplaytimesallowed?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_EarlierDisplayTimesAllowed: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_displayimmediately?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_DisplayImmediately: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_donotdisplay?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_DoNotDisplay: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_resetdecoderbeforedecoding?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_drainafterdecoding?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_DrainAfterDecoding: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_postnotificationwhenconsumed?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_resumeoutput?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_ResumeOutput: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hevctemporallevelinfo?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HEVCTemporalLevelInfo: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_temporallevel?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_TemporalLevel: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_profilespace?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_ProfileSpace: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_tierflag?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_TierFlag: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_profileindex?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_ProfileIndex: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_profilecompatibilityflags?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_constraintindicatorflags?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmhevctemporallevelinfokey_levelindex?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMHEVCTemporalLevelInfoKey_LevelIndex: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hevctemporalsublayeraccess?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hevcstepwisetemporalsublayeraccess?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hevcsyncsamplenalunittype?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_audioindependentsampledecoderrefreshcount?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_transitionid?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_TransitionID: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_trimdurationatstart?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_TrimDurationAtStart: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_trimdurationatend?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_TrimDurationAtEnd: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_speedmultiplier?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_SpeedMultiplier: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_reverse?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_Reverse: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_filldiscontinuitieswithsilence?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_emptymedia?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_EmptyMedia: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_permanentemptymedia?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_PermanentEmptyMedia: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_displayemptymediaimmediately?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_endsprevioussampleduration?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_samplereferenceurl?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_SampleReferenceURL: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_samplereferencebyteoffset?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_SampleReferenceByteOffset: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_gradualdecoderrefresh?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_GradualDecoderRefresh: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_droppedframereason?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_DroppedFrameReason: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferdroppedframereason_framewaslate?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferDroppedFrameReason_FrameWasLate: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferdroppedframereason_outofbuffers?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferDroppedFrameReason_OutOfBuffers: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferdroppedframereason_discontinuity?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferDroppedFrameReason_Discontinuity: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_droppedframereasoninfo?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferdroppedframereasoninfo_cameramodeswitch?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_stillimagelensstabilizationinfo?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferlensstabilizationinfo_active?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferLensStabilizationInfo_Active: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferlensstabilizationinfo_outofrange?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferLensStabilizationInfo_OutOfRange: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferlensstabilizationinfo_unavailable?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferLensStabilizationInfo_Unavailable: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferlensstabilizationinfo_off?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferLensStabilizationInfo_Off: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_cameraintrinsicmatrix?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsamplebufferattachmentkey_forcekeyframe?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleBufferAttachmentKey_ForceKeyFrame: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_cryptorsubsampleauxiliarydata?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_CryptorSubsampleAuxiliaryData: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_hdr10plusperframedata?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_HDR10PlusPerFrameData: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsampleattachmentkey_postdecodeprocessingmetadata?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSampleAttachmentKey_PostDecodeProcessingMetadata: CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBase", feature = "objc2-core-foundation"))]
    pub fn CMSampleBufferCallForEachSample(
        sbuf: CMSampleBufferRef,
        callback: unsafe extern "C-unwind" fn(
            CMSampleBufferRef,
            CMItemCount,
            *mut c_void,
        ) -> OSStatus,
        refcon: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBase",
        feature = "block2",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMSampleBufferCallBlockForEachSample(
        sbuf: CMSampleBufferRef,
        handler: &block2::Block<dyn Fn(CMSampleBufferRef, CMItemCount) -> OSStatus>,
    ) -> OSStatus;
}
