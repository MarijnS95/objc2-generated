//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_invalidparameter?language=objc)
pub const kCMFormatDescriptionBridgeError_InvalidParameter: OSStatus = -12712;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_allocationfailed?language=objc)
pub const kCMFormatDescriptionBridgeError_AllocationFailed: OSStatus = -12713;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_invalidserializedsampledescription?language=objc)
pub const kCMFormatDescriptionBridgeError_InvalidSerializedSampleDescription: OSStatus = -12714;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_invalidformatdescription?language=objc)
pub const kCMFormatDescriptionBridgeError_InvalidFormatDescription: OSStatus = -12715;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_incompatibleformatdescription?language=objc)
pub const kCMFormatDescriptionBridgeError_IncompatibleFormatDescription: OSStatus = -12716;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_unsupportedsampledescriptionflavor?language=objc)
pub const kCMFormatDescriptionBridgeError_UnsupportedSampleDescriptionFlavor: OSStatus = -12717;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionbridgeerror_invalidslice?language=objc)
pub const kCMFormatDescriptionBridgeError_InvalidSlice: OSStatus = -12719;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmimagedescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMImageDescriptionFlavor = CFStringRef;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmimagedescriptionflavor_quicktimemovie?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMImageDescriptionFlavor_QuickTimeMovie: CMImageDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmimagedescriptionflavor_isofamily?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMImageDescriptionFlavor_ISOFamily: CMImageDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmimagedescriptionflavor_3gpfamily?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMImageDescriptionFlavor_3GPFamily: CMImageDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmimagedescriptionflavor_isofamilywithappleextensions?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMImageDescriptionFlavor_ISOFamilyWithAppleExtensions: CMImageDescriptionFlavor;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(
        allocator: CFAllocatorRef,
        image_description_data: NonNull<u8>,
        size: usize,
        string_encoding: CFStringEncoding,
        flavor: CMImageDescriptionFlavor,
        format_description_out: NonNull<CMVideoFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        image_description_block_buffer: CMBlockBufferRef,
        string_encoding: CFStringEncoding,
        flavor: CMImageDescriptionFlavor,
        format_description_out: NonNull<CMVideoFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        video_format_description: CMVideoFormatDescriptionRef,
        string_encoding: CFStringEncoding,
        flavor: CMImageDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianImageDescriptionToHost(
        image_description_data: NonNull<u8>,
        image_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianImageDescriptionToBig(
        image_description_data: NonNull<u8>,
        image_description_size: usize,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsounddescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMSoundDescriptionFlavor = CFStringRef;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsounddescriptionflavor_quicktimemovie?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSoundDescriptionFlavor_QuickTimeMovie: CMSoundDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsounddescriptionflavor_quicktimemoviev2?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSoundDescriptionFlavor_QuickTimeMovieV2: CMSoundDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsounddescriptionflavor_isofamily?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSoundDescriptionFlavor_ISOFamily: CMSoundDescriptionFlavor;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsounddescriptionflavor_3gpfamily?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCMSoundDescriptionFlavor_3GPFamily: CMSoundDescriptionFlavor;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(
        allocator: CFAllocatorRef,
        sound_description_data: NonNull<u8>,
        size: usize,
        flavor: CMSoundDescriptionFlavor,
        format_description_out: NonNull<CMAudioFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        sound_description_block_buffer: CMBlockBufferRef,
        flavor: CMSoundDescriptionFlavor,
        format_description_out: NonNull<CMAudioFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        audio_format_description: CMAudioFormatDescriptionRef,
        flavor: CMSoundDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "CMBlockBuffer", feature = "objc2-core-foundation"))]
    pub fn CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(
        sound_description_block_buffer: CMBlockBufferRef,
        flavor: CMSoundDescriptionFlavor,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianSoundDescriptionToHost(
        sound_description_data: NonNull<u8>,
        sound_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianSoundDescriptionToBig(
        sound_description_data: NonNull<u8>,
        sound_description_size: usize,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtextdescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMTextDescriptionFlavor = CFStringRef;

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(
        allocator: CFAllocatorRef,
        text_description_data: NonNull<u8>,
        size: usize,
        flavor: CMTextDescriptionFlavor,
        media_type: CMMediaType,
        format_description_out: NonNull<CMTextFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        text_description_block_buffer: CMBlockBufferRef,
        flavor: CMTextDescriptionFlavor,
        media_type: CMMediaType,
        format_description_out: NonNull<CMTextFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        text_format_description: CMTextFormatDescriptionRef,
        flavor: CMTextDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianTextDescriptionToHost(
        text_description_data: NonNull<u8>,
        text_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianTextDescriptionToBig(
        text_description_data: NonNull<u8>,
        text_description_size: usize,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmclosedcaptiondescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMClosedCaptionDescriptionFlavor = CFStringRef;

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(
        allocator: CFAllocatorRef,
        closed_caption_description_data: NonNull<u8>,
        size: usize,
        flavor: CMClosedCaptionDescriptionFlavor,
        format_description_out: NonNull<CMClosedCaptionFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        closed_caption_description_block_buffer: CMBlockBufferRef,
        flavor: CMClosedCaptionDescriptionFlavor,
        format_description_out: NonNull<CMClosedCaptionFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        closed_caption_format_description: CMClosedCaptionFormatDescriptionRef,
        flavor: CMClosedCaptionDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianClosedCaptionDescriptionToHost(
        closed_caption_description_data: NonNull<u8>,
        closed_caption_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianClosedCaptionDescriptionToBig(
        closed_caption_description_data: NonNull<u8>,
        closed_caption_description_size: usize,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtimecodedescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMTimeCodeDescriptionFlavor = CFStringRef;

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(
        allocator: CFAllocatorRef,
        time_code_description_data: NonNull<u8>,
        size: usize,
        flavor: CMTimeCodeDescriptionFlavor,
        format_description_out: NonNull<CMTimeCodeFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        time_code_description_block_buffer: CMBlockBufferRef,
        flavor: CMTimeCodeDescriptionFlavor,
        format_description_out: NonNull<CMTimeCodeFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        time_code_format_description: CMTimeCodeFormatDescriptionRef,
        flavor: CMTimeCodeDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianTimeCodeDescriptionToHost(
        time_code_description_data: NonNull<u8>,
        time_code_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianTimeCodeDescriptionToBig(
        time_code_description_data: NonNull<u8>,
        time_code_description_size: usize,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmetadatadescriptionflavor?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type CMMetadataDescriptionFlavor = CFStringRef;

extern "C-unwind" {
    #[cfg(all(feature = "CMFormatDescription", feature = "objc2-core-foundation"))]
    pub fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(
        allocator: CFAllocatorRef,
        metadata_description_data: NonNull<u8>,
        size: usize,
        flavor: CMMetadataDescriptionFlavor,
        format_description_out: NonNull<CMMetadataFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        metadata_description_block_buffer: CMBlockBufferRef,
        flavor: CMMetadataDescriptionFlavor,
        format_description_out: NonNull<CMMetadataFormatDescriptionRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CMBlockBuffer",
        feature = "CMFormatDescription",
        feature = "objc2-core-foundation"
    ))]
    pub fn CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(
        allocator: CFAllocatorRef,
        metadata_format_description: CMMetadataFormatDescriptionRef,
        flavor: CMMetadataDescriptionFlavor,
        block_buffer_out: NonNull<CMBlockBufferRef>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapBigEndianMetadataDescriptionToHost(
        metadata_description_data: NonNull<u8>,
        metadata_description_size: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSwapHostEndianMetadataDescriptionToBig(
        metadata_description_data: NonNull<u8>,
        metadata_description_size: usize,
    ) -> OSStatus;
}
