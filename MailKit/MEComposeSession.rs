//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MEComposeSession;

    unsafe impl ClassType for MEComposeSession {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCoding for MEComposeSession {}

unsafe impl NSObjectProtocol for MEComposeSession {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSSecureCoding for MEComposeSession {}

extern_methods!(
    unsafe impl MEComposeSession {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSUUID")]
        #[method_id(@__retain_semantics Other sessionID)]
        pub unsafe fn sessionID(&self) -> Id<NSUUID>;

        #[cfg(feature = "MailKit_MEMessage")]
        #[method_id(@__retain_semantics Other mailMessage)]
        pub unsafe fn mailMessage(&self) -> Id<MEMessage>;

        #[cfg(feature = "MailKit_MEComposeContext")]
        #[method_id(@__retain_semantics Other composeContext)]
        pub unsafe fn composeContext(&self) -> Id<MEComposeContext>;

        #[method(reloadSession)]
        pub unsafe fn reloadSession(&self);
    }
);

#[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
extern_static!(MEComposeSessionErrorDomain: &'static NSErrorDomain);

ns_error_enum!(
    #[underlying(NSInteger)]
    pub enum MEComposeSessionErrorCode {
        #[doc(alias = "MEComposeSessionErrorCodeInvalidRecipients")]
        InvalidRecipients = 0,
        #[doc(alias = "MEComposeSessionErrorCodeInvalidHeaders")]
        InvalidHeaders = 1,
        #[doc(alias = "MEComposeSessionErrorCodeInvalidBody")]
        InvalidBody = 2,
    }
);

extern_protocol!(
    pub unsafe trait MEComposeSessionHandler: NSObjectProtocol {
        #[method(mailComposeSessionDidBegin:)]
        unsafe fn mailComposeSessionDidBegin(&self, session: &MEComposeSession);

        #[method(mailComposeSessionDidEnd:)]
        unsafe fn mailComposeSessionDidEnd(&self, session: &MEComposeSession);

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSViewController",
            feature = "MailKit_MEExtensionViewController"
        ))]
        #[method_id(@__retain_semantics Other viewControllerForSession:)]
        unsafe fn viewControllerForSession(
            &self,
            session: &MEComposeSession,
            mtm: MainThreadMarker,
        ) -> Id<MEExtensionViewController>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "MailKit_MEAddressAnnotation",
            feature = "MailKit_MEEmailAddress"
        ))]
        #[optional]
        #[method(session:annotateAddressesWithCompletionHandler:)]
        unsafe fn session_annotateAddressesWithCompletionHandler(
            &self,
            session: &MEComposeSession,
            completion_handler: &Block<
                dyn Fn(NonNull<NSDictionary<MEEmailAddress, MEAddressAnnotation>>),
            >,
        );

        #[cfg(feature = "Foundation_NSError")]
        #[optional]
        #[method(session:canSendMessageWithCompletionHandler:)]
        unsafe fn session_canSendMessageWithCompletionHandler(
            &self,
            session: &MEComposeSession,
            completion: &Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other additionalHeadersForSession:)]
        unsafe fn additionalHeadersForSession(
            &self,
            session: &MEComposeSession,
        ) -> Id<NSDictionary<NSString, NSArray<NSString>>>;
    }

    unsafe impl ProtocolType for dyn MEComposeSessionHandler {}
);
