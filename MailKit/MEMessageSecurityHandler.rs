//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MailKit::*;

extern "C" {
    #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
    pub static MEMessageSecurityErrorDomain: &'static NSErrorDomain;
}

// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MEMessageSecurityErrorCode(pub NSInteger);
impl MEMessageSecurityErrorCode {
    pub const MEMessageSecurityEncodingError: Self = Self(0);
    pub const MEMessageSecurityDecodingError: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MEMessageSecurityErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MEMessageSecurityErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    #[cfg(all(
        feature = "MailKit_MEMessageDecoder",
        feature = "MailKit_MEMessageEncoder"
    ))]
    pub unsafe trait MEMessageSecurityHandler: MEMessageDecoder + MEMessageEncoder {
        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSViewController",
            feature = "Foundation_NSArray",
            feature = "MailKit_MEExtensionViewController",
            feature = "MailKit_MEMessageSigner"
        ))]
        #[method_id(@__retain_semantics Other extensionViewControllerForMessageSigners:)]
        unsafe fn extensionViewControllerForMessageSigners(
            &self,
            message_signers: &NSArray<MEMessageSigner>,
            mtm: MainThreadMarker,
        ) -> Option<Id<MEExtensionViewController>>;

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSViewController",
            feature = "Foundation_NSData",
            feature = "MailKit_MEExtensionViewController"
        ))]
        #[method_id(@__retain_semantics Other extensionViewControllerForMessageContext:)]
        unsafe fn extensionViewControllerForMessageContext(
            &self,
            context: &NSData,
            mtm: MainThreadMarker,
        ) -> Option<Id<MEExtensionViewController>>;

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSViewController",
            feature = "Foundation_NSData",
            feature = "MailKit_MEExtensionViewController"
        ))]
        #[method(primaryActionClickedForMessageContext:completionHandler:)]
        unsafe fn primaryActionClickedForMessageContext_completionHandler(
            &self,
            context: &NSData,
            completion_handler: &Block<dyn Fn(*mut MEExtensionViewController)>,
        );
    }

    #[cfg(all(
        feature = "MailKit_MEMessageDecoder",
        feature = "MailKit_MEMessageEncoder"
    ))]
    unsafe impl ProtocolType for dyn MEMessageSecurityHandler {}
);
