//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/networkextension/neproxyserver?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NEProxyServer;
);

unsafe impl NSCoding for NEProxyServer {}

unsafe impl NSCopying for NEProxyServer {}

unsafe impl CopyingHelper for NEProxyServer {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NEProxyServer {}

unsafe impl NSSecureCoding for NEProxyServer {}

extern_methods!(
    unsafe impl NEProxyServer {
        #[method_id(@__retain_semantics Init initWithAddress:port:)]
        pub unsafe fn initWithAddress_port(
            this: Allocated<Self>,
            address: &NSString,
            port: NSInteger,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other address)]
        pub unsafe fn address(&self) -> Retained<NSString>;

        #[method(port)]
        pub unsafe fn port(&self) -> NSInteger;

        #[method(authenticationRequired)]
        pub unsafe fn authenticationRequired(&self) -> bool;

        #[method(setAuthenticationRequired:)]
        pub unsafe fn setAuthenticationRequired(&self, authentication_required: bool);

        #[method_id(@__retain_semantics Other username)]
        pub unsafe fn username(&self) -> Option<Retained<NSString>>;

        #[method(setUsername:)]
        pub unsafe fn setUsername(&self, username: Option<&NSString>);

        #[method_id(@__retain_semantics Other password)]
        pub unsafe fn password(&self) -> Option<Retained<NSString>>;

        #[method(setPassword:)]
        pub unsafe fn setPassword(&self, password: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NEProxyServer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/networkextension/neproxysettings?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NEProxySettings;
);

unsafe impl NSCoding for NEProxySettings {}

unsafe impl NSCopying for NEProxySettings {}

unsafe impl CopyingHelper for NEProxySettings {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NEProxySettings {}

unsafe impl NSSecureCoding for NEProxySettings {}

extern_methods!(
    unsafe impl NEProxySettings {
        #[method(autoProxyConfigurationEnabled)]
        pub unsafe fn autoProxyConfigurationEnabled(&self) -> bool;

        #[method(setAutoProxyConfigurationEnabled:)]
        pub unsafe fn setAutoProxyConfigurationEnabled(
            &self,
            auto_proxy_configuration_enabled: bool,
        );

        #[method_id(@__retain_semantics Other proxyAutoConfigurationURL)]
        pub unsafe fn proxyAutoConfigurationURL(&self) -> Option<Retained<NSURL>>;

        #[method(setProxyAutoConfigurationURL:)]
        pub unsafe fn setProxyAutoConfigurationURL(
            &self,
            proxy_auto_configuration_url: Option<&NSURL>,
        );

        #[method_id(@__retain_semantics Other proxyAutoConfigurationJavaScript)]
        pub unsafe fn proxyAutoConfigurationJavaScript(&self) -> Option<Retained<NSString>>;

        #[method(setProxyAutoConfigurationJavaScript:)]
        pub unsafe fn setProxyAutoConfigurationJavaScript(
            &self,
            proxy_auto_configuration_java_script: Option<&NSString>,
        );

        #[method(HTTPEnabled)]
        pub unsafe fn HTTPEnabled(&self) -> bool;

        #[method(setHTTPEnabled:)]
        pub unsafe fn setHTTPEnabled(&self, http_enabled: bool);

        #[method_id(@__retain_semantics Other HTTPServer)]
        pub unsafe fn HTTPServer(&self) -> Option<Retained<NEProxyServer>>;

        #[method(setHTTPServer:)]
        pub unsafe fn setHTTPServer(&self, http_server: Option<&NEProxyServer>);

        #[method(HTTPSEnabled)]
        pub unsafe fn HTTPSEnabled(&self) -> bool;

        #[method(setHTTPSEnabled:)]
        pub unsafe fn setHTTPSEnabled(&self, https_enabled: bool);

        #[method_id(@__retain_semantics Other HTTPSServer)]
        pub unsafe fn HTTPSServer(&self) -> Option<Retained<NEProxyServer>>;

        #[method(setHTTPSServer:)]
        pub unsafe fn setHTTPSServer(&self, https_server: Option<&NEProxyServer>);

        #[method(excludeSimpleHostnames)]
        pub unsafe fn excludeSimpleHostnames(&self) -> bool;

        #[method(setExcludeSimpleHostnames:)]
        pub unsafe fn setExcludeSimpleHostnames(&self, exclude_simple_hostnames: bool);

        #[method_id(@__retain_semantics Other exceptionList)]
        pub unsafe fn exceptionList(&self) -> Option<Retained<NSArray<NSString>>>;

        #[method(setExceptionList:)]
        pub unsafe fn setExceptionList(&self, exception_list: Option<&NSArray<NSString>>);

        #[method_id(@__retain_semantics Other matchDomains)]
        pub unsafe fn matchDomains(&self) -> Option<Retained<NSArray<NSString>>>;

        #[method(setMatchDomains:)]
        pub unsafe fn setMatchDomains(&self, match_domains: Option<&NSArray<NSString>>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NEProxySettings {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
