//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NEFilterDataAttribute(pub NSInteger);
impl NEFilterDataAttribute {
    #[doc(alias = "NEFilterDataAttributeHasIPHeader")]
    pub const HasIPHeader: Self = Self(0x00000001);
}

unsafe impl Encode for NEFilterDataAttribute {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NEFilterDataAttribute {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
    pub struct NEFilterDataProvider;

    #[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
    unsafe impl ClassType for NEFilterDataProvider {
        #[inherits(NEProvider, NSObject)]
        type Super = NEFilterProvider;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
unsafe impl NSObjectProtocol for NEFilterDataProvider {}

extern_methods!(
    #[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
    unsafe impl NEFilterDataProvider {
        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleNewFlow:)]
        pub unsafe fn handleNewFlow(&self, flow: &NEFilterFlow) -> Id<NEFilterNewFlowVerdict>;

        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleInboundDataFromFlow:readBytesStartOffset:readBytes:)]
        pub unsafe fn handleInboundDataFromFlow_readBytesStartOffset_readBytes(
            &self,
            flow: &NEFilterFlow,
            offset: NSUInteger,
            read_bytes: &NSData,
        ) -> Id<NEFilterDataVerdict>;

        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleOutboundDataFromFlow:readBytesStartOffset:readBytes:)]
        pub unsafe fn handleOutboundDataFromFlow_readBytesStartOffset_readBytes(
            &self,
            flow: &NEFilterFlow,
            offset: NSUInteger,
            read_bytes: &NSData,
        ) -> Id<NEFilterDataVerdict>;

        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleInboundDataCompleteForFlow:)]
        pub unsafe fn handleInboundDataCompleteForFlow(
            &self,
            flow: &NEFilterFlow,
        ) -> Id<NEFilterDataVerdict>;

        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleOutboundDataCompleteForFlow:)]
        pub unsafe fn handleOutboundDataCompleteForFlow(
            &self,
            flow: &NEFilterFlow,
        ) -> Id<NEFilterDataVerdict>;

        #[cfg(feature = "NEFilterFlow")]
        #[method_id(@__retain_semantics Other handleRemediationForFlow:)]
        pub unsafe fn handleRemediationForFlow(
            &self,
            flow: &NEFilterFlow,
        ) -> Id<NEFilterRemediationVerdict>;

        #[method(handleRulesChanged)]
        pub unsafe fn handleRulesChanged(&self);

        #[cfg(all(feature = "NEFilterSettings", feature = "block2"))]
        #[method(applySettings:completionHandler:)]
        pub unsafe fn applySettings_completionHandler(
            &self,
            settings: Option<&NEFilterSettings>,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "NEFilterFlow")]
        #[method(resumeFlow:withVerdict:)]
        pub unsafe fn resumeFlow_withVerdict(&self, flow: &NEFilterFlow, verdict: &NEFilterVerdict);

        #[cfg(all(feature = "NEFilterFlow", feature = "NENetworkRule"))]
        #[method(updateFlow:usingVerdict:forDirection:)]
        pub unsafe fn updateFlow_usingVerdict_forDirection(
            &self,
            flow: &NEFilterSocketFlow,
            verdict: &NEFilterDataVerdict,
            direction: NETrafficDirection,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
    unsafe impl NEFilterDataProvider {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NEFilterProvider")]
    pub struct NEFilterDataVerdict;

    #[cfg(feature = "NEFilterProvider")]
    unsafe impl ClassType for NEFilterDataVerdict {
        #[inherits(NSObject)]
        type Super = NEFilterVerdict;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSCoding for NEFilterDataVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSCopying for NEFilterDataVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSObjectProtocol for NEFilterDataVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSSecureCoding for NEFilterDataVerdict {}

extern_methods!(
    #[cfg(feature = "NEFilterProvider")]
    unsafe impl NEFilterDataVerdict {
        #[method(statisticsReportFrequency)]
        pub unsafe fn statisticsReportFrequency(&self) -> NEFilterReportFrequency;

        #[method(setStatisticsReportFrequency:)]
        pub unsafe fn setStatisticsReportFrequency(
            &self,
            statistics_report_frequency: NEFilterReportFrequency,
        );

        #[method_id(@__retain_semantics Other allowVerdict)]
        pub unsafe fn allowVerdict() -> Id<NEFilterDataVerdict>;

        #[method_id(@__retain_semantics Other dropVerdict)]
        pub unsafe fn dropVerdict() -> Id<NEFilterDataVerdict>;

        #[method_id(@__retain_semantics Other remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:)]
        pub unsafe fn remediateVerdictWithRemediationURLMapKey_remediationButtonTextMapKey(
            remediation_url_map_key: Option<&NSString>,
            remediation_button_text_map_key: Option<&NSString>,
        ) -> Id<NEFilterDataVerdict>;

        #[method_id(@__retain_semantics Other dataVerdictWithPassBytes:peekBytes:)]
        pub unsafe fn dataVerdictWithPassBytes_peekBytes(
            pass_bytes: NSUInteger,
            peek_bytes: NSUInteger,
        ) -> Id<NEFilterDataVerdict>;

        #[method_id(@__retain_semantics Other needRulesVerdict)]
        pub unsafe fn needRulesVerdict() -> Id<NEFilterDataVerdict>;

        #[method_id(@__retain_semantics Other pauseVerdict)]
        pub unsafe fn pauseVerdict() -> Id<NEFilterDataVerdict>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NEFilterProvider")]
    unsafe impl NEFilterDataVerdict {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NEFilterProvider")]
    pub struct NEFilterRemediationVerdict;

    #[cfg(feature = "NEFilterProvider")]
    unsafe impl ClassType for NEFilterRemediationVerdict {
        #[inherits(NSObject)]
        type Super = NEFilterVerdict;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSCoding for NEFilterRemediationVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSCopying for NEFilterRemediationVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSObjectProtocol for NEFilterRemediationVerdict {}

#[cfg(feature = "NEFilterProvider")]
unsafe impl NSSecureCoding for NEFilterRemediationVerdict {}

extern_methods!(
    #[cfg(feature = "NEFilterProvider")]
    unsafe impl NEFilterRemediationVerdict {
        #[method_id(@__retain_semantics Other allowVerdict)]
        pub unsafe fn allowVerdict() -> Id<NEFilterRemediationVerdict>;

        #[method_id(@__retain_semantics Other dropVerdict)]
        pub unsafe fn dropVerdict() -> Id<NEFilterRemediationVerdict>;

        #[method_id(@__retain_semantics Other needRulesVerdict)]
        pub unsafe fn needRulesVerdict() -> Id<NEFilterRemediationVerdict>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NEFilterProvider")]
    unsafe impl NEFilterRemediationVerdict {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
