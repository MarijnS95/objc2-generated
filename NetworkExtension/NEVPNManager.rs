//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/networkextension/nevpnerror?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NEVPNError(pub NSInteger);
impl NEVPNError {
    #[doc(alias = "NEVPNErrorConfigurationInvalid")]
    pub const ConfigurationInvalid: Self = Self(1);
    #[doc(alias = "NEVPNErrorConfigurationDisabled")]
    pub const ConfigurationDisabled: Self = Self(2);
    #[doc(alias = "NEVPNErrorConnectionFailed")]
    pub const ConnectionFailed: Self = Self(3);
    #[doc(alias = "NEVPNErrorConfigurationStale")]
    pub const ConfigurationStale: Self = Self(4);
    #[doc(alias = "NEVPNErrorConfigurationReadWriteFailed")]
    pub const ConfigurationReadWriteFailed: Self = Self(5);
    #[doc(alias = "NEVPNErrorConfigurationUnknown")]
    pub const ConfigurationUnknown: Self = Self(6);
}

unsafe impl Encode for NEVPNError {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NEVPNError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/networkextension/nevpnerrordomain?language=objc)
    pub static NEVPNErrorDomain: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/networkextension/nevpnconfigurationchangenotification?language=objc)
    pub static NEVPNConfigurationChangeNotification: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/networkextension/nevpnmanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NEVPNManager;
);

unsafe impl NSObjectProtocol for NEVPNManager {}

extern_methods!(
    unsafe impl NEVPNManager {
        #[method_id(@__retain_semantics Other sharedManager)]
        pub unsafe fn sharedManager() -> Retained<NEVPNManager>;

        #[cfg(feature = "block2")]
        #[method(loadFromPreferencesWithCompletionHandler:)]
        pub unsafe fn loadFromPreferencesWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(removeFromPreferencesWithCompletionHandler:)]
        pub unsafe fn removeFromPreferencesWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(saveToPreferencesWithCompletionHandler:)]
        pub unsafe fn saveToPreferencesWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "NEOnDemandRule")]
        #[method_id(@__retain_semantics Other onDemandRules)]
        pub unsafe fn onDemandRules(&self) -> Option<Retained<NSArray<NEOnDemandRule>>>;

        #[cfg(feature = "NEOnDemandRule")]
        #[method(setOnDemandRules:)]
        pub unsafe fn setOnDemandRules(&self, on_demand_rules: Option<&NSArray<NEOnDemandRule>>);

        #[method(isOnDemandEnabled)]
        pub unsafe fn isOnDemandEnabled(&self) -> bool;

        #[method(setOnDemandEnabled:)]
        pub unsafe fn setOnDemandEnabled(&self, on_demand_enabled: bool);

        #[method_id(@__retain_semantics Other localizedDescription)]
        pub unsafe fn localizedDescription(&self) -> Option<Retained<NSString>>;

        #[method(setLocalizedDescription:)]
        pub unsafe fn setLocalizedDescription(&self, localized_description: Option<&NSString>);

        #[cfg(feature = "NEVPNProtocol")]
        #[deprecated]
        #[method_id(@__retain_semantics Other protocol)]
        pub unsafe fn protocol(&self) -> Option<Retained<NEVPNProtocol>>;

        #[cfg(feature = "NEVPNProtocol")]
        #[deprecated]
        #[method(setProtocol:)]
        pub unsafe fn setProtocol(&self, protocol: Option<&NEVPNProtocol>);

        #[cfg(feature = "NEVPNProtocol")]
        #[method_id(@__retain_semantics Other protocolConfiguration)]
        pub unsafe fn protocolConfiguration(&self) -> Option<Retained<NEVPNProtocol>>;

        #[cfg(feature = "NEVPNProtocol")]
        #[method(setProtocolConfiguration:)]
        pub unsafe fn setProtocolConfiguration(
            &self,
            protocol_configuration: Option<&NEVPNProtocol>,
        );

        #[cfg(feature = "NEVPNConnection")]
        #[method_id(@__retain_semantics Other connection)]
        pub unsafe fn connection(&self) -> Retained<NEVPNConnection>;

        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NEVPNManager {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
