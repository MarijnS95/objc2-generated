//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// A concatenation layer
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlcconcatenationlayer?language=objc)
    #[unsafe(super(MLCLayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCLayer")]
    #[deprecated]
    pub struct MLCConcatenationLayer;
);

#[cfg(feature = "MLCLayer")]
unsafe impl NSObjectProtocol for MLCConcatenationLayer {}

extern_methods!(
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCConcatenationLayer {
        /// The dimension (or axis) along which to concatenate tensors
        ///
        /// The default value is 1 (which typically represents features channels)
        #[deprecated]
        #[method(dimension)]
        #[unsafe(method_family = none)]
        pub unsafe fn dimension(&self) -> NSUInteger;

        /// Create a concatenation layer
        ///
        /// Returns: A new concatenation layer
        #[deprecated]
        #[method(layer)]
        #[unsafe(method_family = none)]
        pub unsafe fn layer() -> Retained<Self>;

        /// Create a concatenation layer
        ///
        /// Parameter `dimension`: The concatenation dimension
        ///
        /// Returns: A new concatenation layer
        #[deprecated]
        #[method(layerWithDimension:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layerWithDimension(dimension: NSUInteger) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCConcatenationLayer {
        #[deprecated]
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
