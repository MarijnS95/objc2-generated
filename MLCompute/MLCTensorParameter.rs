//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A tensor parameter object.  This is used to describe input tensors that are updated by the optimizer during training.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlctensorparameter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct MLCTensorParameter;
);

unsafe impl NSObjectProtocol for MLCTensorParameter {}

extern_methods!(
    unsafe impl MLCTensorParameter {
        #[cfg(feature = "MLCTensor")]
        /// The underlying tensor
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(tensor)]
        pub unsafe fn tensor(&self) -> Retained<MLCTensor>;

        /// Specifies whether this tensor parameter is updatable
        #[deprecated]
        #[method(isUpdatable)]
        pub unsafe fn isUpdatable(&self) -> bool;

        /// Setter for [`isUpdatable`][Self::isUpdatable].
        #[deprecated]
        #[method(setIsUpdatable:)]
        pub unsafe fn setIsUpdatable(&self, is_updatable: bool);

        #[deprecated]
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "MLCTensor")]
        /// Create a tensor parameter
        ///
        /// Parameter `tensor`: The unedrlying tensor
        ///
        /// Returns: A new tensor parameter object
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(parameterWithTensor:)]
        pub unsafe fn parameterWithTensor(tensor: &MLCTensor) -> Retained<Self>;

        #[cfg(all(feature = "MLCTensor", feature = "MLCTensorData"))]
        /// Create a tensor parameter
        ///
        /// Parameter `tensor`: The unedrlying tensor
        ///
        /// Parameter `optimizerData`: The optimizer data needed for this input tensor
        ///
        /// Returns: A new tensor parameter object
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(parameterWithTensor:optimizerData:)]
        pub unsafe fn parameterWithTensor_optimizerData(
            tensor: &MLCTensor,
            optimizer_data: Option<&NSArray<MLCTensorData>>,
        ) -> Retained<Self>;
    }
);
