//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// A scatter layer
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlcscatterlayer?language=objc)
    #[unsafe(super(MLCLayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCLayer")]
    #[deprecated]
    pub struct MLCScatterLayer;
);

#[cfg(feature = "MLCLayer")]
unsafe impl NSObjectProtocol for MLCScatterLayer {}

extern_methods!(
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCScatterLayer {
        /// The dimension along which to index
        #[deprecated]
        #[method(dimension)]
        #[unsafe(method_family = none)]
        pub unsafe fn dimension(&self) -> NSUInteger;

        #[cfg(feature = "MLCTypes")]
        /// The reduction type applied for all values in source tensor that are scattered to a specific location in the result tensor.
        /// Must be: MLCReductionTypeNone or MLCReductionTypeSum.
        #[deprecated]
        #[method(reductionType)]
        #[unsafe(method_family = none)]
        pub unsafe fn reductionType(&self) -> MLCReductionType;

        #[cfg(feature = "MLCTypes")]
        /// Create a scatter layer
        ///
        /// Parameter `dimension`: The dimension along which to index
        ///
        /// Parameter `reductionType`: The reduction type to use
        ///
        /// Returns: A new scatter layer
        #[deprecated]
        #[method(layerWithDimension:reductionType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layerWithDimension_reductionType(
            dimension: NSUInteger,
            reduction_type: MLCReductionType,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCScatterLayer {
        #[deprecated]
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
