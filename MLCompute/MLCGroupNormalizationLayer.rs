//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// A group normalizaion layer.  For more information, refer to https://pytorch.org/docs/stable/nn.html#groupnorm
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlcgroupnormalizationlayer?language=objc)
    #[unsafe(super(MLCLayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCLayer")]
    #[deprecated]
    pub struct MLCGroupNormalizationLayer;
);

#[cfg(feature = "MLCLayer")]
unsafe impl NSObjectProtocol for MLCGroupNormalizationLayer {}

extern_methods!(
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCGroupNormalizationLayer {
        /// The number of feature channels
        #[deprecated]
        #[method(featureChannelCount)]
        #[unsafe(method_family = none)]
        pub unsafe fn featureChannelCount(&self) -> NSUInteger;

        /// The number of groups to separate the channels into
        #[deprecated]
        #[method(groupCount)]
        #[unsafe(method_family = none)]
        pub unsafe fn groupCount(&self) -> NSUInteger;

        #[cfg(feature = "MLCTensor")]
        /// The beta tensor
        #[deprecated]
        #[method(beta)]
        #[unsafe(method_family = none)]
        pub unsafe fn beta(&self) -> Option<Retained<MLCTensor>>;

        #[cfg(feature = "MLCTensor")]
        /// The gamma tensor
        #[deprecated]
        #[method(gamma)]
        #[unsafe(method_family = none)]
        pub unsafe fn gamma(&self) -> Option<Retained<MLCTensor>>;

        #[cfg(feature = "MLCTensorParameter")]
        /// The beta tensor parameter used for optimizer update
        #[deprecated]
        #[method(betaParameter)]
        #[unsafe(method_family = none)]
        pub unsafe fn betaParameter(&self) -> Option<Retained<MLCTensorParameter>>;

        #[cfg(feature = "MLCTensorParameter")]
        /// The gamma tensor parameter used for optimizer update
        #[deprecated]
        #[method(gammaParameter)]
        #[unsafe(method_family = none)]
        pub unsafe fn gammaParameter(&self) -> Option<Retained<MLCTensorParameter>>;

        /// A value used for numerical stability
        #[deprecated]
        #[method(varianceEpsilon)]
        #[unsafe(method_family = none)]
        pub unsafe fn varianceEpsilon(&self) -> c_float;

        #[cfg(feature = "MLCTensor")]
        /// Create a group normalization layer
        ///
        /// Parameter `featureChannelCount`: The number of feature channels
        ///
        /// Parameter `beta`: Training parameter
        ///
        /// Parameter `gamma`: Training parameter
        ///
        /// Parameter `groupCount`: The number of groups to divide the feature channels into
        ///
        /// Parameter `varianceEpsilon`: A small numerical value added to variance for stability
        ///
        /// Returns: A new group normalization layer.
        #[deprecated]
        #[method(layerWithFeatureChannelCount:groupCount:beta:gamma:varianceEpsilon:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layerWithFeatureChannelCount_groupCount_beta_gamma_varianceEpsilon(
            feature_channel_count: NSUInteger,
            group_count: NSUInteger,
            beta: Option<&MLCTensor>,
            gamma: Option<&MLCTensor>,
            variance_epsilon: c_float,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCGroupNormalizationLayer {
        #[deprecated]
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
