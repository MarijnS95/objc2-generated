//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The layer normalizaion layer.  For more information, refer to https://pytorch.org/docs/stable/nn.html#layernorm.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlclayernormalizationlayer?language=objc)
    #[unsafe(super(MLCLayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCLayer")]
    #[deprecated]
    pub struct MLCLayerNormalizationLayer;
);

#[cfg(feature = "MLCLayer")]
unsafe impl NSObjectProtocol for MLCLayerNormalizationLayer {}

extern_methods!(
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCLayerNormalizationLayer {
        /// The shape of the axes over which normalization occurs, (W), (H,W) or (C,H,W)
        #[deprecated]
        #[method(normalizedShape)]
        #[unsafe(method_family = none)]
        pub unsafe fn normalizedShape(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "MLCTensor")]
        /// The beta tensor
        #[deprecated]
        #[method(beta)]
        #[unsafe(method_family = none)]
        pub unsafe fn beta(&self) -> Option<Retained<MLCTensor>>;

        #[cfg(feature = "MLCTensor")]
        /// The gamma tensor
        #[deprecated]
        #[method(gamma)]
        #[unsafe(method_family = none)]
        pub unsafe fn gamma(&self) -> Option<Retained<MLCTensor>>;

        #[cfg(feature = "MLCTensorParameter")]
        /// The beta tensor parameter used for optimizer update
        #[deprecated]
        #[method(betaParameter)]
        #[unsafe(method_family = none)]
        pub unsafe fn betaParameter(&self) -> Option<Retained<MLCTensorParameter>>;

        #[cfg(feature = "MLCTensorParameter")]
        /// The gamma tensor parameter used for optimizer update
        #[deprecated]
        #[method(gammaParameter)]
        #[unsafe(method_family = none)]
        pub unsafe fn gammaParameter(&self) -> Option<Retained<MLCTensorParameter>>;

        /// A value used for numerical stability
        #[deprecated]
        #[method(varianceEpsilon)]
        #[unsafe(method_family = none)]
        pub unsafe fn varianceEpsilon(&self) -> c_float;

        #[cfg(feature = "MLCTensor")]
        /// Create a layer normalization layer
        ///
        /// Parameter `normalizedShape`: The shape of the axes over which normalization occurs, currently (C,H,W) only
        ///
        /// Parameter `beta`: Training parameter
        ///
        /// Parameter `gamma`: Training parameter
        ///
        /// Parameter `varianceEpsilon`: A small numerical value added to variance for stability
        ///
        /// Returns: A new layer normalization layer.
        #[deprecated]
        #[method(layerWithNormalizedShape:beta:gamma:varianceEpsilon:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layerWithNormalizedShape_beta_gamma_varianceEpsilon(
            normalized_shape: &NSArray<NSNumber>,
            beta: Option<&MLCTensor>,
            gamma: Option<&MLCTensor>,
            variance_epsilon: c_float,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCLayer")]
    unsafe impl MLCLayerNormalizationLayer {
        #[deprecated]
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
