//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The MLCConvolutionDescriptor specifies a convolution descriptor
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mlcompute/mlcconvolutiondescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct MLCConvolutionDescriptor;
);

extern_conformance!(
    unsafe impl NSCopying for MLCConvolutionDescriptor {}
);

unsafe impl CopyingHelper for MLCConvolutionDescriptor {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for MLCConvolutionDescriptor {}
);

impl MLCConvolutionDescriptor {
    extern_methods!(
        #[cfg(feature = "MLCTypes")]
        /// The type of convolution.
        #[deprecated]
        #[unsafe(method(convolutionType))]
        #[unsafe(method_family = none)]
        pub unsafe fn convolutionType(&self) -> MLCConvolutionType;

        /// The convolution kernel size in x.
        #[deprecated]
        #[unsafe(method(kernelWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// The convolution kernel size in y.
        #[deprecated]
        #[unsafe(method(kernelHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Number of channels in the input tensor
        #[deprecated]
        #[unsafe(method(inputFeatureChannelCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputFeatureChannelCount(&self) -> NSUInteger;

        /// Number of channels in the output tensor
        #[deprecated]
        #[unsafe(method(outputFeatureChannelCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputFeatureChannelCount(&self) -> NSUInteger;

        /// The stride of the kernel in x.
        #[deprecated]
        #[unsafe(method(strideInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInX(&self) -> NSUInteger;

        /// The stride of the kernel in y.
        #[deprecated]
        #[unsafe(method(strideInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInY(&self) -> NSUInteger;

        /// The dilation rate i.e. stride of elements in the kernel in x.
        #[deprecated]
        #[unsafe(method(dilationRateInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInX(&self) -> NSUInteger;

        /// The dilation rate i.e. stride of elements in the kernel in y.
        #[deprecated]
        #[unsafe(method(dilationRateInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInY(&self) -> NSUInteger;

        /// Number of blocked connections from input channels to output channels
        #[deprecated]
        #[unsafe(method(groupCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn groupCount(&self) -> NSUInteger;

        #[cfg(feature = "MLCTypes")]
        /// The padding policy to use.
        #[deprecated]
        #[unsafe(method(paddingPolicy))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingPolicy(&self) -> MLCPaddingPolicy;

        /// The pooling size in x (left and right) to use if paddingPolicy is MLCPaddingPolicyUsePaddingSize
        #[deprecated]
        #[unsafe(method(paddingSizeInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingSizeInX(&self) -> NSUInteger;

        /// The pooling size in y (top and bottom) to use if paddingPolicy is MLCPaddingPolicyUsePaddingSize
        #[deprecated]
        #[unsafe(method(paddingSizeInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingSizeInY(&self) -> NSUInteger;

        /// A flag to indicate if this is a convolution transpose
        #[deprecated]
        #[unsafe(method(isConvolutionTranspose))]
        #[unsafe(method_family = none)]
        pub unsafe fn isConvolutionTranspose(&self) -> bool;

        /// A flag to indicate depthwise convolution
        #[deprecated]
        #[unsafe(method(usesDepthwiseConvolution))]
        #[unsafe(method_family = none)]
        pub unsafe fn usesDepthwiseConvolution(&self) -> bool;

        #[cfg(feature = "MLCTypes")]
        /// Creates a convolution descriptor with the specified convolution type.
        ///
        /// Parameter `convolutionType`: The type of convolution.
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y.
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor.
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor. When the convolution type is
        /// `MLCConvolutionTypeDepthwise`, this value must be a multiple of
        /// `inputFeatureChannelCount`.
        ///
        /// Parameter `groupCount`: The number of groups.
        ///
        /// Parameter `strides`: The kernel strides in x and y.
        ///
        /// Parameter `dilationRates`: The dilation rates in x and y.
        ///
        /// Parameter `paddingPolicy`: The padding policy.
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is
        /// `MLCPaddingPolicyUsePaddingSize`.
        ///
        /// Returns: A new convolution descriptor.
        #[deprecated]
        #[unsafe(method(descriptorWithType:kernelSizes:inputFeatureChannelCount:outputFeatureChannelCount:groupCount:strides:dilationRates:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithType_kernelSizes_inputFeatureChannelCount_outputFeatureChannelCount_groupCount_strides_dilationRates_paddingPolicy_paddingSizes(
            convolution_type: MLCConvolutionType,
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
            group_count: NSUInteger,
            strides: &NSArray<NSNumber>,
            dilation_rates: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        /// Create a MLCConvolutionDescriptor object
        ///
        /// Parameter `kernelWidth`: The kernel size in x
        ///
        /// Parameter `kernelHeight`: The kernel size in x
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(descriptorWithKernelWidth:kernelHeight:inputFeatureChannelCount:outputFeatureChannelCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelWidth_kernelHeight_inputFeatureChannelCount_outputFeatureChannelCount(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(descriptorWithKernelSizes:inputFeatureChannelCount:outputFeatureChannelCount:strides:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelSizes_inputFeatureChannelCount_outputFeatureChannelCount_strides_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
            strides: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Parameter `groupCount`: Number of groups
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `dilationRates`: The dilation rates in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(descriptorWithKernelSizes:inputFeatureChannelCount:outputFeatureChannelCount:groupCount:strides:dilationRates:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelSizes_inputFeatureChannelCount_outputFeatureChannelCount_groupCount_strides_dilationRates_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
            group_count: NSUInteger,
            strides: &NSArray<NSNumber>,
            dilation_rates: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        /// Create a MLCConvolutionDescriptor object for convolution transpose
        ///
        /// Parameter `kernelWidth`: The kernel size in x
        ///
        /// Parameter `kernelHeight`: The kernel size in x
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(convolutionTransposeDescriptorWithKernelWidth:kernelHeight:inputFeatureChannelCount:outputFeatureChannelCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn convolutionTransposeDescriptorWithKernelWidth_kernelHeight_inputFeatureChannelCount_outputFeatureChannelCount(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object for convolution transpose
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(convolutionTransposeDescriptorWithKernelSizes:inputFeatureChannelCount:outputFeatureChannelCount:strides:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn convolutionTransposeDescriptorWithKernelSizes_inputFeatureChannelCount_outputFeatureChannelCount_strides_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
            strides: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object for convolution transpose
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `outputFeatureChannelCount`: The number of feature channels in the output tensor
        ///
        /// Parameter `groupCount`: Number of groups
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `dilationRates`: The dilation rates in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(convolutionTransposeDescriptorWithKernelSizes:inputFeatureChannelCount:outputFeatureChannelCount:groupCount:strides:dilationRates:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn convolutionTransposeDescriptorWithKernelSizes_inputFeatureChannelCount_outputFeatureChannelCount_groupCount_strides_dilationRates_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            output_feature_channel_count: NSUInteger,
            group_count: NSUInteger,
            strides: &NSArray<NSNumber>,
            dilation_rates: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        /// Create a MLCConvolutionDescriptor object for depthwise convolution
        ///
        /// Parameter `kernelWidth`: The kernel size in x
        ///
        /// Parameter `kernelHeight`: The kernel size in x
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `channelMultiplier`: The channel multiplier
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(depthwiseConvolutionDescriptorWithKernelWidth:kernelHeight:inputFeatureChannelCount:channelMultiplier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthwiseConvolutionDescriptorWithKernelWidth_kernelHeight_inputFeatureChannelCount_channelMultiplier(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            input_feature_channel_count: NSUInteger,
            channel_multiplier: NSUInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object for depthwise convolution
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `channelMultiplier`: The channel multiplier
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(depthwiseConvolutionDescriptorWithKernelSizes:inputFeatureChannelCount:channelMultiplier:strides:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthwiseConvolutionDescriptorWithKernelSizes_inputFeatureChannelCount_channelMultiplier_strides_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            channel_multiplier: NSUInteger,
            strides: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        #[cfg(feature = "MLCTypes")]
        /// Create a MLCConvolutionDescriptor object for depthwise convolution
        ///
        /// Parameter `kernelSizes`: The kernel sizes in x and y
        ///
        /// Parameter `inputFeatureChannelCount`: The number of feature channels in the input tensor
        ///
        /// Parameter `channelMultiplier`: The channel multiplier
        ///
        /// Parameter `strides`: The kernel strides in x and y
        ///
        /// Parameter `dilationRates`: The dilation rates in x and y
        ///
        /// Parameter `paddingPolicy`: The padding policy
        ///
        /// Parameter `paddingSizes`: The padding sizes in x and y if padding policy is MLCPaddingPolicyUsePaddingSIze
        ///
        /// Returns: A new MLCConvolutionDescriptor object.
        #[deprecated]
        #[unsafe(method(depthwiseConvolutionDescriptorWithKernelSizes:inputFeatureChannelCount:channelMultiplier:strides:dilationRates:paddingPolicy:paddingSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthwiseConvolutionDescriptorWithKernelSizes_inputFeatureChannelCount_channelMultiplier_strides_dilationRates_paddingPolicy_paddingSizes(
            kernel_sizes: &NSArray<NSNumber>,
            input_feature_channel_count: NSUInteger,
            channel_multiplier: NSUInteger,
            strides: &NSArray<NSNumber>,
            dilation_rates: &NSArray<NSNumber>,
            padding_policy: MLCPaddingPolicy,
            padding_sizes: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl MLCConvolutionDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
