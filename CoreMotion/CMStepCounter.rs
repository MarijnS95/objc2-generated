//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmstepqueryhandler?language=objc)
#[cfg(feature = "block2")]
pub type CMStepQueryHandler = *mut block2::Block<dyn Fn(NSInteger, *mut NSError)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmstepupdatehandler?language=objc)
#[cfg(feature = "block2")]
pub type CMStepUpdateHandler = *mut block2::Block<dyn Fn(NSInteger, NonNull<NSDate>, *mut NSError)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmstepcounter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMStepCounter;
);

unsafe impl NSObjectProtocol for CMStepCounter {}

extern_methods!(
    unsafe impl CMStepCounter {
        #[method(isStepCountingAvailable)]
        pub unsafe fn isStepCountingAvailable() -> bool;

        #[cfg(feature = "block2")]
        #[method(queryStepCountStartingFrom:to:toQueue:withHandler:)]
        pub unsafe fn queryStepCountStartingFrom_to_toQueue_withHandler(
            &self,
            start: &NSDate,
            end: &NSDate,
            queue: &NSOperationQueue,
            handler: CMStepQueryHandler,
        );

        #[cfg(feature = "block2")]
        #[method(startStepCountingUpdatesToQueue:updateOn:withHandler:)]
        pub unsafe fn startStepCountingUpdatesToQueue_updateOn_withHandler(
            &self,
            queue: &NSOperationQueue,
            step_counts: NSInteger,
            handler: CMStepUpdateHandler,
        );

        #[method(stopStepCountingUpdates)]
        pub unsafe fn stopStepCountingUpdates(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CMStepCounter {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
