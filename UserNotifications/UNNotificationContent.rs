//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/usernotifications/unnotificationcontentproviding?language=objc)
    pub unsafe trait UNNotificationContentProviding: NSObjectProtocol {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/usernotifications/unnotificationinterruptionlevel?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UNNotificationInterruptionLevel(pub NSUInteger);
impl UNNotificationInterruptionLevel {
    #[doc(alias = "UNNotificationInterruptionLevelPassive")]
    pub const Passive: Self = Self(0);
    #[doc(alias = "UNNotificationInterruptionLevelActive")]
    pub const Active: Self = Self(1);
    #[doc(alias = "UNNotificationInterruptionLevelTimeSensitive")]
    pub const TimeSensitive: Self = Self(2);
    #[doc(alias = "UNNotificationInterruptionLevelCritical")]
    pub const Critical: Self = Self(3);
}

unsafe impl Encode for UNNotificationInterruptionLevel {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for UNNotificationInterruptionLevel {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UNNotificationContent;
);

unsafe impl NSCoding for UNNotificationContent {}

unsafe impl NSCopying for UNNotificationContent {}

unsafe impl CopyingHelper for UNNotificationContent {
    type Result = Self;
}

unsafe impl NSMutableCopying for UNNotificationContent {}

unsafe impl MutableCopyingHelper for UNNotificationContent {
    type Result = UNMutableNotificationContent;
}

unsafe impl NSObjectProtocol for UNNotificationContent {}

unsafe impl NSSecureCoding for UNNotificationContent {}

extern_methods!(
    unsafe impl UNNotificationContent {
        #[cfg(feature = "UNNotificationAttachment")]
        #[method_id(attachments)]
        #[unsafe(method_family = none)]
        pub unsafe fn attachments(&self) -> Retained<NSArray<UNNotificationAttachment>>;

        #[method_id(badge)]
        #[unsafe(method_family = none)]
        pub unsafe fn badge(&self) -> Option<Retained<NSNumber>>;

        #[method_id(body)]
        #[unsafe(method_family = none)]
        pub unsafe fn body(&self) -> Retained<NSString>;

        #[method_id(categoryIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn categoryIdentifier(&self) -> Retained<NSString>;

        #[method_id(launchImageName)]
        #[unsafe(method_family = none)]
        pub unsafe fn launchImageName(&self) -> Retained<NSString>;

        #[cfg(feature = "UNNotificationSound")]
        #[method_id(sound)]
        #[unsafe(method_family = none)]
        pub unsafe fn sound(&self) -> Option<Retained<UNNotificationSound>>;

        #[method_id(subtitle)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Retained<NSString>;

        #[method_id(threadIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn threadIdentifier(&self) -> Retained<NSString>;

        #[method_id(title)]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method_id(userInfo)]
        #[unsafe(method_family = none)]
        pub unsafe fn userInfo(&self) -> Retained<NSDictionary>;

        /// The argument to be inserted in the summary for this notification.
        #[deprecated = "summaryArgument is ignored"]
        #[method_id(summaryArgument)]
        #[unsafe(method_family = none)]
        pub unsafe fn summaryArgument(&self) -> Retained<NSString>;

        /// A number that indicates how many items in the summary are represented in the summary.
        /// For example if a podcast app sends one notification for 3 new episodes in a show,
        /// the argument should be the name of the show and the count should be 3.
        /// Default is 1 and cannot be 0.
        #[deprecated = "summaryArgumentCount is ignored"]
        #[method(summaryArgumentCount)]
        pub unsafe fn summaryArgumentCount(&self) -> NSUInteger;

        #[method_id(targetContentIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn targetContentIdentifier(&self) -> Option<Retained<NSString>>;

        #[method(interruptionLevel)]
        pub unsafe fn interruptionLevel(&self) -> UNNotificationInterruptionLevel;

        #[method(relevanceScore)]
        pub unsafe fn relevanceScore(&self) -> c_double;

        #[method_id(filterCriteria)]
        #[unsafe(method_family = none)]
        pub unsafe fn filterCriteria(&self) -> Option<Retained<NSString>>;

        /// Contextualizes your UNNotificationContent object with other Apple SDK objects conforming to UNNotificationContentProviding. This will specialize the notification and decorate its look and behavior accordingly. For example, the notification will be treated as a message with an avatar and be promoted to the top of notification center if the object passed in is a valid INSendMessageIntent
        /// <UNNotificationContentProviding
        /// >. This throws an error with a UNErrorCode found in UNError.h if the UNNotificationContentProviding object is invalid. A valid UNNotificationContent result should not be mutated and be passed directly to UNUserNotificationCenter.
        ///
        /// This should be called in the UNNotificationServiceExtension in didReceiveNotificationRequest:withContentHandler: and the returned UNNotificationContent should be passed to the contentHandler for incoming push notifications.
        #[method_id(contentByUpdatingWithProvider:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentByUpdatingWithProvider_error(
            &self,
            provider: &ProtocolObject<dyn UNNotificationContentProviding>,
        ) -> Result<Retained<UNNotificationContent>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UNNotificationContent {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent?language=objc)
    #[unsafe(super(UNNotificationContent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UNMutableNotificationContent;
);

unsafe impl NSCoding for UNMutableNotificationContent {}

unsafe impl NSCopying for UNMutableNotificationContent {}

unsafe impl CopyingHelper for UNMutableNotificationContent {
    type Result = UNNotificationContent;
}

unsafe impl NSMutableCopying for UNMutableNotificationContent {}

unsafe impl MutableCopyingHelper for UNMutableNotificationContent {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UNMutableNotificationContent {}

unsafe impl NSSecureCoding for UNMutableNotificationContent {}

extern_methods!(
    unsafe impl UNMutableNotificationContent {
        #[cfg(feature = "UNNotificationAttachment")]
        #[method_id(attachments)]
        #[unsafe(method_family = none)]
        pub unsafe fn attachments(&self) -> Retained<NSArray<UNNotificationAttachment>>;

        #[cfg(feature = "UNNotificationAttachment")]
        /// Setter for [`attachments`][Self::attachments].
        #[method(setAttachments:)]
        pub unsafe fn setAttachments(&self, attachments: &NSArray<UNNotificationAttachment>);

        #[method_id(badge)]
        #[unsafe(method_family = none)]
        pub unsafe fn badge(&self) -> Option<Retained<NSNumber>>;

        /// Setter for [`badge`][Self::badge].
        #[method(setBadge:)]
        pub unsafe fn setBadge(&self, badge: Option<&NSNumber>);

        #[method_id(body)]
        #[unsafe(method_family = none)]
        pub unsafe fn body(&self) -> Retained<NSString>;

        /// Setter for [`body`][Self::body].
        #[method(setBody:)]
        pub unsafe fn setBody(&self, body: &NSString);

        #[method_id(categoryIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn categoryIdentifier(&self) -> Retained<NSString>;

        /// Setter for [`categoryIdentifier`][Self::categoryIdentifier].
        #[method(setCategoryIdentifier:)]
        pub unsafe fn setCategoryIdentifier(&self, category_identifier: &NSString);

        #[method_id(launchImageName)]
        #[unsafe(method_family = none)]
        pub unsafe fn launchImageName(&self) -> Retained<NSString>;

        /// Setter for [`launchImageName`][Self::launchImageName].
        #[method(setLaunchImageName:)]
        pub unsafe fn setLaunchImageName(&self, launch_image_name: &NSString);

        #[cfg(feature = "UNNotificationSound")]
        #[method_id(sound)]
        #[unsafe(method_family = none)]
        pub unsafe fn sound(&self) -> Option<Retained<UNNotificationSound>>;

        #[cfg(feature = "UNNotificationSound")]
        /// Setter for [`sound`][Self::sound].
        #[method(setSound:)]
        pub unsafe fn setSound(&self, sound: Option<&UNNotificationSound>);

        #[method_id(subtitle)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Retained<NSString>;

        /// Setter for [`subtitle`][Self::subtitle].
        #[method(setSubtitle:)]
        pub unsafe fn setSubtitle(&self, subtitle: &NSString);

        #[method_id(threadIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn threadIdentifier(&self) -> Retained<NSString>;

        /// Setter for [`threadIdentifier`][Self::threadIdentifier].
        #[method(setThreadIdentifier:)]
        pub unsafe fn setThreadIdentifier(&self, thread_identifier: &NSString);

        #[method_id(title)]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[method_id(userInfo)]
        #[unsafe(method_family = none)]
        pub unsafe fn userInfo(&self) -> Retained<NSDictionary>;

        /// Setter for [`userInfo`][Self::userInfo].
        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, user_info: &NSDictionary);

        /// The argument to be inserted in the summary for this notification.
        #[deprecated = "summaryArgument is ignored"]
        #[method_id(summaryArgument)]
        #[unsafe(method_family = none)]
        pub unsafe fn summaryArgument(&self) -> Retained<NSString>;

        /// Setter for [`summaryArgument`][Self::summaryArgument].
        #[deprecated = "summaryArgument is ignored"]
        #[method(setSummaryArgument:)]
        pub unsafe fn setSummaryArgument(&self, summary_argument: &NSString);

        /// A number that indicates how many items in the summary are represented in the summary.
        /// For example if a podcast app sends one notification for 3 new episodes in a show,
        /// the argument should be the name of the show and the count should be 3.
        /// Default is 1 and cannot be 0.
        #[deprecated = "summaryArgumentCount is ignored"]
        #[method(summaryArgumentCount)]
        pub unsafe fn summaryArgumentCount(&self) -> NSUInteger;

        /// Setter for [`summaryArgumentCount`][Self::summaryArgumentCount].
        #[deprecated = "summaryArgumentCount is ignored"]
        #[method(setSummaryArgumentCount:)]
        pub unsafe fn setSummaryArgumentCount(&self, summary_argument_count: NSUInteger);

        #[method_id(targetContentIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn targetContentIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`targetContentIdentifier`][Self::targetContentIdentifier].
        #[method(setTargetContentIdentifier:)]
        pub unsafe fn setTargetContentIdentifier(
            &self,
            target_content_identifier: Option<&NSString>,
        );

        #[method(interruptionLevel)]
        pub unsafe fn interruptionLevel(&self) -> UNNotificationInterruptionLevel;

        /// Setter for [`interruptionLevel`][Self::interruptionLevel].
        #[method(setInterruptionLevel:)]
        pub unsafe fn setInterruptionLevel(
            &self,
            interruption_level: UNNotificationInterruptionLevel,
        );

        #[method(relevanceScore)]
        pub unsafe fn relevanceScore(&self) -> c_double;

        /// Setter for [`relevanceScore`][Self::relevanceScore].
        #[method(setRelevanceScore:)]
        pub unsafe fn setRelevanceScore(&self, relevance_score: c_double);

        #[method_id(filterCriteria)]
        #[unsafe(method_family = none)]
        pub unsafe fn filterCriteria(&self) -> Option<Retained<NSString>>;

        /// Setter for [`filterCriteria`][Self::filterCriteria].
        #[method(setFilterCriteria:)]
        pub unsafe fn setFilterCriteria(&self, filter_criteria: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UNMutableNotificationContent {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
