//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// `NSSearchToolbarItem` provides the standard UI behavior for integrating a search field into the toolbar.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appkit/nssearchtoolbaritem?language=objc)
    #[unsafe(super(NSToolbarItem, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSToolbarItem")]
    pub struct NSSearchToolbarItem;
);

#[cfg(feature = "NSToolbarItem")]
unsafe impl NSCopying for NSSearchToolbarItem {}

#[cfg(feature = "NSToolbarItem")]
unsafe impl CopyingHelper for NSSearchToolbarItem {
    type Result = Self;
}

#[cfg(feature = "NSToolbarItem")]
unsafe impl NSObjectProtocol for NSSearchToolbarItem {}

extern_methods!(
    #[cfg(feature = "NSToolbarItem")]
    unsafe impl NSSearchToolbarItem {
        #[cfg(all(
            feature = "NSControl",
            feature = "NSResponder",
            feature = "NSSearchField",
            feature = "NSTextField",
            feature = "NSView"
        ))]
        /// An `NSSearchField` displayed in the toolbar item.
        /// While inside the toolbar item, the field properties and layout constraints are managed by the item.
        /// The field should be configured before assigned.
        /// The width constraint for the field could be updated after assigned.
        /// When set to nil, will reset to a search field with the default configuration.
        #[method_id(@__method_family Other searchField)]
        pub unsafe fn searchField(&self) -> Retained<NSSearchField>;

        #[cfg(all(
            feature = "NSControl",
            feature = "NSResponder",
            feature = "NSSearchField",
            feature = "NSTextField",
            feature = "NSView"
        ))]
        /// Setter for [`searchField`][Self::searchField].
        #[method(setSearchField:)]
        pub unsafe fn setSearchField(&self, search_field: &NSSearchField);

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        /// The base view property is owned by the toolbar item and not available for customization.
        #[method_id(@__method_family Other view)]
        pub unsafe fn view(&self) -> Option<Retained<NSView>>;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        /// Setter for [`view`][Self::view].
        #[method(setView:)]
        pub unsafe fn setView(&self, view: Option<&NSView>);

        /// When YES, the cancel button in the field resigns the first responder status of the search field as clearing the contents.
        /// The default is YES.
        #[method(resignsFirstResponderWithCancel)]
        pub unsafe fn resignsFirstResponderWithCancel(&self) -> bool;

        /// Setter for [`resignsFirstResponderWithCancel`][Self::resignsFirstResponderWithCancel].
        #[method(setResignsFirstResponderWithCancel:)]
        pub unsafe fn setResignsFirstResponderWithCancel(
            &self,
            resigns_first_responder_with_cancel: bool,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The preferred width for the search field.
        /// This value is used to configure the search field width whenever it gets the keyboard focus.
        /// If specifying custom width constraints to the search field, they should not conflict with this value.
        #[method(preferredWidthForSearchField)]
        pub unsafe fn preferredWidthForSearchField(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`preferredWidthForSearchField`][Self::preferredWidthForSearchField].
        #[method(setPreferredWidthForSearchField:)]
        pub unsafe fn setPreferredWidthForSearchField(
            &self,
            preferred_width_for_search_field: CGFloat,
        );

        /// Starts a search interaction.
        /// If necessary, expands to the preferred width and moves the keyboard focus to the search field.
        #[method(beginSearchInteraction)]
        pub unsafe fn beginSearchInteraction(&self);

        /// Ends a search interaction.
        /// Gives up the first responder by calling `-endEditing:` to the search field.
        /// Adjusts to the natural available width for the toolbar item if necessary.
        #[method(endSearchInteraction)]
        pub unsafe fn endSearchInteraction(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSToolbarItem`
    #[cfg(feature = "NSToolbarItem")]
    unsafe impl NSSearchToolbarItem {
        #[cfg(feature = "NSToolbar")]
        /// Initialize the toolbar item with an identifier which is a development language string used by the toolbar and its delegate for identification purposes.
        #[method_id(@__method_family Init initWithItemIdentifier:)]
        pub unsafe fn initWithItemIdentifier(
            this: Allocated<Self>,
            item_identifier: &NSToolbarItemIdentifier,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSToolbarItem")]
    unsafe impl NSSearchToolbarItem {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
