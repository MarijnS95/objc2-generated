//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancename?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type NSAppearanceName = NSString;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearance?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAppearance;
);

unsafe impl NSCoding for NSAppearance {}

unsafe impl NSObjectProtocol for NSAppearance {}

unsafe impl NSSecureCoding for NSAppearance {}

extern_methods!(
    unsafe impl NSAppearance {
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Retained<NSAppearanceName>;

        #[deprecated = "Use -performAsCurrentDrawingAppearance: to temporarily set the drawing appearance, or +currentDrawingAppearance to access the currently drawing appearance."]
        #[method_id(@__retain_semantics Other currentAppearance)]
        pub unsafe fn currentAppearance() -> Option<Retained<NSAppearance>>;

        /// Setter for [`currentAppearance`][Self::currentAppearance].
        #[deprecated = "Use -performAsCurrentDrawingAppearance: to temporarily set the drawing appearance, or +currentDrawingAppearance to access the currently drawing appearance."]
        #[method(setCurrentAppearance:)]
        pub unsafe fn setCurrentAppearance(current_appearance: Option<&NSAppearance>);

        #[method_id(@__retain_semantics Other currentDrawingAppearance)]
        pub unsafe fn currentDrawingAppearance() -> Retained<NSAppearance>;

        #[cfg(feature = "block2")]
        #[method(performAsCurrentDrawingAppearance:)]
        pub unsafe fn performAsCurrentDrawingAppearance(
            &self,
            block: &block2::Block<dyn Fn() + '_>,
        );

        #[method_id(@__retain_semantics Other appearanceNamed:)]
        pub fn appearanceNamed(name: &NSAppearanceName) -> Option<Retained<NSAppearance>>;

        #[method_id(@__retain_semantics Init initWithAppearanceNamed:bundle:)]
        pub unsafe fn initWithAppearanceNamed_bundle(
            this: Allocated<Self>,
            name: &NSAppearanceName,
            bundle: Option<&NSBundle>,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method(allowsVibrancy)]
        pub unsafe fn allowsVibrancy(&self) -> bool;

        #[method_id(@__retain_semantics Other bestMatchFromAppearancesWithNames:)]
        pub fn bestMatchFromAppearancesWithNames(
            &self,
            appearances: &NSArray<NSAppearanceName>,
        ) -> Option<Retained<NSAppearanceName>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSAppearance {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenameaqua?language=objc)
    pub static NSAppearanceNameAqua: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenamedarkaqua?language=objc)
    pub static NSAppearanceNameDarkAqua: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenamelightcontent?language=objc)
    pub static NSAppearanceNameLightContent: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenamevibrantdark?language=objc)
    pub static NSAppearanceNameVibrantDark: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenamevibrantlight?language=objc)
    pub static NSAppearanceNameVibrantLight: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenameaccessibilityhighcontrastaqua?language=objc)
    pub static NSAppearanceNameAccessibilityHighContrastAqua: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenameaccessibilityhighcontrastdarkaqua?language=objc)
    pub static NSAppearanceNameAccessibilityHighContrastDarkAqua: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenameaccessibilityhighcontrastvibrantlight?language=objc)
    pub static NSAppearanceNameAccessibilityHighContrastVibrantLight: &'static NSAppearanceName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancenameaccessibilityhighcontrastvibrantdark?language=objc)
    pub static NSAppearanceNameAccessibilityHighContrastVibrantDark: &'static NSAppearanceName;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsappearancecustomization?language=objc)
    pub unsafe trait NSAppearanceCustomization: NSObjectProtocol {
        #[method_id(@__retain_semantics Other appearance)]
        unsafe fn appearance(&self) -> Option<Retained<NSAppearance>>;

        /// Setter for [`appearance`][Self::appearance].
        #[method(setAppearance:)]
        unsafe fn setAppearance(&self, appearance: Option<&NSAppearance>);

        #[method_id(@__retain_semantics Other effectiveAppearance)]
        unsafe fn effectiveAppearance(&self) -> Retained<NSAppearance>;
    }

    unsafe impl ProtocolType for dyn NSAppearanceCustomization {}
);
