//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nstitleposition?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSTitlePosition(pub NSUInteger);
impl NSTitlePosition {
    #[doc(alias = "NSNoTitle")]
    pub const NoTitle: Self = Self(0);
    #[doc(alias = "NSAboveTop")]
    pub const AboveTop: Self = Self(1);
    #[doc(alias = "NSAtTop")]
    pub const AtTop: Self = Self(2);
    #[doc(alias = "NSBelowTop")]
    pub const BelowTop: Self = Self(3);
    #[doc(alias = "NSAboveBottom")]
    pub const AboveBottom: Self = Self(4);
    #[doc(alias = "NSAtBottom")]
    pub const AtBottom: Self = Self(5);
    #[doc(alias = "NSBelowBottom")]
    pub const BelowBottom: Self = Self(6);
}

unsafe impl Encode for NSTitlePosition {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSTitlePosition {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsboxtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSBoxType(pub NSUInteger);
impl NSBoxType {
    #[doc(alias = "NSBoxPrimary")]
    pub const Primary: Self = Self(0);
    #[doc(alias = "NSBoxSeparator")]
    pub const Separator: Self = Self(2);
    #[doc(alias = "NSBoxCustom")]
    pub const Custom: Self = Self(4);
}

unsafe impl Encode for NSBoxType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSBoxType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsbox?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    pub struct NSBox;
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSResponder",
    feature = "NSView"
))]
unsafe impl NSAccessibility for NSBox {}

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSResponder",
    feature = "NSView"
))]
unsafe impl NSAccessibilityElementProtocol for NSBox {}

#[cfg(all(feature = "NSAnimation", feature = "NSResponder", feature = "NSView"))]
unsafe impl NSAnimatablePropertyContainer for NSBox {}

#[cfg(all(feature = "NSAppearance", feature = "NSResponder", feature = "NSView"))]
unsafe impl NSAppearanceCustomization for NSBox {}

#[cfg(all(feature = "NSResponder", feature = "NSView"))]
unsafe impl NSCoding for NSBox {}

#[cfg(all(feature = "NSDragging", feature = "NSResponder", feature = "NSView"))]
unsafe impl NSDraggingDestination for NSBox {}

#[cfg(all(feature = "NSResponder", feature = "NSView"))]
unsafe impl NSObjectProtocol for NSBox {}

#[cfg(all(
    feature = "NSResponder",
    feature = "NSUserInterfaceItemIdentification",
    feature = "NSView"
))]
unsafe impl NSUserInterfaceItemIdentification for NSBox {}

extern_methods!(
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    unsafe impl NSBox {
        #[method(boxType)]
        #[unsafe(method_family = none)]
        pub unsafe fn boxType(&self) -> NSBoxType;

        /// Setter for [`boxType`][Self::boxType].
        #[method(setBoxType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setBoxType(&self, box_type: NSBoxType);

        #[method(titlePosition)]
        #[unsafe(method_family = none)]
        pub unsafe fn titlePosition(&self) -> NSTitlePosition;

        /// Setter for [`titlePosition`][Self::titlePosition].
        #[method(setTitlePosition:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitlePosition(&self, title_position: NSTitlePosition);

        #[method(title)]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        #[method(setTitle:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[cfg(feature = "NSFont")]
        #[method(titleFont)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleFont(&self) -> Retained<NSFont>;

        #[cfg(feature = "NSFont")]
        /// Setter for [`titleFont`][Self::titleFont].
        #[method(setTitleFont:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitleFont(&self, title_font: &NSFont);

        #[method(borderRect)]
        #[unsafe(method_family = none)]
        pub unsafe fn borderRect(&self) -> NSRect;

        #[method(titleRect)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleRect(&self) -> NSRect;

        #[method(titleCell)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleCell(&self) -> Retained<AnyObject>;

        #[method(contentViewMargins)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentViewMargins(&self) -> NSSize;

        /// Setter for [`contentViewMargins`][Self::contentViewMargins].
        #[method(setContentViewMargins:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentViewMargins(&self, content_view_margins: NSSize);

        #[method(sizeToFit)]
        #[unsafe(method_family = none)]
        pub unsafe fn sizeToFit(&self);

        #[method(setFrameFromContentFrame:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setFrameFromContentFrame(&self, content_frame: NSRect);

        #[method(contentView)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`contentView`][Self::contentView].
        #[method(setContentView:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentView(&self, content_view: Option<&NSView>);

        #[method(isTransparent)]
        #[unsafe(method_family = none)]
        pub unsafe fn isTransparent(&self) -> bool;

        /// Setter for [`isTransparent`][Self::isTransparent].
        #[method(setTransparent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTransparent(&self, transparent: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(borderWidth)]
        #[unsafe(method_family = none)]
        pub unsafe fn borderWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`borderWidth`][Self::borderWidth].
        #[method(setBorderWidth:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderWidth(&self, border_width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(cornerRadius)]
        #[unsafe(method_family = none)]
        pub unsafe fn cornerRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`cornerRadius`][Self::cornerRadius].
        #[method(setCornerRadius:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCornerRadius(&self, corner_radius: CGFloat);

        #[cfg(feature = "NSColor")]
        #[method(borderColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn borderColor(&self) -> Retained<NSColor>;

        #[cfg(feature = "NSColor")]
        /// Setter for [`borderColor`][Self::borderColor].
        #[method(setBorderColor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderColor(&self, border_color: &NSColor);

        #[cfg(feature = "NSColor")]
        #[method(fillColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn fillColor(&self) -> Retained<NSColor>;

        #[cfg(feature = "NSColor")]
        /// Setter for [`fillColor`][Self::fillColor].
        #[method(setFillColor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setFillColor(&self, fill_color: &NSColor);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    unsafe impl NSBox {
        #[method(initWithFrame:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    unsafe impl NSBox {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    unsafe impl NSBox {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    unsafe impl NSBox {
        #[deprecated = "borderType is only applicable to NSBoxOldStyle, which is deprecated. To replace a borderType of NSNoBorder, use the `transparent` property."]
        #[method(borderType)]
        #[unsafe(method_family = none)]
        pub unsafe fn borderType(&self) -> NSBorderType;

        /// Setter for [`borderType`][Self::borderType].
        #[deprecated = "borderType is only applicable to NSBoxOldStyle, which is deprecated. To replace a borderType of NSNoBorder, use the `transparent` property."]
        #[method(setBorderType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderType(&self, border_type: NSBorderType);

        #[deprecated]
        #[method(setTitleWithMnemonic:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitleWithMnemonic(&self, string_with_ampersand: Option<&NSString>);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsboxsecondary?language=objc)
pub static NSBoxSecondary: NSBoxType = NSBoxType(1);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsboxoldstyle?language=objc)
pub static NSBoxOldStyle: NSBoxType = NSBoxType(3);
