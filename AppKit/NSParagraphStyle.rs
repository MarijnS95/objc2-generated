//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSLineBreakMode(pub NSUInteger);
impl NSLineBreakMode {
    pub const NSLineBreakByWordWrapping: Self = Self(0);
    pub const NSLineBreakByCharWrapping: Self = Self(1);
    pub const NSLineBreakByClipping: Self = Self(2);
    pub const NSLineBreakByTruncatingHead: Self = Self(3);
    pub const NSLineBreakByTruncatingTail: Self = Self(4);
    pub const NSLineBreakByTruncatingMiddle: Self = Self(5);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSLineBreakMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSLineBreakMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSLineBreakStrategy(pub NSUInteger);
impl NSLineBreakStrategy {
    #[doc(alias = "NSLineBreakStrategyNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "NSLineBreakStrategyPushOut")]
    pub const PushOut: Self = Self(1 << 0);
    #[doc(alias = "NSLineBreakStrategyHangulWordPriority")]
    pub const HangulWordPriority: Self = Self(1 << 1);
    #[doc(alias = "NSLineBreakStrategyStandard")]
    pub const Standard: Self = Self(0xFFFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSLineBreakStrategy {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSLineBreakStrategy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_TYPED_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSTextTabOptionKey = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTabColumnTerminatorsAttributeName: &'static NSTextTabOptionKey;
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextTab;

    unsafe impl ClassType for NSTextTab {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCoding for NSTextTab {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCopying for NSTextTab {}

unsafe impl NSObjectProtocol for NSTextTab {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSSecureCoding for NSTextTab {}

extern_methods!(
    unsafe impl NSTextTab {
        #[cfg(all(feature = "Foundation_NSCharacterSet", feature = "Foundation_NSLocale"))]
        #[method_id(@__retain_semantics Other columnTerminatorsForLocale:)]
        pub unsafe fn columnTerminatorsForLocale(a_locale: Option<&NSLocale>)
            -> Id<NSCharacterSet>;

        #[cfg(all(
            feature = "AppKit_NSText",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSGeometry",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithTextAlignment:location:options:)]
        pub unsafe fn initWithTextAlignment_location_options(
            this: Allocated<Self>,
            alignment: NSTextAlignment,
            loc: CGFloat,
            options: &NSDictionary<NSTextTabOptionKey, AnyObject>,
        ) -> Id<Self>;

        #[cfg(feature = "AppKit_NSText")]
        #[method(alignment)]
        pub unsafe fn alignment(&self) -> NSTextAlignment;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(location)]
        pub unsafe fn location(&self) -> CGFloat;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other options)]
        pub unsafe fn options(&self) -> Id<NSDictionary<NSTextTabOptionKey, AnyObject>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSTextTab {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSParagraphStyle;

    unsafe impl ClassType for NSParagraphStyle {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCoding for NSParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCopying for NSParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSMutableCopying for NSParagraphStyle {}

unsafe impl NSObjectProtocol for NSParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSSecureCoding for NSParagraphStyle {}

extern_methods!(
    unsafe impl NSParagraphStyle {
        #[method_id(@__retain_semantics Other defaultParagraphStyle)]
        pub unsafe fn defaultParagraphStyle() -> Id<NSParagraphStyle>;

        #[cfg(all(feature = "AppKit_NSText", feature = "Foundation_NSString"))]
        #[method(defaultWritingDirectionForLanguage:)]
        pub unsafe fn defaultWritingDirectionForLanguage(
            language_name: Option<&NSString>,
        ) -> NSWritingDirection;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(lineSpacing)]
        pub unsafe fn lineSpacing(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(paragraphSpacing)]
        pub unsafe fn paragraphSpacing(&self) -> CGFloat;

        #[cfg(feature = "AppKit_NSText")]
        #[method(alignment)]
        pub unsafe fn alignment(&self) -> NSTextAlignment;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(headIndent)]
        pub unsafe fn headIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(tailIndent)]
        pub unsafe fn tailIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(firstLineHeadIndent)]
        pub unsafe fn firstLineHeadIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(minimumLineHeight)]
        pub unsafe fn minimumLineHeight(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(maximumLineHeight)]
        pub unsafe fn maximumLineHeight(&self) -> CGFloat;

        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

        #[cfg(feature = "AppKit_NSText")]
        #[method(baseWritingDirection)]
        pub unsafe fn baseWritingDirection(&self) -> NSWritingDirection;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(lineHeightMultiple)]
        pub unsafe fn lineHeightMultiple(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(paragraphSpacingBefore)]
        pub unsafe fn paragraphSpacingBefore(&self) -> CGFloat;

        #[method(hyphenationFactor)]
        pub unsafe fn hyphenationFactor(&self) -> c_float;

        #[method(usesDefaultHyphenation)]
        pub unsafe fn usesDefaultHyphenation(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other tabStops)]
        pub unsafe fn tabStops(&self) -> Id<NSArray<NSTextTab>>;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(defaultTabInterval)]
        pub unsafe fn defaultTabInterval(&self) -> CGFloat;

        #[method(allowsDefaultTighteningForTruncation)]
        pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

        #[method(tighteningFactorForTruncation)]
        pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

        #[cfg(all(feature = "AppKit_NSTextTable", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textBlocks)]
        pub unsafe fn textBlocks(&self) -> Id<NSArray<NSTextBlock>>;

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textLists)]
        pub unsafe fn textLists(&self) -> Id<NSArray<NSTextList>>;

        #[method(headerLevel)]
        pub unsafe fn headerLevel(&self) -> NSInteger;

        #[method(lineBreakStrategy)]
        pub unsafe fn lineBreakStrategy(&self) -> NSLineBreakStrategy;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSParagraphStyle {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMutableParagraphStyle;

    unsafe impl ClassType for NSMutableParagraphStyle {
        #[inherits(NSObject)]
        type Super = NSParagraphStyle;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCoding for NSMutableParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCopying for NSMutableParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSMutableCopying for NSMutableParagraphStyle {}

unsafe impl NSObjectProtocol for NSMutableParagraphStyle {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSSecureCoding for NSMutableParagraphStyle {}

extern_methods!(
    unsafe impl NSMutableParagraphStyle {
        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(lineSpacing)]
        pub unsafe fn lineSpacing(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setLineSpacing:)]
        pub unsafe fn setLineSpacing(&self, line_spacing: CGFloat);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(paragraphSpacing)]
        pub unsafe fn paragraphSpacing(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setParagraphSpacing:)]
        pub unsafe fn setParagraphSpacing(&self, paragraph_spacing: CGFloat);

        #[cfg(feature = "AppKit_NSText")]
        #[method(alignment)]
        pub unsafe fn alignment(&self) -> NSTextAlignment;

        #[cfg(feature = "AppKit_NSText")]
        #[method(setAlignment:)]
        pub unsafe fn setAlignment(&self, alignment: NSTextAlignment);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(firstLineHeadIndent)]
        pub unsafe fn firstLineHeadIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setFirstLineHeadIndent:)]
        pub unsafe fn setFirstLineHeadIndent(&self, first_line_head_indent: CGFloat);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(headIndent)]
        pub unsafe fn headIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setHeadIndent:)]
        pub unsafe fn setHeadIndent(&self, head_indent: CGFloat);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(tailIndent)]
        pub unsafe fn tailIndent(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setTailIndent:)]
        pub unsafe fn setTailIndent(&self, tail_indent: CGFloat);

        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

        #[method(setLineBreakMode:)]
        pub unsafe fn setLineBreakMode(&self, line_break_mode: NSLineBreakMode);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(minimumLineHeight)]
        pub unsafe fn minimumLineHeight(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setMinimumLineHeight:)]
        pub unsafe fn setMinimumLineHeight(&self, minimum_line_height: CGFloat);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(maximumLineHeight)]
        pub unsafe fn maximumLineHeight(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setMaximumLineHeight:)]
        pub unsafe fn setMaximumLineHeight(&self, maximum_line_height: CGFloat);

        #[cfg(feature = "AppKit_NSText")]
        #[method(baseWritingDirection)]
        pub unsafe fn baseWritingDirection(&self) -> NSWritingDirection;

        #[cfg(feature = "AppKit_NSText")]
        #[method(setBaseWritingDirection:)]
        pub unsafe fn setBaseWritingDirection(&self, base_writing_direction: NSWritingDirection);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(lineHeightMultiple)]
        pub unsafe fn lineHeightMultiple(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setLineHeightMultiple:)]
        pub unsafe fn setLineHeightMultiple(&self, line_height_multiple: CGFloat);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(paragraphSpacingBefore)]
        pub unsafe fn paragraphSpacingBefore(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setParagraphSpacingBefore:)]
        pub unsafe fn setParagraphSpacingBefore(&self, paragraph_spacing_before: CGFloat);

        #[method(hyphenationFactor)]
        pub unsafe fn hyphenationFactor(&self) -> c_float;

        #[method(setHyphenationFactor:)]
        pub unsafe fn setHyphenationFactor(&self, hyphenation_factor: c_float);

        #[method(usesDefaultHyphenation)]
        pub unsafe fn usesDefaultHyphenation(&self) -> bool;

        #[method(setUsesDefaultHyphenation:)]
        pub unsafe fn setUsesDefaultHyphenation(&self, uses_default_hyphenation: bool);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other tabStops)]
        pub unsafe fn tabStops(&self) -> Id<NSArray<NSTextTab>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setTabStops:)]
        pub unsafe fn setTabStops(&self, tab_stops: Option<&NSArray<NSTextTab>>);

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(defaultTabInterval)]
        pub unsafe fn defaultTabInterval(&self) -> CGFloat;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(setDefaultTabInterval:)]
        pub unsafe fn setDefaultTabInterval(&self, default_tab_interval: CGFloat);

        #[method(allowsDefaultTighteningForTruncation)]
        pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

        #[method(setAllowsDefaultTighteningForTruncation:)]
        pub unsafe fn setAllowsDefaultTighteningForTruncation(
            &self,
            allows_default_tightening_for_truncation: bool,
        );

        #[method(addTabStop:)]
        pub unsafe fn addTabStop(&self, an_object: &NSTextTab);

        #[method(removeTabStop:)]
        pub unsafe fn removeTabStop(&self, an_object: &NSTextTab);

        #[method(setParagraphStyle:)]
        pub unsafe fn setParagraphStyle(&self, obj: &NSParagraphStyle);

        #[method(tighteningFactorForTruncation)]
        pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

        #[method(setTighteningFactorForTruncation:)]
        pub unsafe fn setTighteningFactorForTruncation(
            &self,
            tightening_factor_for_truncation: c_float,
        );

        #[cfg(all(feature = "AppKit_NSTextTable", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textBlocks)]
        pub unsafe fn textBlocks(&self) -> Id<NSArray<NSTextBlock>>;

        #[cfg(all(feature = "AppKit_NSTextTable", feature = "Foundation_NSArray"))]
        #[method(setTextBlocks:)]
        pub unsafe fn setTextBlocks(&self, text_blocks: &NSArray<NSTextBlock>);

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textLists)]
        pub unsafe fn textLists(&self) -> Id<NSArray<NSTextList>>;

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method(setTextLists:)]
        pub unsafe fn setTextLists(&self, text_lists: &NSArray<NSTextList>);

        #[method(headerLevel)]
        pub unsafe fn headerLevel(&self) -> NSInteger;

        #[method(setHeaderLevel:)]
        pub unsafe fn setHeaderLevel(&self, header_level: NSInteger);

        #[method(lineBreakStrategy)]
        pub unsafe fn lineBreakStrategy(&self) -> NSLineBreakStrategy;

        #[method(setLineBreakStrategy:)]
        pub unsafe fn setLineBreakStrategy(&self, line_break_strategy: NSLineBreakStrategy);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSMutableParagraphStyle {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSTextTabType(pub NSUInteger);
impl NSTextTabType {
    pub const NSLeftTabStopType: Self = Self(0);
    pub const NSRightTabStopType: Self = Self(1);
    pub const NSCenterTabStopType: Self = Self(2);
    pub const NSDecimalTabStopType: Self = Self(3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSTextTabType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSTextTabType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// NSTextTabDeprecated
    unsafe impl NSTextTab {
        #[cfg(feature = "Foundation_NSGeometry")]
        #[method_id(@__retain_semantics Init initWithType:location:)]
        pub unsafe fn initWithType_location(
            this: Allocated<Self>,
            r#type: NSTextTabType,
            loc: CGFloat,
        ) -> Id<Self>;

        #[method(tabStopType)]
        pub unsafe fn tabStopType(&self) -> NSTextTabType;
    }
);
