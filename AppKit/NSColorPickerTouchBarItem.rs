//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nscolorpickertouchbaritem?language=objc)
    #[unsafe(super(NSTouchBarItem, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSTouchBarItem")]
    pub struct NSColorPickerTouchBarItem;
);

#[cfg(feature = "NSTouchBarItem")]
unsafe impl NSCoding for NSColorPickerTouchBarItem {}

#[cfg(feature = "NSTouchBarItem")]
unsafe impl NSObjectProtocol for NSColorPickerTouchBarItem {}

extern_methods!(
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSColorPickerTouchBarItem {
        /// Creates a bar item containing a button with the standard color picker icon that invokes the color picker.
        #[method(colorPickerWithIdentifier:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorPickerWithIdentifier(
            identifier: &NSTouchBarItemIdentifier,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a bar item containing a button with the standard text color picker icon that invokes the color picker. Should be used when the item is used for picking text colors.
        #[method(textColorPickerWithIdentifier:)]
        #[unsafe(method_family = none)]
        pub unsafe fn textColorPickerWithIdentifier(
            identifier: &NSTouchBarItemIdentifier,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a bar item containing a button with the standard stroke color picker icon that invokes the color picker. Should be used when the item is used for picking stroke colors.
        #[method(strokeColorPickerWithIdentifier:)]
        #[unsafe(method_family = none)]
        pub unsafe fn strokeColorPickerWithIdentifier(
            identifier: &NSTouchBarItemIdentifier,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "NSImage")]
        #[method(colorPickerWithIdentifier:buttonImage:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorPickerWithIdentifier_buttonImage(
            identifier: &NSTouchBarItemIdentifier,
            image: &NSImage,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "NSColor")]
        #[method(color)]
        #[unsafe(method_family = none)]
        pub unsafe fn color(&self) -> Retained<NSColor>;

        #[cfg(feature = "NSColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setColor(&self, color: &NSColor);

        /// Whether or not the picker should allow picking a color with non-1.0 alpha. Defaults to `!NSColor.ignoresAlpha`.
        #[method(showsAlpha)]
        #[unsafe(method_family = none)]
        pub unsafe fn showsAlpha(&self) -> bool;

        /// Setter for [`showsAlpha`][Self::showsAlpha].
        #[method(setShowsAlpha:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setShowsAlpha(&self, shows_alpha: bool);

        #[cfg(feature = "NSColorSpace")]
        /// Controls the color spaces that the receiver is able to produce. If a color outside of the allowed spaces are displayed or selected, it will first be converted to the first color space in the array. `nil` signifies any color space is allowed. Empty array is an invalid value and will raise an exception if set. Defaults to `nil`.
        #[method(allowedColorSpaces)]
        #[unsafe(method_family = none)]
        pub unsafe fn allowedColorSpaces(&self) -> Option<Retained<NSArray<NSColorSpace>>>;

        #[cfg(feature = "NSColorSpace")]
        /// Setter for [`allowedColorSpaces`][Self::allowedColorSpaces].
        #[method(setAllowedColorSpaces:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowedColorSpaces(
            &self,
            allowed_color_spaces: Option<&NSArray<NSColorSpace>>,
        );

        #[cfg(feature = "NSColorList")]
        /// The color list displayed in the list color picker. Defaults to the standard system color list. Setting a custom color list will disable the additional tints/shades that appear on long-press.
        #[method(colorList)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorList(&self) -> Option<Retained<NSColorList>>;

        #[cfg(feature = "NSColorList")]
        /// Setter for [`colorList`][Self::colorList].
        #[method(setColorList:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorList(&self, color_list: Option<&NSColorList>);

        /// The localized string labelling this item during user customization. The default value is the localized string of "Color Picker".
        #[method(customizationLabel)]
        #[unsafe(method_family = none)]
        pub unsafe fn customizationLabel(&self) -> Retained<NSString>;

        /// Setter for [`customizationLabel`][Self::customizationLabel].
        #[method(setCustomizationLabel:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomizationLabel(&self, customization_label: Option<&NSString>);

        #[method(target)]
        #[unsafe(method_family = none)]
        pub unsafe fn target(&self) -> Option<Retained<AnyObject>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`target`][Self::target].
        #[method(setTarget:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTarget(&self, target: Option<&AnyObject>);

        #[method(action)]
        #[unsafe(method_family = none)]
        pub unsafe fn action(&self) -> Option<Sel>;

        /// Setter for [`action`][Self::action].
        #[method(setAction:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAction(&self, action: Option<Sel>);

        /// Enables or disabled the color picker. If it is currently being shown in a popover, it will be dismissed.
        #[method(isEnabled)]
        #[unsafe(method_family = none)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[method(setEnabled:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSColorPickerTouchBarItem {
        #[method(initWithIdentifier:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSTouchBarItemIdentifier,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSColorPickerTouchBarItem {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
