//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// This type is used to configure a media browser for individual media types.
///
/// Warning: Though this type is declared as a set of mixable options -- and was originally intended to become that eventually -- you should treat it as an enum.
///
/// Warning: In other words, this type should be declared with NS_ENUM rather than NS_OPTIONS, but the latter has historical inertia not worth struggling against.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/appkit/nsmedialibrary?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSMediaLibrary(pub NSUInteger);
bitflags::bitflags! {
    impl NSMediaLibrary: NSUInteger {
        #[doc(alias = "NSMediaLibraryAudio")]
        const Audio = 1<<0;
        #[doc(alias = "NSMediaLibraryImage")]
        const Image = 1<<1;
        #[doc(alias = "NSMediaLibraryMovie")]
        const Movie = 1<<2;
    }
}

unsafe impl Encode for NSMediaLibrary {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSMediaLibrary {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// This class configures and displays a media browser panel.
    ///
    /// This class provides no direct access to the panel, and its meaningful contents aren't in the calling process.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appkit/nsmedialibrarybrowsercontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMediaLibraryBrowserController;
);

unsafe impl NSObjectProtocol for NSMediaLibraryBrowserController {}

extern_methods!(
    unsafe impl NSMediaLibraryBrowserController {
        #[method_id(@__retain_semantics Other sharedMediaLibraryBrowserController)]
        pub unsafe fn sharedMediaLibraryBrowserController(
        ) -> Retained<NSMediaLibraryBrowserController>;

        #[method(isVisible)]
        pub unsafe fn isVisible(&self) -> bool;

        /// Setter for [`isVisible`][Self::isVisible].
        #[method(setVisible:)]
        pub unsafe fn setVisible(&self, visible: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(frame)]
        pub unsafe fn frame(&self) -> NSRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`frame`][Self::frame].
        #[method(setFrame:)]
        pub unsafe fn setFrame(&self, frame: NSRect);

        #[method(mediaLibraries)]
        pub unsafe fn mediaLibraries(&self) -> NSMediaLibrary;

        /// Setter for [`mediaLibraries`][Self::mediaLibraries].
        #[method(setMediaLibraries:)]
        pub unsafe fn setMediaLibraries(&self, media_libraries: NSMediaLibrary);

        #[method(togglePanel:)]
        pub unsafe fn togglePanel(&self, sender: Option<&AnyObject>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSMediaLibraryBrowserController {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
