//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_methods!(
    /// Scripting
    #[cfg(feature = "NSTextStorage")]
    unsafe impl NSTextStorage {
        #[unsafe(method_family(none))]
        #[method_id(attributeRuns)]
        pub unsafe fn attributeRuns(&self) -> Retained<NSArray<NSTextStorage>>;

        /// Setter for [`attributeRuns`][Self::attributeRuns].
        #[method(setAttributeRuns:)]
        pub unsafe fn setAttributeRuns(&self, attribute_runs: &NSArray<NSTextStorage>);

        #[unsafe(method_family(none))]
        #[method_id(paragraphs)]
        pub unsafe fn paragraphs(&self) -> Retained<NSArray<NSTextStorage>>;

        /// Setter for [`paragraphs`][Self::paragraphs].
        #[method(setParagraphs:)]
        pub unsafe fn setParagraphs(&self, paragraphs: &NSArray<NSTextStorage>);

        #[unsafe(method_family(none))]
        #[method_id(words)]
        pub unsafe fn words(&self) -> Retained<NSArray<NSTextStorage>>;

        /// Setter for [`words`][Self::words].
        #[method(setWords:)]
        pub unsafe fn setWords(&self, words: &NSArray<NSTextStorage>);

        #[unsafe(method_family(none))]
        #[method_id(characters)]
        pub unsafe fn characters(&self) -> Retained<NSArray<NSTextStorage>>;

        /// Setter for [`characters`][Self::characters].
        #[method(setCharacters:)]
        pub unsafe fn setCharacters(&self, characters: &NSArray<NSTextStorage>);

        #[cfg(feature = "NSFont")]
        #[unsafe(method_family(none))]
        #[method_id(font)]
        pub unsafe fn font(&self) -> Option<Retained<NSFont>>;

        #[cfg(feature = "NSFont")]
        /// Setter for [`font`][Self::font].
        #[method(setFont:)]
        pub unsafe fn setFont(&self, font: Option<&NSFont>);

        #[cfg(feature = "NSColor")]
        #[unsafe(method_family(none))]
        #[method_id(foregroundColor)]
        pub unsafe fn foregroundColor(&self) -> Option<Retained<NSColor>>;

        #[cfg(feature = "NSColor")]
        /// Setter for [`foregroundColor`][Self::foregroundColor].
        #[method(setForegroundColor:)]
        pub unsafe fn setForegroundColor(&self, foreground_color: Option<&NSColor>);
    }
);
