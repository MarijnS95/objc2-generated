//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(target_vendor = "apple")]
use objc2_quartz_core::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscreen?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSScreen;
);

unsafe impl NSObjectProtocol for NSScreen {}

extern_methods!(
    unsafe impl NSScreen {
        #[method(screens)]
        #[unsafe(method_family = none)]
        pub fn screens(mtm: MainThreadMarker) -> Retained<NSArray<NSScreen>>;

        #[method(mainScreen)]
        #[unsafe(method_family = none)]
        pub fn mainScreen(mtm: MainThreadMarker) -> Option<Retained<NSScreen>>;

        #[method(deepestScreen)]
        #[unsafe(method_family = none)]
        pub unsafe fn deepestScreen(mtm: MainThreadMarker) -> Option<Retained<NSScreen>>;

        #[method(screensHaveSeparateSpaces)]
        #[unsafe(method_family = none)]
        pub unsafe fn screensHaveSeparateSpaces(mtm: MainThreadMarker) -> bool;

        #[cfg(feature = "NSGraphics")]
        #[method(depth)]
        #[unsafe(method_family = none)]
        pub unsafe fn depth(&self) -> NSWindowDepth;

        #[method(frame)]
        #[unsafe(method_family = none)]
        pub fn frame(&self) -> NSRect;

        #[method(visibleFrame)]
        #[unsafe(method_family = none)]
        pub fn visibleFrame(&self) -> NSRect;

        #[cfg(feature = "NSGraphics")]
        #[method(deviceDescription)]
        #[unsafe(method_family = none)]
        pub fn deviceDescription(
            &self,
        ) -> Retained<NSDictionary<NSDeviceDescriptionKey, AnyObject>>;

        #[cfg(feature = "NSColorSpace")]
        #[method(colorSpace)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorSpace(&self) -> Option<Retained<NSColorSpace>>;

        #[cfg(feature = "NSGraphics")]
        #[method(supportedWindowDepths)]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedWindowDepths(&self) -> NonNull<NSWindowDepth>;

        #[cfg(feature = "NSGraphics")]
        #[method(canRepresentDisplayGamut:)]
        #[unsafe(method_family = none)]
        pub unsafe fn canRepresentDisplayGamut(&self, display_gamut: NSDisplayGamut) -> bool;

        #[method(convertRectToBacking:)]
        #[unsafe(method_family = none)]
        pub unsafe fn convertRectToBacking(&self, rect: NSRect) -> NSRect;

        #[method(convertRectFromBacking:)]
        #[unsafe(method_family = none)]
        pub unsafe fn convertRectFromBacking(&self, rect: NSRect) -> NSRect;

        #[method(backingAlignedRect:options:)]
        #[unsafe(method_family = none)]
        pub unsafe fn backingAlignedRect_options(
            &self,
            rect: NSRect,
            options: NSAlignmentOptions,
        ) -> NSRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(backingScaleFactor)]
        #[unsafe(method_family = none)]
        pub fn backingScaleFactor(&self) -> CGFloat;

        #[method(localizedName)]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedName(&self) -> Retained<NSString>;

        #[method(safeAreaInsets)]
        #[unsafe(method_family = none)]
        pub unsafe fn safeAreaInsets(&self) -> NSEdgeInsets;

        #[method(auxiliaryTopLeftArea)]
        #[unsafe(method_family = none)]
        pub unsafe fn auxiliaryTopLeftArea(&self) -> NSRect;

        #[method(auxiliaryTopRightArea)]
        #[unsafe(method_family = none)]
        pub unsafe fn auxiliaryTopRightArea(&self) -> NSRect;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSScreen {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscreencolorspacedidchangenotification?language=objc)
    pub static NSScreenColorSpaceDidChangeNotification: &'static NSNotificationName;
}

extern_methods!(
    unsafe impl NSScreen {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(maximumExtendedDynamicRangeColorComponentValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumExtendedDynamicRangeColorComponentValue(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(maximumPotentialExtendedDynamicRangeColorComponentValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumPotentialExtendedDynamicRangeColorComponentValue(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(maximumReferenceExtendedDynamicRangeColorComponentValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumReferenceExtendedDynamicRangeColorComponentValue(&self) -> CGFloat;
    }
);

extern_methods!(
    unsafe impl NSScreen {
        /// The maximum frames per second this screen supports.
        #[method(maximumFramesPerSecond)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumFramesPerSecond(&self) -> NSInteger;

        /// The minimum refresh interval this screen supports, in seconds.
        ///
        /// This is the shortest amount of time a frame will be present on screen.
        /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
        #[method(minimumRefreshInterval)]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumRefreshInterval(&self) -> NSTimeInterval;

        /// The maximum refresh interval this screen supports, in seconds.
        ///
        /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
        #[method(maximumRefreshInterval)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumRefreshInterval(&self) -> NSTimeInterval;

        /// The update granularity of the screen's current mode, in seconds.
        ///
        /// The display will update at the next boundary defined by the granularity, after the minimum refresh interval has been reached. When 0, the display can update at any time between the minimum and maximum refresh rate intervals of the screen. Fixed refresh rate screen modes will return the refresh interval as the update granularity (e.g. 16.66ms for 60Hz refresh rates), meaning updates only occur at refresh rate boundaries.
        #[method(displayUpdateGranularity)]
        #[unsafe(method_family = none)]
        pub unsafe fn displayUpdateGranularity(&self) -> NSTimeInterval;

        /// The time at which the last framebuffer update occurred on the display, in seconds since startup that the system has been awake.
        #[method(lastDisplayUpdateTimestamp)]
        #[unsafe(method_family = none)]
        pub unsafe fn lastDisplayUpdateTimestamp(&self) -> NSTimeInterval;
    }
);

extern_methods!(
    /// NSDisplayLink
    unsafe impl NSScreen {
        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(target_vendor = "apple")]
        #[method(displayLinkWithTarget:selector:)]
        #[unsafe(method_family = none)]
        pub unsafe fn displayLinkWithTarget_selector(
            &self,
            target: &AnyObject,
            selector: Sel,
        ) -> Retained<CADisplayLink>;
    }
);

extern_methods!(
    /// NSDeprecated
    unsafe impl NSScreen {
        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Use -convertRectToBacking: or -backingScaleFactor instead"]
        #[method(userSpaceScaleFactor)]
        #[unsafe(method_family = none)]
        pub unsafe fn userSpaceScaleFactor(&self) -> CGFloat;
    }
);
