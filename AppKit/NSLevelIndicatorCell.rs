//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nslevelindicatorstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSLevelIndicatorStyle(pub NSUInteger);
impl NSLevelIndicatorStyle {
    #[doc(alias = "NSLevelIndicatorStyleRelevancy")]
    pub const Relevancy: Self = Self(0);
    #[doc(alias = "NSLevelIndicatorStyleContinuousCapacity")]
    pub const ContinuousCapacity: Self = Self(1);
    #[doc(alias = "NSLevelIndicatorStyleDiscreteCapacity")]
    pub const DiscreteCapacity: Self = Self(2);
    #[doc(alias = "NSLevelIndicatorStyleRating")]
    pub const Rating: Self = Self(3);
}

unsafe impl Encode for NSLevelIndicatorStyle {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSLevelIndicatorStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nslevelindicatorcell?language=objc)
    #[unsafe(super(NSActionCell, NSCell, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
    pub struct NSLevelIndicatorCell;
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSActionCell",
    feature = "NSCell"
))]
unsafe impl NSAccessibility for NSLevelIndicatorCell {}

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSActionCell",
    feature = "NSCell"
))]
unsafe impl NSAccessibilityElementProtocol for NSLevelIndicatorCell {}

#[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
unsafe impl NSCoding for NSLevelIndicatorCell {}

#[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
unsafe impl NSCopying for NSLevelIndicatorCell {}

#[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
unsafe impl CopyingHelper for NSLevelIndicatorCell {
    type Result = Self;
}

#[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
unsafe impl NSObjectProtocol for NSLevelIndicatorCell {}

#[cfg(all(
    feature = "NSActionCell",
    feature = "NSCell",
    feature = "NSUserInterfaceItemIdentification"
))]
unsafe impl NSUserInterfaceItemIdentification for NSLevelIndicatorCell {}

extern_methods!(
    #[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
    unsafe impl NSLevelIndicatorCell {
        #[method(initWithLevelIndicatorStyle:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLevelIndicatorStyle(
            this: Allocated<Self>,
            level_indicator_style: NSLevelIndicatorStyle,
        ) -> Retained<Self>;

        #[method(levelIndicatorStyle)]
        #[unsafe(method_family = none)]
        pub unsafe fn levelIndicatorStyle(&self) -> NSLevelIndicatorStyle;

        /// Setter for [`levelIndicatorStyle`][Self::levelIndicatorStyle].
        #[method(setLevelIndicatorStyle:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setLevelIndicatorStyle(&self, level_indicator_style: NSLevelIndicatorStyle);

        #[method(minValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn minValue(&self) -> c_double;

        /// Setter for [`minValue`][Self::minValue].
        #[method(setMinValue:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinValue(&self, min_value: c_double);

        #[method(maxValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn maxValue(&self) -> c_double;

        /// Setter for [`maxValue`][Self::maxValue].
        #[method(setMaxValue:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaxValue(&self, max_value: c_double);

        #[method(warningValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn warningValue(&self) -> c_double;

        /// Setter for [`warningValue`][Self::warningValue].
        #[method(setWarningValue:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setWarningValue(&self, warning_value: c_double);

        #[method(criticalValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn criticalValue(&self) -> c_double;

        /// Setter for [`criticalValue`][Self::criticalValue].
        #[method(setCriticalValue:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCriticalValue(&self, critical_value: c_double);

        #[cfg(feature = "NSSliderCell")]
        #[method(tickMarkPosition)]
        #[unsafe(method_family = none)]
        pub unsafe fn tickMarkPosition(&self) -> NSTickMarkPosition;

        #[cfg(feature = "NSSliderCell")]
        /// Setter for [`tickMarkPosition`][Self::tickMarkPosition].
        #[method(setTickMarkPosition:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTickMarkPosition(&self, tick_mark_position: NSTickMarkPosition);

        #[method(numberOfTickMarks)]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfTickMarks(&self) -> NSInteger;

        /// Setter for [`numberOfTickMarks`][Self::numberOfTickMarks].
        #[method(setNumberOfTickMarks:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setNumberOfTickMarks(&self, number_of_tick_marks: NSInteger);

        #[method(numberOfMajorTickMarks)]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfMajorTickMarks(&self) -> NSInteger;

        /// Setter for [`numberOfMajorTickMarks`][Self::numberOfMajorTickMarks].
        #[method(setNumberOfMajorTickMarks:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setNumberOfMajorTickMarks(&self, number_of_major_tick_marks: NSInteger);

        #[method(rectOfTickMarkAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn rectOfTickMarkAtIndex(&self, index: NSInteger) -> NSRect;

        #[method(tickMarkValueAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn tickMarkValueAtIndex(&self, index: NSInteger) -> c_double;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSCell`
    #[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
    unsafe impl NSLevelIndicatorCell {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(initTextCell:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initTextCell(this: Allocated<Self>, string: &NSString) -> Retained<Self>;

        #[cfg(feature = "NSImage")]
        #[method(initImageCell:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initImageCell(
            this: Allocated<Self>,
            image: Option<&NSImage>,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "NSActionCell", feature = "NSCell"))]
    unsafe impl NSLevelIndicatorCell {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsrelevancylevelindicatorstyle?language=objc)
pub static NSRelevancyLevelIndicatorStyle: NSLevelIndicatorStyle =
    NSLevelIndicatorStyle(NSLevelIndicatorStyle::Relevancy.0);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nscontinuouscapacitylevelindicatorstyle?language=objc)
pub static NSContinuousCapacityLevelIndicatorStyle: NSLevelIndicatorStyle =
    NSLevelIndicatorStyle(NSLevelIndicatorStyle::ContinuousCapacity.0);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsdiscretecapacitylevelindicatorstyle?language=objc)
pub static NSDiscreteCapacityLevelIndicatorStyle: NSLevelIndicatorStyle =
    NSLevelIndicatorStyle(NSLevelIndicatorStyle::DiscreteCapacity.0);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsratinglevelindicatorstyle?language=objc)
pub static NSRatingLevelIndicatorStyle: NSLevelIndicatorStyle =
    NSLevelIndicatorStyle(NSLevelIndicatorStyle::Rating.0);
