//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSFontAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSParagraphStyleAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSForegroundColorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSBackgroundColorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSLigatureAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSKernAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSTrackingAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSStrikethroughStyleAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSUnderlineStyleAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSStrokeColorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSStrokeWidthAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSShadowAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSTextEffectAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSAttachmentAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSLinkAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSBaselineOffsetAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSUnderlineColorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSStrikethroughColorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSWritingDirectionAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSCursorAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSToolTipAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSMarkedClauseSegmentAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSTextAlternativesAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSSpellingStateAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSSuperscriptAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSGlyphInfoAttributeName: &'static NSAttributedStringKey;
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSUnderlineStyle(pub NSInteger);
impl NSUnderlineStyle {
    #[doc(alias = "NSUnderlineStyleNone")]
    pub const None: Self = Self(0x00);
    #[doc(alias = "NSUnderlineStyleSingle")]
    pub const Single: Self = Self(0x01);
    #[doc(alias = "NSUnderlineStyleThick")]
    pub const Thick: Self = Self(0x02);
    #[doc(alias = "NSUnderlineStyleDouble")]
    pub const Double: Self = Self(0x09);
    #[doc(alias = "NSUnderlineStylePatternSolid")]
    pub const PatternSolid: Self = Self(0x0000);
    #[doc(alias = "NSUnderlineStylePatternDot")]
    pub const PatternDot: Self = Self(0x0100);
    #[doc(alias = "NSUnderlineStylePatternDash")]
    pub const PatternDash: Self = Self(0x0200);
    #[doc(alias = "NSUnderlineStylePatternDashDot")]
    pub const PatternDashDot: Self = Self(0x0300);
    #[doc(alias = "NSUnderlineStylePatternDashDotDot")]
    pub const PatternDashDotDot: Self = Self(0x0400);
    #[doc(alias = "NSUnderlineStyleByWord")]
    pub const ByWord: Self = Self(0x8000);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSUnderlineStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSUnderlineStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSWritingDirectionFormatType(pub NSInteger);
impl NSWritingDirectionFormatType {
    pub const NSWritingDirectionEmbedding: Self = Self(0 << 1);
    pub const NSWritingDirectionOverride: Self = Self(1 << 1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSWritingDirectionFormatType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSWritingDirectionFormatType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_TYPED_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSTextEffectStyle = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextEffectLetterpressStyle: &'static NSTextEffectStyle;
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSSpellingState(pub NSInteger);
impl NSSpellingState {
    #[doc(alias = "NSSpellingStateSpellingFlag")]
    pub const SpellingFlag: Self = Self(1 << 0);
    #[doc(alias = "NSSpellingStateGrammarFlag")]
    pub const GrammarFlag: Self = Self(1 << 1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSSpellingState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSSpellingState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    pub unsafe trait NSAttributedStringAttributeFixing {
        #[cfg(feature = "Foundation_NSRange")]
        #[method(fixAttributesInRange:)]
        unsafe fn fixAttributesInRange(&self, range: NSRange);

        #[cfg(feature = "Foundation_NSRange")]
        #[method(fixFontAttributeInRange:)]
        unsafe fn fixFontAttributeInRange(&self, range: NSRange);

        #[cfg(feature = "Foundation_NSRange")]
        #[method(fixParagraphStyleAttributeInRange:)]
        unsafe fn fixParagraphStyleAttributeInRange(&self, range: NSRange);

        #[cfg(feature = "Foundation_NSRange")]
        #[method(fixAttachmentAttributeInRange:)]
        unsafe fn fixAttachmentAttributeInRange(&self, range: NSRange);
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringAttributeFixing for NSMutableAttributedString {}
);

// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSAttributedStringDocumentType = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSPlainTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSRTFTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSRTFDTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSHTMLTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSMacSimpleTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDocFormatTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSWordMLTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSWebArchiveTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSOfficeOpenXMLTextDocumentType: &'static NSAttributedStringDocumentType;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSOpenDocumentTextDocumentType: &'static NSAttributedStringDocumentType;
}

// NS_TYPED_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSTextLayoutSectionKey = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextLayoutSectionOrientation: &'static NSTextLayoutSectionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextLayoutSectionRange: &'static NSTextLayoutSectionKey;
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSTextScalingType(pub NSInteger);
impl NSTextScalingType {
    pub const NSTextScalingStandard: Self = Self(0);
    pub const NSTextScalingiOS: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for NSTextScalingType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for NSTextScalingType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSAttributedStringDocumentAttributeKey = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDocumentTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSConvertedDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCocoaVersionDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSFileTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTitleDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCompanyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCopyrightDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSubjectDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSAuthorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSKeywordsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCommentDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSEditorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCreationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSModificationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSManagerDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCategoryDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSAppearanceDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCharacterEncodingDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDefaultAttributesDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSPaperSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSLeftMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSRightMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTopMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSBottomMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSViewSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSViewZoomDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSViewModeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSReadOnlyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSBackgroundColorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSHyphenationFactorDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDefaultTabIntervalDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextLayoutSectionsAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSExcludedElementsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextEncodingNameDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSPrefixSpacesDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDefaultFontExcludedDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextScalingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSourceTextScalingDocumentAttribute:
        &'static NSAttributedStringDocumentAttributeKey;
}

// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "Foundation_NSString")]
pub type NSAttributedStringDocumentReadingOptionKey = NSString;

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDocumentTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSDefaultAttributesDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSCharacterEncodingDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextEncodingNameDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSBaseURLDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTimeoutDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSWebPreferencesDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSWebResourceLoadDelegateDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTextSizeMultiplierDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSFileTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSTargetTextScalingDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSourceTextScalingDocumentOption:
        &'static NSAttributedStringDocumentReadingOptionKey;
}

extern_category!(
    /// Category on [`NSAttributedString`].
    pub unsafe trait NSAttributedStringDocumentFormats {
        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:options:documentAttributes:error:_)]
        unsafe fn initWithURL_options_documentAttributes_error(
            this: Allocated<Self>,
            url: &NSURL,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithData:options:documentAttributes:error:_)]
        unsafe fn initWithData_options_documentAttributes_error(
            this: Allocated<Self>,
            data: &NSData,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other dataFromRange:documentAttributes:error:_)]
        unsafe fn dataFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Result<Id<NSData>, Id<NSError>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other fileWrapperFromRange:documentAttributes:error:_)]
        unsafe fn fileWrapperFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Result<Id<NSFileWrapper>, Id<NSError>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTF:documentAttributes:)]
        unsafe fn initWithRTF_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTFD:documentAttributes:)]
        unsafe fn initWithRTFD_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:documentAttributes:)]
        unsafe fn initWithHTML_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:baseURL:documentAttributes:)]
        unsafe fn initWithHTML_baseURL_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            base: &NSURL,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithDocFormat:documentAttributes:)]
        unsafe fn initWithDocFormat_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:options:documentAttributes:)]
        unsafe fn initWithHTML_options_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTFDFileWrapper:documentAttributes:)]
        unsafe fn initWithRTFDFileWrapper_documentAttributes(
            this: Allocated<Self>,
            wrapper: &NSFileWrapper,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFFromRange:documentAttributes:)]
        unsafe fn RTFFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFDFromRange:documentAttributes:)]
        unsafe fn RTFDFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFDFileWrapperFromRange:documentAttributes:)]
        unsafe fn RTFDFileWrapperFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSFileWrapper>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other docFormatFromRange:documentAttributes:)]
        unsafe fn docFormatFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringDocumentFormats for NSAttributedString {}
);

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    pub unsafe trait NSMutableAttributedStringDocumentFormats {
        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(readFromURL:options:documentAttributes:error:_)]
        unsafe fn readFromURL_options_documentAttributes_error(
            &self,
            url: &NSURL,
            opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "AppKit_NSAttributedString",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(readFromData:options:documentAttributes:error:_)]
        unsafe fn readFromData_options_documentAttributes_error(
            &self,
            data: &NSData,
            opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<(), Id<NSError>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSMutableAttributedStringDocumentFormats for NSMutableAttributedString {}
);

extern_category!(
    /// Category on [`NSAttributedString`].
    pub unsafe trait NSAttributedStringKitAdditions {
        #[cfg(all(
            feature = "Foundation_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other fontAttributesInRange:)]
        unsafe fn fontAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(all(
            feature = "Foundation_NSAttributedString",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSRange",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other rulerAttributesInRange:)]
        unsafe fn rulerAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(feature = "Foundation_NSRange")]
        #[method(containsAttachmentsInRange:)]
        unsafe fn containsAttachmentsInRange(&self, range: NSRange) -> bool;

        #[cfg(feature = "Foundation_NSRange")]
        #[method(lineBreakBeforeIndex:withinRange:)]
        unsafe fn lineBreakBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            a_range: NSRange,
        ) -> NSUInteger;

        #[cfg(feature = "Foundation_NSRange")]
        #[method(lineBreakByHyphenatingBeforeIndex:withinRange:)]
        unsafe fn lineBreakByHyphenatingBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            a_range: NSRange,
        ) -> NSUInteger;

        #[cfg(feature = "Foundation_NSRange")]
        #[method(doubleClickAtIndex:)]
        unsafe fn doubleClickAtIndex(&self, location: NSUInteger) -> NSRange;

        #[method(nextWordFromIndex:forward:)]
        unsafe fn nextWordFromIndex_forward(
            &self,
            location: NSUInteger,
            is_forward: bool,
        ) -> NSUInteger;

        #[cfg(all(feature = "AppKit_NSTextTable", feature = "Foundation_NSRange"))]
        #[method(rangeOfTextBlock:atIndex:)]
        unsafe fn rangeOfTextBlock_atIndex(
            &self,
            block: &NSTextBlock,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(all(feature = "AppKit_NSTextTable", feature = "Foundation_NSRange"))]
        #[method(rangeOfTextTable:atIndex:)]
        unsafe fn rangeOfTextTable_atIndex(
            &self,
            table: &NSTextTable,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSRange"))]
        #[method(rangeOfTextList:atIndex:)]
        unsafe fn rangeOfTextList_atIndex(
            &self,
            list: &NSTextList,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextList")]
        #[method(itemNumberInTextList:atIndex:)]
        unsafe fn itemNumberInTextList_atIndex(
            &self,
            list: &NSTextList,
            location: NSUInteger,
        ) -> NSInteger;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringKitAdditions for NSAttributedString {}
);

extern_category!(
    /// Category on [`NSAttributedString`].
    pub unsafe trait NSAttributedStringPasteboardAdditions {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textTypes)]
        unsafe fn textTypes() -> Id<NSArray<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textUnfilteredTypes)]
        unsafe fn textUnfilteredTypes() -> Id<NSArray<NSString>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringPasteboardAdditions for NSAttributedString {}
);

#[cfg(all(
    feature = "AppKit_NSPasteboard",
    feature = "Foundation_NSAttributedString"
))]
unsafe impl NSPasteboardReading for NSAttributedString {}

#[cfg(all(
    feature = "AppKit_NSPasteboard",
    feature = "Foundation_NSAttributedString"
))]
unsafe impl NSPasteboardWriting for NSAttributedString {}

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    pub unsafe trait NSMutableAttributedStringKitAdditions {
        #[cfg(feature = "Foundation_NSRange")]
        #[method(superscriptRange:)]
        unsafe fn superscriptRange(&self, range: NSRange);

        #[cfg(feature = "Foundation_NSRange")]
        #[method(subscriptRange:)]
        unsafe fn subscriptRange(&self, range: NSRange);

        #[cfg(feature = "Foundation_NSRange")]
        #[method(unscriptRange:)]
        unsafe fn unscriptRange(&self, range: NSRange);

        #[cfg(all(feature = "AppKit_NSFontManager", feature = "Foundation_NSRange"))]
        #[method(applyFontTraits:range:)]
        unsafe fn applyFontTraits_range(&self, trait_mask: NSFontTraitMask, range: NSRange);

        #[cfg(all(feature = "AppKit_NSText", feature = "Foundation_NSRange"))]
        #[method(setAlignment:range:)]
        unsafe fn setAlignment_range(&self, alignment: NSTextAlignment, range: NSRange);

        #[cfg(all(feature = "AppKit_NSText", feature = "Foundation_NSRange"))]
        #[method(setBaseWritingDirection:range:)]
        unsafe fn setBaseWritingDirection_range(
            &self,
            writing_direction: NSWritingDirection,
            range: NSRange,
        );
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSMutableAttributedStringKitAdditions for NSMutableAttributedString {}
);

pub static NSUnderlinePatternSolid: NSUnderlineStyle =
    NSUnderlineStyle(NSUnderlineStyle::PatternSolid.0);

pub static NSUnderlinePatternDot: NSUnderlineStyle =
    NSUnderlineStyle(NSUnderlineStyle::PatternDot.0);

pub static NSUnderlinePatternDash: NSUnderlineStyle =
    NSUnderlineStyle(NSUnderlineStyle::PatternDash.0);

pub static NSUnderlinePatternDashDot: NSUnderlineStyle =
    NSUnderlineStyle(NSUnderlineStyle::PatternDashDot.0);

pub static NSUnderlinePatternDashDotDot: NSUnderlineStyle =
    NSUnderlineStyle(NSUnderlineStyle::PatternDashDotDot.0);

pub static NSUnderlineByWord: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::ByWord.0);

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSCharacterShapeAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSUsesScreenFontsDocumentAttribute: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSObliquenessAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSExpansionAttributeName: &'static NSAttributedStringKey;
}

extern "C" {
    #[cfg(all(
        feature = "Foundation_NSAttributedString",
        feature = "Foundation_NSString"
    ))]
    pub static NSVerticalGlyphFormAttributeName: &'static NSAttributedStringKey;
}

#[deprecated = "Use NSUnderlineStyleNone instead"]
pub const NSNoUnderlineStyle: c_uint = 0;
#[deprecated = "Use NSUnderlineStyleSingle instead"]
pub const NSSingleUnderlineStyle: c_uint = 1;

extern "C" {
    pub static NSUnderlineStrikethroughMask: NSUInteger;
}

extern "C" {
    pub static NSUnderlineByWordMask: NSUInteger;
}

extern_category!(
    /// Category "NSDeprecatedKitAdditions" on [`NSAttributedString`].
    #[doc(alias = "NSDeprecatedKitAdditions")]
    pub unsafe trait NSAttributedStringNSDeprecatedKitAdditions {
        #[method(containsAttachments)]
        unsafe fn containsAttachments(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textFileTypes)]
        unsafe fn textFileTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textPasteboardTypes)]
        unsafe fn textPasteboardTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textUnfilteredFileTypes)]
        unsafe fn textUnfilteredFileTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textUnfilteredPasteboardTypes)]
        unsafe fn textUnfilteredPasteboardTypes() -> Id<NSArray>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
        #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
        #[method_id(@__retain_semantics Init initWithURL:documentAttributes:)]
        unsafe fn initWithURL_documentAttributes(
            this: Allocated<Self>,
            url: &NSURL,
            dict: Option<&mut Option<Id<NSDictionary>>>,
        ) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
        #[method_id(@__retain_semantics Init initWithPath:documentAttributes:)]
        unsafe fn initWithPath_documentAttributes(
            this: Allocated<Self>,
            path: &NSString,
            dict: Option<&mut Option<Id<NSDictionary>>>,
        ) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSRange", feature = "Foundation_NSURL"))]
        #[deprecated = "Use NSDataDetector instead"]
        #[method_id(@__retain_semantics Other URLAtIndex:effectiveRange:)]
        unsafe fn URLAtIndex_effectiveRange(
            &self,
            location: NSUInteger,
            effective_range: NSRangePointer,
        ) -> Option<Id<NSURL>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringNSDeprecatedKitAdditions for NSAttributedString {}
);
