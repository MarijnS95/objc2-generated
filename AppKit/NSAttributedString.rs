//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSFontAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSParagraphStyleAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSForegroundColorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBackgroundColorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSLigatureAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSKernAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTrackingAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStrikethroughStyleAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSUnderlineStyleAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStrokeColorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStrokeWidthAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSShadowAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextEffectAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSAttachmentAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSLinkAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBaselineOffsetAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSUnderlineColorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStrikethroughColorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSWritingDirectionAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCursorAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSToolTipAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSMarkedClauseSegmentAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextAlternativesAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSpellingStateAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSuperscriptAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSGlyphInfoAttributeName: &'static NSAttributedStringKey);

ns_options!(
    #[underlying(NSInteger)]
    pub enum NSUnderlineStyle {
        #[doc(alias = "NSUnderlineStyleNone")]
        None = 0x00,
        #[doc(alias = "NSUnderlineStyleSingle")]
        Single = 0x01,
        #[doc(alias = "NSUnderlineStyleThick")]
        Thick = 0x02,
        #[doc(alias = "NSUnderlineStyleDouble")]
        Double = 0x09,
        #[doc(alias = "NSUnderlineStylePatternSolid")]
        PatternSolid = 0x0000,
        #[doc(alias = "NSUnderlineStylePatternDot")]
        PatternDot = 0x0100,
        #[doc(alias = "NSUnderlineStylePatternDash")]
        PatternDash = 0x0200,
        #[doc(alias = "NSUnderlineStylePatternDashDot")]
        PatternDashDot = 0x0300,
        #[doc(alias = "NSUnderlineStylePatternDashDotDot")]
        PatternDashDotDot = 0x0400,
        #[doc(alias = "NSUnderlineStyleByWord")]
        ByWord = 0x8000,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSWritingDirectionFormatType {
        NSWritingDirectionEmbedding = 0 << 1,
        NSWritingDirectionOverride = 1 << 1,
    }
);

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSTextEffectStyle = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextEffectLetterpressStyle: &'static NSTextEffectStyle);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSSpellingState {
        #[doc(alias = "NSSpellingStateSpellingFlag")]
        SpellingFlag = 1 << 0,
        #[doc(alias = "NSSpellingStateGrammarFlag")]
        GrammarFlag = 1 << 1,
    }
);

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub unsafe trait NSAttributedStringAttributeFixing {
        #[method(fixAttributesInRange:)]
        unsafe fn fixAttributesInRange(&self, range: NSRange);

        #[method(fixFontAttributeInRange:)]
        unsafe fn fixFontAttributeInRange(&self, range: NSRange);

        #[method(fixParagraphStyleAttributeInRange:)]
        unsafe fn fixParagraphStyleAttributeInRange(&self, range: NSRange);

        #[method(fixAttachmentAttributeInRange:)]
        unsafe fn fixAttachmentAttributeInRange(&self, range: NSRange);
    }

    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSAttributedStringAttributeFixing for NSMutableAttributedString {}
);

#[cfg(feature = "Foundation_NSString")]
typed_extensible_enum!(
    pub type NSAttributedStringDocumentType = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPlainTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSRTFTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSRTFDTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSHTMLTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSMacSimpleTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDocFormatTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSWordMLTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSWebArchiveTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSOfficeOpenXMLTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSOpenDocumentTextDocumentType: &'static NSAttributedStringDocumentType);

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSTextLayoutSectionKey = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextLayoutSectionOrientation: &'static NSTextLayoutSectionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextLayoutSectionRange: &'static NSTextLayoutSectionKey);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextScalingType {
        NSTextScalingStandard = 0,
        NSTextScalingiOS = 1,
    }
);

#[cfg(feature = "Foundation_NSString")]
typed_extensible_enum!(
    pub type NSAttributedStringDocumentAttributeKey = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDocumentTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSConvertedDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCocoaVersionDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSFileTypeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTitleDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCompanyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCopyrightDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSubjectDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSAuthorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSKeywordsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCommentDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSEditorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCreationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSModificationTimeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSManagerDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCategoryDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSAppearanceDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCharacterEncodingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDefaultAttributesDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPaperSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSLeftMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSRightMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTopMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBottomMarginDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSViewSizeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSViewZoomDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSViewModeDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSReadOnlyDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBackgroundColorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSHyphenationFactorDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDefaultTabIntervalDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextLayoutSectionsAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSExcludedElementsDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextEncodingNameDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPrefixSpacesDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDefaultFontExcludedDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextScalingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSourceTextScalingDocumentAttribute: &'static NSAttributedStringDocumentAttributeKey);

#[cfg(feature = "Foundation_NSString")]
typed_extensible_enum!(
    pub type NSAttributedStringDocumentReadingOptionKey = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDocumentTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSDefaultAttributesDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCharacterEncodingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextEncodingNameDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBaseURLDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTimeoutDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSWebPreferencesDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSWebResourceLoadDelegateDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTextSizeMultiplierDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSFileTypeDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSTargetTextScalingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSourceTextScalingDocumentOption: &'static NSAttributedStringDocumentReadingOptionKey);

extern_category!(
    /// Category on [`NSAttributedString`].
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub unsafe trait NSAttributedStringDocumentFormats {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:options:documentAttributes:error:_)]
        unsafe fn initWithURL_options_documentAttributes_error(
            this: Allocated<Self>,
            url: &NSURL,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithData:options:documentAttributes:error:_)]
        unsafe fn initWithData_options_documentAttributes_error(
            this: Allocated<Self>,
            data: &NSData,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other dataFromRange:documentAttributes:error:_)]
        unsafe fn dataFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Result<Id<NSData>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other fileWrapperFromRange:documentAttributes:error:_)]
        unsafe fn fileWrapperFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Result<Id<NSFileWrapper>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTF:documentAttributes:)]
        unsafe fn initWithRTF_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTFD:documentAttributes:)]
        unsafe fn initWithRTFD_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:documentAttributes:)]
        unsafe fn initWithHTML_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:baseURL:documentAttributes:)]
        unsafe fn initWithHTML_baseURL_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            base: &NSURL,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithDocFormat:documentAttributes:)]
        unsafe fn initWithDocFormat_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:options:documentAttributes:)]
        unsafe fn initWithHTML_options_documentAttributes(
            this: Allocated<Self>,
            data: &NSData,
            options: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithRTFDFileWrapper:documentAttributes:)]
        unsafe fn initWithRTFDFileWrapper_documentAttributes(
            this: Allocated<Self>,
            wrapper: &NSFileWrapper,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Option<Id<Self>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFFromRange:documentAttributes:)]
        unsafe fn RTFFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFDFromRange:documentAttributes:)]
        unsafe fn RTFDFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other RTFDFileWrapperFromRange:documentAttributes:)]
        unsafe fn RTFDFileWrapperFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSFileWrapper>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other docFormatFromRange:documentAttributes:)]
        unsafe fn docFormatFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>,
        ) -> Option<Id<NSData>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringDocumentFormats for NSAttributedString {}
);

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub unsafe trait NSMutableAttributedStringDocumentFormats {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(readFromURL:options:documentAttributes:error:_)]
        unsafe fn readFromURL_options_documentAttributes_error(
            &self,
            url: &NSURL,
            opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(readFromData:options:documentAttributes:error:_)]
        unsafe fn readFromData_options_documentAttributes_error(
            &self,
            data: &NSData,
            opts: &NSDictionary<NSAttributedStringDocumentReadingOptionKey, AnyObject>,
            dict: Option<
                &mut Option<Id<NSDictionary<NSAttributedStringDocumentAttributeKey, AnyObject>>>,
            >,
        ) -> Result<(), Id<NSError>>;
    }

    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedStringDocumentFormats for NSMutableAttributedString {}
);

extern_category!(
    /// Category on [`NSAttributedString`].
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub unsafe trait NSAttributedStringKitAdditions {
        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other fontAttributesInRange:)]
        unsafe fn fontAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other rulerAttributesInRange:)]
        unsafe fn rulerAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[method(containsAttachmentsInRange:)]
        unsafe fn containsAttachmentsInRange(&self, range: NSRange) -> bool;

        #[method(lineBreakBeforeIndex:withinRange:)]
        unsafe fn lineBreakBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            a_range: NSRange,
        ) -> NSUInteger;

        #[method(lineBreakByHyphenatingBeforeIndex:withinRange:)]
        unsafe fn lineBreakByHyphenatingBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            a_range: NSRange,
        ) -> NSUInteger;

        #[method(doubleClickAtIndex:)]
        unsafe fn doubleClickAtIndex(&self, location: NSUInteger) -> NSRange;

        #[method(nextWordFromIndex:forward:)]
        unsafe fn nextWordFromIndex_forward(
            &self,
            location: NSUInteger,
            is_forward: bool,
        ) -> NSUInteger;

        #[cfg(feature = "AppKit_NSTextBlock")]
        #[method(rangeOfTextBlock:atIndex:)]
        unsafe fn rangeOfTextBlock_atIndex(
            &self,
            block: &NSTextBlock,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextTable")]
        #[method(rangeOfTextTable:atIndex:)]
        unsafe fn rangeOfTextTable_atIndex(
            &self,
            table: &NSTextTable,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextList")]
        #[method(rangeOfTextList:atIndex:)]
        unsafe fn rangeOfTextList_atIndex(
            &self,
            list: &NSTextList,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextList")]
        #[method(itemNumberInTextList:atIndex:)]
        unsafe fn itemNumberInTextList_atIndex(
            &self,
            list: &NSTextList,
            location: NSUInteger,
        ) -> NSInteger;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringKitAdditions for NSAttributedString {}
);

extern_category!(
    /// Category on [`NSAttributedString`].
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub unsafe trait NSAttributedStringPasteboardAdditions {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textTypes)]
        unsafe fn textTypes() -> Id<NSArray<NSString>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textUnfilteredTypes)]
        unsafe fn textUnfilteredTypes() -> Id<NSArray<NSString>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringPasteboardAdditions for NSAttributedString {}
);

#[cfg(feature = "Foundation_NSAttributedString")]
unsafe impl NSPasteboardReading for NSAttributedString {}

#[cfg(feature = "Foundation_NSAttributedString")]
unsafe impl NSPasteboardWriting for NSAttributedString {}

extern_category!(
    /// Category on [`NSMutableAttributedString`].
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    pub unsafe trait NSMutableAttributedStringKitAdditions {
        #[method(superscriptRange:)]
        unsafe fn superscriptRange(&self, range: NSRange);

        #[method(subscriptRange:)]
        unsafe fn subscriptRange(&self, range: NSRange);

        #[method(unscriptRange:)]
        unsafe fn unscriptRange(&self, range: NSRange);

        #[method(applyFontTraits:range:)]
        unsafe fn applyFontTraits_range(&self, trait_mask: NSFontTraitMask, range: NSRange);

        #[method(setAlignment:range:)]
        unsafe fn setAlignment_range(&self, alignment: NSTextAlignment, range: NSRange);

        #[method(setBaseWritingDirection:range:)]
        unsafe fn setBaseWritingDirection_range(
            &self,
            writing_direction: NSWritingDirection,
            range: NSRange,
        );
    }

    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedStringKitAdditions for NSMutableAttributedString {}
);

extern_static!(NSUnderlinePatternSolid: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::PatternSolid.0));

extern_static!(NSUnderlinePatternDot: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::PatternDot.0));

extern_static!(NSUnderlinePatternDash: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::PatternDash.0));

extern_static!(NSUnderlinePatternDashDot: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::PatternDashDot.0));

extern_static!(NSUnderlinePatternDashDotDot: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::PatternDashDotDot.0));

extern_static!(NSUnderlineByWord: NSUnderlineStyle = NSUnderlineStyle(NSUnderlineStyle::ByWord.0));

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCharacterShapeAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSUsesScreenFontsDocumentAttribute: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSObliquenessAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSExpansionAttributeName: &'static NSAttributedStringKey);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSVerticalGlyphFormAttributeName: &'static NSAttributedStringKey);

#[deprecated = "Use NSUnderlineStyleNone instead"]
pub const NSNoUnderlineStyle: c_uint = 0;
#[deprecated = "Use NSUnderlineStyleSingle instead"]
pub const NSSingleUnderlineStyle: c_uint = 1;

extern_static!(NSUnderlineStrikethroughMask: NSUInteger);

extern_static!(NSUnderlineByWordMask: NSUInteger);

extern_category!(
    /// Category "NSDeprecatedKitAdditions" on [`NSAttributedString`].
    #[doc(alias = "NSDeprecatedKitAdditions")]
    #[cfg(feature = "Foundation_NSAttributedString")]
    pub unsafe trait NSAttributedStringNSDeprecatedKitAdditions {
        #[method(containsAttachments)]
        unsafe fn containsAttachments(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textFileTypes)]
        unsafe fn textFileTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textPasteboardTypes)]
        unsafe fn textPasteboardTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textUnfilteredFileTypes)]
        unsafe fn textUnfilteredFileTypes() -> Id<NSArray>;

        #[cfg(feature = "Foundation_NSArray")]
        #[deprecated]
        #[method_id(@__retain_semantics Other textUnfilteredPasteboardTypes)]
        unsafe fn textUnfilteredPasteboardTypes() -> Id<NSArray>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
        #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
        #[method_id(@__retain_semantics Init initWithURL:documentAttributes:)]
        unsafe fn initWithURL_documentAttributes(
            this: Allocated<Self>,
            url: &NSURL,
            dict: Option<&mut Option<Id<NSDictionary>>>,
        ) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[deprecated = "Use -initWithURL:options:documentAttributes:error: instead"]
        #[method_id(@__retain_semantics Init initWithPath:documentAttributes:)]
        unsafe fn initWithPath_documentAttributes(
            this: Allocated<Self>,
            path: &NSString,
            dict: Option<&mut Option<Id<NSDictionary>>>,
        ) -> Option<Id<Self>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated = "Use NSDataDetector instead"]
        #[method_id(@__retain_semantics Other URLAtIndex:effectiveRange:)]
        unsafe fn URLAtIndex_effectiveRange(
            &self,
            location: NSUInteger,
            effective_range: NSRangePointer,
        ) -> Option<Id<NSURL>>;
    }

    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedStringNSDeprecatedKitAdditions for NSAttributedString {}
);
