//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsdocumentcontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDocumentController;
);

unsafe impl NSCoding for NSDocumentController {}

#[cfg(feature = "NSMenu")]
unsafe impl NSMenuItemValidation for NSDocumentController {}

unsafe impl NSObjectProtocol for NSDocumentController {}

#[cfg(feature = "NSUserInterfaceValidation")]
unsafe impl NSUserInterfaceValidations for NSDocumentController {}

extern_methods!(
    unsafe impl NSDocumentController {
        #[method(sharedDocumentController)]
        #[unsafe(method_family = none)]
        pub unsafe fn sharedDocumentController(
            mtm: MainThreadMarker,
        ) -> Retained<NSDocumentController>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSDocument")]
        #[method(documents)]
        #[unsafe(method_family = none)]
        pub unsafe fn documents(&self) -> Retained<NSArray<NSDocument>>;

        #[cfg(feature = "NSDocument")]
        #[method(currentDocument)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentDocument(&self) -> Option<Retained<NSDocument>>;

        #[method(currentDirectory)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentDirectory(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "NSDocument")]
        #[method(documentForURL:)]
        #[unsafe(method_family = none)]
        pub unsafe fn documentForURL(&self, url: &NSURL) -> Option<Retained<NSDocument>>;

        #[cfg(all(feature = "NSDocument", feature = "NSResponder", feature = "NSWindow"))]
        #[method(documentForWindow:)]
        #[unsafe(method_family = none)]
        pub unsafe fn documentForWindow(&self, window: &NSWindow) -> Option<Retained<NSDocument>>;

        #[cfg(feature = "NSDocument")]
        #[method(addDocument:)]
        #[unsafe(method_family = none)]
        pub unsafe fn addDocument(&self, document: &NSDocument);

        #[cfg(feature = "NSDocument")]
        #[method(removeDocument:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeDocument(&self, document: &NSDocument);

        #[method(newDocument:)]
        #[unsafe(method_family = none)]
        pub unsafe fn newDocument(&self, sender: Option<&AnyObject>);

        #[cfg(feature = "NSDocument")]
        #[method(openUntitledDocumentAndDisplay:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn openUntitledDocumentAndDisplay_error(
            &self,
            display_document: bool,
        ) -> Result<Retained<NSDocument>, Retained<NSError>>;

        #[cfg(feature = "NSDocument")]
        #[method(makeUntitledDocumentOfType:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeUntitledDocumentOfType_error(
            &self,
            type_name: &NSString,
        ) -> Result<Retained<NSDocument>, Retained<NSError>>;

        #[method(openDocument:)]
        #[unsafe(method_family = none)]
        pub unsafe fn openDocument(&self, sender: Option<&AnyObject>);

        #[method(URLsFromRunningOpenPanel)]
        #[unsafe(method_family = none)]
        pub unsafe fn URLsFromRunningOpenPanel(&self) -> Option<Retained<NSArray<NSURL>>>;

        #[cfg(all(
            feature = "NSOpenPanel",
            feature = "NSPanel",
            feature = "NSResponder",
            feature = "NSSavePanel",
            feature = "NSWindow"
        ))]
        #[method(runModalOpenPanel:forTypes:)]
        #[unsafe(method_family = none)]
        pub unsafe fn runModalOpenPanel_forTypes(
            &self,
            open_panel: &NSOpenPanel,
            types: Option<&NSArray<NSString>>,
        ) -> NSInteger;

        #[cfg(feature = "block2")]
        #[method(beginOpenPanelWithCompletionHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn beginOpenPanelWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<NSURL>)>,
        );

        #[cfg(all(
            feature = "NSOpenPanel",
            feature = "NSPanel",
            feature = "NSResponder",
            feature = "NSSavePanel",
            feature = "NSWindow",
            feature = "block2"
        ))]
        #[method(beginOpenPanel:forTypes:completionHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn beginOpenPanel_forTypes_completionHandler(
            &self,
            open_panel: &NSOpenPanel,
            in_types: Option<&NSArray<NSString>>,
            completion_handler: &block2::Block<dyn Fn(NSInteger)>,
        );

        #[cfg(all(feature = "NSDocument", feature = "block2"))]
        #[method(openDocumentWithContentsOfURL:display:completionHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn openDocumentWithContentsOfURL_display_completionHandler(
            &self,
            url: &NSURL,
            display_document: bool,
            completion_handler: &block2::Block<dyn Fn(*mut NSDocument, Bool, *mut NSError)>,
        );

        #[cfg(feature = "NSDocument")]
        #[method(makeDocumentWithContentsOfURL:ofType:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeDocumentWithContentsOfURL_ofType_error(
            &self,
            url: &NSURL,
            type_name: &NSString,
        ) -> Result<Retained<NSDocument>, Retained<NSError>>;

        #[cfg(all(feature = "NSDocument", feature = "block2"))]
        #[method(reopenDocumentForURL:withContentsOfURL:display:completionHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn reopenDocumentForURL_withContentsOfURL_display_completionHandler(
            &self,
            url_or_nil: Option<&NSURL>,
            contents_url: &NSURL,
            display_document: bool,
            completion_handler: &block2::Block<dyn Fn(*mut NSDocument, Bool, *mut NSError)>,
        );

        #[cfg(feature = "NSDocument")]
        #[method(makeDocumentForURL:withContentsOfURL:ofType:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeDocumentForURL_withContentsOfURL_ofType_error(
            &self,
            url_or_nil: Option<&NSURL>,
            contents_url: &NSURL,
            type_name: &NSString,
        ) -> Result<Retained<NSDocument>, Retained<NSError>>;

        #[method(autosavingDelay)]
        #[unsafe(method_family = none)]
        pub unsafe fn autosavingDelay(&self) -> NSTimeInterval;

        /// Setter for [`autosavingDelay`][Self::autosavingDelay].
        #[method(setAutosavingDelay:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutosavingDelay(&self, autosaving_delay: NSTimeInterval);

        #[method(saveAllDocuments:)]
        #[unsafe(method_family = none)]
        pub unsafe fn saveAllDocuments(&self, sender: Option<&AnyObject>);

        #[method(hasEditedDocuments)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasEditedDocuments(&self) -> bool;

        #[method(reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:)]
        #[unsafe(method_family = none)]
        pub unsafe fn reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo(
            &self,
            title: Option<&NSString>,
            cancellable: bool,
            delegate: Option<&AnyObject>,
            did_review_all_selector: Option<Sel>,
            context_info: *mut c_void,
        );

        #[method(closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:)]
        #[unsafe(method_family = none)]
        pub unsafe fn closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo(
            &self,
            delegate: Option<&AnyObject>,
            did_close_all_selector: Option<Sel>,
            context_info: *mut c_void,
        );

        #[cfg(feature = "NSDocument")]
        #[method(duplicateDocumentWithContentsOfURL:copying:displayName:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn duplicateDocumentWithContentsOfURL_copying_displayName_error(
            &self,
            url: &NSURL,
            duplicate_by_copying: bool,
            display_name_or_nil: Option<&NSString>,
        ) -> Result<Retained<NSDocument>, Retained<NSError>>;

        #[method(allowsAutomaticShareMenu)]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsAutomaticShareMenu(&self) -> bool;

        #[cfg(feature = "NSMenuItem")]
        #[method(standardShareMenuItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn standardShareMenuItem(&self) -> Retained<NSMenuItem>;

        #[cfg(all(feature = "NSResponder", feature = "NSWindow"))]
        #[method(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentError_modalForWindow_delegate_didPresentSelector_contextInfo(
            &self,
            error: &NSError,
            window: &NSWindow,
            delegate: Option<&AnyObject>,
            did_present_selector: Option<Sel>,
            context_info: *mut c_void,
        );

        #[method(presentError:)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentError(&self, error: &NSError) -> bool;

        #[method(willPresentError:)]
        #[unsafe(method_family = none)]
        pub unsafe fn willPresentError(&self, error: &NSError) -> Retained<NSError>;

        #[method(maximumRecentDocumentCount)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumRecentDocumentCount(&self) -> NSUInteger;

        #[method(clearRecentDocuments:)]
        #[unsafe(method_family = none)]
        pub unsafe fn clearRecentDocuments(&self, sender: Option<&AnyObject>);

        #[cfg(feature = "NSDocument")]
        #[method(noteNewRecentDocument:)]
        #[unsafe(method_family = none)]
        pub unsafe fn noteNewRecentDocument(&self, document: &NSDocument);

        #[method(noteNewRecentDocumentURL:)]
        #[unsafe(method_family = none)]
        pub unsafe fn noteNewRecentDocumentURL(&self, url: &NSURL);

        #[method(recentDocumentURLs)]
        #[unsafe(method_family = none)]
        pub unsafe fn recentDocumentURLs(&self) -> Retained<NSArray<NSURL>>;

        #[method(defaultType)]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultType(&self) -> Option<Retained<NSString>>;

        #[method(typeForContentsOfURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn typeForContentsOfURL_error(
            &self,
            url: &NSURL,
        ) -> Result<Retained<NSString>, Retained<NSError>>;

        #[method(documentClassNames)]
        #[unsafe(method_family = none)]
        pub unsafe fn documentClassNames(&self) -> Retained<NSArray<NSString>>;

        #[method(documentClassForType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn documentClassForType(
            &self,
            type_name: &NSString,
        ) -> Option<&'static AnyClass>;

        #[method(displayNameForType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn displayNameForType(&self, type_name: &NSString)
            -> Option<Retained<NSString>>;

        #[cfg(feature = "NSUserInterfaceValidation")]
        #[method(validateUserInterfaceItem:)]
        #[unsafe(method_family = none)]
        pub unsafe fn validateUserInterfaceItem(
            &self,
            item: &ProtocolObject<dyn NSValidatedUserInterfaceItem>,
        ) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSDocumentController {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// NSDeprecated
    unsafe impl NSDocumentController {
        #[deprecated = "Use -openDocumentWithContentsOfURL:display:completionHandler: instead"]
        #[method(openDocumentWithContentsOfURL:display:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn openDocumentWithContentsOfURL_display_error(
            &self,
            url: &NSURL,
            display_document: bool,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        #[deprecated = "Use -reopenDocumentForURL:withContentsOfURL:display:completionHandler: instead"]
        #[method(reopenDocumentForURL:withContentsOfURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn reopenDocumentForURL_withContentsOfURL_error(
            &self,
            url: Option<&NSURL>,
            contents_url: &NSURL,
        ) -> Result<(), Retained<NSError>>;

        #[deprecated]
        #[method(fileExtensionsFromType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileExtensionsFromType(
            &self,
            type_name: &NSString,
        ) -> Option<Retained<NSArray>>;

        #[deprecated]
        #[method(typeFromFileExtension:)]
        #[unsafe(method_family = none)]
        pub unsafe fn typeFromFileExtension(
            &self,
            file_name_extension_or_hfs_file_type: &NSString,
        ) -> Option<Retained<NSString>>;

        #[deprecated]
        #[method(documentForFileName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn documentForFileName(
            &self,
            file_name: &NSString,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(fileNamesFromRunningOpenPanel)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileNamesFromRunningOpenPanel(&self) -> Option<Retained<NSArray>>;

        #[deprecated]
        #[method(makeDocumentWithContentsOfFile:ofType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeDocumentWithContentsOfFile_ofType(
            &self,
            file_name: &NSString,
            r#type: &NSString,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(makeDocumentWithContentsOfURL:ofType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeDocumentWithContentsOfURL_ofType(
            &self,
            url: &NSURL,
            r#type: Option<&NSString>,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(makeUntitledDocumentOfType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeUntitledDocumentOfType(
            &self,
            r#type: &NSString,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(openDocumentWithContentsOfFile:display:)]
        #[unsafe(method_family = none)]
        pub unsafe fn openDocumentWithContentsOfFile_display(
            &self,
            file_name: &NSString,
            display: bool,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(openDocumentWithContentsOfURL:display:)]
        #[unsafe(method_family = none)]
        pub unsafe fn openDocumentWithContentsOfURL_display(
            &self,
            url: &NSURL,
            display: bool,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(openUntitledDocumentOfType:display:)]
        #[unsafe(method_family = none)]
        pub unsafe fn openUntitledDocumentOfType_display(
            &self,
            r#type: &NSString,
            display: bool,
        ) -> Option<Retained<AnyObject>>;

        #[deprecated]
        #[method(setShouldCreateUI:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setShouldCreateUI(&self, flag: bool);

        #[deprecated]
        #[method(shouldCreateUI)]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldCreateUI(&self) -> bool;
    }
);
