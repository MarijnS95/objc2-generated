//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsslideraccessorywidth?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type NSSliderAccessoryWidth = CGFloat;

extern "C" {
    /// The default width for slider accessories.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appkit/nsslideraccessorywidthdefault?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static NSSliderAccessoryWidthDefault: NSSliderAccessoryWidth;
}

extern "C" {
    /// The standard "wide" width for slider accessories.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appkit/nsslideraccessorywidthwide?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static NSSliderAccessoryWidthWide: NSSliderAccessoryWidth;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsslidertouchbaritem?language=objc)
    #[unsafe(super(NSTouchBarItem, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSTouchBarItem")]
    pub struct NSSliderTouchBarItem;
);

#[cfg(feature = "NSTouchBarItem")]
unsafe impl NSCoding for NSSliderTouchBarItem {}

#[cfg(feature = "NSTouchBarItem")]
unsafe impl NSObjectProtocol for NSSliderTouchBarItem {}

extern_methods!(
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSSliderTouchBarItem {
        #[cfg(all(
            feature = "NSResponder",
            feature = "NSUserInterfaceCompression",
            feature = "NSView"
        ))]
        #[method_id(@__retain_semantics Other view)]
        pub unsafe fn view(&self) -> Retained<NSView>;

        #[cfg(all(
            feature = "NSControl",
            feature = "NSResponder",
            feature = "NSSlider",
            feature = "NSView"
        ))]
        /// The slider displayed by the bar item. It is automatically created, but can be set to a custom subclass. doubleValue, minValue, maxValue, etc can all be read and set through the slider.
        #[method_id(@__retain_semantics Other slider)]
        pub unsafe fn slider(&self) -> Retained<NSSlider>;

        #[cfg(all(
            feature = "NSControl",
            feature = "NSResponder",
            feature = "NSSlider",
            feature = "NSView"
        ))]
        /// Setter for [`slider`][Self::slider].
        #[method(setSlider:)]
        pub unsafe fn setSlider(&self, slider: &NSSlider);

        /// The double value of the control
        #[method(doubleValue)]
        pub unsafe fn doubleValue(&self) -> c_double;

        /// Setter for [`doubleValue`][Self::doubleValue].
        #[method(setDoubleValue:)]
        pub unsafe fn setDoubleValue(&self, double_value: c_double);

        #[cfg(feature = "objc2-core-foundation")]
        /// The width boundaries of the slider track of this item.
        /// The system defines the default minimum. The maximum defaults to MAXFLOAT
        #[method(minimumSliderWidth)]
        pub unsafe fn minimumSliderWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`minimumSliderWidth`][Self::minimumSliderWidth].
        #[method(setMinimumSliderWidth:)]
        pub unsafe fn setMinimumSliderWidth(&self, minimum_slider_width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(maximumSliderWidth)]
        pub unsafe fn maximumSliderWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumSliderWidth`][Self::maximumSliderWidth].
        #[method(setMaximumSliderWidth:)]
        pub unsafe fn setMaximumSliderWidth(&self, maximum_slider_width: CGFloat);

        /// The text label displayed along with the slider. If set to nil, the label will not have space reserved in the item.
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        /// Setter for [`label`][Self::label].
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);

        #[cfg(feature = "NSSliderAccessory")]
        /// The accessory that appears on the end of the slider with the minimum value
        #[method_id(@__retain_semantics Other minimumValueAccessory)]
        pub unsafe fn minimumValueAccessory(&self) -> Option<Retained<NSSliderAccessory>>;

        #[cfg(feature = "NSSliderAccessory")]
        /// Setter for [`minimumValueAccessory`][Self::minimumValueAccessory].
        #[method(setMinimumValueAccessory:)]
        pub unsafe fn setMinimumValueAccessory(
            &self,
            minimum_value_accessory: Option<&NSSliderAccessory>,
        );

        #[cfg(feature = "NSSliderAccessory")]
        /// The accessory that appears on the end of the slider with the maximum value
        #[method_id(@__retain_semantics Other maximumValueAccessory)]
        pub unsafe fn maximumValueAccessory(&self) -> Option<Retained<NSSliderAccessory>>;

        #[cfg(feature = "NSSliderAccessory")]
        /// Setter for [`maximumValueAccessory`][Self::maximumValueAccessory].
        #[method(setMaximumValueAccessory:)]
        pub unsafe fn setMaximumValueAccessory(
            &self,
            maximum_value_accessory: Option<&NSSliderAccessory>,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The width of the value accessories. Defaults to `.default`, but can be set to `.wide` or a custom value.
        #[method(valueAccessoryWidth)]
        pub unsafe fn valueAccessoryWidth(&self) -> NSSliderAccessoryWidth;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`valueAccessoryWidth`][Self::valueAccessoryWidth].
        #[method(setValueAccessoryWidth:)]
        pub unsafe fn setValueAccessoryWidth(&self, value_accessory_width: NSSliderAccessoryWidth);

        /// The target of the item, notified when the slider or accessories receive user interaction.
        #[method_id(@__retain_semantics Other target)]
        pub unsafe fn target(&self) -> Option<Retained<AnyObject>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`target`][Self::target].
        #[method(setTarget:)]
        pub unsafe fn setTarget(&self, target: Option<&AnyObject>);

        /// The action of the item, called when the slider or accessories receive user interaction.
        #[method(action)]
        pub unsafe fn action(&self) -> Option<Sel>;

        /// Setter for [`action`][Self::action].
        #[method(setAction:)]
        pub unsafe fn setAction(&self, action: Option<Sel>);

        /// The localized string labelling this item during user customization. The default value is empty string.
        #[method_id(@__retain_semantics Other customizationLabel)]
        pub unsafe fn customizationLabel(&self) -> Retained<NSString>;

        /// Setter for [`customizationLabel`][Self::customizationLabel].
        #[method(setCustomizationLabel:)]
        pub unsafe fn setCustomizationLabel(&self, customization_label: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSSliderTouchBarItem {
        #[method_id(@__retain_semantics Init initWithIdentifier:)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSTouchBarItemIdentifier,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSTouchBarItem")]
    unsafe impl NSSliderTouchBarItem {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
