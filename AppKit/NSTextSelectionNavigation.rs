//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionNavigationDirection {
        #[doc(alias = "NSTextSelectionNavigationDirectionForward")]
        Forward = 0,
        #[doc(alias = "NSTextSelectionNavigationDirectionBackward")]
        Backward = 1,
        #[doc(alias = "NSTextSelectionNavigationDirectionRight")]
        Right = 2,
        #[doc(alias = "NSTextSelectionNavigationDirectionLeft")]
        Left = 3,
        #[doc(alias = "NSTextSelectionNavigationDirectionUp")]
        Up = 4,
        #[doc(alias = "NSTextSelectionNavigationDirectionDown")]
        Down = 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionNavigationDestination {
        #[doc(alias = "NSTextSelectionNavigationDestinationCharacter")]
        Character = 0,
        #[doc(alias = "NSTextSelectionNavigationDestinationWord")]
        Word = 1,
        #[doc(alias = "NSTextSelectionNavigationDestinationLine")]
        Line = 2,
        #[doc(alias = "NSTextSelectionNavigationDestinationSentence")]
        Sentence = 3,
        #[doc(alias = "NSTextSelectionNavigationDestinationParagraph")]
        Paragraph = 4,
        #[doc(alias = "NSTextSelectionNavigationDestinationContainer")]
        Container = 5,
        #[doc(alias = "NSTextSelectionNavigationDestinationDocument")]
        Document = 6,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSTextSelectionNavigationModifier {
        #[doc(alias = "NSTextSelectionNavigationModifierExtend")]
        Extend = 1 << 0,
        #[doc(alias = "NSTextSelectionNavigationModifierVisual")]
        Visual = 1 << 1,
        #[doc(alias = "NSTextSelectionNavigationModifierMultiple")]
        Multiple = 1 << 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionNavigationWritingDirection {
        #[doc(alias = "NSTextSelectionNavigationWritingDirectionLeftToRight")]
        LeftToRight = 0,
        #[doc(alias = "NSTextSelectionNavigationWritingDirectionRightToLeft")]
        RightToLeft = 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextSelectionNavigationLayoutOrientation {
        #[doc(alias = "NSTextSelectionNavigationLayoutOrientationHorizontal")]
        Horizontal = 0,
        #[doc(alias = "NSTextSelectionNavigationLayoutOrientationVertical")]
        Vertical = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextSelectionNavigation;

    unsafe impl ClassType for NSTextSelectionNavigation {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSTextSelectionNavigation {}

extern_methods!(
    unsafe impl NSTextSelectionNavigation {
        #[method_id(@__retain_semantics Init initWithDataSource:)]
        pub unsafe fn initWithDataSource(
            this: Allocated<Self>,
            data_source: &ProtocolObject<dyn NSTextSelectionDataSource>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics Other textSelectionDataSource)]
        pub unsafe fn textSelectionDataSource(
            &self,
        ) -> Option<Id<ProtocolObject<dyn NSTextSelectionDataSource>>>;

        #[method(allowsNonContiguousRanges)]
        pub unsafe fn allowsNonContiguousRanges(&self) -> bool;

        #[method(setAllowsNonContiguousRanges:)]
        pub unsafe fn setAllowsNonContiguousRanges(&self, allows_non_contiguous_ranges: bool);

        #[method(rotatesCoordinateSystemForLayoutOrientation)]
        pub unsafe fn rotatesCoordinateSystemForLayoutOrientation(&self) -> bool;

        #[method(setRotatesCoordinateSystemForLayoutOrientation:)]
        pub unsafe fn setRotatesCoordinateSystemForLayoutOrientation(
            &self,
            rotates_coordinate_system_for_layout_orientation: bool,
        );

        #[method(flushLayoutCache)]
        pub unsafe fn flushLayoutCache(&self);

        #[cfg(feature = "AppKit_NSTextSelection")]
        #[method_id(@__retain_semantics Other destinationSelectionForTextSelection:direction:destination:extending:confined:)]
        pub unsafe fn destinationSelectionForTextSelection_direction_destination_extending_confined(
            &self,
            text_selection: &NSTextSelection,
            direction: NSTextSelectionNavigationDirection,
            destination: NSTextSelectionNavigationDestination,
            extending: bool,
            confined: bool,
        ) -> Option<Id<NSTextSelection>>;

        #[cfg(all(
            feature = "AppKit_NSTextRange",
            feature = "AppKit_NSTextSelection",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSGeometry"
        ))]
        #[method_id(@__retain_semantics Other textSelectionsInteractingAtPoint:inContainerAtLocation:anchors:modifiers:selecting:bounds:)]
        pub unsafe fn textSelectionsInteractingAtPoint_inContainerAtLocation_anchors_modifiers_selecting_bounds(
            &self,
            point: CGPoint,
            container_location: &ProtocolObject<dyn NSTextLocation>,
            anchors: &NSArray<NSTextSelection>,
            modifiers: NSTextSelectionNavigationModifier,
            selecting: bool,
            bounds: CGRect,
        ) -> Id<NSArray<NSTextSelection>>;

        #[cfg(feature = "AppKit_NSTextSelection")]
        #[method_id(@__retain_semantics Other textSelectionForSelectionGranularity:enclosingTextSelection:)]
        pub unsafe fn textSelectionForSelectionGranularity_enclosingTextSelection(
            &self,
            selection_granularity: NSTextSelectionGranularity,
            text_selection: &NSTextSelection,
        ) -> Id<NSTextSelection>;

        #[cfg(all(
            feature = "AppKit_NSTextRange",
            feature = "AppKit_NSTextSelection",
            feature = "Foundation_NSGeometry"
        ))]
        #[method_id(@__retain_semantics Other textSelectionForSelectionGranularity:enclosingPoint:inContainerAtLocation:)]
        pub unsafe fn textSelectionForSelectionGranularity_enclosingPoint_inContainerAtLocation(
            &self,
            selection_granularity: NSTextSelectionGranularity,
            point: CGPoint,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> Option<Id<NSTextSelection>>;

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "AppKit_NSTextSelection"))]
        #[method_id(@__retain_semantics Other resolvedInsertionLocationForTextSelection:writingDirection:)]
        pub unsafe fn resolvedInsertionLocationForTextSelection_writingDirection(
            &self,
            text_selection: &NSTextSelection,
            writing_direction: NSTextSelectionNavigationWritingDirection,
        ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

        #[cfg(all(
            feature = "AppKit_NSTextRange",
            feature = "AppKit_NSTextSelection",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other deletionRangesForTextSelection:direction:destination:allowsDecomposition:)]
        pub unsafe fn deletionRangesForTextSelection_direction_destination_allowsDecomposition(
            &self,
            text_selection: &NSTextSelection,
            direction: NSTextSelectionNavigationDirection,
            destination: NSTextSelectionNavigationDestination,
            allows_decomposition: bool,
        ) -> Id<NSArray<NSTextRange>>;
    }
);

extern_protocol!(
    pub unsafe trait NSTextSelectionDataSource: NSObjectProtocol {
        #[cfg(feature = "AppKit_NSTextRange")]
        #[method_id(@__retain_semantics Other documentRange)]
        unsafe fn documentRange(&self) -> Id<NSTextRange>;

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSString"))]
        #[method(enumerateSubstringsFromLocation:options:usingBlock:)]
        unsafe fn enumerateSubstringsFromLocation_options_usingBlock(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
            options: NSStringEnumerationOptions,
            block: &Block<
                dyn Fn(*mut NSString, NonNull<NSTextRange>, *mut NSTextRange, NonNull<Bool>) + '_,
            >,
        );

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "AppKit_NSTextSelection"))]
        #[method_id(@__retain_semantics Other textRangeForSelectionGranularity:enclosingLocation:)]
        unsafe fn textRangeForSelectionGranularity_enclosingLocation(
            &self,
            selection_granularity: NSTextSelectionGranularity,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> Option<Id<NSTextRange>>;

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method_id(@__retain_semantics Other locationFromLocation:withOffset:)]
        unsafe fn locationFromLocation_withOffset(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
            offset: NSInteger,
        ) -> Option<Id<ProtocolObject<dyn NSTextLocation>>>;

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(offsetFromLocation:toLocation:)]
        unsafe fn offsetFromLocation_toLocation(
            &self,
            from: &ProtocolObject<dyn NSTextLocation>,
            to: &ProtocolObject<dyn NSTextLocation>,
        ) -> NSInteger;

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(baseWritingDirectionAtLocation:)]
        unsafe fn baseWritingDirectionAtLocation(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> NSTextSelectionNavigationWritingDirection;

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSGeometry"))]
        #[method(enumerateCaretOffsetsInLineFragmentAtLocation:usingBlock:)]
        unsafe fn enumerateCaretOffsetsInLineFragmentAtLocation_usingBlock(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
            block: &Block<
                dyn Fn(CGFloat, NonNull<ProtocolObject<dyn NSTextLocation>>, Bool, NonNull<Bool>)
                    + '_,
            >,
        );

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSGeometry"))]
        #[method_id(@__retain_semantics Other lineFragmentRangeForPoint:inContainerAtLocation:)]
        unsafe fn lineFragmentRangeForPoint_inContainerAtLocation(
            &self,
            point: CGPoint,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> Option<Id<NSTextRange>>;

        #[cfg(feature = "AppKit_NSTextRange")]
        #[optional]
        #[method(enumerateContainerBoundariesFromLocation:reverse:usingBlock:)]
        unsafe fn enumerateContainerBoundariesFromLocation_reverse_usingBlock(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
            reverse: bool,
            block: &Block<dyn Fn(NonNull<ProtocolObject<dyn NSTextLocation>>, NonNull<Bool>) + '_>,
        );

        #[cfg(feature = "AppKit_NSTextRange")]
        #[optional]
        #[method(textLayoutOrientationAtLocation:)]
        unsafe fn textLayoutOrientationAtLocation(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> NSTextSelectionNavigationLayoutOrientation;
    }

    unsafe impl ProtocolType for dyn NSTextSelectionDataSource {}
);
