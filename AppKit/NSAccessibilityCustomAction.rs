//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsaccessibilitycustomaction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAccessibilityCustomAction;
);

unsafe impl NSObjectProtocol for NSAccessibilityCustomAction {}

extern_methods!(
    unsafe impl NSAccessibilityCustomAction {
        #[cfg(feature = "block2")]
        #[method_id(initWithName:handler:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_handler(
            this: Allocated<Self>,
            name: &NSString,
            handler: Option<&block2::Block<dyn Fn() -> Bool>>,
        ) -> Retained<Self>;

        #[method_id(initWithName:target:selector:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_target_selector(
            this: Allocated<Self>,
            name: &NSString,
            target: &ProtocolObject<dyn NSObjectProtocol>,
            selector: Sel,
        ) -> Retained<Self>;

        #[method_id(name)]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &NSString);

        #[cfg(feature = "block2")]
        #[method(handler)]
        pub unsafe fn handler(&self) -> *mut block2::Block<dyn Fn() -> Bool>;

        #[cfg(feature = "block2")]
        /// Setter for [`handler`][Self::handler].
        #[method(setHandler:)]
        pub unsafe fn setHandler(&self, handler: Option<&block2::Block<dyn Fn() -> Bool>>);

        #[method_id(target)]
        #[unsafe(method_family = none)]
        pub unsafe fn target(&self) -> Option<Retained<ProtocolObject<dyn NSObjectProtocol>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`target`][Self::target].
        #[method(setTarget:)]
        pub unsafe fn setTarget(&self, target: Option<&ProtocolObject<dyn NSObjectProtocol>>);

        #[method(selector)]
        pub unsafe fn selector(&self) -> Option<Sel>;

        /// Setter for [`selector`][Self::selector].
        #[method(setSelector:)]
        pub unsafe fn setSelector(&self, selector: Option<Sel>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSAccessibilityCustomAction {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
