//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechSynthesizerVoiceName = NSString;
);

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSVoiceAttributeKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceName: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceIdentifier: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceAge: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceGender: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceDemoText: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceLocaleIdentifier: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceSupportedCharacters: &'static NSVoiceAttributeKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceIndividuallySpokenCharacters: &'static NSVoiceAttributeKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechDictionaryKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryLocaleIdentifier: &'static NSSpeechDictionaryKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryModificationDate: &'static NSSpeechDictionaryKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryPronunciations: &'static NSSpeechDictionaryKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryAbbreviations: &'static NSSpeechDictionaryKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryEntrySpelling: &'static NSSpeechDictionaryKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechDictionaryEntryPhonemes: &'static NSSpeechDictionaryKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSVoiceGenderName = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceGenderNeuter: &'static NSVoiceGenderName;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceGenderMale: &'static NSVoiceGenderName;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceGenderFemale: &'static NSVoiceGenderName;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceGenderNeutral: &'static NSVoiceGenderName;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechPropertyKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechStatusProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorsProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechInputModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechCharacterModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechNumberModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechRateProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPitchBaseProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPitchModProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechVolumeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechSynthesizerInfoProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechRecentSyncProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeSymbolsProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechCurrentVoiceProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechCommandDelimiterProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechResetProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechOutputToFileURLProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSVoiceLanguage: &'static NSVoiceAttributeKey;
}

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSpeechBoundary {
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        NSSpeechImmediateBoundary = 0,
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        NSSpeechWordBoundary = 1,
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        NSSpeechSentenceBoundary = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
    pub struct NSSpeechSynthesizer;

    unsafe impl ClassType for NSSpeechSynthesizer {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSSpeechSynthesizer {}

extern_methods!(
    unsafe impl NSSpeechSynthesizer {
        #[cfg(feature = "Foundation_NSString")]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Init initWithVoice:)]
        pub unsafe fn initWithVoice(
            this: Allocated<Self>,
            voice: Option<&NSSpeechSynthesizerVoiceName>,
        ) -> Option<Id<Self>>;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(startSpeakingString:)]
        pub unsafe fn startSpeakingString(&self, string: &NSString) -> bool;

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(startSpeakingString:toURL:)]
        pub unsafe fn startSpeakingString_toURL(&self, string: &NSString, url: &NSURL) -> bool;

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(isSpeaking)]
        pub unsafe fn isSpeaking(&self) -> bool;

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(stopSpeaking)]
        pub unsafe fn stopSpeaking(&self);

        #[method(stopSpeakingAtBoundary:)]
        pub unsafe fn stopSpeakingAtBoundary(&self, boundary: NSSpeechBoundary);

        #[method(pauseSpeakingAtBoundary:)]
        pub unsafe fn pauseSpeakingAtBoundary(&self, boundary: NSSpeechBoundary);

        #[method(continueSpeaking)]
        pub unsafe fn continueSpeaking(&self);

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Id<ProtocolObject<dyn NSSpeechSynthesizerDelegate>>>;

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSSpeechSynthesizerDelegate>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Other voice)]
        pub unsafe fn voice(&self) -> Option<Id<NSSpeechSynthesizerVoiceName>>;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(setVoice:)]
        pub unsafe fn setVoice(&self, voice: Option<&NSSpeechSynthesizerVoiceName>) -> bool;

        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[method(setRate:)]
        pub unsafe fn setRate(&self, rate: c_float);

        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(usesFeedbackWindow)]
        pub unsafe fn usesFeedbackWindow(&self) -> bool;

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(setUsesFeedbackWindow:)]
        pub unsafe fn setUsesFeedbackWindow(&self, uses_feedback_window: bool);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(addSpeechDictionary:)]
        pub unsafe fn addSpeechDictionary(
            &self,
            speech_dictionary: &NSDictionary<NSSpeechDictionaryKey, AnyObject>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other phonemesFromText:)]
        pub unsafe fn phonemesFromText(&self, text: &NSString) -> Id<NSString>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other objectForProperty:error:_)]
        pub unsafe fn objectForProperty_error(
            &self,
            property: &NSSpeechPropertyKey,
        ) -> Result<Id<AnyObject>, Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(setObject:forProperty:error:_)]
        pub unsafe fn setObject_forProperty_error(
            &self,
            object: Option<&AnyObject>,
            property: &NSSpeechPropertyKey,
        ) -> Result<(), Id<NSError>>;

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method(isAnyApplicationSpeaking)]
        pub unsafe fn isAnyApplicationSpeaking() -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Other defaultVoice)]
        pub unsafe fn defaultVoice() -> Id<NSSpeechSynthesizerVoiceName>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Other availableVoices)]
        pub unsafe fn availableVoices() -> Id<NSArray<NSSpeechSynthesizerVoiceName>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[method_id(@__retain_semantics Other attributesForVoice:)]
        pub unsafe fn attributesForVoice(
            voice: &NSSpeechSynthesizerVoiceName,
        ) -> Id<NSDictionary<NSVoiceAttributeKey, AnyObject>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSSpeechSynthesizer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
    pub unsafe trait NSSpeechSynthesizerDelegate:
        NSObjectProtocol + IsMainThreadOnly
    {
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[optional]
        #[method(speechSynthesizer:didFinishSpeaking:)]
        unsafe fn speechSynthesizer_didFinishSpeaking(
            &self,
            sender: &NSSpeechSynthesizer,
            finished_speaking: bool,
        );

        #[cfg(all(feature = "Foundation_NSRange", feature = "Foundation_NSString"))]
        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[optional]
        #[method(speechSynthesizer:willSpeakWord:ofString:)]
        unsafe fn speechSynthesizer_willSpeakWord_ofString(
            &self,
            sender: &NSSpeechSynthesizer,
            character_range: NSRange,
            string: &NSString,
        );

        #[deprecated = "Use AVSpeechSynthesizer in AVFoundation instead"]
        #[optional]
        #[method(speechSynthesizer:willSpeakPhoneme:)]
        unsafe fn speechSynthesizer_willSpeakPhoneme(
            &self,
            sender: &NSSpeechSynthesizer,
            phoneme_opcode: c_short,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[optional]
        #[method(speechSynthesizer:didEncounterErrorAtIndex:ofString:message:)]
        unsafe fn speechSynthesizer_didEncounterErrorAtIndex_ofString_message(
            &self,
            sender: &NSSpeechSynthesizer,
            character_index: NSUInteger,
            string: &NSString,
            message: &NSString,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[optional]
        #[method(speechSynthesizer:didEncounterSyncMessage:)]
        unsafe fn speechSynthesizer_didEncounterSyncMessage(
            &self,
            sender: &NSSpeechSynthesizer,
            message: &NSString,
        );
    }

    unsafe impl ProtocolType for dyn NSSpeechSynthesizerDelegate {}
);

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechMode = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechModeText: &'static NSSpeechMode;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechModePhoneme: &'static NSSpeechMode;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechModeNormal: &'static NSSpeechMode;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechModeLiteral: &'static NSSpeechMode;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechStatusKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechStatusOutputBusy: &'static NSSpeechStatusKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechStatusOutputPaused: &'static NSSpeechStatusKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechStatusNumberOfCharactersLeft: &'static NSSpeechStatusKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechStatusPhonemeCode: &'static NSSpeechStatusKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechErrorKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorCount: &'static NSSpeechErrorKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorOldestCode: &'static NSSpeechErrorKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorOldestCharacterOffset: &'static NSSpeechErrorKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorNewestCode: &'static NSSpeechErrorKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechErrorNewestCharacterOffset: &'static NSSpeechErrorKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechSynthesizerInfoKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechSynthesizerInfoIdentifier: &'static NSSpeechSynthesizerInfoKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechSynthesizerInfoVersion: &'static NSSpeechSynthesizerInfoKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechPhonemeInfoKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeInfoOpcode: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeInfoSymbol: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeInfoExample: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeInfoHiliteStart: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechPhonemeInfoHiliteEnd: &'static NSSpeechPhonemeInfoKey;
}

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type NSSpeechCommandDelimiterKey = NSString;
);

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechCommandPrefix: &'static NSSpeechCommandDelimiterKey;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static NSSpeechCommandSuffix: &'static NSSpeechCommandDelimiterKey;
}
