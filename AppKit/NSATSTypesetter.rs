//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsatstypesetter?language=objc)
    #[unsafe(super(NSTypesetter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSTypesetter")]
    pub struct NSATSTypesetter;
);

#[cfg(feature = "NSTypesetter")]
unsafe impl NSObjectProtocol for NSATSTypesetter {}

extern_methods!(
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[method(sharedTypesetter)]
        #[unsafe(method_family = none)]
        pub unsafe fn sharedTypesetter() -> Retained<NSATSTypesetter>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSPantherCompatibility
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[deprecated]
        #[method(lineFragmentRectForProposedRect:remainingRect:)]
        #[unsafe(method_family = none)]
        pub unsafe fn lineFragmentRectForProposedRect_remainingRect(
            &self,
            proposed_rect: NSRect,
            remaining_rect: NSRectPointer,
        ) -> NSRect;
    }
);

extern_methods!(
    /// NSPrimitiveInterface
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[method(usesFontLeading)]
        #[unsafe(method_family = none)]
        pub unsafe fn usesFontLeading(&self) -> bool;

        /// Setter for [`usesFontLeading`][Self::usesFontLeading].
        #[method(setUsesFontLeading:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setUsesFontLeading(&self, uses_font_leading: bool);

        #[cfg(feature = "NSLayoutManager")]
        #[method(typesetterBehavior)]
        #[unsafe(method_family = none)]
        pub unsafe fn typesetterBehavior(&self) -> NSTypesetterBehavior;

        #[cfg(feature = "NSLayoutManager")]
        /// Setter for [`typesetterBehavior`][Self::typesetterBehavior].
        #[method(setTypesetterBehavior:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTypesetterBehavior(&self, typesetter_behavior: NSTypesetterBehavior);

        #[method(hyphenationFactor)]
        #[unsafe(method_family = none)]
        pub unsafe fn hyphenationFactor(&self) -> c_float;

        /// Setter for [`hyphenationFactor`][Self::hyphenationFactor].
        #[method(setHyphenationFactor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setHyphenationFactor(&self, hyphenation_factor: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lineFragmentPadding)]
        #[unsafe(method_family = none)]
        pub unsafe fn lineFragmentPadding(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`lineFragmentPadding`][Self::lineFragmentPadding].
        #[method(setLineFragmentPadding:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setLineFragmentPadding(&self, line_fragment_padding: CGFloat);

        #[cfg(feature = "NSFont")]
        #[method(substituteFontForFont:)]
        #[unsafe(method_family = none)]
        pub unsafe fn substituteFontForFont(&self, original_font: &NSFont) -> Retained<NSFont>;

        #[cfg(all(
            feature = "NSParagraphStyle",
            feature = "NSText",
            feature = "objc2-core-foundation"
        ))]
        #[method(textTabForGlyphLocation:writingDirection:maxLocation:)]
        #[unsafe(method_family = none)]
        pub unsafe fn textTabForGlyphLocation_writingDirection_maxLocation(
            &self,
            glyph_location: CGFloat,
            direction: NSWritingDirection,
            max_location: CGFloat,
        ) -> Option<Retained<NSTextTab>>;

        #[method(bidiProcessingEnabled)]
        #[unsafe(method_family = none)]
        pub unsafe fn bidiProcessingEnabled(&self) -> bool;

        /// Setter for [`bidiProcessingEnabled`][Self::bidiProcessingEnabled].
        #[method(setBidiProcessingEnabled:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setBidiProcessingEnabled(&self, bidi_processing_enabled: bool);

        #[method(attributedString)]
        #[unsafe(method_family = none)]
        pub unsafe fn attributedString(&self) -> Option<Retained<NSAttributedString>>;

        /// Setter for [`attributedString`][Self::attributedString].
        #[method(setAttributedString:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributedString(&self, attributed_string: Option<&NSAttributedString>);

        #[method(setParagraphGlyphRange:separatorGlyphRange:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setParagraphGlyphRange_separatorGlyphRange(
            &self,
            paragraph_range: NSRange,
            paragraph_separator_range: NSRange,
        );

        #[method(paragraphGlyphRange)]
        #[unsafe(method_family = none)]
        pub unsafe fn paragraphGlyphRange(&self) -> NSRange;

        #[method(paragraphSeparatorGlyphRange)]
        #[unsafe(method_family = none)]
        pub unsafe fn paragraphSeparatorGlyphRange(&self) -> NSRange;

        #[method(layoutParagraphAtPoint:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layoutParagraphAtPoint(
            &self,
            line_fragment_origin: NonNull<NSPoint>,
        ) -> NSUInteger;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:)]
        #[unsafe(method_family = none)]
        pub unsafe fn lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(
            &self,
            glyph_index: NSUInteger,
            rect: NSRect,
        ) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:)]
        #[unsafe(method_family = none)]
        pub unsafe fn paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(
            &self,
            glyph_index: NSUInteger,
            rect: NSRect,
        ) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:)]
        #[unsafe(method_family = none)]
        pub unsafe fn paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(
            &self,
            glyph_index: NSUInteger,
            rect: NSRect,
        ) -> CGFloat;

        #[cfg(feature = "NSLayoutManager")]
        #[method(layoutManager)]
        #[unsafe(method_family = none)]
        pub unsafe fn layoutManager(&self) -> Option<Retained<NSLayoutManager>>;

        #[cfg(feature = "NSTextContainer")]
        #[method(currentTextContainer)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentTextContainer(&self) -> Option<Retained<NSTextContainer>>;

        #[method(setHardInvalidation:forGlyphRange:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setHardInvalidation_forGlyphRange(&self, flag: bool, glyph_range: NSRange);

        #[method(getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(
            &self,
            line_fragment_rect: NonNull<NSRect>,
            line_fragment_used_rect: NonNull<NSRect>,
            paragraph_separator_glyph_range: NSRange,
            line_origin: NSPoint,
        );
    }
);

extern_methods!(
    /// NSLayoutPhaseInterface
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:)]
        #[unsafe(method_family = none)]
        pub unsafe fn willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(
            &self,
            line_rect: NonNull<NSRect>,
            glyph_range: NSRange,
            used_rect: NonNull<NSRect>,
            baseline_offset: NonNull<CGFloat>,
        );

        #[method(shouldBreakLineByWordBeforeCharacterAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldBreakLineByWordBeforeCharacterAtIndex(
            &self,
            char_index: NSUInteger,
        ) -> bool;

        #[method(shouldBreakLineByHyphenatingBeforeCharacterAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldBreakLineByHyphenatingBeforeCharacterAtIndex(
            &self,
            char_index: NSUInteger,
        ) -> bool;

        #[method(hyphenationFactorForGlyphAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn hyphenationFactorForGlyphAtIndex(&self, glyph_index: NSUInteger) -> c_float;

        #[method(hyphenCharacterForGlyphAtIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn hyphenCharacterForGlyphAtIndex(&self, glyph_index: NSUInteger) -> UTF32Char;

        #[cfg(feature = "NSTextContainer")]
        #[method(boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:)]
        #[unsafe(method_family = none)]
        pub unsafe fn boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(
            &self,
            glyph_index: NSUInteger,
            text_container: &NSTextContainer,
            proposed_rect: NSRect,
            glyph_position: NSPoint,
            char_index: NSUInteger,
        ) -> NSRect;
    }
);

extern_methods!(
    /// NSGlyphStorageInterface
    #[cfg(feature = "NSTypesetter")]
    unsafe impl NSATSTypesetter {
        #[cfg(all(feature = "NSFont", feature = "NSLayoutManager"))]
        #[deprecated]
        #[method(getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(
            &self,
            glyphs_range: NSRange,
            glyph_buffer: *mut NSGlyph,
            char_index_buffer: *mut NSUInteger,
            inscribe_buffer: *mut NSGlyphInscription,
            elastic_buffer: *mut Bool,
        ) -> NSUInteger;
    }
);
