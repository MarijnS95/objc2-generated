//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationcurve?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSAnimationCurve(pub NSUInteger);
impl NSAnimationCurve {
    #[doc(alias = "NSAnimationEaseInOut")]
    pub const EaseInOut: Self = Self(0);
    #[doc(alias = "NSAnimationEaseIn")]
    pub const EaseIn: Self = Self(1);
    #[doc(alias = "NSAnimationEaseOut")]
    pub const EaseOut: Self = Self(2);
    #[doc(alias = "NSAnimationLinear")]
    pub const Linear: Self = Self(3);
}

unsafe impl Encode for NSAnimationCurve {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSAnimationCurve {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationblockingmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSAnimationBlockingMode(pub NSUInteger);
impl NSAnimationBlockingMode {
    #[doc(alias = "NSAnimationBlocking")]
    pub const Blocking: Self = Self(0);
    #[doc(alias = "NSAnimationNonblocking")]
    pub const Nonblocking: Self = Self(1);
    #[doc(alias = "NSAnimationNonblockingThreaded")]
    pub const NonblockingThreaded: Self = Self(2);
}

unsafe impl Encode for NSAnimationBlockingMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSAnimationBlockingMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationprogress?language=objc)
pub type NSAnimationProgress = c_float;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationprogressmarknotification?language=objc)
    pub static NSAnimationProgressMarkNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationprogressmark?language=objc)
    pub static NSAnimationProgressMark: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimation?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAnimation;
);

unsafe impl NSCoding for NSAnimation {}

unsafe impl NSCopying for NSAnimation {}

unsafe impl CopyingHelper for NSAnimation {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSAnimation {}

extern_methods!(
    unsafe impl NSAnimation {
        #[method(initWithDuration:animationCurve:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDuration_animationCurve(
            this: Allocated<Self>,
            duration: NSTimeInterval,
            animation_curve: NSAnimationCurve,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method(startAnimation)]
        #[unsafe(method_family = none)]
        pub unsafe fn startAnimation(&self);

        #[method(stopAnimation)]
        #[unsafe(method_family = none)]
        pub unsafe fn stopAnimation(&self);

        #[method(isAnimating)]
        #[unsafe(method_family = none)]
        pub unsafe fn isAnimating(&self) -> bool;

        #[method(currentProgress)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentProgress(&self) -> NSAnimationProgress;

        /// Setter for [`currentProgress`][Self::currentProgress].
        #[method(setCurrentProgress:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentProgress(&self, current_progress: NSAnimationProgress);

        #[method(duration)]
        #[unsafe(method_family = none)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        /// Setter for [`duration`][Self::duration].
        #[method(setDuration:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDuration(&self, duration: NSTimeInterval);

        #[method(animationBlockingMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn animationBlockingMode(&self) -> NSAnimationBlockingMode;

        /// Setter for [`animationBlockingMode`][Self::animationBlockingMode].
        #[method(setAnimationBlockingMode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationBlockingMode(
            &self,
            animation_blocking_mode: NSAnimationBlockingMode,
        );

        #[method(frameRate)]
        #[unsafe(method_family = none)]
        pub unsafe fn frameRate(&self) -> c_float;

        /// Setter for [`frameRate`][Self::frameRate].
        #[method(setFrameRate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setFrameRate(&self, frame_rate: c_float);

        #[method(animationCurve)]
        #[unsafe(method_family = none)]
        pub unsafe fn animationCurve(&self) -> NSAnimationCurve;

        /// Setter for [`animationCurve`][Self::animationCurve].
        #[method(setAnimationCurve:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationCurve(&self, animation_curve: NSAnimationCurve);

        #[method(currentValue)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentValue(&self) -> c_float;

        #[method(delegate)]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn NSAnimationDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSAnimationDelegate>>,
        );

        #[method(progressMarks)]
        #[unsafe(method_family = none)]
        pub unsafe fn progressMarks(&self) -> Retained<NSArray<NSNumber>>;

        /// Setter for [`progressMarks`][Self::progressMarks].
        #[method(setProgressMarks:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setProgressMarks(&self, progress_marks: &NSArray<NSNumber>);

        #[method(addProgressMark:)]
        #[unsafe(method_family = none)]
        pub unsafe fn addProgressMark(&self, progress_mark: NSAnimationProgress);

        #[method(removeProgressMark:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeProgressMark(&self, progress_mark: NSAnimationProgress);

        #[method(startWhenAnimation:reachesProgress:)]
        #[unsafe(method_family = none)]
        pub unsafe fn startWhenAnimation_reachesProgress(
            &self,
            animation: &NSAnimation,
            start_progress: NSAnimationProgress,
        );

        #[method(stopWhenAnimation:reachesProgress:)]
        #[unsafe(method_family = none)]
        pub unsafe fn stopWhenAnimation_reachesProgress(
            &self,
            animation: &NSAnimation,
            stop_progress: NSAnimationProgress,
        );

        #[method(clearStartAnimation)]
        #[unsafe(method_family = none)]
        pub unsafe fn clearStartAnimation(&self);

        #[method(clearStopAnimation)]
        #[unsafe(method_family = none)]
        pub unsafe fn clearStopAnimation(&self);

        #[method(runLoopModesForAnimating)]
        #[unsafe(method_family = none)]
        pub unsafe fn runLoopModesForAnimating(&self) -> Option<Retained<NSArray<NSRunLoopMode>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSAnimation {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationdelegate?language=objc)
    pub unsafe trait NSAnimationDelegate: NSObjectProtocol {
        #[optional]
        #[method(animationShouldStart:)]
        #[unsafe(method_family = none)]
        unsafe fn animationShouldStart(&self, animation: &NSAnimation) -> bool;

        #[optional]
        #[method(animationDidStop:)]
        #[unsafe(method_family = none)]
        unsafe fn animationDidStop(&self, animation: &NSAnimation);

        #[optional]
        #[method(animationDidEnd:)]
        #[unsafe(method_family = none)]
        unsafe fn animationDidEnd(&self, animation: &NSAnimation);

        #[optional]
        #[method(animation:valueForProgress:)]
        #[unsafe(method_family = none)]
        unsafe fn animation_valueForProgress(
            &self,
            animation: &NSAnimation,
            progress: NSAnimationProgress,
        ) -> c_float;

        #[optional]
        #[method(animation:didReachProgressMark:)]
        #[unsafe(method_family = none)]
        unsafe fn animation_didReachProgressMark(
            &self,
            animation: &NSAnimation,
            progress: NSAnimationProgress,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationkey?language=objc)
// NS_TYPED_ENUM
pub type NSViewAnimationKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationtargetkey?language=objc)
    pub static NSViewAnimationTargetKey: &'static NSViewAnimationKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationstartframekey?language=objc)
    pub static NSViewAnimationStartFrameKey: &'static NSViewAnimationKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationendframekey?language=objc)
    pub static NSViewAnimationEndFrameKey: &'static NSViewAnimationKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationeffectkey?language=objc)
    pub static NSViewAnimationEffectKey: &'static NSViewAnimationKey;
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationeffectname?language=objc)
// NS_TYPED_ENUM
pub type NSViewAnimationEffectName = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationfadeineffect?language=objc)
    pub static NSViewAnimationFadeInEffect: &'static NSViewAnimationEffectName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimationfadeouteffect?language=objc)
    pub static NSViewAnimationFadeOutEffect: &'static NSViewAnimationEffectName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsviewanimation?language=objc)
    #[unsafe(super(NSAnimation, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSViewAnimation;
);

unsafe impl NSCoding for NSViewAnimation {}

unsafe impl NSCopying for NSViewAnimation {}

unsafe impl CopyingHelper for NSViewAnimation {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSViewAnimation {}

extern_methods!(
    unsafe impl NSViewAnimation {
        #[method(initWithViewAnimations:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithViewAnimations(
            this: Allocated<Self>,
            view_animations: &NSArray<NSDictionary<NSViewAnimationKey, AnyObject>>,
        ) -> Retained<Self>;

        #[method(viewAnimations)]
        #[unsafe(method_family = none)]
        pub unsafe fn viewAnimations(
            &self,
        ) -> Retained<NSArray<NSDictionary<NSViewAnimationKey, AnyObject>>>;

        /// Setter for [`viewAnimations`][Self::viewAnimations].
        #[method(setViewAnimations:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setViewAnimations(
            &self,
            view_animations: &NSArray<NSDictionary<NSViewAnimationKey, AnyObject>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSAnimation`
    unsafe impl NSViewAnimation {
        #[method(initWithDuration:animationCurve:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDuration_animationCurve(
            this: Allocated<Self>,
            duration: NSTimeInterval,
            animation_curve: NSAnimationCurve,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSViewAnimation {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimatablepropertykey?language=objc)
pub type NSAnimatablePropertyKey = NSString;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimatablepropertycontainer?language=objc)
    pub unsafe trait NSAnimatablePropertyContainer {
        #[method(animator)]
        #[unsafe(method_family = none)]
        unsafe fn animator(&self) -> Retained<Self>;

        #[method(animations)]
        #[unsafe(method_family = none)]
        unsafe fn animations(&self) -> Retained<NSDictionary<NSAnimatablePropertyKey, AnyObject>>;

        /// Setter for [`animations`][Self::animations].
        #[method(setAnimations:)]
        #[unsafe(method_family = none)]
        unsafe fn setAnimations(
            &self,
            animations: &NSDictionary<NSAnimatablePropertyKey, AnyObject>,
        );

        #[method(animationForKey:)]
        #[unsafe(method_family = none)]
        unsafe fn animationForKey(
            &self,
            key: &NSAnimatablePropertyKey,
        ) -> Option<Retained<AnyObject>>;

        #[method(defaultAnimationForKey:)]
        #[unsafe(method_family = none)]
        unsafe fn defaultAnimationForKey(
            key: &NSAnimatablePropertyKey,
        ) -> Option<Retained<AnyObject>>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationtriggerorderin?language=objc)
    pub static NSAnimationTriggerOrderIn: &'static NSAnimatablePropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsanimationtriggerorderout?language=objc)
    pub static NSAnimationTriggerOrderOut: &'static NSAnimatablePropertyKey;
}
