//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssoundpboardtype?language=objc)
    #[cfg(feature = "NSPasteboard")]
    pub static NSSoundPboardType: &'static NSPasteboardType;
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssoundname?language=objc)
pub type NSSoundName = NSString;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssoundplaybackdeviceidentifier?language=objc)
pub type NSSoundPlaybackDeviceIdentifier = NSString;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssound?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSound;
);

unsafe impl NSCoding for NSSound {}

unsafe impl NSCopying for NSSound {}

unsafe impl CopyingHelper for NSSound {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSSound {}

#[cfg(feature = "NSPasteboard")]
unsafe impl NSPasteboardReading for NSSound {}

#[cfg(feature = "NSPasteboard")]
unsafe impl NSPasteboardWriting for NSSound {}

unsafe impl NSSecureCoding for NSSound {}

extern_methods!(
    unsafe impl NSSound {
        #[unsafe(method_family(none))]
        #[method_id(soundNamed:)]
        pub unsafe fn soundNamed(name: &NSSoundName) -> Option<Retained<NSSound>>;

        #[unsafe(method_family(init))]
        #[method_id(initWithContentsOfURL:byReference:)]
        pub unsafe fn initWithContentsOfURL_byReference(
            this: Allocated<Self>,
            url: &NSURL,
            by_ref: bool,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(init))]
        #[method_id(initWithContentsOfFile:byReference:)]
        pub unsafe fn initWithContentsOfFile_byReference(
            this: Allocated<Self>,
            path: &NSString,
            by_ref: bool,
        ) -> Option<Retained<Self>>;

        #[unsafe(method_family(init))]
        #[method_id(initWithData:)]
        pub unsafe fn initWithData(this: Allocated<Self>, data: &NSData) -> Option<Retained<Self>>;

        #[method(setName:)]
        pub unsafe fn setName(&self, string: Option<&NSSoundName>) -> bool;

        #[unsafe(method_family(none))]
        #[method_id(name)]
        pub unsafe fn name(&self) -> Option<Retained<NSSoundName>>;

        #[cfg(feature = "NSPasteboard")]
        #[method(canInitWithPasteboard:)]
        pub unsafe fn canInitWithPasteboard(pasteboard: &NSPasteboard) -> bool;

        #[unsafe(method_family(none))]
        #[method_id(soundUnfilteredTypes)]
        pub unsafe fn soundUnfilteredTypes() -> Retained<NSArray<NSString>>;

        #[cfg(feature = "NSPasteboard")]
        #[unsafe(method_family(init))]
        #[method_id(initWithPasteboard:)]
        pub unsafe fn initWithPasteboard(
            this: Allocated<Self>,
            pasteboard: &NSPasteboard,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSPasteboard")]
        #[method(writeToPasteboard:)]
        pub unsafe fn writeToPasteboard(&self, pasteboard: &NSPasteboard);

        #[method(play)]
        pub unsafe fn play(&self) -> bool;

        #[method(pause)]
        pub unsafe fn pause(&self) -> bool;

        #[method(resume)]
        pub unsafe fn resume(&self) -> bool;

        #[method(stop)]
        pub unsafe fn stop(&self) -> bool;

        #[method(isPlaying)]
        pub unsafe fn isPlaying(&self) -> bool;

        #[unsafe(method_family(none))]
        #[method_id(delegate)]
        pub unsafe fn delegate(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<ProtocolObject<dyn NSSoundDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSSoundDelegate>>);

        #[method(duration)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        /// Setter for [`volume`][Self::volume].
        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(currentTime)]
        pub unsafe fn currentTime(&self) -> NSTimeInterval;

        /// Setter for [`currentTime`][Self::currentTime].
        #[method(setCurrentTime:)]
        pub unsafe fn setCurrentTime(&self, current_time: NSTimeInterval);

        #[method(loops)]
        pub unsafe fn loops(&self) -> bool;

        /// Setter for [`loops`][Self::loops].
        #[method(setLoops:)]
        pub unsafe fn setLoops(&self, loops: bool);

        #[unsafe(method_family(none))]
        #[method_id(playbackDeviceIdentifier)]
        pub unsafe fn playbackDeviceIdentifier(
            &self,
        ) -> Option<Retained<NSSoundPlaybackDeviceIdentifier>>;

        /// Setter for [`playbackDeviceIdentifier`][Self::playbackDeviceIdentifier].
        #[method(setPlaybackDeviceIdentifier:)]
        pub unsafe fn setPlaybackDeviceIdentifier(
            &self,
            playback_device_identifier: Option<&NSSoundPlaybackDeviceIdentifier>,
        );

        #[deprecated]
        #[method(setChannelMapping:)]
        pub unsafe fn setChannelMapping(&self, channel_mapping: Option<&NSArray>);

        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(channelMapping)]
        pub unsafe fn channelMapping(&self) -> Option<Retained<NSArray>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSSound {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSDeprecated
    unsafe impl NSSound {
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(soundUnfilteredFileTypes)]
        pub unsafe fn soundUnfilteredFileTypes() -> Option<Retained<NSArray>>;

        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(soundUnfilteredPasteboardTypes)]
        pub unsafe fn soundUnfilteredPasteboardTypes() -> Option<Retained<NSArray>>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssounddelegate?language=objc)
    pub unsafe trait NSSoundDelegate: NSObjectProtocol + MainThreadOnly {
        #[optional]
        #[method(sound:didFinishPlaying:)]
        unsafe fn sound_didFinishPlaying(&self, sound: &NSSound, flag: bool);
    }
);

extern_category!(
    /// Category on [`NSBundle`].
    pub unsafe trait NSBundleSoundExtensions {
        #[unsafe(method_family(none))]
        #[method_id(pathForSoundResource:)]
        unsafe fn pathForSoundResource(&self, name: &NSSoundName) -> Option<Retained<NSString>>;
    }

    unsafe impl NSBundleSoundExtensions for NSBundle {}
);
