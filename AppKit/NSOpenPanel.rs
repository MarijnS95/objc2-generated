//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsopenpanel?language=objc)
    #[unsafe(super(NSSavePanel, NSPanel, NSWindow, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    pub struct NSOpenPanel;
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSAccessibility for NSOpenPanel {}

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSAccessibilityElementProtocol for NSOpenPanel {}

#[cfg(all(
    feature = "NSAnimation",
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSAnimatablePropertyContainer for NSOpenPanel {}

#[cfg(all(
    feature = "NSAppearance",
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSAppearanceCustomization for NSOpenPanel {}

#[cfg(all(
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSCoding for NSOpenPanel {}

#[cfg(all(
    feature = "NSMenu",
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSMenuItemValidation for NSOpenPanel {}

#[cfg(all(
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSWindow"
))]
unsafe impl NSObjectProtocol for NSOpenPanel {}

#[cfg(all(
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSUserInterfaceItemIdentification",
    feature = "NSWindow"
))]
unsafe impl NSUserInterfaceItemIdentification for NSOpenPanel {}

#[cfg(all(
    feature = "NSPanel",
    feature = "NSResponder",
    feature = "NSSavePanel",
    feature = "NSUserInterfaceValidation",
    feature = "NSWindow"
))]
unsafe impl NSUserInterfaceValidations for NSOpenPanel {}

extern_methods!(
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[unsafe(method_family(none))]
        #[method_id(openPanel)]
        pub unsafe fn openPanel(mtm: MainThreadMarker) -> Retained<NSOpenPanel>;

        #[unsafe(method_family(none))]
        #[method_id(URLs)]
        pub unsafe fn URLs(&self) -> Retained<NSArray<NSURL>>;

        #[method(resolvesAliases)]
        pub unsafe fn resolvesAliases(&self) -> bool;

        /// Setter for [`resolvesAliases`][Self::resolvesAliases].
        #[method(setResolvesAliases:)]
        pub unsafe fn setResolvesAliases(&self, resolves_aliases: bool);

        #[method(canChooseDirectories)]
        pub unsafe fn canChooseDirectories(&self) -> bool;

        /// Setter for [`canChooseDirectories`][Self::canChooseDirectories].
        #[method(setCanChooseDirectories:)]
        pub unsafe fn setCanChooseDirectories(&self, can_choose_directories: bool);

        #[method(allowsMultipleSelection)]
        pub unsafe fn allowsMultipleSelection(&self) -> bool;

        /// Setter for [`allowsMultipleSelection`][Self::allowsMultipleSelection].
        #[method(setAllowsMultipleSelection:)]
        pub unsafe fn setAllowsMultipleSelection(&self, allows_multiple_selection: bool);

        #[method(canChooseFiles)]
        pub unsafe fn canChooseFiles(&self) -> bool;

        /// Setter for [`canChooseFiles`][Self::canChooseFiles].
        #[method(setCanChooseFiles:)]
        pub unsafe fn setCanChooseFiles(&self, can_choose_files: bool);

        #[method(canResolveUbiquitousConflicts)]
        pub unsafe fn canResolveUbiquitousConflicts(&self) -> bool;

        /// Setter for [`canResolveUbiquitousConflicts`][Self::canResolveUbiquitousConflicts].
        #[method(setCanResolveUbiquitousConflicts:)]
        pub unsafe fn setCanResolveUbiquitousConflicts(
            &self,
            can_resolve_ubiquitous_conflicts: bool,
        );

        #[method(canDownloadUbiquitousContents)]
        pub unsafe fn canDownloadUbiquitousContents(&self) -> bool;

        /// Setter for [`canDownloadUbiquitousContents`][Self::canDownloadUbiquitousContents].
        #[method(setCanDownloadUbiquitousContents:)]
        pub unsafe fn setCanDownloadUbiquitousContents(
            &self,
            can_download_ubiquitous_contents: bool,
        );

        #[method(isAccessoryViewDisclosed)]
        pub unsafe fn isAccessoryViewDisclosed(&self) -> bool;

        /// Setter for [`isAccessoryViewDisclosed`][Self::isAccessoryViewDisclosed].
        #[method(setAccessoryViewDisclosed:)]
        pub unsafe fn setAccessoryViewDisclosed(&self, accessory_view_disclosed: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSWindow`
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[cfg(feature = "NSGraphics")]
        #[unsafe(method_family(init))]
        #[method_id(initWithContentRect:styleMask:backing:defer:)]
        pub unsafe fn initWithContentRect_styleMask_backing_defer(
            this: Allocated<Self>,
            content_rect: NSRect,
            style: NSWindowStyleMask,
            backing_store_type: NSBackingStoreType,
            flag: bool,
        ) -> Retained<Self>;

        #[cfg(all(feature = "NSGraphics", feature = "NSScreen"))]
        #[unsafe(method_family(init))]
        #[method_id(initWithContentRect:styleMask:backing:defer:screen:)]
        pub unsafe fn initWithContentRect_styleMask_backing_defer_screen(
            this: Allocated<Self>,
            content_rect: NSRect,
            style: NSWindowStyleMask,
            backing_store_type: NSBackingStoreType,
            flag: bool,
            screen: Option<&NSScreen>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;

        #[cfg(feature = "NSViewController")]
        /// Convenience method for creating an autoreleased titled window with the given contentViewController. A basic NSWindow with the following attributes is made: titled, closable, resizable, miniaturizable. The window's title is automatically bound to the contentViewController's title. The size of the window can easily be controlled by utilizing autolayout and applying size constraints to the view (or its subviews). The window has isReleasedWhenClosed set to NO, and it must be explicitly retained to keep the window instance alive. To have it automatically be freed when it is closed, do the following: [window retain] and [window setReleasedWhenClosed:YES].
        #[unsafe(method_family(none))]
        #[method_id(windowWithContentViewController:)]
        pub unsafe fn windowWithContentViewController(
            content_view_controller: &NSViewController,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// InheritedAndUnavailable
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[method(showsContentTypes)]
        pub unsafe fn showsContentTypes(&self) -> bool;

        /// Setter for [`showsContentTypes`][Self::showsContentTypes].
        #[method(setShowsContentTypes:)]
        pub unsafe fn setShowsContentTypes(&self, shows_content_types: bool);
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(all(
        feature = "NSPanel",
        feature = "NSResponder",
        feature = "NSSavePanel",
        feature = "NSWindow"
    ))]
    unsafe impl NSOpenPanel {
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(filenames)]
        pub unsafe fn filenames(&self) -> Retained<NSArray>;

        #[deprecated]
        #[method(beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:)]
        pub unsafe fn beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo(
            &self,
            path: Option<&NSString>,
            name: Option<&NSString>,
            file_types: Option<&NSArray>,
            doc_window: Option<&NSWindow>,
            delegate: Option<&AnyObject>,
            did_end_selector: Option<Sel>,
            context_info: *mut c_void,
        );

        #[deprecated]
        #[method(beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:)]
        pub unsafe fn beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo(
            &self,
            path: Option<&NSString>,
            name: Option<&NSString>,
            file_types: Option<&NSArray>,
            delegate: Option<&AnyObject>,
            did_end_selector: Option<Sel>,
            context_info: *mut c_void,
        );

        #[deprecated]
        #[method(runModalForDirectory:file:types:)]
        pub unsafe fn runModalForDirectory_file_types(
            &self,
            path: Option<&NSString>,
            name: Option<&NSString>,
            file_types: Option<&NSArray>,
        ) -> NSInteger;

        #[deprecated]
        #[method(runModalForTypes:)]
        pub unsafe fn runModalForTypes(&self, file_types: Option<&NSArray>) -> NSInteger;
    }
);
