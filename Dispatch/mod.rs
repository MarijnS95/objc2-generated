// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]

use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

extern "C" {
    #[must_use]
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}

extern "C" {
    #[cfg(feature = "libc")]
    #[must_use]
    pub fn dispatch_walltime(when: *mut libc::timespec, delta: i64) -> dispatch_time_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_block_t?language=objc)
#[cfg(feature = "block2")]
pub type dispatch_block_t = *mut block2::Block<dyn Fn()>;

extern "C" {
    pub fn dispatch_retain(object: dispatch_object_t);
}

extern "C" {
    pub fn dispatch_release(object: dispatch_object_t);
}

extern "C" {
    #[must_use]
    pub fn dispatch_get_context(object: dispatch_object_t) -> *mut c_void;
}

extern "C" {
    pub fn dispatch_set_context(object: dispatch_object_t, context: *mut c_void);
}

extern "C" {
    pub fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t);
}

extern "C" {
    pub fn dispatch_activate(object: dispatch_object_t);
}

extern "C" {
    pub fn dispatch_suspend(object: dispatch_object_t);
}

extern "C" {
    pub fn dispatch_resume(object: dispatch_object_t);
}

extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: dispatch_object_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: c_int,
    );
}

extern "C" {
    pub fn dispatch_wait(object: NonNull<c_void>, timeout: dispatch_time_t) -> isize;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_notify(
        object: NonNull<c_void>,
        queue: dispatch_object_t,
        notification_block: dispatch_block_t,
    );
}

extern "C" {
    pub fn dispatch_cancel(object: NonNull<c_void>);
}

extern "C" {
    #[must_use]
    pub fn dispatch_testcancel(object: NonNull<c_void>) -> isize;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_async_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_sync_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_apply(
        iterations: usize,
        queue: dispatch_queue_t,
        block: &block2::Block<dyn Fn(usize)>,
    );
}

extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: unsafe extern "C-unwind" fn(*mut c_void, usize),
    );
}

extern "C" {
    #[deprecated = "unsupported interface"]
    #[must_use]
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_main_q?language=objc)
    pub static _dispatch_main_q: dispatch_queue_s;
}

extern "C" {
    #[must_use]
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_queue_attr_concurrent?language=objc)
    pub static _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_attr_make_initially_inactive(
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_attr_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_autorelease_frequency_t?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct dispatch_autorelease_frequency_t(pub c_ulong);
impl dispatch_autorelease_frequency_t {
    pub const DISPATCH_AUTORELEASE_FREQUENCY_INHERIT: Self = Self(0);
    pub const DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM: Self = Self(1);
    pub const DISPATCH_AUTORELEASE_FREQUENCY_NEVER: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for dispatch_autorelease_frequency_t {
    const ENCODING: Encoding = Encoding::C_ULONG;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for dispatch_autorelease_frequency_t {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: dispatch_queue_attr_t,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: dispatch_queue_attr_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: c_int,
    ) -> dispatch_queue_attr_t;
}

extern "C" {
    #[must_use]
    #[cfg_attr(
        target_vendor = "apple",
        link_name = "dispatch_queue_create_with_target$V2"
    )]
    pub fn dispatch_queue_create_with_target(
        label: *mut c_char,
        attr: dispatch_queue_attr_t,
        target: dispatch_queue_t,
    ) -> dispatch_queue_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_create(
        label: *mut c_char,
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_get_label(queue: dispatch_queue_t) -> NonNull<c_char>;
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_get_qos_class(
        queue: dispatch_queue_t,
        relative_priority_ptr: *mut c_int,
    ) -> dispatch_qos_class_t;
}

extern "C" {
    pub fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t);
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: dispatch_queue_t,
        key: NonNull<c_void>,
        context: *mut c_void,
        destructor: dispatch_function_t,
    );
}

extern "C" {
    #[must_use]
    pub fn dispatch_queue_get_specific(
        queue: dispatch_queue_t,
        key: NonNull<c_void>,
    ) -> *mut c_void;
}

extern "C" {
    #[must_use]
    pub fn dispatch_get_specific(key: NonNull<c_void>) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "dispatch_assert_queue$V2")]
    pub fn dispatch_assert_queue(queue: dispatch_queue_t);
}

extern "C-unwind" {
    pub fn dispatch_assert_queue_barrier(queue: dispatch_queue_t);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "dispatch_assert_queue_not$V2")]
    pub fn dispatch_assert_queue_not(queue: dispatch_queue_t);
}

extern "C-unwind" {
    pub fn dispatch_allow_send_signals(preserve_signum: c_int) -> c_int;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_block_flags_t?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct dispatch_block_flags_t(pub c_ulong);
bitflags::bitflags! {
    impl dispatch_block_flags_t: c_ulong {
        const DISPATCH_BLOCK_BARRIER = 0x1;
        const DISPATCH_BLOCK_DETACHED = 0x2;
        const DISPATCH_BLOCK_ASSIGN_CURRENT = 0x4;
        const DISPATCH_BLOCK_NO_QOS_CLASS = 0x8;
        const DISPATCH_BLOCK_INHERIT_QOS_CLASS = 0x10;
        const DISPATCH_BLOCK_ENFORCE_QOS_CLASS = 0x20;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for dispatch_block_flags_t {
    const ENCODING: Encoding = Encoding::C_ULONG;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for dispatch_block_flags_t {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: dispatch_queue_t,
        notification_block: dispatch_block_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_data_add?language=objc)
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_data_or?language=objc)
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_data_replace?language=objc)
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_mach_send?language=objc)
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_mach_recv?language=objc)
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_memorypressure?language=objc)
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_proc?language=objc)
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_read?language=objc)
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_signal?language=objc)
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_timer?language=objc)
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_vnode?language=objc)
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_source_type_write?language=objc)
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}

extern "C" {
    #[must_use]
    pub fn dispatch_source_create(
        r#type: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: dispatch_queue_t,
    ) -> dispatch_source_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_source_set_event_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t);
}

extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}

extern "C" {
    pub fn dispatch_source_cancel(source: dispatch_source_t);
}

extern "C" {
    #[must_use]
    pub fn dispatch_source_testcancel(source: dispatch_source_t) -> isize;
}

extern "C" {
    #[must_use]
    pub fn dispatch_source_get_handle(source: dispatch_source_t) -> usize;
}

extern "C" {
    #[must_use]
    pub fn dispatch_source_get_mask(source: dispatch_source_t) -> usize;
}

extern "C" {
    #[must_use]
    pub fn dispatch_source_get_data(source: dispatch_source_t) -> usize;
}

extern "C" {
    pub fn dispatch_source_merge_data(source: dispatch_source_t, value: usize);
}

extern "C" {
    pub fn dispatch_source_set_timer(
        source: dispatch_source_t,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_source_set_registration_handler(
        source: dispatch_source_t,
        handler: dispatch_block_t,
    );
}

extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}

extern "C" {
    #[must_use]
    pub fn dispatch_group_create() -> dispatch_group_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_group_async(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}

extern "C" {
    pub fn dispatch_group_async_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    pub fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -> isize;
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_group_notify(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}

extern "C" {
    pub fn dispatch_group_notify_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut c_void,
        work: dispatch_function_t,
    );
}

extern "C" {
    pub fn dispatch_group_enter(group: dispatch_group_t);
}

extern "C" {
    pub fn dispatch_group_leave(group: dispatch_group_t);
}

extern "C" {
    #[must_use]
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}

extern "C" {
    pub fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize;
}

extern "C" {
    pub fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) -> isize;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_once_t?language=objc)
pub type dispatch_once_t = isize;

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_once(predicate: NonNull<dispatch_once_t>, block: dispatch_block_t);
}

// TODO: pub fn _dispatch_once(predicate: NonNull<dispatch_once_t>,block: dispatch_block_t,);

extern "C" {
    pub fn dispatch_once_f(
        predicate: NonNull<dispatch_once_t>,
        context: *mut c_void,
        function: dispatch_function_t,
    );
}

// TODO: pub fn _dispatch_once_f(predicate: NonNull<dispatch_once_t>,context: *mut c_void,function: dispatch_function_t,);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_data_empty?language=objc)
    pub static _dispatch_data_empty: dispatch_data_s;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_data_destructor_free?language=objc)
    #[cfg(feature = "block2")]
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/dispatch/_dispatch_data_destructor_munmap?language=objc)
    #[cfg(feature = "block2")]
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_data_create(
        buffer: NonNull<c_void>,
        size: usize,
        queue: dispatch_queue_t,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}

extern "C" {
    pub fn dispatch_data_get_size(data: dispatch_data_t) -> usize;
}

extern "C" {
    #[must_use]
    pub fn dispatch_data_create_map(
        data: dispatch_data_t,
        buffer_ptr: *mut *mut c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_data_create_concat(
        data1: dispatch_data_t,
        data2: dispatch_data_t,
    ) -> dispatch_data_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_data_create_subrange(
        data: dispatch_data_t,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_data_applier_t?language=objc)
#[cfg(feature = "block2")]
pub type dispatch_data_applier_t =
    *mut block2::Block<dyn Fn(dispatch_data_t, usize, NonNull<c_void>, usize) -> bool>;

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) -> bool;
}

extern "C" {
    #[must_use]
    pub fn dispatch_data_copy_region(
        data: dispatch_data_t,
        location: usize,
        offset_ptr: NonNull<usize>,
    ) -> dispatch_data_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_fd_t?language=objc)
pub type dispatch_fd_t = c_int;

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: dispatch_queue_t,
        handler: &block2::Block<dyn Fn(dispatch_data_t, c_int)>,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        handler: &block2::Block<dyn Fn(dispatch_data_t, c_int)>,
    );
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_io_create(
        r#type: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: dispatch_queue_t,
        cleanup_handler: &block2::Block<dyn Fn(c_int)>,
    ) -> dispatch_io_t;
}

extern "C" {
    #[cfg(all(feature = "block2", feature = "libc"))]
    #[must_use]
    pub fn dispatch_io_create_with_path(
        r#type: dispatch_io_type_t,
        path: NonNull<c_char>,
        oflag: c_int,
        mode: libc::mode_t,
        queue: dispatch_queue_t,
        cleanup_handler: &block2::Block<dyn Fn(c_int)>,
    ) -> dispatch_io_t;
}

extern "C" {
    #[cfg(feature = "block2")]
    #[must_use]
    pub fn dispatch_io_create_with_io(
        r#type: dispatch_io_type_t,
        io: dispatch_io_t,
        queue: dispatch_queue_t,
        cleanup_handler: &block2::Block<dyn Fn(c_int)>,
    ) -> dispatch_io_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/dispatch/dispatch_io_handler_t?language=objc)
#[cfg(feature = "block2")]
pub type dispatch_io_handler_t = *mut block2::Block<dyn Fn(bool, dispatch_data_t, c_int)>;

extern "C" {
    #[cfg(all(feature = "block2", feature = "libc"))]
    pub fn dispatch_io_read(
        channel: dispatch_io_t,
        offset: libc::off_t,
        length: usize,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}

extern "C" {
    #[cfg(all(feature = "block2", feature = "libc"))]
    pub fn dispatch_io_write(
        channel: dispatch_io_t,
        offset: libc::off_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}

extern "C" {
    pub fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t);
}

extern "C" {
    #[cfg(feature = "block2")]
    pub fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t);
}

extern "C" {
    #[must_use]
    pub fn dispatch_io_get_descriptor(channel: dispatch_io_t) -> dispatch_fd_t;
}

extern "C" {
    pub fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize);
}

extern "C" {
    pub fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize);
}

extern "C" {
    pub fn dispatch_io_set_interval(
        channel: dispatch_io_t,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}

extern "C" {
    #[must_use]
    pub fn dispatch_workloop_create(label: *mut c_char) -> dispatch_workloop_t;
}

extern "C" {
    #[must_use]
    pub fn dispatch_workloop_create_inactive(label: *mut c_char) -> dispatch_workloop_t;
}

extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: dispatch_workloop_t,
        frequency: dispatch_autorelease_frequency_t,
    );
}
