//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceallocsize?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceAllocSize: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacewidth?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceheight?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacebytesperrow?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceBytesPerRow: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacebytesperelement?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceBytesPerElement: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceelementwidth?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceElementWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceelementheight?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceElementHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceoffset?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceOffset: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplaneinfo?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneInfo: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanewidth?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplaneheight?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanebytesperrow?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneBytesPerRow: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplaneoffset?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneOffset: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanesize?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneSize: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanebase?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneBase: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanebitsperelement?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneBitsPerElement: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanebytesperelement?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneBytesPerElement: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplaneelementwidth?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneElementWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplaneelementheight?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneElementHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacecachemode?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceCacheMode: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceisglobal?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceIsGlobal: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacepixelformat?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePixelFormat: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacepixelsizecastingallowed?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePixelSizeCastingAllowed: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanecomponentbitdepths?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneComponentBitDepths: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanecomponentbitoffsets?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneComponentBitOffsets: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceName: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacecomponentname?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceComponentName(pub i32);
impl IOSurfaceComponentName {
    #[doc(alias = "kIOSurfaceComponentNameUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "kIOSurfaceComponentNameAlpha")]
    pub const Alpha: Self = Self(1);
    #[doc(alias = "kIOSurfaceComponentNameRed")]
    pub const Red: Self = Self(2);
    #[doc(alias = "kIOSurfaceComponentNameGreen")]
    pub const Green: Self = Self(3);
    #[doc(alias = "kIOSurfaceComponentNameBlue")]
    pub const Blue: Self = Self(4);
    #[doc(alias = "kIOSurfaceComponentNameLuma")]
    pub const Luma: Self = Self(5);
    #[doc(alias = "kIOSurfaceComponentNameChromaRed")]
    pub const ChromaRed: Self = Self(6);
    #[doc(alias = "kIOSurfaceComponentNameChromaBlue")]
    pub const ChromaBlue: Self = Self(7);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceComponentName {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceComponentName {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanecomponentnames?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneComponentNames: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacecomponenttype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceComponentType(pub i32);
impl IOSurfaceComponentType {
    #[doc(alias = "kIOSurfaceComponentTypeUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "kIOSurfaceComponentTypeUnsignedInteger")]
    pub const UnsignedInteger: Self = Self(1);
    #[doc(alias = "kIOSurfaceComponentTypeSignedInteger")]
    pub const SignedInteger: Self = Self(2);
    #[doc(alias = "kIOSurfaceComponentTypeFloat")]
    pub const Float: Self = Self(3);
    #[doc(alias = "kIOSurfaceComponentTypeSignedNormalized")]
    pub const SignedNormalized: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceComponentType {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceComponentType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanecomponenttypes?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneComponentTypes: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacecomponentrange?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceComponentRange(pub i32);
impl IOSurfaceComponentRange {
    #[doc(alias = "kIOSurfaceComponentRangeUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "kIOSurfaceComponentRangeFullRange")]
    pub const FullRange: Self = Self(1);
    #[doc(alias = "kIOSurfaceComponentRangeVideoRange")]
    pub const VideoRange: Self = Self(2);
    #[doc(alias = "kIOSurfaceComponentRangeWideRange")]
    pub const WideRange: Self = Self(3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceComponentRange {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceComponentRange {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceplanecomponentranges?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfacePlaneComponentRanges: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacesubsampling?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceSubsampling(pub i32);
impl IOSurfaceSubsampling {
    #[doc(alias = "kIOSurfaceSubsamplingUnknown")]
    pub const SubsamplingUnknown: Self = Self(0);
    #[doc(alias = "kIOSurfaceSubsamplingNone")]
    pub const SubsamplingNone: Self = Self(1);
    #[doc(alias = "kIOSurfaceSubsampling422")]
    pub const Subsampling422: Self = Self(2);
    #[doc(alias = "kIOSurfaceSubsampling420")]
    pub const Subsampling420: Self = Self(3);
    #[doc(alias = "kIOSurfaceSubsampling411")]
    pub const Subsampling411: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceSubsampling {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceSubsampling {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacesubsampling?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceSubsampling: &'static CFString;
}

#[cfg(feature = "objc2-core-foundation")]
unsafe impl ConcreteType for IOSurfaceRef {
    #[doc(alias = "IOSurfaceGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn IOSurfaceGetTypeID() -> CFTypeID;
        }
        unsafe { IOSurfaceGetTypeID() }
    }
}

#[cfg(feature = "objc2-core-foundation")]
#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceCreate(
    properties: &CFDictionary,
) -> Option<CFRetained<IOSurfaceRef>> {
    extern "C-unwind" {
        fn IOSurfaceCreate(properties: &CFDictionary) -> *mut IOSurfaceRef;
    }
    let ret = unsafe { IOSurfaceCreate(properties) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(all(feature = "IOSurfaceTypes", feature = "objc2-core-foundation"))]
#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceLookup(
    csid: IOSurfaceID,
) -> Option<CFRetained<IOSurfaceRef>> {
    extern "C-unwind" {
        fn IOSurfaceLookup(csid: IOSurfaceID) -> *mut IOSurfaceRef;
    }
    let ret = unsafe { IOSurfaceLookup(csid) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "IOSurfaceTypes")]
    pub fn IOSurfaceGetID(buffer: &IOSurfaceRef) -> IOSurfaceID;
}

extern "C-unwind" {
    #[cfg(all(feature = "IOSurfaceTypes", feature = "libc"))]
    pub fn IOSurfaceLock(
        buffer: &IOSurfaceRef,
        options: IOSurfaceLockOptions,
        seed: *mut u32,
    ) -> libc::kern_return_t;
}

extern "C-unwind" {
    #[cfg(all(feature = "IOSurfaceTypes", feature = "libc"))]
    pub fn IOSurfaceUnlock(
        buffer: &IOSurfaceRef,
        options: IOSurfaceLockOptions,
        seed: *mut u32,
    ) -> libc::kern_return_t;
}

extern "C-unwind" {
    pub fn IOSurfaceGetAllocSize(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetWidth(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetHeight(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBytesPerElement(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBytesPerRow(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBaseAddress(buffer: &IOSurfaceRef) -> NonNull<c_void>;
}

extern "C-unwind" {
    pub fn IOSurfaceGetElementWidth(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetElementHeight(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetPixelFormat(buffer: &IOSurfaceRef) -> OSType;
}

extern "C-unwind" {
    pub fn IOSurfaceGetSeed(buffer: &IOSurfaceRef) -> u32;
}

extern "C-unwind" {
    pub fn IOSurfaceGetPlaneCount(buffer: &IOSurfaceRef) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetWidthOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetHeightOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBytesPerElementOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBytesPerRowOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBaseAddressOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
    ) -> NonNull<c_void>;
}

extern "C-unwind" {
    pub fn IOSurfaceGetElementWidthOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetElementHeightOfPlane(buffer: &IOSurfaceRef, plane_index: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetNumberOfComponentsOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
    ) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetNameOfComponentOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
        component_index: usize,
    ) -> IOSurfaceComponentName;
}

extern "C-unwind" {
    pub fn IOSurfaceGetTypeOfComponentOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
        component_index: usize,
    ) -> IOSurfaceComponentType;
}

extern "C-unwind" {
    pub fn IOSurfaceGetRangeOfComponentOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
        component_index: usize,
    ) -> IOSurfaceComponentRange;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBitDepthOfComponentOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
        component_index: usize,
    ) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetBitOffsetOfComponentOfPlane(
        buffer: &IOSurfaceRef,
        plane_index: usize,
        component_index: usize,
    ) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceGetSubsampling(buffer: &IOSurfaceRef) -> IOSurfaceSubsampling;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacecolorspace?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceColorSpace: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfaceiccprofile?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceICCProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iosurface/kiosurfacecontentheadroom?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kIOSurfaceContentHeadroom: &'static CFString;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceSetValue(buffer: &IOSurfaceRef, key: &CFString, value: &CFType);
}

#[cfg(feature = "objc2-core-foundation")]
#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceCopyValue(
    buffer: &IOSurfaceRef,
    key: &CFString,
) -> Option<CFRetained<CFType>> {
    extern "C-unwind" {
        fn IOSurfaceCopyValue(buffer: &IOSurfaceRef, key: &CFString) -> *mut CFType;
    }
    let ret = unsafe { IOSurfaceCopyValue(buffer, key) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceRemoveValue(buffer: &IOSurfaceRef, key: &CFString);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceSetValues(buffer: &IOSurfaceRef, keys_and_values: &CFDictionary);
}

#[cfg(feature = "objc2-core-foundation")]
#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceCopyAllValues(
    buffer: &IOSurfaceRef,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn IOSurfaceCopyAllValues(buffer: &IOSurfaceRef) -> *mut CFDictionary;
    }
    let ret = unsafe { IOSurfaceCopyAllValues(buffer) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn IOSurfaceRemoveAllValues(buffer: &IOSurfaceRef);
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn IOSurfaceCreateMachPort(buffer: &IOSurfaceRef) -> libc::mach_port_t;
}

#[cfg(all(feature = "libc", feature = "objc2-core-foundation"))]
#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceLookupFromMachPort(
    port: libc::mach_port_t,
) -> Option<CFRetained<IOSurfaceRef>> {
    extern "C-unwind" {
        fn IOSurfaceLookupFromMachPort(port: libc::mach_port_t) -> *mut IOSurfaceRef;
    }
    let ret = unsafe { IOSurfaceLookupFromMachPort(port) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceGetPropertyMaximum(property: &CFString) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceGetPropertyAlignment(property: &CFString) -> usize;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn IOSurfaceAlignProperty(property: &CFString, value: usize) -> usize;
}

extern "C-unwind" {
    pub fn IOSurfaceIncrementUseCount(buffer: &IOSurfaceRef);
}

extern "C-unwind" {
    pub fn IOSurfaceDecrementUseCount(buffer: &IOSurfaceRef);
}

extern "C-unwind" {
    pub fn IOSurfaceGetUseCount(buffer: &IOSurfaceRef) -> i32;
}

#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceIsInUse(buffer: &IOSurfaceRef) -> bool {
    extern "C-unwind" {
        fn IOSurfaceIsInUse(buffer: &IOSurfaceRef) -> Boolean;
    }
    let ret = unsafe { IOSurfaceIsInUse(buffer) };
    ret != 0
}

#[inline]
pub unsafe extern "C-unwind" fn IOSurfaceAllowsPixelSizeCasting(buffer: &IOSurfaceRef) -> bool {
    extern "C-unwind" {
        fn IOSurfaceAllowsPixelSizeCasting(buffer: &IOSurfaceRef) -> Boolean;
    }
    let ret = unsafe { IOSurfaceAllowsPixelSizeCasting(buffer) };
    ret != 0
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn IOSurfaceSetPurgeable(
        buffer: &IOSurfaceRef,
        new_state: u32,
        old_state: *mut u32,
    ) -> libc::kern_return_t;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacememoryledgertags?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceMemoryLedgerTags(pub c_int);
impl IOSurfaceMemoryLedgerTags {
    #[doc(alias = "kIOSurfaceMemoryLedgerTagDefault")]
    pub const Default: Self = Self(0x00000001);
    #[doc(alias = "kIOSurfaceMemoryLedgerTagNetwork")]
    pub const Network: Self = Self(0x00000002);
    #[doc(alias = "kIOSurfaceMemoryLedgerTagMedia")]
    pub const Media: Self = Self(0x00000003);
    #[doc(alias = "kIOSurfaceMemoryLedgerTagGraphics")]
    pub const Graphics: Self = Self(0x00000004);
    #[doc(alias = "kIOSurfaceMemoryLedgerTagNeural")]
    pub const Neural: Self = Self(0x00000005);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceMemoryLedgerTags {
    const ENCODING: Encoding = c_int::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceMemoryLedgerTags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iosurface/iosurfacememoryledgerflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOSurfaceMemoryLedgerFlags(pub u32);
bitflags::bitflags! {
    impl IOSurfaceMemoryLedgerFlags: u32 {
        #[doc(alias = "kIOSurfaceMemoryLedgerFlagNoFootprint")]
        const NoFootprint = 1<<0;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for IOSurfaceMemoryLedgerFlags {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for IOSurfaceMemoryLedgerFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
