//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    pub unsafe trait AXChart: NSObjectProtocol {
        #[method_id(@__retain_semantics Other accessibilityChartDescriptor)]
        unsafe fn accessibilityChartDescriptor(&self) -> Option<Retained<AXChartDescriptor>>;

        #[method(setAccessibilityChartDescriptor:)]
        unsafe fn setAccessibilityChartDescriptor(
            &self,
            accessibility_chart_descriptor: Option<&AXChartDescriptor>,
        );
    }

    unsafe impl ProtocolType for dyn AXChart {}
);

extern_protocol!(
    pub unsafe trait AXDataAxisDescriptor: NSCopying {
        #[method_id(@__retain_semantics Other title)]
        unsafe fn title(&self) -> Retained<NSString>;

        #[method(setTitle:)]
        unsafe fn setTitle(&self, title: &NSString);

        #[method_id(@__retain_semantics Other attributedTitle)]
        unsafe fn attributedTitle(&self) -> Retained<NSAttributedString>;

        #[method(setAttributedTitle:)]
        unsafe fn setAttributedTitle(&self, attributed_title: &NSAttributedString);
    }

    unsafe impl ProtocolType for dyn AXDataAxisDescriptor {}
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AXNumericDataAxisDescriptorScale(pub NSInteger);
impl AXNumericDataAxisDescriptorScale {
    pub const AXScaleTypeLinear: Self = Self(0);
    pub const AXScaleTypeLog10: Self = Self(1);
    pub const AXScaleTypeLn: Self = Self(2);
}

unsafe impl Encode for AXNumericDataAxisDescriptorScale {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AXNumericDataAxisDescriptorScale {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXNumericDataAxisDescriptor;

    unsafe impl ClassType for AXNumericDataAxisDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl AXDataAxisDescriptor for AXNumericDataAxisDescriptor {}

unsafe impl NSCopying for AXNumericDataAxisDescriptor {}

unsafe impl CopyingHelper for AXNumericDataAxisDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXNumericDataAxisDescriptor {}

extern_methods!(
    unsafe impl AXNumericDataAxisDescriptor {
        #[method(scaleType)]
        pub unsafe fn scaleType(&self) -> AXNumericDataAxisDescriptorScale;

        #[method(setScaleType:)]
        pub unsafe fn setScaleType(&self, scale_type: AXNumericDataAxisDescriptorScale);

        #[method(lowerBound)]
        pub unsafe fn lowerBound(&self) -> c_double;

        #[method(setLowerBound:)]
        pub unsafe fn setLowerBound(&self, lower_bound: c_double);

        #[method(upperBound)]
        pub unsafe fn upperBound(&self) -> c_double;

        #[method(setUpperBound:)]
        pub unsafe fn setUpperBound(&self, upper_bound: c_double);

        #[cfg(feature = "block2")]
        #[method(valueDescriptionProvider)]
        pub unsafe fn valueDescriptionProvider(
            &self,
        ) -> NonNull<block2::Block<dyn Fn(c_double) -> NonNull<NSString>>>;

        #[cfg(feature = "block2")]
        #[method(setValueDescriptionProvider:)]
        pub unsafe fn setValueDescriptionProvider(
            &self,
            value_description_provider: &block2::Block<dyn Fn(c_double) -> NonNull<NSString>>,
        );

        #[method_id(@__retain_semantics Other gridlinePositions)]
        pub unsafe fn gridlinePositions(&self) -> Retained<NSArray<NSNumber>>;

        #[method(setGridlinePositions:)]
        pub unsafe fn setGridlinePositions(&self, gridline_positions: &NSArray<NSNumber>);

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Init initWithTitle:lowerBound:upperBound:gridlinePositions:valueDescriptionProvider:)]
        pub unsafe fn initWithTitle_lowerBound_upperBound_gridlinePositions_valueDescriptionProvider(
            this: Allocated<Self>,
            title: &NSString,
            lowerbound: c_double,
            upper_bound: c_double,
            gridline_positions: Option<&NSArray<NSNumber>>,
            value_description_provider: &block2::Block<dyn Fn(c_double) -> NonNull<NSString>>,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Init initWithAttributedTitle:lowerBound:upperBound:gridlinePositions:valueDescriptionProvider:)]
        pub unsafe fn initWithAttributedTitle_lowerBound_upperBound_gridlinePositions_valueDescriptionProvider(
            this: Allocated<Self>,
            attributed_title: &NSAttributedString,
            lowerbound: c_double,
            upper_bound: c_double,
            gridline_positions: Option<&NSArray<NSNumber>>,
            value_description_provider: &block2::Block<dyn Fn(c_double) -> NonNull<NSString>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXCategoricalDataAxisDescriptor;

    unsafe impl ClassType for AXCategoricalDataAxisDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl AXDataAxisDescriptor for AXCategoricalDataAxisDescriptor {}

unsafe impl NSCopying for AXCategoricalDataAxisDescriptor {}

unsafe impl CopyingHelper for AXCategoricalDataAxisDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXCategoricalDataAxisDescriptor {}

extern_methods!(
    unsafe impl AXCategoricalDataAxisDescriptor {
        #[method_id(@__retain_semantics Other categoryOrder)]
        pub unsafe fn categoryOrder(&self) -> Retained<NSArray<NSString>>;

        #[method(setCategoryOrder:)]
        pub unsafe fn setCategoryOrder(&self, category_order: &NSArray<NSString>);

        #[method_id(@__retain_semantics Init initWithTitle:categoryOrder:)]
        pub unsafe fn initWithTitle_categoryOrder(
            this: Allocated<Self>,
            title: &NSString,
            category_order: &NSArray<NSString>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithAttributedTitle:categoryOrder:)]
        pub unsafe fn initWithAttributedTitle_categoryOrder(
            this: Allocated<Self>,
            attributed_title: &NSAttributedString,
            category_order: &NSArray<NSString>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXDataPointValue;

    unsafe impl ClassType for AXDataPointValue {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for AXDataPointValue {}

unsafe impl CopyingHelper for AXDataPointValue {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXDataPointValue {}

extern_methods!(
    unsafe impl AXDataPointValue {
        #[method(number)]
        pub unsafe fn number(&self) -> c_double;

        #[method(setNumber:)]
        pub unsafe fn setNumber(&self, number: c_double);

        #[method_id(@__retain_semantics Other category)]
        pub unsafe fn category(&self) -> Retained<NSString>;

        #[method(setCategory:)]
        pub unsafe fn setCategory(&self, category: &NSString);

        #[method_id(@__retain_semantics Other valueWithNumber:)]
        pub unsafe fn valueWithNumber(number: c_double) -> Retained<Self>;

        #[method_id(@__retain_semantics Other valueWithCategory:)]
        pub unsafe fn valueWithCategory(category: &NSString) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXDataPoint;

    unsafe impl ClassType for AXDataPoint {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for AXDataPoint {}

unsafe impl CopyingHelper for AXDataPoint {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXDataPoint {}

extern_methods!(
    unsafe impl AXDataPoint {
        #[method_id(@__retain_semantics Other xValue)]
        pub unsafe fn xValue(&self) -> Retained<AXDataPointValue>;

        #[method(setXValue:)]
        pub unsafe fn setXValue(&self, x_value: &AXDataPointValue);

        #[method_id(@__retain_semantics Other yValue)]
        pub unsafe fn yValue(&self) -> Option<Retained<AXDataPointValue>>;

        #[method(setYValue:)]
        pub unsafe fn setYValue(&self, y_value: Option<&AXDataPointValue>);

        #[method_id(@__retain_semantics Other additionalValues)]
        pub unsafe fn additionalValues(&self) -> Retained<NSArray<AXDataPointValue>>;

        #[method(setAdditionalValues:)]
        pub unsafe fn setAdditionalValues(&self, additional_values: &NSArray<AXDataPointValue>);

        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);

        #[method_id(@__retain_semantics Other attributedLabel)]
        pub unsafe fn attributedLabel(&self) -> Option<Retained<NSAttributedString>>;

        #[method(setAttributedLabel:)]
        pub unsafe fn setAttributedLabel(&self, attributed_label: Option<&NSAttributedString>);

        #[method_id(@__retain_semantics Init initWithX:y:)]
        pub unsafe fn initWithX_y(
            this: Allocated<Self>,
            x_value: &AXDataPointValue,
            y_value: Option<&AXDataPointValue>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithX:y:additionalValues:)]
        pub unsafe fn initWithX_y_additionalValues(
            this: Allocated<Self>,
            x_value: &AXDataPointValue,
            y_value: Option<&AXDataPointValue>,
            additional_values: Option<&NSArray<AXDataPointValue>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithX:y:additionalValues:label:)]
        pub unsafe fn initWithX_y_additionalValues_label(
            this: Allocated<Self>,
            x_value: &AXDataPointValue,
            y_value: Option<&AXDataPointValue>,
            additional_values: Option<&NSArray<AXDataPointValue>>,
            label: Option<&NSString>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXDataSeriesDescriptor;

    unsafe impl ClassType for AXDataSeriesDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for AXDataSeriesDescriptor {}

unsafe impl CopyingHelper for AXDataSeriesDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXDataSeriesDescriptor {}

extern_methods!(
    unsafe impl AXDataSeriesDescriptor {
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[method_id(@__retain_semantics Other attributedName)]
        pub unsafe fn attributedName(&self) -> Retained<NSAttributedString>;

        #[method(setAttributedName:)]
        pub unsafe fn setAttributedName(&self, attributed_name: &NSAttributedString);

        #[method(isContinuous)]
        pub unsafe fn isContinuous(&self) -> bool;

        #[method(setIsContinuous:)]
        pub unsafe fn setIsContinuous(&self, is_continuous: bool);

        #[method_id(@__retain_semantics Other dataPoints)]
        pub unsafe fn dataPoints(&self) -> Retained<NSArray<AXDataPoint>>;

        #[method(setDataPoints:)]
        pub unsafe fn setDataPoints(&self, data_points: &NSArray<AXDataPoint>);

        #[method_id(@__retain_semantics Init initWithName:isContinuous:dataPoints:)]
        pub unsafe fn initWithName_isContinuous_dataPoints(
            this: Allocated<Self>,
            name: &NSString,
            is_continuous: bool,
            data_points: &NSArray<AXDataPoint>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithAttributedName:isContinuous:dataPoints:)]
        pub unsafe fn initWithAttributedName_isContinuous_dataPoints(
            this: Allocated<Self>,
            attributed_name: &NSAttributedString,
            is_continuous: bool,
            data_points: &NSArray<AXDataPoint>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AXChartDescriptorContentDirection(pub NSInteger);
impl AXChartDescriptorContentDirection {
    pub const AXChartContentDirectionLeftToRight: Self = Self(0);
    pub const AXChartContentDirectionRightToLeft: Self = Self(1);
    pub const AXChartContentDirectionTopToBottom: Self = Self(2);
    pub const AXChartContentDirectionBottomToTop: Self = Self(3);
    pub const AXChartContentDirectionRadialClockwise: Self = Self(4);
    pub const AXChartContentDirectionRadialCounterClockwise: Self = Self(5);
}

unsafe impl Encode for AXChartDescriptorContentDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AXChartDescriptorContentDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXChartDescriptor;

    unsafe impl ClassType for AXChartDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for AXChartDescriptor {}

unsafe impl CopyingHelper for AXChartDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AXChartDescriptor {}

extern_methods!(
    unsafe impl AXChartDescriptor {
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: Option<&NSString>);

        #[method_id(@__retain_semantics Other attributedTitle)]
        pub unsafe fn attributedTitle(&self) -> Option<Retained<NSAttributedString>>;

        #[method(setAttributedTitle:)]
        pub unsafe fn setAttributedTitle(&self, attributed_title: Option<&NSAttributedString>);

        #[method_id(@__retain_semantics Other summary)]
        pub unsafe fn summary(&self) -> Option<Retained<NSString>>;

        #[method(setSummary:)]
        pub unsafe fn setSummary(&self, summary: Option<&NSString>);

        #[method(contentDirection)]
        pub unsafe fn contentDirection(&self) -> AXChartDescriptorContentDirection;

        #[method(setContentDirection:)]
        pub unsafe fn setContentDirection(
            &self,
            content_direction: AXChartDescriptorContentDirection,
        );

        #[method(contentFrame)]
        pub unsafe fn contentFrame(&self) -> CGRect;

        #[method(setContentFrame:)]
        pub unsafe fn setContentFrame(&self, content_frame: CGRect);

        #[method_id(@__retain_semantics Other series)]
        pub unsafe fn series(&self) -> Retained<NSArray<AXDataSeriesDescriptor>>;

        #[method(setSeries:)]
        pub unsafe fn setSeries(&self, series: &NSArray<AXDataSeriesDescriptor>);

        #[method_id(@__retain_semantics Other xAxis)]
        pub unsafe fn xAxis(&self) -> Retained<ProtocolObject<dyn AXDataAxisDescriptor>>;

        #[method(setXAxis:)]
        pub unsafe fn setXAxis(&self, x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>);

        #[method_id(@__retain_semantics Other yAxis)]
        pub unsafe fn yAxis(&self) -> Option<Retained<AXNumericDataAxisDescriptor>>;

        #[method(setYAxis:)]
        pub unsafe fn setYAxis(&self, y_axis: Option<&AXNumericDataAxisDescriptor>);

        #[method_id(@__retain_semantics Other additionalAxes)]
        pub unsafe fn additionalAxes(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>>;

        #[method(setAdditionalAxes:)]
        pub unsafe fn setAdditionalAxes(
            &self,
            additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
        );

        #[method_id(@__retain_semantics Init initWithTitle:summary:xAxisDescriptor:yAxisDescriptor:series:)]
        pub unsafe fn initWithTitle_summary_xAxisDescriptor_yAxisDescriptor_series(
            this: Allocated<Self>,
            title: Option<&NSString>,
            summary: Option<&NSString>,
            x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
            y_axis: Option<&AXNumericDataAxisDescriptor>,
            series: &NSArray<AXDataSeriesDescriptor>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithAttributedTitle:summary:xAxisDescriptor:yAxisDescriptor:series:)]
        pub unsafe fn initWithAttributedTitle_summary_xAxisDescriptor_yAxisDescriptor_series(
            this: Allocated<Self>,
            attributed_title: Option<&NSAttributedString>,
            summary: Option<&NSString>,
            x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
            y_axis: &AXNumericDataAxisDescriptor,
            series: &NSArray<AXDataSeriesDescriptor>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithTitle:summary:xAxisDescriptor:yAxisDescriptor:additionalAxes:series:)]
        pub unsafe fn initWithTitle_summary_xAxisDescriptor_yAxisDescriptor_additionalAxes_series(
            this: Allocated<Self>,
            title: Option<&NSString>,
            summary: Option<&NSString>,
            x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
            y_axis: Option<&AXNumericDataAxisDescriptor>,
            additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
            series: &NSArray<AXDataSeriesDescriptor>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithAttributedTitle:summary:xAxisDescriptor:yAxisDescriptor:additionalAxes:series:)]
        pub unsafe fn initWithAttributedTitle_summary_xAxisDescriptor_yAxisDescriptor_additionalAxes_series(
            this: Allocated<Self>,
            attributed_title: Option<&NSAttributedString>,
            summary: Option<&NSString>,
            x_axis: &ProtocolObject<dyn AXDataAxisDescriptor>,
            y_axis: Option<&AXNumericDataAxisDescriptor>,
            additional_axes: Option<&NSArray<ProtocolObject<dyn AXDataAxisDescriptor>>>,
            series: &NSArray<AXDataSeriesDescriptor>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AXLiveAudioGraph;

    unsafe impl ClassType for AXLiveAudioGraph {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for AXLiveAudioGraph {}

extern_methods!(
    unsafe impl AXLiveAudioGraph {
        #[method(start)]
        pub unsafe fn start();

        #[method(updateValue:)]
        pub unsafe fn updateValue(value: c_double);

        #[method(stop)]
        pub unsafe fn stop();
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AXLiveAudioGraph {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
