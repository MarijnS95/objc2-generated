//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

pub type CLHeadingComponentValue = c_double;

extern "C" {
    #[cfg(feature = "CoreLocation_CLLocation")]
    pub static kCLHeadingFilterNone: CLLocationDegrees;
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CLHeading;

    unsafe impl ClassType for CLHeading {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCoding for CLHeading {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSCopying for CLHeading {}

unsafe impl NSObjectProtocol for CLHeading {}

#[cfg(feature = "Foundation_NSObject")]
unsafe impl NSSecureCoding for CLHeading {}

extern_methods!(
    unsafe impl CLHeading {
        #[cfg(feature = "CoreLocation_CLLocation")]
        #[method(magneticHeading)]
        pub unsafe fn magneticHeading(&self) -> CLLocationDirection;

        #[cfg(feature = "CoreLocation_CLLocation")]
        #[method(trueHeading)]
        pub unsafe fn trueHeading(&self) -> CLLocationDirection;

        #[cfg(feature = "CoreLocation_CLLocation")]
        #[method(headingAccuracy)]
        pub unsafe fn headingAccuracy(&self) -> CLLocationDirection;

        #[method(x)]
        pub unsafe fn x(&self) -> CLHeadingComponentValue;

        #[method(y)]
        pub unsafe fn y(&self) -> CLHeadingComponentValue;

        #[method(z)]
        pub unsafe fn z(&self) -> CLHeadingComponentValue;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other timestamp)]
        pub unsafe fn timestamp(&self) -> Id<NSDate>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CLHeading {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
