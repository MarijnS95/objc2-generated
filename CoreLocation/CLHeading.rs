//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corelocation/clheadingcomponentvalue?language=objc)
pub type CLHeadingComponentValue = c_double;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corelocation/kclheadingfilternone?language=objc)
    #[cfg(feature = "CLLocation")]
    pub static kCLHeadingFilterNone: CLLocationDegrees;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/corelocation/clheading?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CLHeading;
);

unsafe impl NSCoding for CLHeading {}

unsafe impl NSCopying for CLHeading {}

unsafe impl CopyingHelper for CLHeading {
    type Result = Self;
}

unsafe impl NSObjectProtocol for CLHeading {}

unsafe impl NSSecureCoding for CLHeading {}

extern_methods!(
    unsafe impl CLHeading {
        #[cfg(feature = "CLLocation")]
        #[method(magneticHeading)]
        pub unsafe fn magneticHeading(&self) -> CLLocationDirection;

        #[cfg(feature = "CLLocation")]
        #[method(trueHeading)]
        pub unsafe fn trueHeading(&self) -> CLLocationDirection;

        #[cfg(feature = "CLLocation")]
        #[method(headingAccuracy)]
        pub unsafe fn headingAccuracy(&self) -> CLLocationDirection;

        #[method(x)]
        pub unsafe fn x(&self) -> CLHeadingComponentValue;

        #[method(y)]
        pub unsafe fn y(&self) -> CLHeadingComponentValue;

        #[method(z)]
        pub unsafe fn z(&self) -> CLHeadingComponentValue;

        #[method_id(timestamp)]
        #[unsafe(method_family = none)]
        pub unsafe fn timestamp(&self) -> Retained<NSDate>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CLHeading {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
