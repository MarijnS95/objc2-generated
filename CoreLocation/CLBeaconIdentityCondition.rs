//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corelocation/clbeaconmajorvalue?language=objc)
pub type CLBeaconMajorValue = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/corelocation/clbeaconminorvalue?language=objc)
pub type CLBeaconMinorValue = u16;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/corelocation/clbeaconidentitycondition?language=objc)
    #[unsafe(super(CLCondition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CLCondition")]
    pub struct CLBeaconIdentityCondition;
);

#[cfg(feature = "CLCondition")]
unsafe impl NSCoding for CLBeaconIdentityCondition {}

#[cfg(feature = "CLCondition")]
unsafe impl NSCopying for CLBeaconIdentityCondition {}

#[cfg(feature = "CLCondition")]
unsafe impl CopyingHelper for CLBeaconIdentityCondition {
    type Result = Self;
}

#[cfg(feature = "CLCondition")]
unsafe impl NSObjectProtocol for CLBeaconIdentityCondition {}

#[cfg(feature = "CLCondition")]
unsafe impl NSSecureCoding for CLBeaconIdentityCondition {}

extern_methods!(
    #[cfg(feature = "CLCondition")]
    unsafe impl CLBeaconIdentityCondition {
        #[unsafe(method_family(none))]
        #[method_id(UUID)]
        pub unsafe fn UUID(&self) -> Retained<NSUUID>;

        #[unsafe(method_family(none))]
        #[method_id(major)]
        pub unsafe fn major(&self) -> Option<Retained<NSNumber>>;

        #[unsafe(method_family(none))]
        #[method_id(minor)]
        pub unsafe fn minor(&self) -> Option<Retained<NSNumber>>;

        #[unsafe(method_family(init))]
        #[method_id(initWithUUID:)]
        pub unsafe fn initWithUUID(this: Allocated<Self>, uuid: &NSUUID) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithUUID:major:)]
        pub unsafe fn initWithUUID_major(
            this: Allocated<Self>,
            uuid: &NSUUID,
            major: CLBeaconMajorValue,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithUUID:major:minor:)]
        pub unsafe fn initWithUUID_major_minor(
            this: Allocated<Self>,
            uuid: &NSUUID,
            major: CLBeaconMajorValue,
            minor: CLBeaconMinorValue,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CLCondition`
    #[cfg(feature = "CLCondition")]
    unsafe impl CLBeaconIdentityCondition {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
