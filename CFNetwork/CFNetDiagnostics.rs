//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/cfnetdiagnostic?language=objc)
#[repr(C)]
pub struct CFNetDiagnostic {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFNetDiagnostic"]
    unsafe impl CFNetDiagnostic {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/cfnetdiagnosticstatusvalues?language=objc)
// NS_ENUM
#[deprecated]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNetDiagnosticStatusValues(pub c_int);
impl CFNetDiagnosticStatusValues {
    #[deprecated]
    #[doc(alias = "kCFNetDiagnosticNoErr")]
    pub const NoErr: Self = Self(0);
    #[deprecated]
    #[doc(alias = "kCFNetDiagnosticErr")]
    pub const Err: Self = Self(-66560);
    #[deprecated]
    #[doc(alias = "kCFNetDiagnosticConnectionUp")]
    pub const ConnectionUp: Self = Self(-66559);
    #[deprecated]
    #[doc(alias = "kCFNetDiagnosticConnectionIndeterminate")]
    pub const ConnectionIndeterminate: Self = Self(-66558);
    #[deprecated]
    #[doc(alias = "kCFNetDiagnosticConnectionDown")]
    pub const ConnectionDown: Self = Self(-66557);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFNetDiagnosticStatusValues {
    const ENCODING: Encoding = c_int::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFNetDiagnosticStatusValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/cfnetdiagnosticstatus?language=objc)
pub type CFNetDiagnosticStatus = CFIndex;

#[deprecated]
#[inline]
pub unsafe extern "C-unwind" fn CFNetDiagnosticCreateWithStreams(
    alloc: Option<&CFAllocator>,
    read_stream: Option<&CFReadStream>,
    write_stream: Option<&CFWriteStream>,
) -> CFRetained<CFNetDiagnostic> {
    extern "C-unwind" {
        fn CFNetDiagnosticCreateWithStreams(
            alloc: Option<&CFAllocator>,
            read_stream: Option<&CFReadStream>,
            write_stream: Option<&CFWriteStream>,
        ) -> Option<NonNull<CFNetDiagnostic>>;
    }
    let ret = unsafe { CFNetDiagnosticCreateWithStreams(alloc, read_stream, write_stream) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[deprecated]
#[inline]
pub unsafe extern "C-unwind" fn CFNetDiagnosticCreateWithURL(
    alloc: &CFAllocator,
    url: &CFURL,
) -> CFRetained<CFNetDiagnostic> {
    extern "C-unwind" {
        fn CFNetDiagnosticCreateWithURL(
            alloc: &CFAllocator,
            url: &CFURL,
        ) -> Option<NonNull<CFNetDiagnostic>>;
    }
    let ret = unsafe { CFNetDiagnosticCreateWithURL(alloc, url) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    #[deprecated]
    pub fn CFNetDiagnosticSetName(details: &CFNetDiagnostic, name: &CFString);
}

extern "C-unwind" {
    #[deprecated]
    pub fn CFNetDiagnosticDiagnoseProblemInteractively(
        details: &CFNetDiagnostic,
    ) -> CFNetDiagnosticStatus;
}

extern "C-unwind" {
    #[deprecated]
    pub fn CFNetDiagnosticCopyNetworkStatusPassively(
        details: &CFNetDiagnostic,
        description: *mut *const CFString,
    ) -> CFNetDiagnosticStatus;
}
