//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcferrordomaincfnetwork?language=objc)
    pub static kCFErrorDomainCFNetwork: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcferrordomainwinsock?language=objc)
    pub static kCFErrorDomainWinSock: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/cfnetworkerrors?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNetworkErrors(pub c_int);
impl CFNetworkErrors {
    #[doc(alias = "kCFHostErrorHostNotFound")]
    pub const CFHostErrorHostNotFound: Self = Self(1);
    #[doc(alias = "kCFHostErrorUnknown")]
    pub const CFHostErrorUnknown: Self = Self(2);
    #[doc(alias = "kCFSOCKSErrorUnknownClientVersion")]
    pub const CFSOCKSErrorUnknownClientVersion: Self = Self(100);
    #[doc(alias = "kCFSOCKSErrorUnsupportedServerVersion")]
    pub const CFSOCKSErrorUnsupportedServerVersion: Self = Self(101);
    #[doc(alias = "kCFSOCKS4ErrorRequestFailed")]
    pub const CFSOCKS4ErrorRequestFailed: Self = Self(110);
    #[doc(alias = "kCFSOCKS4ErrorIdentdFailed")]
    pub const CFSOCKS4ErrorIdentdFailed: Self = Self(111);
    #[doc(alias = "kCFSOCKS4ErrorIdConflict")]
    pub const CFSOCKS4ErrorIdConflict: Self = Self(112);
    #[doc(alias = "kCFSOCKS4ErrorUnknownStatusCode")]
    pub const CFSOCKS4ErrorUnknownStatusCode: Self = Self(113);
    #[doc(alias = "kCFSOCKS5ErrorBadState")]
    pub const CFSOCKS5ErrorBadState: Self = Self(120);
    #[doc(alias = "kCFSOCKS5ErrorBadResponseAddr")]
    pub const CFSOCKS5ErrorBadResponseAddr: Self = Self(121);
    #[doc(alias = "kCFSOCKS5ErrorBadCredentials")]
    pub const CFSOCKS5ErrorBadCredentials: Self = Self(122);
    #[doc(alias = "kCFSOCKS5ErrorUnsupportedNegotiationMethod")]
    pub const CFSOCKS5ErrorUnsupportedNegotiationMethod: Self = Self(123);
    #[doc(alias = "kCFSOCKS5ErrorNoAcceptableMethod")]
    pub const CFSOCKS5ErrorNoAcceptableMethod: Self = Self(124);
    #[doc(alias = "kCFFTPErrorUnexpectedStatusCode")]
    pub const CFFTPErrorUnexpectedStatusCode: Self = Self(200);
    #[doc(alias = "kCFErrorHTTPAuthenticationTypeUnsupported")]
    pub const CFErrorHTTPAuthenticationTypeUnsupported: Self = Self(300);
    #[doc(alias = "kCFErrorHTTPBadCredentials")]
    pub const CFErrorHTTPBadCredentials: Self = Self(301);
    #[doc(alias = "kCFErrorHTTPConnectionLost")]
    pub const CFErrorHTTPConnectionLost: Self = Self(302);
    #[doc(alias = "kCFErrorHTTPParseFailure")]
    pub const CFErrorHTTPParseFailure: Self = Self(303);
    #[doc(alias = "kCFErrorHTTPRedirectionLoopDetected")]
    pub const CFErrorHTTPRedirectionLoopDetected: Self = Self(304);
    #[doc(alias = "kCFErrorHTTPBadURL")]
    pub const CFErrorHTTPBadURL: Self = Self(305);
    #[doc(alias = "kCFErrorHTTPProxyConnectionFailure")]
    pub const CFErrorHTTPProxyConnectionFailure: Self = Self(306);
    #[doc(alias = "kCFErrorHTTPBadProxyCredentials")]
    pub const CFErrorHTTPBadProxyCredentials: Self = Self(307);
    #[doc(alias = "kCFErrorPACFileError")]
    pub const CFErrorPACFileError: Self = Self(308);
    #[doc(alias = "kCFErrorPACFileAuth")]
    pub const CFErrorPACFileAuth: Self = Self(309);
    #[doc(alias = "kCFErrorHTTPSProxyConnectionFailure")]
    pub const CFErrorHTTPSProxyConnectionFailure: Self = Self(310);
    #[doc(alias = "kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod")]
    pub const CFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod: Self = Self(311);
    #[doc(alias = "kCFURLErrorBackgroundSessionInUseByAnotherProcess")]
    pub const CFURLErrorBackgroundSessionInUseByAnotherProcess: Self = Self(-996);
    #[doc(alias = "kCFURLErrorBackgroundSessionWasDisconnected")]
    pub const CFURLErrorBackgroundSessionWasDisconnected: Self = Self(-997);
    #[doc(alias = "kCFURLErrorUnknown")]
    pub const CFURLErrorUnknown: Self = Self(-998);
    #[doc(alias = "kCFURLErrorCancelled")]
    pub const CFURLErrorCancelled: Self = Self(-999);
    #[doc(alias = "kCFURLErrorBadURL")]
    pub const CFURLErrorBadURL: Self = Self(-1000);
    #[doc(alias = "kCFURLErrorTimedOut")]
    pub const CFURLErrorTimedOut: Self = Self(-1001);
    #[doc(alias = "kCFURLErrorUnsupportedURL")]
    pub const CFURLErrorUnsupportedURL: Self = Self(-1002);
    #[doc(alias = "kCFURLErrorCannotFindHost")]
    pub const CFURLErrorCannotFindHost: Self = Self(-1003);
    #[doc(alias = "kCFURLErrorCannotConnectToHost")]
    pub const CFURLErrorCannotConnectToHost: Self = Self(-1004);
    #[doc(alias = "kCFURLErrorNetworkConnectionLost")]
    pub const CFURLErrorNetworkConnectionLost: Self = Self(-1005);
    #[doc(alias = "kCFURLErrorDNSLookupFailed")]
    pub const CFURLErrorDNSLookupFailed: Self = Self(-1006);
    #[doc(alias = "kCFURLErrorHTTPTooManyRedirects")]
    pub const CFURLErrorHTTPTooManyRedirects: Self = Self(-1007);
    #[doc(alias = "kCFURLErrorResourceUnavailable")]
    pub const CFURLErrorResourceUnavailable: Self = Self(-1008);
    #[doc(alias = "kCFURLErrorNotConnectedToInternet")]
    pub const CFURLErrorNotConnectedToInternet: Self = Self(-1009);
    #[doc(alias = "kCFURLErrorRedirectToNonExistentLocation")]
    pub const CFURLErrorRedirectToNonExistentLocation: Self = Self(-1010);
    #[doc(alias = "kCFURLErrorBadServerResponse")]
    pub const CFURLErrorBadServerResponse: Self = Self(-1011);
    #[doc(alias = "kCFURLErrorUserCancelledAuthentication")]
    pub const CFURLErrorUserCancelledAuthentication: Self = Self(-1012);
    #[doc(alias = "kCFURLErrorUserAuthenticationRequired")]
    pub const CFURLErrorUserAuthenticationRequired: Self = Self(-1013);
    #[doc(alias = "kCFURLErrorZeroByteResource")]
    pub const CFURLErrorZeroByteResource: Self = Self(-1014);
    #[doc(alias = "kCFURLErrorCannotDecodeRawData")]
    pub const CFURLErrorCannotDecodeRawData: Self = Self(-1015);
    #[doc(alias = "kCFURLErrorCannotDecodeContentData")]
    pub const CFURLErrorCannotDecodeContentData: Self = Self(-1016);
    #[doc(alias = "kCFURLErrorCannotParseResponse")]
    pub const CFURLErrorCannotParseResponse: Self = Self(-1017);
    #[doc(alias = "kCFURLErrorInternationalRoamingOff")]
    pub const CFURLErrorInternationalRoamingOff: Self = Self(-1018);
    #[doc(alias = "kCFURLErrorCallIsActive")]
    pub const CFURLErrorCallIsActive: Self = Self(-1019);
    #[doc(alias = "kCFURLErrorDataNotAllowed")]
    pub const CFURLErrorDataNotAllowed: Self = Self(-1020);
    #[doc(alias = "kCFURLErrorRequestBodyStreamExhausted")]
    pub const CFURLErrorRequestBodyStreamExhausted: Self = Self(-1021);
    #[doc(alias = "kCFURLErrorAppTransportSecurityRequiresSecureConnection")]
    pub const CFURLErrorAppTransportSecurityRequiresSecureConnection: Self = Self(-1022);
    #[doc(alias = "kCFURLErrorFileDoesNotExist")]
    pub const CFURLErrorFileDoesNotExist: Self = Self(-1100);
    #[doc(alias = "kCFURLErrorFileIsDirectory")]
    pub const CFURLErrorFileIsDirectory: Self = Self(-1101);
    #[doc(alias = "kCFURLErrorNoPermissionsToReadFile")]
    pub const CFURLErrorNoPermissionsToReadFile: Self = Self(-1102);
    #[doc(alias = "kCFURLErrorDataLengthExceedsMaximum")]
    pub const CFURLErrorDataLengthExceedsMaximum: Self = Self(-1103);
    #[doc(alias = "kCFURLErrorFileOutsideSafeArea")]
    pub const CFURLErrorFileOutsideSafeArea: Self = Self(-1104);
    #[doc(alias = "kCFURLErrorSecureConnectionFailed")]
    pub const CFURLErrorSecureConnectionFailed: Self = Self(-1200);
    #[doc(alias = "kCFURLErrorServerCertificateHasBadDate")]
    pub const CFURLErrorServerCertificateHasBadDate: Self = Self(-1201);
    #[doc(alias = "kCFURLErrorServerCertificateUntrusted")]
    pub const CFURLErrorServerCertificateUntrusted: Self = Self(-1202);
    #[doc(alias = "kCFURLErrorServerCertificateHasUnknownRoot")]
    pub const CFURLErrorServerCertificateHasUnknownRoot: Self = Self(-1203);
    #[doc(alias = "kCFURLErrorServerCertificateNotYetValid")]
    pub const CFURLErrorServerCertificateNotYetValid: Self = Self(-1204);
    #[doc(alias = "kCFURLErrorClientCertificateRejected")]
    pub const CFURLErrorClientCertificateRejected: Self = Self(-1205);
    #[doc(alias = "kCFURLErrorClientCertificateRequired")]
    pub const CFURLErrorClientCertificateRequired: Self = Self(-1206);
    #[doc(alias = "kCFURLErrorCannotLoadFromNetwork")]
    pub const CFURLErrorCannotLoadFromNetwork: Self = Self(-2000);
    #[doc(alias = "kCFURLErrorCannotCreateFile")]
    pub const CFURLErrorCannotCreateFile: Self = Self(-3000);
    #[doc(alias = "kCFURLErrorCannotOpenFile")]
    pub const CFURLErrorCannotOpenFile: Self = Self(-3001);
    #[doc(alias = "kCFURLErrorCannotCloseFile")]
    pub const CFURLErrorCannotCloseFile: Self = Self(-3002);
    #[doc(alias = "kCFURLErrorCannotWriteToFile")]
    pub const CFURLErrorCannotWriteToFile: Self = Self(-3003);
    #[doc(alias = "kCFURLErrorCannotRemoveFile")]
    pub const CFURLErrorCannotRemoveFile: Self = Self(-3004);
    #[doc(alias = "kCFURLErrorCannotMoveFile")]
    pub const CFURLErrorCannotMoveFile: Self = Self(-3005);
    #[doc(alias = "kCFURLErrorDownloadDecodingFailedMidStream")]
    pub const CFURLErrorDownloadDecodingFailedMidStream: Self = Self(-3006);
    #[doc(alias = "kCFURLErrorDownloadDecodingFailedToComplete")]
    pub const CFURLErrorDownloadDecodingFailedToComplete: Self = Self(-3007);
    #[doc(alias = "kCFHTTPCookieCannotParseCookieFile")]
    pub const CFHTTPCookieCannotParseCookieFile: Self = Self(-4000);
    #[doc(alias = "kCFNetServiceErrorUnknown")]
    pub const CFNetServiceErrorUnknown: Self = Self(-72000);
    #[doc(alias = "kCFNetServiceErrorCollision")]
    pub const CFNetServiceErrorCollision: Self = Self(-72001);
    #[doc(alias = "kCFNetServiceErrorNotFound")]
    pub const CFNetServiceErrorNotFound: Self = Self(-72002);
    #[doc(alias = "kCFNetServiceErrorInProgress")]
    pub const CFNetServiceErrorInProgress: Self = Self(-72003);
    #[doc(alias = "kCFNetServiceErrorBadArgument")]
    pub const CFNetServiceErrorBadArgument: Self = Self(-72004);
    #[doc(alias = "kCFNetServiceErrorCancel")]
    pub const CFNetServiceErrorCancel: Self = Self(-72005);
    #[doc(alias = "kCFNetServiceErrorInvalid")]
    pub const CFNetServiceErrorInvalid: Self = Self(-72006);
    #[doc(alias = "kCFNetServiceErrorTimeout")]
    pub const CFNetServiceErrorTimeout: Self = Self(-72007);
    #[doc(alias = "kCFNetServiceErrorDNSServiceFailure")]
    pub const CFNetServiceErrorDNSServiceFailure: Self = Self(-73000);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFNetworkErrors {
    const ENCODING: Encoding = c_int::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFNetworkErrors {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfurlerrorfailingurlerrorkey?language=objc)
    pub static kCFURLErrorFailingURLErrorKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfurlerrorfailingurlstringerrorkey?language=objc)
    pub static kCFURLErrorFailingURLStringErrorKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfgetaddrinfofailurekey?language=objc)
    pub static kCFGetAddrInfoFailureKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfsocksstatuscodekey?language=objc)
    pub static kCFSOCKSStatusCodeKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfsocksversionkey?language=objc)
    pub static kCFSOCKSVersionKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfsocksnegotiationmethodkey?language=objc)
    pub static kCFSOCKSNegotiationMethodKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfdnsservicefailurekey?language=objc)
    pub static kCFDNSServiceFailureKey: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/cfnetwork/kcfftpstatuscodekey?language=objc)
    pub static kCFFTPStatusCodeKey: &'static CFString;
}
