//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-contacts")]
use objc2_contacts::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A view controller to display and edit a
    /// `CNContact.`
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contactsui/cncontactviewcontroller?language=objc)
    #[unsafe(super(NSViewController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct CNContactViewController;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for CNContactViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSEditor for CNContactViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for CNContactViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSSeguePerforming for CNContactViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSUserInterfaceItemIdentification for CNContactViewController {}

extern_methods!(
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl CNContactViewController {
        #[cfg(feature = "objc2-contacts")]
        /// Descriptor for all keys that must be fetched on a contact before setting it on the view controller.
        ///
        /// Pass this descriptor to the keysToFetch of the
        /// `CNContactFetchRequest`if you want to display the contact in a
        /// `CNContactViewController.`
        #[method_id(@__retain_semantics Other descriptorForRequiredKeys)]
        pub unsafe fn descriptorForRequiredKeys(
            mtm: MainThreadMarker,
        ) -> Retained<ProtocolObject<dyn CNKeyDescriptor>>;

        #[cfg(feature = "objc2-contacts")]
        /// A
        /// `contact`to display.
        ///
        /// When
        /// `contact`is nil, displays an empty selection state.
        #[method_id(@__retain_semantics Other contact)]
        pub unsafe fn contact(&self) -> Option<Retained<CNContact>>;

        #[cfg(feature = "objc2-contacts")]
        /// Setter for [`contact`][Self::contact].
        #[method(setContact:)]
        pub unsafe fn setContact(&self, contact: Option<&CNContact>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl CNContactViewController {
        #[method_id(@__retain_semantics Init initWithNibName:bundle:)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSNibName>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl CNContactViewController {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl CNContactViewController {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
