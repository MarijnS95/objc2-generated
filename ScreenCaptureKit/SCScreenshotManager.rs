//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/screencapturekit/scscreenshotmanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCScreenshotManager;
);

unsafe impl NSObjectProtocol for SCScreenshotManager {}

impl SCScreenshotManager {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(feature = "SCStream", feature = "block2", feature = "objc2-core-media"))]
        /// captureSampleBufferWithFilter:configuration:completionHandler:
        ///
        /// Parameter `contentFilter`: is the filter containing the content to take a screenshot of
        ///
        /// Parameter `config`: is the stream configuration containing information on how to format the screenshot
        ///
        /// Parameter `completionHandler`: is the handler that will deliver the screenshot to the user
        ///
        /// this method takes a screenshot using the filter and configuration passed in and returns it as a CMSampleBuffer
        #[unsafe(method(captureSampleBufferWithFilter:configuration:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn captureSampleBufferWithFilter_configuration_completionHandler(
            content_filter: &SCContentFilter,
            config: &SCStreamConfiguration,
            completion_handler: Option<&block2::Block<dyn Fn(*mut CMSampleBuffer, *mut NSError)>>,
        );

        #[cfg(all(
            feature = "SCStream",
            feature = "block2",
            feature = "objc2-core-graphics"
        ))]
        /// captureImageWithFilter:configuration:completionHandler:
        ///
        /// Parameter `contentFilter`: is the filter containing the content to take a screenshot of
        ///
        /// Parameter `config`: is the stream configuration containing information on how to format the screenshot
        ///
        /// Parameter `completionHandler`: is the handler that will deliver the screenshot to the user
        ///
        /// this method takes a screenshot using the filter and configuration passed in and returns it as a CGImage in BGRA format if captureDynamicRange is SCCaptureDynamicRangeSDR, in RGhA format if captureDynamicRange is SCCaptureDynamicRangeHDRLocalDisplay/SCCaptureDynamicRangeHDRCanonicalDisplay
        #[unsafe(method(captureImageWithFilter:configuration:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn captureImageWithFilter_configuration_completionHandler(
            content_filter: &SCContentFilter,
            config: &SCStreamConfiguration,
            completion_handler: Option<&block2::Block<dyn Fn(*mut CGImage, *mut NSError)>>,
        );

        #[cfg(all(
            feature = "block2",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics"
        ))]
        /// captureImageInRect:completionHandler:
        ///
        /// Parameter `rect`: the rect for the region in points on the screen space for the screen shot, this is display agnostic and supports multiple displays
        ///
        /// Parameter `completionHandler`: is the handler that will deliver the screenshot to the client
        ///
        /// this method returns an image containing the contents of the rectangle in points, specified in display space
        #[unsafe(method(captureImageInRect:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn captureImageInRect_completionHandler(
            rect: CGRect,
            completion_handler: Option<&block2::Block<dyn Fn(*mut CGImage, *mut NSError)>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl SCScreenshotManager {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
