//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Represents an opaque Merkle tree proof of inclusion. Inclusion hashes are provided to verify that the individual device has access to the document.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/sharedwithyoucore/swpersonidentityproof?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SWPersonIdentityProof;
);

extern_conformance!(
    unsafe impl NSCoding for SWPersonIdentityProof {}
);

extern_conformance!(
    unsafe impl NSCopying for SWPersonIdentityProof {}
);

unsafe impl CopyingHelper for SWPersonIdentityProof {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SWPersonIdentityProof {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SWPersonIdentityProof {}
);

impl SWPersonIdentityProof {
    extern_methods!(
        /// Hashes of missing Merkle tree nodes that can provide proof of inclusion.
        ///
        /// The data contains an array of SHA256 hash of the user's combined public identities.
        #[unsafe(method(inclusionHashes))]
        #[unsafe(method_family = none)]
        pub unsafe fn inclusionHashes(&self) -> Retained<NSArray<NSData>>;

        /// Public key of local device
        #[unsafe(method(publicKey))]
        #[unsafe(method_family = none)]
        pub unsafe fn publicKey(&self) -> Retained<NSData>;

        /// Index of local public key in the Merkle tree
        ///
        /// This data can be used to determine if the node is the left or the right child
        #[unsafe(method(publicKeyIndex))]
        #[unsafe(method_family = none)]
        pub unsafe fn publicKeyIndex(&self) -> NSUInteger;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/sharedwithyoucore/swsignedpersonidentityproof?language=objc)
    #[unsafe(super(SWPersonIdentityProof, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SWSignedPersonIdentityProof;
);

extern_conformance!(
    unsafe impl NSCoding for SWSignedPersonIdentityProof {}
);

extern_conformance!(
    unsafe impl NSCopying for SWSignedPersonIdentityProof {}
);

unsafe impl CopyingHelper for SWSignedPersonIdentityProof {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SWSignedPersonIdentityProof {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SWSignedPersonIdentityProof {}
);

impl SWSignedPersonIdentityProof {
    extern_methods!(
        #[unsafe(method(initWithPersonIdentityProof:signatureData:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithPersonIdentityProof_signatureData(
            this: Allocated<Self>,
            person_identity_proof: &SWPersonIdentityProof,
            data: &NSData,
        ) -> Retained<Self>;

        /// The signature created by signing the data with this identity.
        #[unsafe(method(signatureData))]
        #[unsafe(method_family = none)]
        pub unsafe fn signatureData(&self) -> Retained<NSData>;
    );
}

/// Methods declared on superclass `SWPersonIdentityProof`.
impl SWSignedPersonIdentityProof {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
