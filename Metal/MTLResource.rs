//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLPurgeableState {
        #[doc(alias = "MTLPurgeableStateKeepCurrent")]
        KeepCurrent = 1,
        #[doc(alias = "MTLPurgeableStateNonVolatile")]
        NonVolatile = 2,
        #[doc(alias = "MTLPurgeableStateVolatile")]
        Volatile = 3,
        #[doc(alias = "MTLPurgeableStateEmpty")]
        Empty = 4,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLCPUCacheMode {
        #[doc(alias = "MTLCPUCacheModeDefaultCache")]
        DefaultCache = 0,
        #[doc(alias = "MTLCPUCacheModeWriteCombined")]
        WriteCombined = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLStorageMode {
        #[doc(alias = "MTLStorageModeShared")]
        Shared = 0,
        #[doc(alias = "MTLStorageModeManaged")]
        Managed = 1,
        #[doc(alias = "MTLStorageModePrivate")]
        Private = 2,
        #[doc(alias = "MTLStorageModeMemoryless")]
        Memoryless = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLHazardTrackingMode {
        #[doc(alias = "MTLHazardTrackingModeDefault")]
        Default = 0,
        #[doc(alias = "MTLHazardTrackingModeUntracked")]
        Untracked = 1,
        #[doc(alias = "MTLHazardTrackingModeTracked")]
        Tracked = 2,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum MTLResourceOptions {
        MTLResourceCPUCacheModeDefaultCache =
            MTLCPUCacheMode::DefaultCache.0 << MTLResourceCPUCacheModeShift,
        MTLResourceCPUCacheModeWriteCombined =
            MTLCPUCacheMode::WriteCombined.0 << MTLResourceCPUCacheModeShift,
        MTLResourceStorageModeShared = MTLStorageMode::Shared.0 << MTLResourceStorageModeShift,
        MTLResourceStorageModeManaged = MTLStorageMode::Managed.0 << MTLResourceStorageModeShift,
        MTLResourceStorageModePrivate = MTLStorageMode::Private.0 << MTLResourceStorageModeShift,
        MTLResourceStorageModeMemoryless =
            MTLStorageMode::Memoryless.0 << MTLResourceStorageModeShift,
        MTLResourceHazardTrackingModeDefault =
            MTLHazardTrackingMode::Default.0 << MTLResourceHazardTrackingModeShift,
        MTLResourceHazardTrackingModeUntracked =
            MTLHazardTrackingMode::Untracked.0 << MTLResourceHazardTrackingModeShift,
        MTLResourceHazardTrackingModeTracked =
            MTLHazardTrackingMode::Tracked.0 << MTLResourceHazardTrackingModeShift,
        #[deprecated]
        MTLResourceOptionCPUCacheModeDefault =
            MTLResourceOptions::MTLResourceCPUCacheModeDefaultCache.0,
        #[deprecated]
        MTLResourceOptionCPUCacheModeWriteCombined =
            MTLResourceOptions::MTLResourceCPUCacheModeWriteCombined.0,
    }
);

extern_protocol!(
    pub unsafe trait MTLResource: NSObjectProtocol {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        fn label(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        fn setLabel(&self, label: Option<&NSString>);

        #[cfg(feature = "Metal_MTLDevice")]
        #[method_id(@__retain_semantics Other device)]
        fn device(&self) -> Id<ProtocolObject<dyn MTLDevice>>;

        #[method(cpuCacheMode)]
        fn cpuCacheMode(&self) -> MTLCPUCacheMode;

        #[method(storageMode)]
        fn storageMode(&self) -> MTLStorageMode;

        #[method(hazardTrackingMode)]
        fn hazardTrackingMode(&self) -> MTLHazardTrackingMode;

        #[method(resourceOptions)]
        fn resourceOptions(&self) -> MTLResourceOptions;

        #[method(setPurgeableState:)]
        fn setPurgeableState(&self, state: MTLPurgeableState) -> MTLPurgeableState;

        #[cfg(feature = "Metal_MTLHeap")]
        #[method_id(@__retain_semantics Other heap)]
        fn heap(&self) -> Option<Id<ProtocolObject<dyn MTLHeap>>>;

        #[method(heapOffset)]
        fn heapOffset(&self) -> NSUInteger;

        #[method(allocatedSize)]
        fn allocatedSize(&self) -> NSUInteger;

        #[method(makeAliasable)]
        unsafe fn makeAliasable(&self);

        #[method(isAliasable)]
        fn isAliasable(&self) -> bool;
    }

    unsafe impl ProtocolType for dyn MTLResource {}
);
