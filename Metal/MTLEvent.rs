//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metal/mtlevent?language=objc)
    pub unsafe trait MTLEvent: NSObjectProtocol {
        #[cfg(feature = "MTLDevice")]
        /// The device this event can be used with. Will be nil when the event is shared across devices (i.e. MTLSharedEvent).
        #[unsafe(method_family(none))]
        #[method_id(device)]
        fn device(&self) -> Option<Retained<ProtocolObject<dyn MTLDevice>>>;

        /// A string to help identify this object.
        #[unsafe(method_family(none))]
        #[method_id(label)]
        fn label(&self) -> Option<Retained<NSString>>;

        /// Setter for [`label`][Self::label].
        #[method(setLabel:)]
        fn setLabel(&self, label: Option<&NSString>);
    }
);

extern_class!(
    /// This class provides a simple interface for handling the dispatching of MTLSharedEvent notifications from Metal.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metal/mtlsharedeventlistener?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLSharedEventListener;
);

unsafe impl NSObjectProtocol for MTLSharedEventListener {}

extern_methods!(
    unsafe impl MTLSharedEventListener {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLSharedEventListener {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub fn new() -> Retained<Self>;
    }
);

impl DefaultRetained for MTLSharedEventListener {
    #[inline]
    fn default_retained() -> Retained<Self> {
        Self::new()
    }
}

/// [Apple's documentation](https://developer.apple.com/documentation/metal/mtlsharedeventnotificationblock?language=objc)
#[cfg(feature = "block2")]
pub type MTLSharedEventNotificationBlock =
    *mut block2::Block<dyn Fn(NonNull<ProtocolObject<dyn MTLSharedEvent>>, u64)>;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metal/mtlsharedevent?language=objc)
    pub unsafe trait MTLSharedEvent: MTLEvent {
        #[cfg(feature = "block2")]
        #[method(notifyListener:atValue:block:)]
        unsafe fn notifyListener_atValue_block(
            &self,
            listener: &MTLSharedEventListener,
            value: u64,
            block: MTLSharedEventNotificationBlock,
        );

        #[unsafe(method_family(new))]
        #[method_id(newSharedEventHandle)]
        unsafe fn newSharedEventHandle(&self) -> Retained<MTLSharedEventHandle>;

        #[method(waitUntilSignaledValue:timeoutMS:)]
        unsafe fn waitUntilSignaledValue_timeoutMS(&self, value: u64, milliseconds: u64) -> bool;

        #[method(signaledValue)]
        unsafe fn signaledValue(&self) -> u64;

        /// Setter for [`signaledValue`][Self::signaledValue].
        #[method(setSignaledValue:)]
        unsafe fn setSignaledValue(&self, signaled_value: u64);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metal/mtlsharedeventhandle?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLSharedEventHandle;
);

unsafe impl NSCoding for MTLSharedEventHandle {}

unsafe impl NSObjectProtocol for MTLSharedEventHandle {}

unsafe impl NSSecureCoding for MTLSharedEventHandle {}

extern_methods!(
    unsafe impl MTLSharedEventHandle {
        #[unsafe(method_family(none))]
        #[method_id(label)]
        pub fn label(&self) -> Option<Retained<NSString>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLSharedEventHandle {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
