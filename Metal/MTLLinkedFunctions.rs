//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A class to set functions to be linked.
    ///
    /// All functions set on this object must have unique names.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metal/mtllinkedfunctions?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLLinkedFunctions;
);

unsafe impl NSCopying for MTLLinkedFunctions {}

unsafe impl CopyingHelper for MTLLinkedFunctions {
    type Result = Self;
}

unsafe impl NSObjectProtocol for MTLLinkedFunctions {}

extern_methods!(
    unsafe impl MTLLinkedFunctions {
        /// Create an autoreleased MTLLinkedFunctions object.
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub fn linkedFunctions() -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLibrary")]
        /// The array of functions to be AIR linked.
        #[method_id(@__retain_semantics Other functions)]
        pub fn functions(&self) -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        /// Setter for [`functions`][Self::functions].
        #[method(setFunctions:)]
        pub fn setFunctions(&self, functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>);

        #[cfg(feature = "MTLLibrary")]
        /// The array of functions compiled to binary to be linked.
        #[method_id(@__retain_semantics Other binaryFunctions)]
        pub fn binaryFunctions(&self)
            -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        /// Setter for [`binaryFunctions`][Self::binaryFunctions].
        #[method(setBinaryFunctions:)]
        pub fn setBinaryFunctions(
            &self,
            binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
        );

        #[cfg(feature = "MTLLibrary")]
        /// Groups of functions, grouped to match callsites in the shader code.
        #[method_id(@__retain_semantics Other groups)]
        pub fn groups(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, NSArray<ProtocolObject<dyn MTLFunction>>>>>;

        #[cfg(feature = "MTLLibrary")]
        /// Setter for [`groups`][Self::groups].
        #[method(setGroups:)]
        pub fn setGroups(
            &self,
            groups: Option<&NSDictionary<NSString, NSArray<ProtocolObject<dyn MTLFunction>>>>,
        );

        #[cfg(feature = "MTLLibrary")]
        /// The array of functions to be AIR linked.
        ///
        /// These functions are not exported by the pipeline state as MTLFunctionHandle objects.
        /// Function pointer support is not required to link private functions.
        #[method_id(@__retain_semantics Other privateFunctions)]
        pub fn privateFunctions(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        /// Setter for [`privateFunctions`][Self::privateFunctions].
        #[method(setPrivateFunctions:)]
        pub fn setPrivateFunctions(
            &self,
            private_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLLinkedFunctions {
        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Retained<Self>;
    }
);

impl DefaultRetained for MTLLinkedFunctions {
    #[inline]
    fn default_retained() -> Retained<Self> {
        Self::new()
    }
}
