//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A view controller subclass that allows fine grained control of the user interface system's handling
    /// of game controller events. Set an instance of this class as your root view controller if you intend
    /// to use GCController APIs for handling game controllers.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gceventviewcontroller?language=objc)
    #[unsafe(super(NSViewController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct GCEventViewController;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSCoding for GCEventViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSEditor for GCEventViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSObjectProtocol for GCEventViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSSeguePerforming for GCEventViewController {}

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
unsafe impl NSUserInterfaceItemIdentification for GCEventViewController {}

extern_methods!(
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl GCEventViewController {
        /// Controllers can be used to control the general UIKit user interface and for many views that is
        /// the default behavior. By using a controller event view controller you get fine grained control
        /// over whether the controller events go trough the UIEvent
        /// &
        /// UIResponder chain, or if they are
        /// decoupled from the UI and all incoming data is served via GCController.
        ///
        /// Defaults to NO - suppressing UIEvents from game controllers and presenting them via the GCController
        /// API whilst this controller's view or any of it's subviews are the first responders. If you are not
        /// using any UIView components or UIEvents in your application you should leave this as NO and process
        /// your game controller events via the normal GCController API.
        ///
        /// If set to YES the controller input will start flowing through UIEvent and the UIResponder
        /// chain will be used. This gives you fine grained control over the event handling of the
        /// controlled view and its subviews. You should stop using GCController instances and the corresponding
        /// profiles if you no longer need to read input from them.
        ///
        /// Note that unlike UIView.userInteractionEnabled this only controls the flow of game controller events.
        ///
        ///
        /// See: GCController
        ///
        /// See: UIView.userInteractionEnabled
        #[method(controllerUserInteractionEnabled)]
        pub unsafe fn controllerUserInteractionEnabled(&self) -> bool;

        /// Setter for [`controllerUserInteractionEnabled`][Self::controllerUserInteractionEnabled].
        #[method(setControllerUserInteractionEnabled:)]
        pub unsafe fn setControllerUserInteractionEnabled(
            &self,
            controller_user_interaction_enabled: bool,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl GCEventViewController {
        #[unsafe(method_family(init))]
        #[method_id(initWithNibName:bundle:)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSNibName>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl GCEventViewController {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    unsafe impl GCEventViewController {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
