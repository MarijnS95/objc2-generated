//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// Use these constants with NSNotificationCenter to listen to connection and disconnection events
    ///
    /// Use GCKeyboardDidConnectNotification for observing keyboard connection
    /// Use GCKeyboardDidDisconnectNotification for observing keyboard disconnection
    ///
    /// The 'object' property of the notification will contain the GCKeyboard that was connected or disconnected.
    ///
    ///
    /// See: NSNotificationCetner
    ///
    /// Note: All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once until last keyboard disconnects.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gckeyboarddidconnectnotification?language=objc)
    pub static GCKeyboardDidConnectNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gckeyboarddiddisconnectnotification?language=objc)
    pub static GCKeyboardDidDisconnectNotification: &'static NSString;
}

extern_class!(
    /// GCKeyboard is available to an application that links to GameController.framework
    /// There are 2 ways to access keyboard paired to the system:
    /// 1: Querying for the coalescedKeyboard using [GCKeyboard coalescedKeyboard]
    /// 2: Registering for Connection/Disconnection notifications from NSNotificationCenter
    ///
    ///
    /// Note: All connected keyboards are coalesced into one keyboard object, so notification about connection/disconnection will only be delivered once.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gckeyboard?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GCKeyboard;
);

#[cfg(feature = "GCDevice")]
unsafe impl GCDevice for GCKeyboard {}

unsafe impl NSObjectProtocol for GCKeyboard {}

extern_methods!(
    unsafe impl GCKeyboard {
        #[cfg(all(feature = "GCKeyboardInput", feature = "GCPhysicalInputProfile"))]
        /// Unlike GCController GCKeyboard only has one input profile.
        ///
        /// This profile allows you to query buttons and button state
        #[method_id(@__method_family Other keyboardInput)]
        pub unsafe fn keyboardInput(&self) -> Option<Retained<GCKeyboardInput>>;

        /// Keyboard object that represents all keyboards connected to the device
        /// Should be used to query key states every time input needs to be handled
        #[method_id(@__method_family Other coalescedKeyboard)]
        pub unsafe fn coalescedKeyboard() -> Option<Retained<GCKeyboard>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GCKeyboard {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
