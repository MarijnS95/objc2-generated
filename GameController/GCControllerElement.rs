//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gcsystemgesturestate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GCSystemGestureState(pub NSInteger);
impl GCSystemGestureState {
    #[doc(alias = "GCSystemGestureStateEnabled")]
    pub const Enabled: Self = Self(0);
    #[doc(alias = "GCSystemGestureStateAlwaysReceive")]
    pub const AlwaysReceive: Self = Self(1);
    #[doc(alias = "GCSystemGestureStateDisabled")]
    pub const Disabled: Self = Self(2);
}

unsafe impl Encode for GCSystemGestureState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GCSystemGestureState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamecontroller/gccontrollerelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GCControllerElement;
);

unsafe impl NSObjectProtocol for GCControllerElement {}

extern_methods!(
    unsafe impl GCControllerElement {
        #[method_id(@__retain_semantics Other collection)]
        pub unsafe fn collection(&self) -> Option<Retained<GCControllerElement>>;

        #[method(isAnalog)]
        pub unsafe fn isAnalog(&self) -> bool;

        #[method(isBoundToSystemGesture)]
        pub unsafe fn isBoundToSystemGesture(&self) -> bool;

        #[method(preferredSystemGestureState)]
        pub unsafe fn preferredSystemGestureState(&self) -> GCSystemGestureState;

        #[method(setPreferredSystemGestureState:)]
        pub unsafe fn setPreferredSystemGestureState(
            &self,
            preferred_system_gesture_state: GCSystemGestureState,
        );

        #[method_id(@__retain_semantics Other sfSymbolsName)]
        pub unsafe fn sfSymbolsName(&self) -> Option<Retained<NSString>>;

        #[method(setSfSymbolsName:)]
        pub unsafe fn setSfSymbolsName(&self, sf_symbols_name: Option<&NSString>);

        #[method_id(@__retain_semantics Other localizedName)]
        pub unsafe fn localizedName(&self) -> Option<Retained<NSString>>;

        #[method(setLocalizedName:)]
        pub unsafe fn setLocalizedName(&self, localized_name: Option<&NSString>);

        #[method_id(@__retain_semantics Other unmappedSfSymbolsName)]
        pub unsafe fn unmappedSfSymbolsName(&self) -> Option<Retained<NSString>>;

        #[method(setUnmappedSfSymbolsName:)]
        pub unsafe fn setUnmappedSfSymbolsName(&self, unmapped_sf_symbols_name: Option<&NSString>);

        #[method_id(@__retain_semantics Other unmappedLocalizedName)]
        pub unsafe fn unmappedLocalizedName(&self) -> Option<Retained<NSString>>;

        #[method(setUnmappedLocalizedName:)]
        pub unsafe fn setUnmappedLocalizedName(&self, unmapped_localized_name: Option<&NSString>);

        #[method_id(@__retain_semantics Other aliases)]
        pub unsafe fn aliases(&self) -> Retained<NSSet<NSString>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GCControllerElement {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
