//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameController::*;

#[cfg(feature = "Foundation_NSString")]
typed_enum!(
    pub type GCHapticsLocality = NSString;
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityDefault: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityAll: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityHandles: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityLeftHandle: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityRightHandle: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityTriggers: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityLeftTrigger: &'static GCHapticsLocality);

#[cfg(feature = "Foundation_NSString")]
extern_static!(GCHapticsLocalityRightTrigger: &'static GCHapticsLocality);

extern_static!(GCHapticDurationInfinite: c_float);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GCDeviceHaptics;

    unsafe impl ClassType for GCDeviceHaptics {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for GCDeviceHaptics {}

extern_methods!(
    unsafe impl GCDeviceHaptics {
        #[cfg(all(feature = "Foundation_NSSet", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other supportedLocalities)]
        pub unsafe fn supportedLocalities(&self) -> Id<NSSet<GCHapticsLocality>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GCDeviceHaptics {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
