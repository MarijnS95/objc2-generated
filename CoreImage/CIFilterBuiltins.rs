//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-ml")]
use objc2_core_ml::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cigaussiangradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGaussianGradient: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihuesaturationvaluegradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHueSaturationValueGradient: CIFilterProtocol {
        #[method(value)]
        unsafe fn value(&self) -> c_float;

        /// Setter for [`value`][Self::value].
        #[method(setValue:)]
        unsafe fn setValue(&self, value: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(softness)]
        unsafe fn softness(&self) -> c_float;

        /// Setter for [`softness`][Self::softness].
        #[method(setSoftness:)]
        unsafe fn setSoftness(&self, softness: c_float);

        #[method(dither)]
        unsafe fn dither(&self) -> c_float;

        /// Setter for [`dither`][Self::dither].
        #[method(setDither:)]
        unsafe fn setDither(&self, dither: c_float);

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Other colorSpace)]
        unsafe fn colorSpace(&self) -> Option<Retained<CGColorSpace>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`colorSpace`][Self::colorSpace].
        #[method(setColorSpace:)]
        unsafe fn setColorSpace(&self, color_space: Option<&CGColorSpace>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilineargradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILinearGradient: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(point0)]
        unsafe fn point0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point0`][Self::point0].
        #[method(setPoint0:)]
        unsafe fn setPoint0(&self, point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point1)]
        unsafe fn point1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point1`][Self::point1].
        #[method(setPoint1:)]
        unsafe fn setPoint1(&self, point1: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciradialgradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRadialGradient: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius0)]
        unsafe fn radius0(&self) -> c_float;

        /// Setter for [`radius0`][Self::radius0].
        #[method(setRadius0:)]
        unsafe fn setRadius0(&self, radius0: c_float);

        #[method(radius1)]
        unsafe fn radius1(&self) -> c_float;

        /// Setter for [`radius1`][Self::radius1].
        #[method(setRadius1:)]
        unsafe fn setRadius1(&self, radius1: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cismoothlineargradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISmoothLinearGradient: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(point0)]
        unsafe fn point0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point0`][Self::point0].
        #[method(setPoint0:)]
        unsafe fn setPoint0(&self, point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point1)]
        unsafe fn point1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point1`][Self::point1].
        #[method(setPoint1:)]
        unsafe fn setPoint1(&self, point1: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisharpenluminance?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISharpenLuminance: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciunsharpmask?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIUnsharpMask: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicircularscreen?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICircularScreen: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicmykhalftone?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICMYKHalftone: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);

        #[method(grayComponentReplacement)]
        unsafe fn grayComponentReplacement(&self) -> c_float;

        /// Setter for [`grayComponentReplacement`][Self::grayComponentReplacement].
        #[method(setGrayComponentReplacement:)]
        unsafe fn setGrayComponentReplacement(&self, gray_component_replacement: c_float);

        #[method(underColorRemoval)]
        unsafe fn underColorRemoval(&self) -> c_float;

        /// Setter for [`underColorRemoval`][Self::underColorRemoval].
        #[method(setUnderColorRemoval:)]
        unsafe fn setUnderColorRemoval(&self, under_color_removal: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidotscreen?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDotScreen: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihatchedscreen?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHatchedScreen: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilinescreen?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILineScreen: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cifourcoordinategeometryfilter?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFourCoordinateGeometryFilter: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(topLeft)]
        unsafe fn topLeft(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`topLeft`][Self::topLeft].
        #[method(setTopLeft:)]
        unsafe fn setTopLeft(&self, top_left: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(topRight)]
        unsafe fn topRight(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`topRight`][Self::topRight].
        #[method(setTopRight:)]
        unsafe fn setTopRight(&self, top_right: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bottomRight)]
        unsafe fn bottomRight(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bottomRight`][Self::bottomRight].
        #[method(setBottomRight:)]
        unsafe fn setBottomRight(&self, bottom_right: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bottomLeft)]
        unsafe fn bottomLeft(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bottomLeft`][Self::bottomLeft].
        #[method(setBottomLeft:)]
        unsafe fn setBottomLeft(&self, bottom_left: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibicubicscaletransform?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBicubicScaleTransform: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(aspectRatio)]
        unsafe fn aspectRatio(&self) -> c_float;

        /// Setter for [`aspectRatio`][Self::aspectRatio].
        #[method(setAspectRatio:)]
        unsafe fn setAspectRatio(&self, aspect_ratio: c_float);

        #[method(parameterB)]
        unsafe fn parameterB(&self) -> c_float;

        /// Setter for [`parameterB`][Self::parameterB].
        #[method(setParameterB:)]
        unsafe fn setParameterB(&self, parameter_b: c_float);

        #[method(parameterC)]
        unsafe fn parameterC(&self) -> c_float;

        /// Setter for [`parameterC`][Self::parameterC].
        #[method(setParameterC:)]
        unsafe fn setParameterC(&self, parameter_c: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciedgepreserveupsample?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIEdgePreserveUpsample: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other smallImage)]
        unsafe fn smallImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`smallImage`][Self::smallImage].
        #[method(setSmallImage:)]
        unsafe fn setSmallImage(&self, small_image: Option<&CIImage>);

        #[method(spatialSigma)]
        unsafe fn spatialSigma(&self) -> c_float;

        /// Setter for [`spatialSigma`][Self::spatialSigma].
        #[method(setSpatialSigma:)]
        unsafe fn setSpatialSigma(&self, spatial_sigma: c_float);

        #[method(lumaSigma)]
        unsafe fn lumaSigma(&self) -> c_float;

        /// Setter for [`lumaSigma`][Self::lumaSigma].
        #[method(setLumaSigma:)]
        unsafe fn setLumaSigma(&self, luma_sigma: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cikeystonecorrectioncombined?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIKeystoneCorrectionCombined: CIFourCoordinateGeometryFilter {
        #[method(focalLength)]
        unsafe fn focalLength(&self) -> c_float;

        /// Setter for [`focalLength`][Self::focalLength].
        #[method(setFocalLength:)]
        unsafe fn setFocalLength(&self, focal_length: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cikeystonecorrectionhorizontal?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIKeystoneCorrectionHorizontal: CIFourCoordinateGeometryFilter {
        #[method(focalLength)]
        unsafe fn focalLength(&self) -> c_float;

        /// Setter for [`focalLength`][Self::focalLength].
        #[method(setFocalLength:)]
        unsafe fn setFocalLength(&self, focal_length: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cikeystonecorrectionvertical?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIKeystoneCorrectionVertical: CIFourCoordinateGeometryFilter {
        #[method(focalLength)]
        unsafe fn focalLength(&self) -> c_float;

        /// Setter for [`focalLength`][Self::focalLength].
        #[method(setFocalLength:)]
        unsafe fn setFocalLength(&self, focal_length: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilanczosscaletransform?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILanczosScaleTransform: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(aspectRatio)]
        unsafe fn aspectRatio(&self) -> c_float;

        /// Setter for [`aspectRatio`][Self::aspectRatio].
        #[method(setAspectRatio:)]
        unsafe fn setAspectRatio(&self, aspect_ratio: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimaximumscaletransform?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMaximumScaleTransform: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(aspectRatio)]
        unsafe fn aspectRatio(&self) -> c_float;

        /// Setter for [`aspectRatio`][Self::aspectRatio].
        #[method(setAspectRatio:)]
        unsafe fn setAspectRatio(&self, aspect_ratio: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciperspectivecorrection?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPerspectiveCorrection: CIFourCoordinateGeometryFilter {
        #[method(crop)]
        unsafe fn crop(&self) -> bool;

        /// Setter for [`crop`][Self::crop].
        #[method(setCrop:)]
        unsafe fn setCrop(&self, crop: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciperspectiverotate?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPerspectiveRotate: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(focalLength)]
        unsafe fn focalLength(&self) -> c_float;

        /// Setter for [`focalLength`][Self::focalLength].
        #[method(setFocalLength:)]
        unsafe fn setFocalLength(&self, focal_length: c_float);

        #[method(pitch)]
        unsafe fn pitch(&self) -> c_float;

        /// Setter for [`pitch`][Self::pitch].
        #[method(setPitch:)]
        unsafe fn setPitch(&self, pitch: c_float);

        #[method(yaw)]
        unsafe fn yaw(&self) -> c_float;

        /// Setter for [`yaw`][Self::yaw].
        #[method(setYaw:)]
        unsafe fn setYaw(&self, yaw: c_float);

        #[method(roll)]
        unsafe fn roll(&self) -> c_float;

        /// Setter for [`roll`][Self::roll].
        #[method(setRoll:)]
        unsafe fn setRoll(&self, roll: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciperspectivetransform?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPerspectiveTransform: CIFourCoordinateGeometryFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciperspectivetransformwithextent?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPerspectiveTransformWithExtent:
        CIFourCoordinateGeometryFilter
    {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cistraighten?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIStraighten: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citransitionfilter?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITransitionFilter: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other targetImage)]
        unsafe fn targetImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`targetImage`][Self::targetImage].
        #[method(setTargetImage:)]
        unsafe fn setTargetImage(&self, target_image: Option<&CIImage>);

        #[method(time)]
        unsafe fn time(&self) -> c_float;

        /// Setter for [`time`][Self::time].
        #[method(setTime:)]
        unsafe fn setTime(&self, time: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciaccordionfoldtransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAccordionFoldTransition: CITransitionFilter {
        #[method(bottomHeight)]
        unsafe fn bottomHeight(&self) -> c_float;

        /// Setter for [`bottomHeight`][Self::bottomHeight].
        #[method(setBottomHeight:)]
        unsafe fn setBottomHeight(&self, bottom_height: c_float);

        #[method(numberOfFolds)]
        unsafe fn numberOfFolds(&self) -> c_float;

        /// Setter for [`numberOfFolds`][Self::numberOfFolds].
        #[method(setNumberOfFolds:)]
        unsafe fn setNumberOfFolds(&self, number_of_folds: c_float);

        #[method(foldShadowAmount)]
        unsafe fn foldShadowAmount(&self) -> c_float;

        /// Setter for [`foldShadowAmount`][Self::foldShadowAmount].
        #[method(setFoldShadowAmount:)]
        unsafe fn setFoldShadowAmount(&self, fold_shadow_amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibarsswipetransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBarsSwipeTransition: CITransitionFilter {
        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(barOffset)]
        unsafe fn barOffset(&self) -> c_float;

        /// Setter for [`barOffset`][Self::barOffset].
        #[method(setBarOffset:)]
        unsafe fn setBarOffset(&self, bar_offset: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicopymachinetransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICopyMachineTransition: CITransitionFilter {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(opacity)]
        unsafe fn opacity(&self) -> c_float;

        /// Setter for [`opacity`][Self::opacity].
        #[method(setOpacity:)]
        unsafe fn setOpacity(&self, opacity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidisintegratewithmasktransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDisintegrateWithMaskTransition: CITransitionFilter {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other maskImage)]
        unsafe fn maskImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`maskImage`][Self::maskImage].
        #[method(setMaskImage:)]
        unsafe fn setMaskImage(&self, mask_image: Option<&CIImage>);

        #[method(shadowRadius)]
        unsafe fn shadowRadius(&self) -> c_float;

        /// Setter for [`shadowRadius`][Self::shadowRadius].
        #[method(setShadowRadius:)]
        unsafe fn setShadowRadius(&self, shadow_radius: c_float);

        #[method(shadowDensity)]
        unsafe fn shadowDensity(&self) -> c_float;

        /// Setter for [`shadowDensity`][Self::shadowDensity].
        #[method(setShadowDensity:)]
        unsafe fn setShadowDensity(&self, shadow_density: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(shadowOffset)]
        unsafe fn shadowOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`shadowOffset`][Self::shadowOffset].
        #[method(setShadowOffset:)]
        unsafe fn setShadowOffset(&self, shadow_offset: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidissolvetransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDissolveTransition: CITransitionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciflashtransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFlashTransition: CITransitionFilter {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(maxStriationRadius)]
        unsafe fn maxStriationRadius(&self) -> c_float;

        /// Setter for [`maxStriationRadius`][Self::maxStriationRadius].
        #[method(setMaxStriationRadius:)]
        unsafe fn setMaxStriationRadius(&self, max_striation_radius: c_float);

        #[method(striationStrength)]
        unsafe fn striationStrength(&self) -> c_float;

        /// Setter for [`striationStrength`][Self::striationStrength].
        #[method(setStriationStrength:)]
        unsafe fn setStriationStrength(&self, striation_strength: c_float);

        #[method(striationContrast)]
        unsafe fn striationContrast(&self) -> c_float;

        /// Setter for [`striationContrast`][Self::striationContrast].
        #[method(setStriationContrast:)]
        unsafe fn setStriationContrast(&self, striation_contrast: c_float);

        #[method(fadeThreshold)]
        unsafe fn fadeThreshold(&self) -> c_float;

        /// Setter for [`fadeThreshold`][Self::fadeThreshold].
        #[method(setFadeThreshold:)]
        unsafe fn setFadeThreshold(&self, fade_threshold: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimodtransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIModTransition: CITransitionFilter {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(compression)]
        unsafe fn compression(&self) -> c_float;

        /// Setter for [`compression`][Self::compression].
        #[method(setCompression:)]
        unsafe fn setCompression(&self, compression: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipagecurltransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPageCurlTransition: CITransitionFilter {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other backsideImage)]
        unsafe fn backsideImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`backsideImage`][Self::backsideImage].
        #[method(setBacksideImage:)]
        unsafe fn setBacksideImage(&self, backside_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other shadingImage)]
        unsafe fn shadingImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`shadingImage`][Self::shadingImage].
        #[method(setShadingImage:)]
        unsafe fn setShadingImage(&self, shading_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipagecurlwithshadowtransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPageCurlWithShadowTransition: CITransitionFilter {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other backsideImage)]
        unsafe fn backsideImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`backsideImage`][Self::backsideImage].
        #[method(setBacksideImage:)]
        unsafe fn setBacksideImage(&self, backside_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(shadowSize)]
        unsafe fn shadowSize(&self) -> c_float;

        /// Setter for [`shadowSize`][Self::shadowSize].
        #[method(setShadowSize:)]
        unsafe fn setShadowSize(&self, shadow_size: c_float);

        #[method(shadowAmount)]
        unsafe fn shadowAmount(&self) -> c_float;

        /// Setter for [`shadowAmount`][Self::shadowAmount].
        #[method(setShadowAmount:)]
        unsafe fn setShadowAmount(&self, shadow_amount: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(shadowExtent)]
        unsafe fn shadowExtent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`shadowExtent`][Self::shadowExtent].
        #[method(setShadowExtent:)]
        unsafe fn setShadowExtent(&self, shadow_extent: CGRect);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cirippletransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRippleTransition: CITransitionFilter {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other shadingImage)]
        unsafe fn shadingImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`shadingImage`][Self::shadingImage].
        #[method(setShadingImage:)]
        unsafe fn setShadingImage(&self, shading_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciswipetransition?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISwipeTransition: CITransitionFilter {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(opacity)]
        unsafe fn opacity(&self) -> c_float;

        /// Setter for [`opacity`][Self::opacity].
        #[method(setOpacity:)]
        unsafe fn setOpacity(&self, opacity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicompositeoperation?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICompositeOperation: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other backgroundImage)]
        unsafe fn backgroundImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`backgroundImage`][Self::backgroundImage].
        #[method(setBackgroundImage:)]
        unsafe fn setBackgroundImage(&self, background_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorabsolutedifference?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorAbsoluteDifference: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage2)]
        unsafe fn inputImage2(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage2`][Self::inputImage2].
        #[method(setInputImage2:)]
        unsafe fn setInputImage2(&self, input_image2: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorclamp?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorClamp: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other minComponents)]
        unsafe fn minComponents(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`minComponents`][Self::minComponents].
        #[method(setMinComponents:)]
        unsafe fn setMinComponents(&self, min_components: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other maxComponents)]
        unsafe fn maxComponents(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`maxComponents`][Self::maxComponents].
        #[method(setMaxComponents:)]
        unsafe fn setMaxComponents(&self, max_components: &CIVector);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcontrols?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorControls: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(saturation)]
        unsafe fn saturation(&self) -> c_float;

        /// Setter for [`saturation`][Self::saturation].
        #[method(setSaturation:)]
        unsafe fn setSaturation(&self, saturation: c_float);

        #[method(brightness)]
        unsafe fn brightness(&self) -> c_float;

        /// Setter for [`brightness`][Self::brightness].
        #[method(setBrightness:)]
        unsafe fn setBrightness(&self, brightness: c_float);

        #[method(contrast)]
        unsafe fn contrast(&self) -> c_float;

        /// Setter for [`contrast`][Self::contrast].
        #[method(setContrast:)]
        unsafe fn setContrast(&self, contrast: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolormatrix?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorMatrix: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other RVector)]
        unsafe fn RVector(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`RVector`][Self::RVector].
        #[method(setRVector:)]
        unsafe fn setRVector(&self, r_vector: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other GVector)]
        unsafe fn GVector(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`GVector`][Self::GVector].
        #[method(setGVector:)]
        unsafe fn setGVector(&self, g_vector: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other BVector)]
        unsafe fn BVector(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`BVector`][Self::BVector].
        #[method(setBVector:)]
        unsafe fn setBVector(&self, b_vector: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other AVector)]
        unsafe fn AVector(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`AVector`][Self::AVector].
        #[method(setAVector:)]
        unsafe fn setAVector(&self, a_vector: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other biasVector)]
        unsafe fn biasVector(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`biasVector`][Self::biasVector].
        #[method(setBiasVector:)]
        unsafe fn setBiasVector(&self, bias_vector: &CIVector);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorpolynomial?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorPolynomial: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other redCoefficients)]
        unsafe fn redCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`redCoefficients`][Self::redCoefficients].
        #[method(setRedCoefficients:)]
        unsafe fn setRedCoefficients(&self, red_coefficients: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other greenCoefficients)]
        unsafe fn greenCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`greenCoefficients`][Self::greenCoefficients].
        #[method(setGreenCoefficients:)]
        unsafe fn setGreenCoefficients(&self, green_coefficients: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other blueCoefficients)]
        unsafe fn blueCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`blueCoefficients`][Self::blueCoefficients].
        #[method(setBlueCoefficients:)]
        unsafe fn setBlueCoefficients(&self, blue_coefficients: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other alphaCoefficients)]
        unsafe fn alphaCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`alphaCoefficients`][Self::alphaCoefficients].
        #[method(setAlphaCoefficients:)]
        unsafe fn setAlphaCoefficients(&self, alpha_coefficients: &CIVector);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorthreshold?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorThreshold: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(threshold)]
        unsafe fn threshold(&self) -> c_float;

        /// Setter for [`threshold`][Self::threshold].
        #[method(setThreshold:)]
        unsafe fn setThreshold(&self, threshold: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorthresholdotsu?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorThresholdOtsu: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidepthtodisparity?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDepthToDisparity: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidisparitytodepth?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDisparityToDepth: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciexposureadjust?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIExposureAdjust: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(EV)]
        unsafe fn EV(&self) -> c_float;

        /// Setter for [`EV`][Self::EV].
        #[method(setEV:)]
        unsafe fn setEV(&self, ev: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cigammaadjust?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGammaAdjust: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(power)]
        unsafe fn power(&self) -> c_float;

        /// Setter for [`power`][Self::power].
        #[method(setPower:)]
        unsafe fn setPower(&self, power: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihueadjust?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHueAdjust: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilineartosrgbtonecurve?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILinearToSRGBToneCurve: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisrgbtonecurvetolinear?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISRGBToneCurveToLinear: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citemperatureandtint?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITemperatureAndTint: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other neutral)]
        unsafe fn neutral(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`neutral`][Self::neutral].
        #[method(setNeutral:)]
        unsafe fn setNeutral(&self, neutral: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other targetNeutral)]
        unsafe fn targetNeutral(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`targetNeutral`][Self::targetNeutral].
        #[method(setTargetNeutral:)]
        unsafe fn setTargetNeutral(&self, target_neutral: &CIVector);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citonecurve?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIToneCurve: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point0)]
        unsafe fn point0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point0`][Self::point0].
        #[method(setPoint0:)]
        unsafe fn setPoint0(&self, point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point1)]
        unsafe fn point1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point1`][Self::point1].
        #[method(setPoint1:)]
        unsafe fn setPoint1(&self, point1: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point2)]
        unsafe fn point2(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point2`][Self::point2].
        #[method(setPoint2:)]
        unsafe fn setPoint2(&self, point2: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point3)]
        unsafe fn point3(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point3`][Self::point3].
        #[method(setPoint3:)]
        unsafe fn setPoint3(&self, point3: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point4)]
        unsafe fn point4(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point4`][Self::point4].
        #[method(setPoint4:)]
        unsafe fn setPoint4(&self, point4: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citonemapheadroom?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIToneMapHeadroom: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(sourceHeadroom)]
        unsafe fn sourceHeadroom(&self) -> c_float;

        /// Setter for [`sourceHeadroom`][Self::sourceHeadroom].
        #[method(setSourceHeadroom:)]
        unsafe fn setSourceHeadroom(&self, source_headroom: c_float);

        #[method(targetHeadroom)]
        unsafe fn targetHeadroom(&self) -> c_float;

        /// Setter for [`targetHeadroom`][Self::targetHeadroom].
        #[method(setTargetHeadroom:)]
        unsafe fn setTargetHeadroom(&self, target_headroom: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/civibrance?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIVibrance: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(amount)]
        unsafe fn amount(&self) -> c_float;

        /// Setter for [`amount`][Self::amount].
        #[method(setAmount:)]
        unsafe fn setAmount(&self, amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciwhitepointadjust?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIWhitePointAdjust: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcrosspolynomial?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorCrossPolynomial: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other redCoefficients)]
        unsafe fn redCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`redCoefficients`][Self::redCoefficients].
        #[method(setRedCoefficients:)]
        unsafe fn setRedCoefficients(&self, red_coefficients: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other greenCoefficients)]
        unsafe fn greenCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`greenCoefficients`][Self::greenCoefficients].
        #[method(setGreenCoefficients:)]
        unsafe fn setGreenCoefficients(&self, green_coefficients: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other blueCoefficients)]
        unsafe fn blueCoefficients(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`blueCoefficients`][Self::blueCoefficients].
        #[method(setBlueCoefficients:)]
        unsafe fn setBlueCoefficients(&self, blue_coefficients: &CIVector);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcube?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorCube: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(cubeDimension)]
        unsafe fn cubeDimension(&self) -> c_float;

        /// Setter for [`cubeDimension`][Self::cubeDimension].
        #[method(setCubeDimension:)]
        unsafe fn setCubeDimension(&self, cube_dimension: c_float);

        #[method_id(@__method_family Other cubeData)]
        unsafe fn cubeData(&self) -> Retained<NSData>;

        /// Setter for [`cubeData`][Self::cubeData].
        #[method(setCubeData:)]
        unsafe fn setCubeData(&self, cube_data: &NSData);

        #[method(extrapolate)]
        unsafe fn extrapolate(&self) -> bool;

        /// Setter for [`extrapolate`][Self::extrapolate].
        #[method(setExtrapolate:)]
        unsafe fn setExtrapolate(&self, extrapolate: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcubesmixedwithmask?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorCubesMixedWithMask: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other maskImage)]
        unsafe fn maskImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`maskImage`][Self::maskImage].
        #[method(setMaskImage:)]
        unsafe fn setMaskImage(&self, mask_image: Option<&CIImage>);

        #[method(cubeDimension)]
        unsafe fn cubeDimension(&self) -> c_float;

        /// Setter for [`cubeDimension`][Self::cubeDimension].
        #[method(setCubeDimension:)]
        unsafe fn setCubeDimension(&self, cube_dimension: c_float);

        #[method_id(@__method_family Other cube0Data)]
        unsafe fn cube0Data(&self) -> Retained<NSData>;

        /// Setter for [`cube0Data`][Self::cube0Data].
        #[method(setCube0Data:)]
        unsafe fn setCube0Data(&self, cube0_data: &NSData);

        #[method_id(@__method_family Other cube1Data)]
        unsafe fn cube1Data(&self) -> Retained<NSData>;

        /// Setter for [`cube1Data`][Self::cube1Data].
        #[method(setCube1Data:)]
        unsafe fn setCube1Data(&self, cube1_data: &NSData);

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Other colorSpace)]
        unsafe fn colorSpace(&self) -> Option<Retained<CGColorSpace>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`colorSpace`][Self::colorSpace].
        #[method(setColorSpace:)]
        unsafe fn setColorSpace(&self, color_space: Option<&CGColorSpace>);

        #[method(extrapolate)]
        unsafe fn extrapolate(&self) -> bool;

        /// Setter for [`extrapolate`][Self::extrapolate].
        #[method(setExtrapolate:)]
        unsafe fn setExtrapolate(&self, extrapolate: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcubewithcolorspace?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorCubeWithColorSpace: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(cubeDimension)]
        unsafe fn cubeDimension(&self) -> c_float;

        /// Setter for [`cubeDimension`][Self::cubeDimension].
        #[method(setCubeDimension:)]
        unsafe fn setCubeDimension(&self, cube_dimension: c_float);

        #[method_id(@__method_family Other cubeData)]
        unsafe fn cubeData(&self) -> Retained<NSData>;

        /// Setter for [`cubeData`][Self::cubeData].
        #[method(setCubeData:)]
        unsafe fn setCubeData(&self, cube_data: &NSData);

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Other colorSpace)]
        unsafe fn colorSpace(&self) -> Option<Retained<CGColorSpace>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`colorSpace`][Self::colorSpace].
        #[method(setColorSpace:)]
        unsafe fn setColorSpace(&self, color_space: Option<&CGColorSpace>);

        #[method(extrapolate)]
        unsafe fn extrapolate(&self) -> bool;

        /// Setter for [`extrapolate`][Self::extrapolate].
        #[method(setExtrapolate:)]
        unsafe fn setExtrapolate(&self, extrapolate: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorcurves?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorCurves: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method_id(@__method_family Other curvesData)]
        unsafe fn curvesData(&self) -> Retained<NSData>;

        /// Setter for [`curvesData`][Self::curvesData].
        #[method(setCurvesData:)]
        unsafe fn setCurvesData(&self, curves_data: &NSData);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other curvesDomain)]
        unsafe fn curvesDomain(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`curvesDomain`][Self::curvesDomain].
        #[method(setCurvesDomain:)]
        unsafe fn setCurvesDomain(&self, curves_domain: &CIVector);

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Other colorSpace)]
        unsafe fn colorSpace(&self) -> Option<Retained<CGColorSpace>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`colorSpace`][Self::colorSpace].
        #[method(setColorSpace:)]
        unsafe fn setColorSpace(&self, color_space: Option<&CGColorSpace>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorinvert?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorInvert: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolormap?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorMap: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other gradientImage)]
        unsafe fn gradientImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`gradientImage`][Self::gradientImage].
        #[method(setGradientImage:)]
        unsafe fn setGradientImage(&self, gradient_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolormonochrome?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorMonochrome: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolorposterize?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColorPosterize: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(levels)]
        unsafe fn levels(&self) -> c_float;

        /// Setter for [`levels`][Self::levels].
        #[method(setLevels:)]
        unsafe fn setLevels(&self, levels: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciconvertlab?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIConvertLab: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(normalize)]
        unsafe fn normalize(&self) -> bool;

        /// Setter for [`normalize`][Self::normalize].
        #[method(setNormalize:)]
        unsafe fn setNormalize(&self, normalize: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidither?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDither: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidocumentenhancer?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDocumentEnhancer: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(amount)]
        unsafe fn amount(&self) -> c_float;

        /// Setter for [`amount`][Self::amount].
        #[method(setAmount:)]
        unsafe fn setAmount(&self, amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cifalsecolor?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFalseColor: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilabdeltae?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILabDeltaE: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other image2)]
        unsafe fn image2(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`image2`][Self::image2].
        #[method(setImage2:)]
        unsafe fn setImage2(&self, image2: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimasktoalpha?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMaskToAlpha: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimaximumcomponent?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMaximumComponent: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciminimumcomponent?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMinimumComponent: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipalettecentroid?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPaletteCentroid: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other paletteImage)]
        unsafe fn paletteImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`paletteImage`][Self::paletteImage].
        #[method(setPaletteImage:)]
        unsafe fn setPaletteImage(&self, palette_image: Option<&CIImage>);

        #[method(perceptual)]
        unsafe fn perceptual(&self) -> bool;

        /// Setter for [`perceptual`][Self::perceptual].
        #[method(setPerceptual:)]
        unsafe fn setPerceptual(&self, perceptual: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipalettize?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPalettize: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other paletteImage)]
        unsafe fn paletteImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`paletteImage`][Self::paletteImage].
        #[method(setPaletteImage:)]
        unsafe fn setPaletteImage(&self, palette_image: Option<&CIImage>);

        #[method(perceptual)]
        unsafe fn perceptual(&self) -> bool;

        /// Setter for [`perceptual`][Self::perceptual].
        #[method(setPerceptual:)]
        unsafe fn setPerceptual(&self, perceptual: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciphotoeffect?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPhotoEffect: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(extrapolate)]
        unsafe fn extrapolate(&self) -> bool;

        /// Setter for [`extrapolate`][Self::extrapolate].
        #[method(setExtrapolate:)]
        unsafe fn setExtrapolate(&self, extrapolate: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisepiatone?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISepiaTone: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cithermal?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIThermal: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/civignette?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIVignette: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/civignetteeffect?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIVignetteEffect: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);

        #[method(falloff)]
        unsafe fn falloff(&self) -> c_float;

        /// Setter for [`falloff`][Self::falloff].
        #[method(setFalloff:)]
        unsafe fn setFalloff(&self, falloff: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cixray?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIXRay: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibumpdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBumpDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibumpdistortionlinear?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBumpDistortionLinear: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicirclesplashdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICircleSplashDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicircularwrap?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICircularWrap: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidisplacementdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDisplacementDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other displacementImage)]
        unsafe fn displacementImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`displacementImage`][Self::displacementImage].
        #[method(setDisplacementImage:)]
        unsafe fn setDisplacementImage(&self, displacement_image: Option<&CIImage>);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidroste?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDroste: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(insetPoint0)]
        unsafe fn insetPoint0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`insetPoint0`][Self::insetPoint0].
        #[method(setInsetPoint0:)]
        unsafe fn setInsetPoint0(&self, inset_point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(insetPoint1)]
        unsafe fn insetPoint1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`insetPoint1`][Self::insetPoint1].
        #[method(setInsetPoint1:)]
        unsafe fn setInsetPoint1(&self, inset_point1: CGPoint);

        #[method(strands)]
        unsafe fn strands(&self) -> c_float;

        /// Setter for [`strands`][Self::strands].
        #[method(setStrands:)]
        unsafe fn setStrands(&self, strands: c_float);

        #[method(periodicity)]
        unsafe fn periodicity(&self) -> c_float;

        /// Setter for [`periodicity`][Self::periodicity].
        #[method(setPeriodicity:)]
        unsafe fn setPeriodicity(&self, periodicity: c_float);

        #[method(rotation)]
        unsafe fn rotation(&self) -> c_float;

        /// Setter for [`rotation`][Self::rotation].
        #[method(setRotation:)]
        unsafe fn setRotation(&self, rotation: c_float);

        #[method(zoom)]
        unsafe fn zoom(&self) -> c_float;

        /// Setter for [`zoom`][Self::zoom].
        #[method(setZoom:)]
        unsafe fn setZoom(&self, zoom: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciglassdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGlassDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other textureImage)]
        unsafe fn textureImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`textureImage`][Self::textureImage].
        #[method(setTextureImage:)]
        unsafe fn setTextureImage(&self, texture_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciglasslozenge?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGlassLozenge: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point0)]
        unsafe fn point0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point0`][Self::point0].
        #[method(setPoint0:)]
        unsafe fn setPoint0(&self, point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point1)]
        unsafe fn point1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point1`][Self::point1].
        #[method(setPoint1:)]
        unsafe fn setPoint1(&self, point1: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(refraction)]
        unsafe fn refraction(&self) -> c_float;

        /// Setter for [`refraction`][Self::refraction].
        #[method(setRefraction:)]
        unsafe fn setRefraction(&self, refraction: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciholedistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHoleDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilighttunnel?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILightTunnel: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(rotation)]
        unsafe fn rotation(&self) -> c_float;

        /// Setter for [`rotation`][Self::rotation].
        #[method(setRotation:)]
        unsafe fn setRotation(&self, rotation: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cininepartstretched?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CINinePartStretched: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(breakpoint0)]
        unsafe fn breakpoint0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`breakpoint0`][Self::breakpoint0].
        #[method(setBreakpoint0:)]
        unsafe fn setBreakpoint0(&self, breakpoint0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(breakpoint1)]
        unsafe fn breakpoint1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`breakpoint1`][Self::breakpoint1].
        #[method(setBreakpoint1:)]
        unsafe fn setBreakpoint1(&self, breakpoint1: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(growAmount)]
        unsafe fn growAmount(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`growAmount`][Self::growAmount].
        #[method(setGrowAmount:)]
        unsafe fn setGrowAmount(&self, grow_amount: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cinineparttiled?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CINinePartTiled: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(breakpoint0)]
        unsafe fn breakpoint0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`breakpoint0`][Self::breakpoint0].
        #[method(setBreakpoint0:)]
        unsafe fn setBreakpoint0(&self, breakpoint0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(breakpoint1)]
        unsafe fn breakpoint1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`breakpoint1`][Self::breakpoint1].
        #[method(setBreakpoint1:)]
        unsafe fn setBreakpoint1(&self, breakpoint1: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(growAmount)]
        unsafe fn growAmount(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`growAmount`][Self::growAmount].
        #[method(setGrowAmount:)]
        unsafe fn setGrowAmount(&self, grow_amount: CGPoint);

        #[method(flipYTiles)]
        unsafe fn flipYTiles(&self) -> bool;

        /// Setter for [`flipYTiles`][Self::flipYTiles].
        #[method(setFlipYTiles:)]
        unsafe fn setFlipYTiles(&self, flip_y_tiles: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipinchdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPinchDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cistretchcrop?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIStretchCrop: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(size)]
        unsafe fn size(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`size`][Self::size].
        #[method(setSize:)]
        unsafe fn setSize(&self, size: CGPoint);

        #[method(cropAmount)]
        unsafe fn cropAmount(&self) -> c_float;

        /// Setter for [`cropAmount`][Self::cropAmount].
        #[method(setCropAmount:)]
        unsafe fn setCropAmount(&self, crop_amount: c_float);

        #[method(centerStretchAmount)]
        unsafe fn centerStretchAmount(&self) -> c_float;

        /// Setter for [`centerStretchAmount`][Self::centerStretchAmount].
        #[method(setCenterStretchAmount:)]
        unsafe fn setCenterStretchAmount(&self, center_stretch_amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citoruslensdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITorusLensDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(refraction)]
        unsafe fn refraction(&self) -> c_float;

        /// Setter for [`refraction`][Self::refraction].
        #[method(setRefraction:)]
        unsafe fn setRefraction(&self, refraction: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citwirldistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITwirlDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/civortexdistortion?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIVortexDistortion: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciaffineclamp?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAffineClamp: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(transform)]
        unsafe fn transform(&self) -> CGAffineTransform;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`transform`][Self::transform].
        #[method(setTransform:)]
        unsafe fn setTransform(&self, transform: CGAffineTransform);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciaffinetile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAffineTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(transform)]
        unsafe fn transform(&self) -> CGAffineTransform;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`transform`][Self::transform].
        #[method(setTransform:)]
        unsafe fn setTransform(&self, transform: CGAffineTransform);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cieightfoldreflectedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIEightfoldReflectedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cifourfoldreflectedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFourfoldReflectedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(acuteAngle)]
        unsafe fn acuteAngle(&self) -> c_float;

        /// Setter for [`acuteAngle`][Self::acuteAngle].
        #[method(setAcuteAngle:)]
        unsafe fn setAcuteAngle(&self, acute_angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cifourfoldrotatedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFourfoldRotatedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cifourfoldtranslatedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIFourfoldTranslatedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(acuteAngle)]
        unsafe fn acuteAngle(&self) -> c_float;

        /// Setter for [`acuteAngle`][Self::acuteAngle].
        #[method(setAcuteAngle:)]
        unsafe fn setAcuteAngle(&self, acute_angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciglidereflectedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGlideReflectedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cikaleidoscope?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIKaleidoscope: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(count)]
        unsafe fn count(&self) -> NSInteger;

        /// Setter for [`count`][Self::count].
        #[method(setCount:)]
        unsafe fn setCount(&self, count: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cioptile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIOpTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciparallelogramtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIParallelogramTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(acuteAngle)]
        unsafe fn acuteAngle(&self) -> c_float;

        /// Setter for [`acuteAngle`][Self::acuteAngle].
        #[method(setAcuteAngle:)]
        unsafe fn setAcuteAngle(&self, acute_angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciperspectivetile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPerspectiveTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(topLeft)]
        unsafe fn topLeft(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`topLeft`][Self::topLeft].
        #[method(setTopLeft:)]
        unsafe fn setTopLeft(&self, top_left: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(topRight)]
        unsafe fn topRight(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`topRight`][Self::topRight].
        #[method(setTopRight:)]
        unsafe fn setTopRight(&self, top_right: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bottomRight)]
        unsafe fn bottomRight(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bottomRight`][Self::bottomRight].
        #[method(setBottomRight:)]
        unsafe fn setBottomRight(&self, bottom_right: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bottomLeft)]
        unsafe fn bottomLeft(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bottomLeft`][Self::bottomLeft].
        #[method(setBottomLeft:)]
        unsafe fn setBottomLeft(&self, bottom_left: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISixfoldReflectedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisixfoldrotatedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISixfoldRotatedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citrianglekaleidoscope?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITriangleKaleidoscope: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point)]
        unsafe fn point(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point`][Self::point].
        #[method(setPoint:)]
        unsafe fn setPoint(&self, point: CGPoint);

        #[method(size)]
        unsafe fn size(&self) -> c_float;

        /// Setter for [`size`][Self::size].
        #[method(setSize:)]
        unsafe fn setSize(&self, size: c_float);

        #[method(rotation)]
        unsafe fn rotation(&self) -> c_float;

        /// Setter for [`rotation`][Self::rotation].
        #[method(setRotation:)]
        unsafe fn setRotation(&self, rotation: c_float);

        #[method(decay)]
        unsafe fn decay(&self) -> c_float;

        /// Setter for [`decay`][Self::decay].
        #[method(setDecay:)]
        unsafe fn setDecay(&self, decay: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citriangletile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITriangleTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citwelvefoldreflectedtile?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITwelvefoldReflectedTile: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciattributedtextimagegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAttributedTextImageGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other text)]
        unsafe fn text(&self) -> Retained<NSAttributedString>;

        /// Setter for [`text`][Self::text].
        #[method(setText:)]
        unsafe fn setText(&self, text: &NSAttributedString);

        #[method(scaleFactor)]
        unsafe fn scaleFactor(&self) -> c_float;

        /// Setter for [`scaleFactor`][Self::scaleFactor].
        #[method(setScaleFactor:)]
        unsafe fn setScaleFactor(&self, scale_factor: c_float);

        #[method(padding)]
        unsafe fn padding(&self) -> c_float;

        /// Setter for [`padding`][Self::padding].
        #[method(setPadding:)]
        unsafe fn setPadding(&self, padding: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciazteccodegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAztecCodeGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other message)]
        unsafe fn message(&self) -> Retained<NSData>;

        /// Setter for [`message`][Self::message].
        #[method(setMessage:)]
        unsafe fn setMessage(&self, message: &NSData);

        #[method(correctionLevel)]
        unsafe fn correctionLevel(&self) -> c_float;

        /// Setter for [`correctionLevel`][Self::correctionLevel].
        #[method(setCorrectionLevel:)]
        unsafe fn setCorrectionLevel(&self, correction_level: c_float);

        #[method(layers)]
        unsafe fn layers(&self) -> c_float;

        /// Setter for [`layers`][Self::layers].
        #[method(setLayers:)]
        unsafe fn setLayers(&self, layers: c_float);

        #[method(compactStyle)]
        unsafe fn compactStyle(&self) -> c_float;

        /// Setter for [`compactStyle`][Self::compactStyle].
        #[method(setCompactStyle:)]
        unsafe fn setCompactStyle(&self, compact_style: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibarcodegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBarcodeGenerator: CIFilterProtocol {
        #[cfg(feature = "CIBarcodeDescriptor")]
        #[method_id(@__method_family Other barcodeDescriptor)]
        unsafe fn barcodeDescriptor(&self) -> Retained<CIBarcodeDescriptor>;

        #[cfg(feature = "CIBarcodeDescriptor")]
        /// Setter for [`barcodeDescriptor`][Self::barcodeDescriptor].
        #[method(setBarcodeDescriptor:)]
        unsafe fn setBarcodeDescriptor(&self, barcode_descriptor: &CIBarcodeDescriptor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciblurredrectanglegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBlurredRectangleGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(sigma)]
        unsafe fn sigma(&self) -> c_float;

        /// Setter for [`sigma`][Self::sigma].
        #[method(setSigma:)]
        unsafe fn setSigma(&self, sigma: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicheckerboardgenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICheckerboardGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicode128barcodegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICode128BarcodeGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other message)]
        unsafe fn message(&self) -> Retained<NSData>;

        /// Setter for [`message`][Self::message].
        #[method(setMessage:)]
        unsafe fn setMessage(&self, message: &NSData);

        #[method(quietSpace)]
        unsafe fn quietSpace(&self) -> c_float;

        /// Setter for [`quietSpace`][Self::quietSpace].
        #[method(setQuietSpace:)]
        unsafe fn setQuietSpace(&self, quiet_space: c_float);

        #[method(barcodeHeight)]
        unsafe fn barcodeHeight(&self) -> c_float;

        /// Setter for [`barcodeHeight`][Self::barcodeHeight].
        #[method(setBarcodeHeight:)]
        unsafe fn setBarcodeHeight(&self, barcode_height: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilenticularhalogenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILenticularHaloGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(haloRadius)]
        unsafe fn haloRadius(&self) -> c_float;

        /// Setter for [`haloRadius`][Self::haloRadius].
        #[method(setHaloRadius:)]
        unsafe fn setHaloRadius(&self, halo_radius: c_float);

        #[method(haloWidth)]
        unsafe fn haloWidth(&self) -> c_float;

        /// Setter for [`haloWidth`][Self::haloWidth].
        #[method(setHaloWidth:)]
        unsafe fn setHaloWidth(&self, halo_width: c_float);

        #[method(haloOverlap)]
        unsafe fn haloOverlap(&self) -> c_float;

        /// Setter for [`haloOverlap`][Self::haloOverlap].
        #[method(setHaloOverlap:)]
        unsafe fn setHaloOverlap(&self, halo_overlap: c_float);

        #[method(striationStrength)]
        unsafe fn striationStrength(&self) -> c_float;

        /// Setter for [`striationStrength`][Self::striationStrength].
        #[method(setStriationStrength:)]
        unsafe fn setStriationStrength(&self, striation_strength: c_float);

        #[method(striationContrast)]
        unsafe fn striationContrast(&self) -> c_float;

        /// Setter for [`striationContrast`][Self::striationContrast].
        #[method(setStriationContrast:)]
        unsafe fn setStriationContrast(&self, striation_contrast: c_float);

        #[method(time)]
        unsafe fn time(&self) -> c_float;

        /// Setter for [`time`][Self::time].
        #[method(setTime:)]
        unsafe fn setTime(&self, time: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimeshgenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMeshGenerator: CIFilterProtocol {
        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method_id(@__method_family Other mesh)]
        unsafe fn mesh(&self) -> Retained<NSArray>;

        /// Setter for [`mesh`][Self::mesh].
        #[method(setMesh:)]
        unsafe fn setMesh(&self, mesh: &NSArray);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipdf417barcodegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPDF417BarcodeGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other message)]
        unsafe fn message(&self) -> Retained<NSData>;

        /// Setter for [`message`][Self::message].
        #[method(setMessage:)]
        unsafe fn setMessage(&self, message: &NSData);

        #[method(minWidth)]
        unsafe fn minWidth(&self) -> c_float;

        /// Setter for [`minWidth`][Self::minWidth].
        #[method(setMinWidth:)]
        unsafe fn setMinWidth(&self, min_width: c_float);

        #[method(maxWidth)]
        unsafe fn maxWidth(&self) -> c_float;

        /// Setter for [`maxWidth`][Self::maxWidth].
        #[method(setMaxWidth:)]
        unsafe fn setMaxWidth(&self, max_width: c_float);

        #[method(minHeight)]
        unsafe fn minHeight(&self) -> c_float;

        /// Setter for [`minHeight`][Self::minHeight].
        #[method(setMinHeight:)]
        unsafe fn setMinHeight(&self, min_height: c_float);

        #[method(maxHeight)]
        unsafe fn maxHeight(&self) -> c_float;

        /// Setter for [`maxHeight`][Self::maxHeight].
        #[method(setMaxHeight:)]
        unsafe fn setMaxHeight(&self, max_height: c_float);

        #[method(dataColumns)]
        unsafe fn dataColumns(&self) -> c_float;

        /// Setter for [`dataColumns`][Self::dataColumns].
        #[method(setDataColumns:)]
        unsafe fn setDataColumns(&self, data_columns: c_float);

        #[method(rows)]
        unsafe fn rows(&self) -> c_float;

        /// Setter for [`rows`][Self::rows].
        #[method(setRows:)]
        unsafe fn setRows(&self, rows: c_float);

        #[method(preferredAspectRatio)]
        unsafe fn preferredAspectRatio(&self) -> c_float;

        /// Setter for [`preferredAspectRatio`][Self::preferredAspectRatio].
        #[method(setPreferredAspectRatio:)]
        unsafe fn setPreferredAspectRatio(&self, preferred_aspect_ratio: c_float);

        #[method(compactionMode)]
        unsafe fn compactionMode(&self) -> c_float;

        /// Setter for [`compactionMode`][Self::compactionMode].
        #[method(setCompactionMode:)]
        unsafe fn setCompactionMode(&self, compaction_mode: c_float);

        #[method(compactStyle)]
        unsafe fn compactStyle(&self) -> c_float;

        /// Setter for [`compactStyle`][Self::compactStyle].
        #[method(setCompactStyle:)]
        unsafe fn setCompactStyle(&self, compact_style: c_float);

        #[method(correctionLevel)]
        unsafe fn correctionLevel(&self) -> c_float;

        /// Setter for [`correctionLevel`][Self::correctionLevel].
        #[method(setCorrectionLevel:)]
        unsafe fn setCorrectionLevel(&self, correction_level: c_float);

        #[method(alwaysSpecifyCompaction)]
        unsafe fn alwaysSpecifyCompaction(&self) -> c_float;

        /// Setter for [`alwaysSpecifyCompaction`][Self::alwaysSpecifyCompaction].
        #[method(setAlwaysSpecifyCompaction:)]
        unsafe fn setAlwaysSpecifyCompaction(&self, always_specify_compaction: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciqrcodegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIQRCodeGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other message)]
        unsafe fn message(&self) -> Retained<NSData>;

        /// Setter for [`message`][Self::message].
        #[method(setMessage:)]
        unsafe fn setMessage(&self, message: &NSData);

        #[method_id(@__method_family Other correctionLevel)]
        unsafe fn correctionLevel(&self) -> Retained<NSString>;

        /// Setter for [`correctionLevel`][Self::correctionLevel].
        #[method(setCorrectionLevel:)]
        unsafe fn setCorrectionLevel(&self, correction_level: &NSString);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cirandomgenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRandomGenerator: CIFilterProtocol {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciroundedrectanglegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRoundedRectangleGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciroundedrectanglestrokegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRoundedRectangleStrokeGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cistarshinegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIStarShineGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(crossScale)]
        unsafe fn crossScale(&self) -> c_float;

        /// Setter for [`crossScale`][Self::crossScale].
        #[method(setCrossScale:)]
        unsafe fn setCrossScale(&self, cross_scale: c_float);

        #[method(crossAngle)]
        unsafe fn crossAngle(&self) -> c_float;

        /// Setter for [`crossAngle`][Self::crossAngle].
        #[method(setCrossAngle:)]
        unsafe fn setCrossAngle(&self, cross_angle: c_float);

        #[method(crossOpacity)]
        unsafe fn crossOpacity(&self) -> c_float;

        /// Setter for [`crossOpacity`][Self::crossOpacity].
        #[method(setCrossOpacity:)]
        unsafe fn setCrossOpacity(&self, cross_opacity: c_float);

        #[method(crossWidth)]
        unsafe fn crossWidth(&self) -> c_float;

        /// Setter for [`crossWidth`][Self::crossWidth].
        #[method(setCrossWidth:)]
        unsafe fn setCrossWidth(&self, cross_width: c_float);

        #[method(epsilon)]
        unsafe fn epsilon(&self) -> c_float;

        /// Setter for [`epsilon`][Self::epsilon].
        #[method(setEpsilon:)]
        unsafe fn setEpsilon(&self, epsilon: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cistripesgenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIStripesGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color0)]
        unsafe fn color0(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color0`][Self::color0].
        #[method(setColor0:)]
        unsafe fn setColor0(&self, color0: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color1)]
        unsafe fn color1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color1`][Self::color1].
        #[method(setColor1:)]
        unsafe fn setColor1(&self, color1: &CIColor);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisunbeamsgenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISunbeamsGenerator: CIFilterProtocol {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);

        #[method(sunRadius)]
        unsafe fn sunRadius(&self) -> c_float;

        /// Setter for [`sunRadius`][Self::sunRadius].
        #[method(setSunRadius:)]
        unsafe fn setSunRadius(&self, sun_radius: c_float);

        #[method(maxStriationRadius)]
        unsafe fn maxStriationRadius(&self) -> c_float;

        /// Setter for [`maxStriationRadius`][Self::maxStriationRadius].
        #[method(setMaxStriationRadius:)]
        unsafe fn setMaxStriationRadius(&self, max_striation_radius: c_float);

        #[method(striationStrength)]
        unsafe fn striationStrength(&self) -> c_float;

        /// Setter for [`striationStrength`][Self::striationStrength].
        #[method(setStriationStrength:)]
        unsafe fn setStriationStrength(&self, striation_strength: c_float);

        #[method(striationContrast)]
        unsafe fn striationContrast(&self) -> c_float;

        /// Setter for [`striationContrast`][Self::striationContrast].
        #[method(setStriationContrast:)]
        unsafe fn setStriationContrast(&self, striation_contrast: c_float);

        #[method(time)]
        unsafe fn time(&self) -> c_float;

        /// Setter for [`time`][Self::time].
        #[method(setTime:)]
        unsafe fn setTime(&self, time: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/citextimagegenerator?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CITextImageGenerator: CIFilterProtocol {
        #[method_id(@__method_family Other text)]
        unsafe fn text(&self) -> Retained<NSString>;

        /// Setter for [`text`][Self::text].
        #[method(setText:)]
        unsafe fn setText(&self, text: &NSString);

        #[method_id(@__method_family Other fontName)]
        unsafe fn fontName(&self) -> Retained<NSString>;

        /// Setter for [`fontName`][Self::fontName].
        #[method(setFontName:)]
        unsafe fn setFontName(&self, font_name: &NSString);

        #[method(fontSize)]
        unsafe fn fontSize(&self) -> c_float;

        /// Setter for [`fontSize`][Self::fontSize].
        #[method(setFontSize:)]
        unsafe fn setFontSize(&self, font_size: c_float);

        #[method(scaleFactor)]
        unsafe fn scaleFactor(&self) -> c_float;

        /// Setter for [`scaleFactor`][Self::scaleFactor].
        #[method(setScaleFactor:)]
        unsafe fn setScaleFactor(&self, scale_factor: c_float);

        #[method(padding)]
        unsafe fn padding(&self) -> c_float;

        /// Setter for [`padding`][Self::padding].
        #[method(setPadding:)]
        unsafe fn setPadding(&self, padding: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciblendwithmask?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBlendWithMask: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other backgroundImage)]
        unsafe fn backgroundImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`backgroundImage`][Self::backgroundImage].
        #[method(setBackgroundImage:)]
        unsafe fn setBackgroundImage(&self, background_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other maskImage)]
        unsafe fn maskImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`maskImage`][Self::maskImage].
        #[method(setMaskImage:)]
        unsafe fn setMaskImage(&self, mask_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibloom?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBloom: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicannyedgedetector?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICannyEdgeDetector: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(gaussianSigma)]
        unsafe fn gaussianSigma(&self) -> c_float;

        /// Setter for [`gaussianSigma`][Self::gaussianSigma].
        #[method(setGaussianSigma:)]
        unsafe fn setGaussianSigma(&self, gaussian_sigma: c_float);

        #[method(perceptual)]
        unsafe fn perceptual(&self) -> bool;

        /// Setter for [`perceptual`][Self::perceptual].
        #[method(setPerceptual:)]
        unsafe fn setPerceptual(&self, perceptual: bool);

        #[method(thresholdHigh)]
        unsafe fn thresholdHigh(&self) -> c_float;

        /// Setter for [`thresholdHigh`][Self::thresholdHigh].
        #[method(setThresholdHigh:)]
        unsafe fn setThresholdHigh(&self, threshold_high: c_float);

        #[method(thresholdLow)]
        unsafe fn thresholdLow(&self) -> c_float;

        /// Setter for [`thresholdLow`][Self::thresholdLow].
        #[method(setThresholdLow:)]
        unsafe fn setThresholdLow(&self, threshold_low: c_float);

        #[method(hysteresisPasses)]
        unsafe fn hysteresisPasses(&self) -> NSInteger;

        /// Setter for [`hysteresisPasses`][Self::hysteresisPasses].
        #[method(setHysteresisPasses:)]
        unsafe fn setHysteresisPasses(&self, hysteresis_passes: NSInteger);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicomiceffect?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIComicEffect: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciconvolution?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIConvolution: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other weights)]
        unsafe fn weights(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`weights`][Self::weights].
        #[method(setWeights:)]
        unsafe fn setWeights(&self, weights: &CIVector);

        #[method(bias)]
        unsafe fn bias(&self) -> c_float;

        /// Setter for [`bias`][Self::bias].
        #[method(setBias:)]
        unsafe fn setBias(&self, bias: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicoremlmodel?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICoreMLModel: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-ml")]
        #[method_id(@__method_family Other model)]
        unsafe fn model(&self) -> Retained<MLModel>;

        #[cfg(feature = "objc2-core-ml")]
        /// Setter for [`model`][Self::model].
        #[method(setModel:)]
        unsafe fn setModel(&self, model: &MLModel);

        #[method(headIndex)]
        unsafe fn headIndex(&self) -> c_float;

        /// Setter for [`headIndex`][Self::headIndex].
        #[method(setHeadIndex:)]
        unsafe fn setHeadIndex(&self, head_index: c_float);

        #[method(softmaxNormalization)]
        unsafe fn softmaxNormalization(&self) -> bool;

        /// Setter for [`softmaxNormalization`][Self::softmaxNormalization].
        #[method(setSoftmaxNormalization:)]
        unsafe fn setSoftmaxNormalization(&self, softmax_normalization: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicrystallize?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CICrystallize: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidepthoffield?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDepthOfField: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point0)]
        unsafe fn point0(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point0`][Self::point0].
        #[method(setPoint0:)]
        unsafe fn setPoint0(&self, point0: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(point1)]
        unsafe fn point1(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`point1`][Self::point1].
        #[method(setPoint1:)]
        unsafe fn setPoint1(&self, point1: CGPoint);

        #[method(saturation)]
        unsafe fn saturation(&self) -> c_float;

        /// Setter for [`saturation`][Self::saturation].
        #[method(setSaturation:)]
        unsafe fn setSaturation(&self, saturation: c_float);

        #[method(unsharpMaskRadius)]
        unsafe fn unsharpMaskRadius(&self) -> c_float;

        /// Setter for [`unsharpMaskRadius`][Self::unsharpMaskRadius].
        #[method(setUnsharpMaskRadius:)]
        unsafe fn setUnsharpMaskRadius(&self, unsharp_mask_radius: c_float);

        #[method(unsharpMaskIntensity)]
        unsafe fn unsharpMaskIntensity(&self) -> c_float;

        /// Setter for [`unsharpMaskIntensity`][Self::unsharpMaskIntensity].
        #[method(setUnsharpMaskIntensity:)]
        unsafe fn setUnsharpMaskIntensity(&self, unsharp_mask_intensity: c_float);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciedges?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIEdges: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciedgework?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIEdgeWork: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cigaborgradients?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGaborGradients: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cigloom?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGloom: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(intensity)]
        unsafe fn intensity(&self) -> c_float;

        /// Setter for [`intensity`][Self::intensity].
        #[method(setIntensity:)]
        unsafe fn setIntensity(&self, intensity: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciheightfieldfrommask?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHeightFieldFromMask: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihexagonalpixellate?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHexagonalPixellate: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihighlightshadowadjust?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHighlightShadowAdjust: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(shadowAmount)]
        unsafe fn shadowAmount(&self) -> c_float;

        /// Setter for [`shadowAmount`][Self::shadowAmount].
        #[method(setShadowAmount:)]
        unsafe fn setShadowAmount(&self, shadow_amount: c_float);

        #[method(highlightAmount)]
        unsafe fn highlightAmount(&self) -> c_float;

        /// Setter for [`highlightAmount`][Self::highlightAmount].
        #[method(setHighlightAmount:)]
        unsafe fn setHighlightAmount(&self, highlight_amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cilineoverlay?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CILineOverlay: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(NRNoiseLevel)]
        unsafe fn NRNoiseLevel(&self) -> c_float;

        /// Setter for [`NRNoiseLevel`][Self::NRNoiseLevel].
        #[method(setNRNoiseLevel:)]
        unsafe fn setNRNoiseLevel(&self, nr_noise_level: c_float);

        #[method(NRSharpness)]
        unsafe fn NRSharpness(&self) -> c_float;

        /// Setter for [`NRSharpness`][Self::NRSharpness].
        #[method(setNRSharpness:)]
        unsafe fn setNRSharpness(&self, nr_sharpness: c_float);

        #[method(edgeIntensity)]
        unsafe fn edgeIntensity(&self) -> c_float;

        /// Setter for [`edgeIntensity`][Self::edgeIntensity].
        #[method(setEdgeIntensity:)]
        unsafe fn setEdgeIntensity(&self, edge_intensity: c_float);

        #[method(threshold)]
        unsafe fn threshold(&self) -> c_float;

        /// Setter for [`threshold`][Self::threshold].
        #[method(setThreshold:)]
        unsafe fn setThreshold(&self, threshold: c_float);

        #[method(contrast)]
        unsafe fn contrast(&self) -> c_float;

        /// Setter for [`contrast`][Self::contrast].
        #[method(setContrast:)]
        unsafe fn setContrast(&self, contrast: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimix?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMix: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other backgroundImage)]
        unsafe fn backgroundImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`backgroundImage`][Self::backgroundImage].
        #[method(setBackgroundImage:)]
        unsafe fn setBackgroundImage(&self, background_image: Option<&CIImage>);

        #[method(amount)]
        unsafe fn amount(&self) -> c_float;

        /// Setter for [`amount`][Self::amount].
        #[method(setAmount:)]
        unsafe fn setAmount(&self, amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipersonsegmentation?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPersonSegmentation: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(qualityLevel)]
        unsafe fn qualityLevel(&self) -> NSUInteger;

        /// Setter for [`qualityLevel`][Self::qualityLevel].
        #[method(setQualityLevel:)]
        unsafe fn setQualityLevel(&self, quality_level: NSUInteger);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipixellate?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPixellate: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cipointillize?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIPointillize: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisaliencymap?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISaliencyMap: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cishadedmaterial?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIShadedMaterial: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other shadingImage)]
        unsafe fn shadingImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`shadingImage`][Self::shadingImage].
        #[method(setShadingImage:)]
        unsafe fn setShadingImage(&self, shading_image: Option<&CIImage>);

        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisobelgradients?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISobelGradients: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cispotcolor?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISpotColor: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other centerColor1)]
        unsafe fn centerColor1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`centerColor1`][Self::centerColor1].
        #[method(setCenterColor1:)]
        unsafe fn setCenterColor1(&self, center_color1: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other replacementColor1)]
        unsafe fn replacementColor1(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`replacementColor1`][Self::replacementColor1].
        #[method(setReplacementColor1:)]
        unsafe fn setReplacementColor1(&self, replacement_color1: &CIColor);

        #[method(closeness1)]
        unsafe fn closeness1(&self) -> c_float;

        /// Setter for [`closeness1`][Self::closeness1].
        #[method(setCloseness1:)]
        unsafe fn setCloseness1(&self, closeness1: c_float);

        #[method(contrast1)]
        unsafe fn contrast1(&self) -> c_float;

        /// Setter for [`contrast1`][Self::contrast1].
        #[method(setContrast1:)]
        unsafe fn setContrast1(&self, contrast1: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other centerColor2)]
        unsafe fn centerColor2(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`centerColor2`][Self::centerColor2].
        #[method(setCenterColor2:)]
        unsafe fn setCenterColor2(&self, center_color2: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other replacementColor2)]
        unsafe fn replacementColor2(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`replacementColor2`][Self::replacementColor2].
        #[method(setReplacementColor2:)]
        unsafe fn setReplacementColor2(&self, replacement_color2: &CIColor);

        #[method(closeness2)]
        unsafe fn closeness2(&self) -> c_float;

        /// Setter for [`closeness2`][Self::closeness2].
        #[method(setCloseness2:)]
        unsafe fn setCloseness2(&self, closeness2: c_float);

        #[method(contrast2)]
        unsafe fn contrast2(&self) -> c_float;

        /// Setter for [`contrast2`][Self::contrast2].
        #[method(setContrast2:)]
        unsafe fn setContrast2(&self, contrast2: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other centerColor3)]
        unsafe fn centerColor3(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`centerColor3`][Self::centerColor3].
        #[method(setCenterColor3:)]
        unsafe fn setCenterColor3(&self, center_color3: &CIColor);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other replacementColor3)]
        unsafe fn replacementColor3(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`replacementColor3`][Self::replacementColor3].
        #[method(setReplacementColor3:)]
        unsafe fn setReplacementColor3(&self, replacement_color3: &CIColor);

        #[method(closeness3)]
        unsafe fn closeness3(&self) -> c_float;

        /// Setter for [`closeness3`][Self::closeness3].
        #[method(setCloseness3:)]
        unsafe fn setCloseness3(&self, closeness3: c_float);

        #[method(contrast3)]
        unsafe fn contrast3(&self) -> c_float;

        /// Setter for [`contrast3`][Self::contrast3].
        #[method(setContrast3:)]
        unsafe fn setContrast3(&self, contrast3: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cispotlight?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CISpotLight: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other lightPosition)]
        unsafe fn lightPosition(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`lightPosition`][Self::lightPosition].
        #[method(setLightPosition:)]
        unsafe fn setLightPosition(&self, light_position: &CIVector);

        #[cfg(feature = "CIVector")]
        #[method_id(@__method_family Other lightPointsAt)]
        unsafe fn lightPointsAt(&self) -> Retained<CIVector>;

        #[cfg(feature = "CIVector")]
        /// Setter for [`lightPointsAt`][Self::lightPointsAt].
        #[method(setLightPointsAt:)]
        unsafe fn setLightPointsAt(&self, light_points_at: &CIVector);

        #[method(brightness)]
        unsafe fn brightness(&self) -> c_float;

        /// Setter for [`brightness`][Self::brightness].
        #[method(setBrightness:)]
        unsafe fn setBrightness(&self, brightness: c_float);

        #[method(concentration)]
        unsafe fn concentration(&self) -> c_float;

        /// Setter for [`concentration`][Self::concentration].
        #[method(setConcentration:)]
        unsafe fn setConcentration(&self, concentration: c_float);

        #[cfg(feature = "CIColor")]
        #[method_id(@__method_family Other color)]
        unsafe fn color(&self) -> Retained<CIColor>;

        #[cfg(feature = "CIColor")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        unsafe fn setColor(&self, color: &CIColor);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cibokehblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBokehBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(ringAmount)]
        unsafe fn ringAmount(&self) -> c_float;

        /// Setter for [`ringAmount`][Self::ringAmount].
        #[method(setRingAmount:)]
        unsafe fn setRingAmount(&self, ring_amount: c_float);

        #[method(ringSize)]
        unsafe fn ringSize(&self) -> c_float;

        /// Setter for [`ringSize`][Self::ringSize].
        #[method(setRingSize:)]
        unsafe fn setRingSize(&self, ring_size: c_float);

        #[method(softness)]
        unsafe fn softness(&self) -> c_float;

        /// Setter for [`softness`][Self::softness].
        #[method(setSoftness:)]
        unsafe fn setSoftness(&self, softness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciboxblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIBoxBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cidiscblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIDiscBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cigaussianblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIGaussianBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimaskedvariableblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMaskedVariableBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other mask)]
        unsafe fn mask(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`mask`][Self::mask].
        #[method(setMask:)]
        unsafe fn setMask(&self, mask: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimedian?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMedian: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimorphologygradient?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMorphologyGradient: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimorphologymaximum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMorphologyMaximum: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimorphologyminimum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMorphologyMinimum: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimorphologyrectanglemaximum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMorphologyRectangleMaximum: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(height)]
        unsafe fn height(&self) -> c_float;

        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        unsafe fn setHeight(&self, height: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimorphologyrectangleminimum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMorphologyRectangleMinimum: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(width)]
        unsafe fn width(&self) -> c_float;

        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        unsafe fn setWidth(&self, width: c_float);

        #[method(height)]
        unsafe fn height(&self) -> c_float;

        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        unsafe fn setHeight(&self, height: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cimotionblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIMotionBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(radius)]
        unsafe fn radius(&self) -> c_float;

        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        unsafe fn setRadius(&self, radius: c_float);

        #[method(angle)]
        unsafe fn angle(&self) -> c_float;

        /// Setter for [`angle`][Self::angle].
        #[method(setAngle:)]
        unsafe fn setAngle(&self, angle: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cinoisereduction?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CINoiseReduction: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(noiseLevel)]
        unsafe fn noiseLevel(&self) -> c_float;

        /// Setter for [`noiseLevel`][Self::noiseLevel].
        #[method(setNoiseLevel:)]
        unsafe fn setNoiseLevel(&self, noise_level: c_float);

        #[method(sharpness)]
        unsafe fn sharpness(&self) -> c_float;

        /// Setter for [`sharpness`][Self::sharpness].
        #[method(setSharpness:)]
        unsafe fn setSharpness(&self, sharpness: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cizoomblur?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIZoomBlur: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[method(amount)]
        unsafe fn amount(&self) -> c_float;

        /// Setter for [`amount`][Self::amount].
        #[method(setAmount:)]
        unsafe fn setAmount(&self, amount: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareareductionfilter?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaReductionFilter: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(extent)]
        unsafe fn extent(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extent`][Self::extent].
        #[method(setExtent:)]
        unsafe fn setExtent(&self, extent: CGRect);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaaverage?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaAverage: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaboundsred?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaBoundsRed: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareahistogram?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaHistogram: CIAreaReductionFilter {
        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(count)]
        unsafe fn count(&self) -> NSInteger;

        /// Setter for [`count`][Self::count].
        #[method(setCount:)]
        unsafe fn setCount(&self, count: NSInteger);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciarealogarithmichistogram?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaLogarithmicHistogram: CIAreaReductionFilter {
        #[method(scale)]
        unsafe fn scale(&self) -> c_float;

        /// Setter for [`scale`][Self::scale].
        #[method(setScale:)]
        unsafe fn setScale(&self, scale: c_float);

        #[method(count)]
        unsafe fn count(&self) -> NSInteger;

        /// Setter for [`count`][Self::count].
        #[method(setCount:)]
        unsafe fn setCount(&self, count: NSInteger);

        #[method(minimumStop)]
        unsafe fn minimumStop(&self) -> c_float;

        /// Setter for [`minimumStop`][Self::minimumStop].
        #[method(setMinimumStop:)]
        unsafe fn setMinimumStop(&self, minimum_stop: c_float);

        #[method(maximumStop)]
        unsafe fn maximumStop(&self) -> c_float;

        /// Setter for [`maximumStop`][Self::maximumStop].
        #[method(setMaximumStop:)]
        unsafe fn setMaximumStop(&self, maximum_stop: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareamaximum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMaximum: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareamaximumalpha?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMaximumAlpha: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaminimum?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMinimum: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaminimumalpha?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMinimumAlpha: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaminmax?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMinMax: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciareaminmaxred?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIAreaMinMaxRed: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolumnaverage?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIColumnAverage: CIAreaReductionFilter {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cihistogramdisplay?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIHistogramDisplay: CIFilterProtocol {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputImage)]
        unsafe fn inputImage(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputImage`][Self::inputImage].
        #[method(setInputImage:)]
        unsafe fn setInputImage(&self, input_image: Option<&CIImage>);

        #[method(height)]
        unsafe fn height(&self) -> c_float;

        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        unsafe fn setHeight(&self, height: c_float);

        #[method(highLimit)]
        unsafe fn highLimit(&self) -> c_float;

        /// Setter for [`highLimit`][Self::highLimit].
        #[method(setHighLimit:)]
        unsafe fn setHighLimit(&self, high_limit: c_float);

        #[method(lowLimit)]
        unsafe fn lowLimit(&self) -> c_float;

        /// Setter for [`lowLimit`][Self::lowLimit].
        #[method(setLowLimit:)]
        unsafe fn setLowLimit(&self, low_limit: c_float);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cikmeans?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIKMeans: CIAreaReductionFilter {
        #[cfg(feature = "CIImage")]
        #[method_id(@__method_family Other inputMeans)]
        unsafe fn inputMeans(&self) -> Option<Retained<CIImage>>;

        #[cfg(feature = "CIImage")]
        /// Setter for [`inputMeans`][Self::inputMeans].
        #[method(setInputMeans:)]
        unsafe fn setInputMeans(&self, input_means: Option<&CIImage>);

        #[method(count)]
        unsafe fn count(&self) -> NSInteger;

        /// Setter for [`count`][Self::count].
        #[method(setCount:)]
        unsafe fn setCount(&self, count: NSInteger);

        #[method(passes)]
        unsafe fn passes(&self) -> c_float;

        /// Setter for [`passes`][Self::passes].
        #[method(setPasses:)]
        unsafe fn setPasses(&self, passes: c_float);

        #[method(perceptual)]
        unsafe fn perceptual(&self) -> bool;

        /// Setter for [`perceptual`][Self::perceptual].
        #[method(setPerceptual:)]
        unsafe fn setPerceptual(&self, perceptual: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cirowaverage?language=objc)
    #[cfg(feature = "CIFilter")]
    pub unsafe trait CIRowAverage: CIAreaReductionFilter {}
);

extern_methods!(
    /// Builtins
    #[cfg(feature = "CIFilter")]
    unsafe impl CIFilter {
        #[method_id(@__method_family Other gaussianGradientFilter)]
        pub unsafe fn gaussianGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hueSaturationValueGradientFilter)]
        pub unsafe fn hueSaturationValueGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other linearGradientFilter)]
        pub unsafe fn linearGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other radialGradientFilter)]
        pub unsafe fn radialGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other smoothLinearGradientFilter)]
        pub unsafe fn smoothLinearGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sharpenLuminanceFilter)]
        pub unsafe fn sharpenLuminanceFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other unsharpMaskFilter)]
        pub unsafe fn unsharpMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other circularScreenFilter)]
        pub unsafe fn circularScreenFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other CMYKHalftone)]
        pub unsafe fn CMYKHalftone() -> Retained<CIFilter>;

        #[method_id(@__method_family Other dotScreenFilter)]
        pub unsafe fn dotScreenFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hatchedScreenFilter)]
        pub unsafe fn hatchedScreenFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lineScreenFilter)]
        pub unsafe fn lineScreenFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other bicubicScaleTransformFilter)]
        pub unsafe fn bicubicScaleTransformFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other edgePreserveUpsampleFilter)]
        pub unsafe fn edgePreserveUpsampleFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other keystoneCorrectionCombinedFilter)]
        pub unsafe fn keystoneCorrectionCombinedFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other keystoneCorrectionHorizontalFilter)]
        pub unsafe fn keystoneCorrectionHorizontalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other keystoneCorrectionVerticalFilter)]
        pub unsafe fn keystoneCorrectionVerticalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lanczosScaleTransformFilter)]
        pub unsafe fn lanczosScaleTransformFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other maximumScaleTransformFilter)]
        pub unsafe fn maximumScaleTransformFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other perspectiveCorrectionFilter)]
        pub unsafe fn perspectiveCorrectionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other perspectiveRotateFilter)]
        pub unsafe fn perspectiveRotateFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other perspectiveTransformFilter)]
        pub unsafe fn perspectiveTransformFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other perspectiveTransformWithExtentFilter)]
        pub unsafe fn perspectiveTransformWithExtentFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other straightenFilter)]
        pub unsafe fn straightenFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other accordionFoldTransitionFilter)]
        pub unsafe fn accordionFoldTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other barsSwipeTransitionFilter)]
        pub unsafe fn barsSwipeTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other copyMachineTransitionFilter)]
        pub unsafe fn copyMachineTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other disintegrateWithMaskTransitionFilter)]
        pub unsafe fn disintegrateWithMaskTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other dissolveTransitionFilter)]
        pub unsafe fn dissolveTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other flashTransitionFilter)]
        pub unsafe fn flashTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other modTransitionFilter)]
        pub unsafe fn modTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pageCurlTransitionFilter)]
        pub unsafe fn pageCurlTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pageCurlWithShadowTransitionFilter)]
        pub unsafe fn pageCurlWithShadowTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other rippleTransitionFilter)]
        pub unsafe fn rippleTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other swipeTransitionFilter)]
        pub unsafe fn swipeTransitionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other additionCompositingFilter)]
        pub unsafe fn additionCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorBlendModeFilter)]
        pub unsafe fn colorBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorBurnBlendModeFilter)]
        pub unsafe fn colorBurnBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorDodgeBlendModeFilter)]
        pub unsafe fn colorDodgeBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other darkenBlendModeFilter)]
        pub unsafe fn darkenBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other differenceBlendModeFilter)]
        pub unsafe fn differenceBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other divideBlendModeFilter)]
        pub unsafe fn divideBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other exclusionBlendModeFilter)]
        pub unsafe fn exclusionBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hardLightBlendModeFilter)]
        pub unsafe fn hardLightBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hueBlendModeFilter)]
        pub unsafe fn hueBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lightenBlendModeFilter)]
        pub unsafe fn lightenBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other linearBurnBlendModeFilter)]
        pub unsafe fn linearBurnBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other linearDodgeBlendModeFilter)]
        pub unsafe fn linearDodgeBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other linearLightBlendModeFilter)]
        pub unsafe fn linearLightBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other luminosityBlendModeFilter)]
        pub unsafe fn luminosityBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other maximumCompositingFilter)]
        pub unsafe fn maximumCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other minimumCompositingFilter)]
        pub unsafe fn minimumCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other multiplyBlendModeFilter)]
        pub unsafe fn multiplyBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other multiplyCompositingFilter)]
        pub unsafe fn multiplyCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other overlayBlendModeFilter)]
        pub unsafe fn overlayBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pinLightBlendModeFilter)]
        pub unsafe fn pinLightBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other saturationBlendModeFilter)]
        pub unsafe fn saturationBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other screenBlendModeFilter)]
        pub unsafe fn screenBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other softLightBlendModeFilter)]
        pub unsafe fn softLightBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sourceAtopCompositingFilter)]
        pub unsafe fn sourceAtopCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sourceInCompositingFilter)]
        pub unsafe fn sourceInCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sourceOutCompositingFilter)]
        pub unsafe fn sourceOutCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sourceOverCompositingFilter)]
        pub unsafe fn sourceOverCompositingFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other subtractBlendModeFilter)]
        pub unsafe fn subtractBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other vividLightBlendModeFilter)]
        pub unsafe fn vividLightBlendModeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorAbsoluteDifferenceFilter)]
        pub unsafe fn colorAbsoluteDifferenceFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorClampFilter)]
        pub unsafe fn colorClampFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorControlsFilter)]
        pub unsafe fn colorControlsFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorMatrixFilter)]
        pub unsafe fn colorMatrixFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorPolynomialFilter)]
        pub unsafe fn colorPolynomialFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorThresholdFilter)]
        pub unsafe fn colorThresholdFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorThresholdOtsuFilter)]
        pub unsafe fn colorThresholdOtsuFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other depthToDisparityFilter)]
        pub unsafe fn depthToDisparityFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other disparityToDepthFilter)]
        pub unsafe fn disparityToDepthFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other exposureAdjustFilter)]
        pub unsafe fn exposureAdjustFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other gammaAdjustFilter)]
        pub unsafe fn gammaAdjustFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hueAdjustFilter)]
        pub unsafe fn hueAdjustFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other linearToSRGBToneCurveFilter)]
        pub unsafe fn linearToSRGBToneCurveFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sRGBToneCurveToLinearFilter)]
        pub unsafe fn sRGBToneCurveToLinearFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other temperatureAndTintFilter)]
        pub unsafe fn temperatureAndTintFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other toneCurveFilter)]
        pub unsafe fn toneCurveFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other toneMapHeadroomFilter)]
        pub unsafe fn toneMapHeadroomFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other vibranceFilter)]
        pub unsafe fn vibranceFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other whitePointAdjustFilter)]
        pub unsafe fn whitePointAdjustFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorCrossPolynomialFilter)]
        pub unsafe fn colorCrossPolynomialFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorCubeFilter)]
        pub unsafe fn colorCubeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorCubesMixedWithMaskFilter)]
        pub unsafe fn colorCubesMixedWithMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorCubeWithColorSpaceFilter)]
        pub unsafe fn colorCubeWithColorSpaceFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorCurvesFilter)]
        pub unsafe fn colorCurvesFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorInvertFilter)]
        pub unsafe fn colorInvertFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorMapFilter)]
        pub unsafe fn colorMapFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorMonochromeFilter)]
        pub unsafe fn colorMonochromeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other colorPosterizeFilter)]
        pub unsafe fn colorPosterizeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convertLabToRGBFilter)]
        pub unsafe fn convertLabToRGBFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convertRGBtoLabFilter)]
        pub unsafe fn convertRGBtoLabFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other ditherFilter)]
        pub unsafe fn ditherFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other documentEnhancerFilter)]
        pub unsafe fn documentEnhancerFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other falseColorFilter)]
        pub unsafe fn falseColorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other LabDeltaE)]
        pub unsafe fn LabDeltaE() -> Retained<CIFilter>;

        #[method_id(@__method_family Other maskToAlphaFilter)]
        pub unsafe fn maskToAlphaFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other maximumComponentFilter)]
        pub unsafe fn maximumComponentFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other minimumComponentFilter)]
        pub unsafe fn minimumComponentFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other paletteCentroidFilter)]
        pub unsafe fn paletteCentroidFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other palettizeFilter)]
        pub unsafe fn palettizeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectChromeFilter)]
        pub unsafe fn photoEffectChromeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectFadeFilter)]
        pub unsafe fn photoEffectFadeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectInstantFilter)]
        pub unsafe fn photoEffectInstantFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectMonoFilter)]
        pub unsafe fn photoEffectMonoFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectNoirFilter)]
        pub unsafe fn photoEffectNoirFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectProcessFilter)]
        pub unsafe fn photoEffectProcessFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectTonalFilter)]
        pub unsafe fn photoEffectTonalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other photoEffectTransferFilter)]
        pub unsafe fn photoEffectTransferFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sepiaToneFilter)]
        pub unsafe fn sepiaToneFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other thermalFilter)]
        pub unsafe fn thermalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other vignetteFilter)]
        pub unsafe fn vignetteFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other vignetteEffectFilter)]
        pub unsafe fn vignetteEffectFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other xRayFilter)]
        pub unsafe fn xRayFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other bumpDistortionFilter)]
        pub unsafe fn bumpDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other bumpDistortionLinearFilter)]
        pub unsafe fn bumpDistortionLinearFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other circleSplashDistortionFilter)]
        pub unsafe fn circleSplashDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other circularWrapFilter)]
        pub unsafe fn circularWrapFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other displacementDistortionFilter)]
        pub unsafe fn displacementDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other drosteFilter)]
        pub unsafe fn drosteFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other glassDistortionFilter)]
        pub unsafe fn glassDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other glassLozengeFilter)]
        pub unsafe fn glassLozengeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other holeDistortionFilter)]
        pub unsafe fn holeDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lightTunnelFilter)]
        pub unsafe fn lightTunnelFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other ninePartStretchedFilter)]
        pub unsafe fn ninePartStretchedFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other ninePartTiledFilter)]
        pub unsafe fn ninePartTiledFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pinchDistortionFilter)]
        pub unsafe fn pinchDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other stretchCropFilter)]
        pub unsafe fn stretchCropFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other torusLensDistortionFilter)]
        pub unsafe fn torusLensDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other twirlDistortionFilter)]
        pub unsafe fn twirlDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other vortexDistortionFilter)]
        pub unsafe fn vortexDistortionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other affineClampFilter)]
        pub unsafe fn affineClampFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other affineTileFilter)]
        pub unsafe fn affineTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other eightfoldReflectedTileFilter)]
        pub unsafe fn eightfoldReflectedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other fourfoldReflectedTileFilter)]
        pub unsafe fn fourfoldReflectedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other fourfoldRotatedTileFilter)]
        pub unsafe fn fourfoldRotatedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other fourfoldTranslatedTileFilter)]
        pub unsafe fn fourfoldTranslatedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other glideReflectedTileFilter)]
        pub unsafe fn glideReflectedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other kaleidoscopeFilter)]
        pub unsafe fn kaleidoscopeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other opTileFilter)]
        pub unsafe fn opTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other parallelogramTileFilter)]
        pub unsafe fn parallelogramTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other perspectiveTileFilter)]
        pub unsafe fn perspectiveTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sixfoldReflectedTileFilter)]
        pub unsafe fn sixfoldReflectedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sixfoldRotatedTileFilter)]
        pub unsafe fn sixfoldRotatedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other triangleKaleidoscopeFilter)]
        pub unsafe fn triangleKaleidoscopeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other triangleTileFilter)]
        pub unsafe fn triangleTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other twelvefoldReflectedTileFilter)]
        pub unsafe fn twelvefoldReflectedTileFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other attributedTextImageGeneratorFilter)]
        pub unsafe fn attributedTextImageGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other aztecCodeGeneratorFilter)]
        pub unsafe fn aztecCodeGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other barcodeGeneratorFilter)]
        pub unsafe fn barcodeGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other blurredRectangleGeneratorFilter)]
        pub unsafe fn blurredRectangleGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other checkerboardGeneratorFilter)]
        pub unsafe fn checkerboardGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other code128BarcodeGeneratorFilter)]
        pub unsafe fn code128BarcodeGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lenticularHaloGeneratorFilter)]
        pub unsafe fn lenticularHaloGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other meshGeneratorFilter)]
        pub unsafe fn meshGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other PDF417BarcodeGenerator)]
        pub unsafe fn PDF417BarcodeGenerator() -> Retained<CIFilter>;

        #[method_id(@__method_family Other QRCodeGenerator)]
        pub unsafe fn QRCodeGenerator() -> Retained<CIFilter>;

        #[method_id(@__method_family Other randomGeneratorFilter)]
        pub unsafe fn randomGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other roundedRectangleGeneratorFilter)]
        pub unsafe fn roundedRectangleGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other roundedRectangleStrokeGeneratorFilter)]
        pub unsafe fn roundedRectangleStrokeGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other starShineGeneratorFilter)]
        pub unsafe fn starShineGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other stripesGeneratorFilter)]
        pub unsafe fn stripesGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sunbeamsGeneratorFilter)]
        pub unsafe fn sunbeamsGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other textImageGeneratorFilter)]
        pub unsafe fn textImageGeneratorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other blendWithAlphaMaskFilter)]
        pub unsafe fn blendWithAlphaMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other blendWithBlueMaskFilter)]
        pub unsafe fn blendWithBlueMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other blendWithMaskFilter)]
        pub unsafe fn blendWithMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other blendWithRedMaskFilter)]
        pub unsafe fn blendWithRedMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other bloomFilter)]
        pub unsafe fn bloomFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other cannyEdgeDetectorFilter)]
        pub unsafe fn cannyEdgeDetectorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other comicEffectFilter)]
        pub unsafe fn comicEffectFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolution3X3Filter)]
        pub unsafe fn convolution3X3Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolution5X5Filter)]
        pub unsafe fn convolution5X5Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolution7X7Filter)]
        pub unsafe fn convolution7X7Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolution9HorizontalFilter)]
        pub unsafe fn convolution9HorizontalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolution9VerticalFilter)]
        pub unsafe fn convolution9VerticalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolutionRGB3X3Filter)]
        pub unsafe fn convolutionRGB3X3Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolutionRGB5X5Filter)]
        pub unsafe fn convolutionRGB5X5Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolutionRGB7X7Filter)]
        pub unsafe fn convolutionRGB7X7Filter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolutionRGB9HorizontalFilter)]
        pub unsafe fn convolutionRGB9HorizontalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other convolutionRGB9VerticalFilter)]
        pub unsafe fn convolutionRGB9VerticalFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other coreMLModelFilter)]
        pub unsafe fn coreMLModelFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other crystallizeFilter)]
        pub unsafe fn crystallizeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other depthOfFieldFilter)]
        pub unsafe fn depthOfFieldFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other edgesFilter)]
        pub unsafe fn edgesFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other edgeWorkFilter)]
        pub unsafe fn edgeWorkFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other gaborGradientsFilter)]
        pub unsafe fn gaborGradientsFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other gloomFilter)]
        pub unsafe fn gloomFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other heightFieldFromMaskFilter)]
        pub unsafe fn heightFieldFromMaskFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other hexagonalPixellateFilter)]
        pub unsafe fn hexagonalPixellateFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other highlightShadowAdjustFilter)]
        pub unsafe fn highlightShadowAdjustFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other lineOverlayFilter)]
        pub unsafe fn lineOverlayFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other mixFilter)]
        pub unsafe fn mixFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other personSegmentationFilter)]
        pub unsafe fn personSegmentationFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pixellateFilter)]
        pub unsafe fn pixellateFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other pointillizeFilter)]
        pub unsafe fn pointillizeFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other saliencyMapFilter)]
        pub unsafe fn saliencyMapFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other shadedMaterialFilter)]
        pub unsafe fn shadedMaterialFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other sobelGradientsFilter)]
        pub unsafe fn sobelGradientsFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other spotColorFilter)]
        pub unsafe fn spotColorFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other spotLightFilter)]
        pub unsafe fn spotLightFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other bokehBlurFilter)]
        pub unsafe fn bokehBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other boxBlurFilter)]
        pub unsafe fn boxBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other discBlurFilter)]
        pub unsafe fn discBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other gaussianBlurFilter)]
        pub unsafe fn gaussianBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other maskedVariableBlurFilter)]
        pub unsafe fn maskedVariableBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other medianFilter)]
        pub unsafe fn medianFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other morphologyGradientFilter)]
        pub unsafe fn morphologyGradientFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other morphologyMaximumFilter)]
        pub unsafe fn morphologyMaximumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other morphologyMinimumFilter)]
        pub unsafe fn morphologyMinimumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other morphologyRectangleMaximumFilter)]
        pub unsafe fn morphologyRectangleMaximumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other morphologyRectangleMinimumFilter)]
        pub unsafe fn morphologyRectangleMinimumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other motionBlurFilter)]
        pub unsafe fn motionBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other noiseReductionFilter)]
        pub unsafe fn noiseReductionFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other zoomBlurFilter)]
        pub unsafe fn zoomBlurFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaAlphaWeightedHistogramFilter)]
        pub unsafe fn areaAlphaWeightedHistogramFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaAverageFilter)]
        pub unsafe fn areaAverageFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaBoundsRedFilter)]
        pub unsafe fn areaBoundsRedFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaHistogramFilter)]
        pub unsafe fn areaHistogramFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaLogarithmicHistogramFilter)]
        pub unsafe fn areaLogarithmicHistogramFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMaximumFilter)]
        pub unsafe fn areaMaximumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMaximumAlphaFilter)]
        pub unsafe fn areaMaximumAlphaFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMinimumFilter)]
        pub unsafe fn areaMinimumFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMinimumAlphaFilter)]
        pub unsafe fn areaMinimumAlphaFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMinMaxFilter)]
        pub unsafe fn areaMinMaxFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other areaMinMaxRedFilter)]
        pub unsafe fn areaMinMaxRedFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other columnAverageFilter)]
        pub unsafe fn columnAverageFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other histogramDisplayFilter)]
        pub unsafe fn histogramDisplayFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other KMeansFilter)]
        pub unsafe fn KMeansFilter() -> Retained<CIFilter>;

        #[method_id(@__method_family Other rowAverageFilter)]
        pub unsafe fn rowAverageFilter() -> Retained<CIFilter>;
    }
);
