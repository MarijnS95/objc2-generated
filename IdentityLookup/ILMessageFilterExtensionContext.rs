//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Represents a MessageFilter extension request's context.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/identitylookup/ilmessagefilterextensioncontext?language=objc)
    #[unsafe(super(NSExtensionContext, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ILMessageFilterExtensionContext;
);

unsafe impl NSObjectProtocol for ILMessageFilterExtensionContext {}

extern_methods!(
    unsafe impl ILMessageFilterExtensionContext {
        #[cfg(all(feature = "ILNetworkResponse", feature = "block2"))]
        /// Defer the current query request to the app extension's associated network service and receive a network response asynchronously.
        ///
        /// This causes the system to perform an HTTPS network request to a URL specified in the app extension's Info.plist, and the response
        /// to that HTTPS request (or an error) is returned asynchronously. See documentation for details regarding how this HTTPS request
        /// is formatted, restrictions on the URL, etc.
        ///
        ///
        /// Parameter `completion`: Completion block containing either the network response to the HTTPS request or an error.
        #[method(deferQueryRequestToNetworkWithCompletion:)]
        #[unsafe(method_family = none)]
        pub unsafe fn deferQueryRequestToNetworkWithCompletion(
            &self,
            completion: &block2::Block<dyn Fn(*mut ILNetworkResponse, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl ILMessageFilterExtensionContext {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
