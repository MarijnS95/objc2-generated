//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A response to an ILMessageFilterQueryRequest.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryresponse?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ILMessageFilterQueryResponse;
);

extern_conformance!(
    unsafe impl NSCoding for ILMessageFilterQueryResponse {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for ILMessageFilterQueryResponse {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for ILMessageFilterQueryResponse {}
);

impl ILMessageFilterQueryResponse {
    extern_methods!(
        #[cfg(feature = "ILMessageFilterAction")]
        /// Action to take for the received message.
        #[unsafe(method(action))]
        #[unsafe(method_family = none)]
        pub unsafe fn action(&self) -> ILMessageFilterAction;

        #[cfg(feature = "ILMessageFilterAction")]
        /// Setter for [`action`][Self::action].
        #[unsafe(method(setAction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAction(&self, action: ILMessageFilterAction);

        #[cfg(feature = "ILMessageFilterAction")]
        /// SubAction to take for the received message.
        #[unsafe(method(subAction))]
        #[unsafe(method_family = none)]
        pub unsafe fn subAction(&self) -> ILMessageFilterSubAction;

        #[cfg(feature = "ILMessageFilterAction")]
        /// Setter for [`subAction`][Self::subAction].
        #[unsafe(method(setSubAction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubAction(&self, sub_action: ILMessageFilterSubAction);
    );
}

/// Methods declared on superclass `NSObject`.
impl ILMessageFilterQueryResponse {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
