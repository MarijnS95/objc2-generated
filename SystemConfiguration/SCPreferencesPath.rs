//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// Creates a new path component within the dictionary
/// hierarchy.
///
/// Parameter `prefs`: The preferences session.
///
/// Parameter `prefix`: A string that represents the parent path.
///
/// Returns: Returns a string representing the new (unique) child path; NULL
/// if the specified path does not exist.
#[cfg(feature = "SCPreferences")]
#[inline]
pub unsafe extern "C-unwind" fn SCPreferencesPathCreateUniqueChild(
    prefs: &SCPreferences,
    prefix: &CFString,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SCPreferencesPathCreateUniqueChild(
            prefs: &SCPreferences,
            prefix: &CFString,
        ) -> *mut CFString;
    }
    let ret = unsafe { SCPreferencesPathCreateUniqueChild(prefs, prefix) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

/// Returns the dictionary associated with the specified
/// path.
///
/// Parameter `prefs`: The preferences session.
///
/// Parameter `path`: A string that represents the path to be returned.
///
/// Returns: Returns the dictionary associated with the specified path; NULL
/// if the path does not exist.
#[cfg(feature = "SCPreferences")]
#[inline]
pub unsafe extern "C-unwind" fn SCPreferencesPathGetValue(
    prefs: &SCPreferences,
    path: &CFString,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn SCPreferencesPathGetValue(prefs: &SCPreferences, path: &CFString) -> *mut CFDictionary;
    }
    let ret = unsafe { SCPreferencesPathGetValue(prefs, path) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

/// Returns the link (if one exists) associated with the
/// specified path.
///
/// Parameter `prefs`: The preferences session.
///
/// Parameter `path`: A string that represents the path to be returned.
///
/// Returns: Returns the dictionary associated with the specified path; NULL
/// if the path is not a link or does not exist.
#[cfg(feature = "SCPreferences")]
#[inline]
pub unsafe extern "C-unwind" fn SCPreferencesPathGetLink(
    prefs: &SCPreferences,
    path: &CFString,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SCPreferencesPathGetLink(prefs: &SCPreferences, path: &CFString) -> *mut CFString;
    }
    let ret = unsafe { SCPreferencesPathGetLink(prefs, path) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    /// Associates a dictionary with the specified path.
    ///
    /// Parameter `prefs`: The preferences session.
    ///
    /// Parameter `path`: A string that represents the path to be updated.
    ///
    /// Parameter `value`: A dictionary that represents the data to be
    /// stored at the specified path.
    ///
    /// Returns: Returns TRUE if successful; FALSE otherwise.
    #[cfg(feature = "SCPreferences")]
    pub fn SCPreferencesPathSetValue(
        prefs: &SCPreferences,
        path: &CFString,
        value: &CFDictionary,
    ) -> Boolean;
}

extern "C-unwind" {
    /// Associates a link to a second dictionary at the
    /// specified path.
    ///
    /// Parameter `prefs`: The preferences session.
    ///
    /// Parameter `path`: A string that represents the path to be updated.
    ///
    /// Parameter `link`: A string that represents the link to be stored
    /// at the specified path.
    ///
    /// Returns: Returns TRUE if successful; FALSE otherwise.
    #[cfg(feature = "SCPreferences")]
    pub fn SCPreferencesPathSetLink(
        prefs: &SCPreferences,
        path: &CFString,
        link: &CFString,
    ) -> Boolean;
}

extern "C-unwind" {
    /// Removes the data associated with the specified path.
    ///
    /// Parameter `prefs`: The preferences session.
    ///
    /// Parameter `path`: A string that represents the path to be returned.
    ///
    /// Returns: Returns TRUE if successful; FALSE otherwise.
    #[cfg(feature = "SCPreferences")]
    pub fn SCPreferencesPathRemoveValue(prefs: &SCPreferences, path: &CFString) -> Boolean;
}
