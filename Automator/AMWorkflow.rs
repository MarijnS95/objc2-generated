//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automator/amworkflow?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AMWorkflow;
);

unsafe impl NSCopying for AMWorkflow {}

unsafe impl CopyingHelper for AMWorkflow {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AMWorkflow {}

extern_methods!(
    unsafe impl AMWorkflow {
        #[unsafe(method_family(none))]
        #[method_id(runWorkflowAtURL:withInput:error:_)]
        pub unsafe fn runWorkflowAtURL_withInput_error(
            file_url: &NSURL,
            input: Option<&AnyObject>,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithContentsOfURL:error:_)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            file_url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method(writeToURL:error:_)]
        pub unsafe fn writeToURL_error(&self, file_url: &NSURL) -> Result<(), Retained<NSError>>;

        #[method(setValue:forVariableWithName:)]
        pub unsafe fn setValue_forVariableWithName(
            &self,
            value: Option<&AnyObject>,
            variable_name: &NSString,
        ) -> bool;

        #[unsafe(method_family(none))]
        #[method_id(valueForVariableWithName:)]
        pub unsafe fn valueForVariableWithName(
            &self,
            variable_name: &NSString,
        ) -> Option<Retained<AnyObject>>;

        #[cfg(feature = "AMAction")]
        #[method(addAction:)]
        pub unsafe fn addAction(&self, action: &AMAction);

        #[cfg(feature = "AMAction")]
        #[method(removeAction:)]
        pub unsafe fn removeAction(&self, action: &AMAction);

        #[cfg(feature = "AMAction")]
        #[method(insertAction:atIndex:)]
        pub unsafe fn insertAction_atIndex(&self, action: &AMAction, index: NSUInteger);

        #[method(moveActionAtIndex:toIndex:)]
        pub unsafe fn moveActionAtIndex_toIndex(
            &self,
            start_index: NSUInteger,
            end_index: NSUInteger,
        );

        #[unsafe(method_family(none))]
        #[method_id(fileURL)]
        pub unsafe fn fileURL(&self) -> Option<Retained<NSURL>>;

        #[cfg(feature = "AMAction")]
        #[unsafe(method_family(none))]
        #[method_id(actions)]
        pub unsafe fn actions(&self) -> Retained<NSArray<AMAction>>;

        #[unsafe(method_family(none))]
        #[method_id(input)]
        pub unsafe fn input(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`input`][Self::input].
        #[method(setInput:)]
        pub unsafe fn setInput(&self, input: Option<&AnyObject>);

        #[unsafe(method_family(none))]
        #[method_id(output)]
        pub unsafe fn output(&self) -> Option<Retained<AnyObject>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AMWorkflow {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
