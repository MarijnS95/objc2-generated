//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationsecuritykeypublickeycredentialprovider?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAuthorizationSecurityKeyPublicKeyCredentialProvider;
);

#[cfg(feature = "ASAuthorizationProvider")]
unsafe impl ASAuthorizationProvider for ASAuthorizationSecurityKeyPublicKeyCredentialProvider {}

unsafe impl NSObjectProtocol for ASAuthorizationSecurityKeyPublicKeyCredentialProvider {}

extern_methods!(
    unsafe impl ASAuthorizationSecurityKeyPublicKeyCredentialProvider {
        #[unsafe(method(initWithRelyingPartyIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRelyingPartyIdentifier(
            this: Allocated<Self>,
            relying_party_identifier: &NSString,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "ASAuthorizationRequest",
            feature = "ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest"
        ))]
        /// Create a request to register a new security key credential.
        ///
        /// Parameter `challenge`: The challenge to sign.
        ///
        /// Parameter `displayName`: The display name for the new credential.
        ///
        /// Parameter `name`: The name for the new credential.
        ///
        /// Parameter `userID`: An identifier to be stored alongside the credential, which will be returned with the credential when it is used to authenticate.
        #[unsafe(method(createCredentialRegistrationRequestWithChallenge:displayName:name:userID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createCredentialRegistrationRequestWithChallenge_displayName_name_userID(
            &self,
            challenge: &NSData,
            display_name: &NSString,
            name: &NSString,
            user_id: &NSData,
        ) -> Retained<ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest>;

        #[cfg(all(
            feature = "ASAuthorizationRequest",
            feature = "ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest"
        ))]
        /// Create a request to authenticate using an existing credential.
        ///
        /// Parameter `challenge`: The challenge to sign.
        #[unsafe(method(createCredentialAssertionRequestWithChallenge:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createCredentialAssertionRequestWithChallenge(
            &self,
            challenge: &NSData,
        ) -> Retained<ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest>;

        /// The Relying Party identifier used for all requests created by this object.
        #[unsafe(method(relyingPartyIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn relyingPartyIdentifier(&self) -> Retained<NSString>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    unsafe impl ASAuthorizationSecurityKeyPublicKeyCredentialProvider {}
);

#[cfg(feature = "ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialProvider")]
unsafe impl ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialProvider
    for ASAuthorizationSecurityKeyPublicKeyCredentialProvider
{
}
