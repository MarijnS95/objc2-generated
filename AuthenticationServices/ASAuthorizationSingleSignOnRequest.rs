//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationsinglesignonrequest?language=objc)
    #[unsafe(super(ASAuthorizationOpenIDRequest, ASAuthorizationRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "ASAuthorizationOpenIDRequest",
        feature = "ASAuthorizationRequest"
    ))]
    pub struct ASAuthorizationSingleSignOnRequest;
);

#[cfg(all(
    feature = "ASAuthorizationOpenIDRequest",
    feature = "ASAuthorizationRequest"
))]
unsafe impl NSCoding for ASAuthorizationSingleSignOnRequest {}

#[cfg(all(
    feature = "ASAuthorizationOpenIDRequest",
    feature = "ASAuthorizationRequest"
))]
unsafe impl NSCopying for ASAuthorizationSingleSignOnRequest {}

#[cfg(all(
    feature = "ASAuthorizationOpenIDRequest",
    feature = "ASAuthorizationRequest"
))]
unsafe impl CopyingHelper for ASAuthorizationSingleSignOnRequest {
    type Result = Self;
}

#[cfg(all(
    feature = "ASAuthorizationOpenIDRequest",
    feature = "ASAuthorizationRequest"
))]
unsafe impl NSObjectProtocol for ASAuthorizationSingleSignOnRequest {}

#[cfg(all(
    feature = "ASAuthorizationOpenIDRequest",
    feature = "ASAuthorizationRequest"
))]
unsafe impl NSSecureCoding for ASAuthorizationSingleSignOnRequest {}

extern_methods!(
    #[cfg(all(
        feature = "ASAuthorizationOpenIDRequest",
        feature = "ASAuthorizationRequest"
    ))]
    unsafe impl ASAuthorizationSingleSignOnRequest {
        /// Parameters required by the specific Authorization Server which should be used by the selected Authorization Services extension for authorization.
        #[unsafe(method_family(none))]
        #[method_id(authorizationOptions)]
        pub unsafe fn authorizationOptions(&self) -> Retained<NSArray<NSURLQueryItem>>;

        /// Setter for [`authorizationOptions`][Self::authorizationOptions].
        #[method(setAuthorizationOptions:)]
        pub unsafe fn setAuthorizationOptions(
            &self,
            authorization_options: &NSArray<NSURLQueryItem>,
        );

        /// Enables or disables the authorization user interface.
        ///
        /// The default values is YES. If user interface is not enabled, then the authorization will fail with
        ///
        /// See: ASAuthorizationErrorNotInteractive if it attempts to display the authorization user interface.
        #[method(isUserInterfaceEnabled)]
        pub unsafe fn isUserInterfaceEnabled(&self) -> bool;

        /// Setter for [`isUserInterfaceEnabled`][Self::isUserInterfaceEnabled].
        #[method(setUserInterfaceEnabled:)]
        pub unsafe fn setUserInterfaceEnabled(&self, user_interface_enabled: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `ASAuthorizationRequest`
    #[cfg(all(
        feature = "ASAuthorizationOpenIDRequest",
        feature = "ASAuthorizationRequest"
    ))]
    unsafe impl ASAuthorizationSingleSignOnRequest {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
