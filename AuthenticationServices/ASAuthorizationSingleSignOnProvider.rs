//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationsinglesignonprovider?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAuthorizationSingleSignOnProvider;
);

#[cfg(feature = "ASAuthorizationProvider")]
unsafe impl ASAuthorizationProvider for ASAuthorizationSingleSignOnProvider {}

unsafe impl NSObjectProtocol for ASAuthorizationSingleSignOnProvider {}

extern_methods!(
    unsafe impl ASAuthorizationSingleSignOnProvider {
        /// To get the right extension the identity provider main URL has to be provided. The URL is even part of the extension using assosiated domains mechanism or can be configured by MDM profile.
        #[unsafe(method_family(none))]
        #[method_id(authorizationProviderWithIdentityProviderURL:)]
        pub unsafe fn authorizationProviderWithIdentityProviderURL(url: &NSURL) -> Retained<Self>;

        #[cfg(all(
            feature = "ASAuthorizationOpenIDRequest",
            feature = "ASAuthorizationRequest",
            feature = "ASAuthorizationSingleSignOnRequest"
        ))]
        #[unsafe(method_family(none))]
        #[method_id(createRequest)]
        pub unsafe fn createRequest(&self) -> Retained<ASAuthorizationSingleSignOnRequest>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(url)]
        pub unsafe fn url(&self) -> Retained<NSURL>;

        /// Returns YES if the configured provider is capable of performing authorization within a given configuration.
        #[method(canPerformAuthorization)]
        pub unsafe fn canPerformAuthorization(&self) -> bool;
    }
);
