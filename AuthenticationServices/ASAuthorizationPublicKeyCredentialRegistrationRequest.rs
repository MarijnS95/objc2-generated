//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationpublickeycredentialregistrationrequest?language=objc)
    pub unsafe trait ASAuthorizationPublicKeyCredentialRegistrationRequest:
        NSObjectProtocol + NSSecureCoding + NSCopying
    {
        /// The Relying Party identifier used to scope this request.
        #[method(relyingPartyIdentifier)]
        #[unsafe(method_family = none)]
        unsafe fn relyingPartyIdentifier(&self) -> Retained<NSString>;

        /// An arbitrary byte sequence which will be stored alongside the credential and will be returned with the credential when authenticating with it in the future. May be used by a relying party to identify the user account this credential is associated with.
        #[method(userID)]
        #[unsafe(method_family = none)]
        unsafe fn userID(&self) -> Retained<NSData>;

        /// Setter for [`userID`][Self::userID].
        #[method(setUserID:)]
        #[unsafe(method_family = none)]
        unsafe fn setUserID(&self, user_id: &NSData);

        /// A human readable name to associate with a credential, which a user should be able to use to identify the credential.
        #[method(name)]
        #[unsafe(method_family = none)]
        unsafe fn name(&self) -> Retained<NSString>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        #[unsafe(method_family = none)]
        unsafe fn setName(&self, name: &NSString);

        /// A high level human readable name to associate with a credential, which should only be used for display.
        #[method(displayName)]
        #[unsafe(method_family = none)]
        unsafe fn displayName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`displayName`][Self::displayName].
        #[method(setDisplayName:)]
        #[unsafe(method_family = none)]
        unsafe fn setDisplayName(&self, display_name: Option<&NSString>);

        /// The challenge which can be used to verify the authenticator's attestation, if attestation is requested.
        #[method(challenge)]
        #[unsafe(method_family = none)]
        unsafe fn challenge(&self) -> Retained<NSData>;

        /// Setter for [`challenge`][Self::challenge].
        #[method(setChallenge:)]
        #[unsafe(method_family = none)]
        unsafe fn setChallenge(&self, challenge: &NSData);

        #[cfg(feature = "ASAuthorizationPublicKeyCredentialConstants")]
        /// A preference for whether the authenticator should attempt to verify that it is being used by its owner, such as through a PIN or biometrics.
        #[method(userVerificationPreference)]
        #[unsafe(method_family = none)]
        unsafe fn userVerificationPreference(
            &self,
        ) -> Retained<ASAuthorizationPublicKeyCredentialUserVerificationPreference>;

        #[cfg(feature = "ASAuthorizationPublicKeyCredentialConstants")]
        /// Setter for [`userVerificationPreference`][Self::userVerificationPreference].
        #[method(setUserVerificationPreference:)]
        #[unsafe(method_family = none)]
        unsafe fn setUserVerificationPreference(
            &self,
            user_verification_preference: &ASAuthorizationPublicKeyCredentialUserVerificationPreference,
        );

        #[cfg(feature = "ASAuthorizationPublicKeyCredentialConstants")]
        /// A preference for the type of attestation that the authenticator should attempt to perform.
        #[method(attestationPreference)]
        #[unsafe(method_family = none)]
        unsafe fn attestationPreference(
            &self,
        ) -> Retained<ASAuthorizationPublicKeyCredentialAttestationKind>;

        #[cfg(feature = "ASAuthorizationPublicKeyCredentialConstants")]
        /// Setter for [`attestationPreference`][Self::attestationPreference].
        #[method(setAttestationPreference:)]
        #[unsafe(method_family = none)]
        unsafe fn setAttestationPreference(
            &self,
            attestation_preference: &ASAuthorizationPublicKeyCredentialAttestationKind,
        );
    }
);
