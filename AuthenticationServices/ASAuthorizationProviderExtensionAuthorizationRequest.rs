//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationproviderauthorizationoperation?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type ASAuthorizationProviderAuthorizationOperation = NSString;

extern "C" {
    /// Operation which is invoked when the extension configuration is removed from the system.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationproviderauthorizationoperationconfigurationremoved?language=objc)
    pub static ASAuthorizationProviderAuthorizationOperationConfigurationRemoved:
        &'static ASAuthorizationProviderAuthorizationOperation;
}

extern "C" {
    /// Operation which is invoked when a request is sent direct to the extension instead of loaded in an ASWebAuthenticationSession.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationproviderauthorizationoperationdirectrequest?language=objc)
    pub static ASAuthorizationProviderAuthorizationOperationDirectRequest:
        &'static ASAuthorizationProviderAuthorizationOperation;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationproviderextensionauthorizationrequesthandler?language=objc)
    pub unsafe trait ASAuthorizationProviderExtensionAuthorizationRequestHandler:
        NSObjectProtocol + MainThreadOnly
    {
        /// Called to begin the authorization. It’s called on the main thread.
        #[method(beginAuthorizationWithRequest:)]
        unsafe fn beginAuthorizationWithRequest(
            &self,
            request: &ASAuthorizationProviderExtensionAuthorizationRequest,
        );

        /// Called when the authorization was canceled by authorization service. It’s called on the main thread.
        #[optional]
        #[method(cancelAuthorizationWithRequest:)]
        unsafe fn cancelAuthorizationWithRequest(
            &self,
            request: &ASAuthorizationProviderExtensionAuthorizationRequest,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationproviderextensionauthorizationrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAuthorizationProviderExtensionAuthorizationRequest;
);

unsafe impl NSObjectProtocol for ASAuthorizationProviderExtensionAuthorizationRequest {}

extern_methods!(
    unsafe impl ASAuthorizationProviderExtensionAuthorizationRequest {
        /// Call when authorization was not handled.
        #[method(doNotHandle)]
        pub unsafe fn doNotHandle(&self);

        /// Call when authorization needs to be canceled from some reason (for example user pressed Cancel button).
        #[method(cancel)]
        pub unsafe fn cancel(&self);

        /// Call when authorization succeeded without any output.
        #[method(complete)]
        pub unsafe fn complete(&self);

        /// Call when authorization succeeded with an authorization tokens stored in HTTP headers.
        #[method(completeWithHTTPAuthorizationHeaders:)]
        pub unsafe fn completeWithHTTPAuthorizationHeaders(
            &self,
            http_authorization_headers: &NSDictionary<NSString, NSString>,
        );

        /// Call when authorization succeeded with a HTTP response.
        #[method(completeWithHTTPResponse:httpBody:)]
        pub unsafe fn completeWithHTTPResponse_httpBody(
            &self,
            http_response: &NSHTTPURLResponse,
            http_body: Option<&NSData>,
        );

        #[cfg(feature = "ASAuthorizationProviderExtensionAuthorizationResult")]
        /// Call when authorization succeeded with
        ///
        /// See: ASAuthorizationProviderExtensionAuthorizationResult.
        #[method(completeWithAuthorizationResult:)]
        pub unsafe fn completeWithAuthorizationResult(
            &self,
            authorization_result: &ASAuthorizationProviderExtensionAuthorizationResult,
        );

        /// Call when authorization failed with an error.
        #[method(completeWithError:)]
        pub unsafe fn completeWithError(&self, error: &NSError);

        #[cfg(feature = "block2")]
        /// Asks authorization service to show extension view controller. If the controller cannot be shown an error is returned.
        #[method(presentAuthorizationViewControllerWithCompletion:)]
        pub unsafe fn presentAuthorizationViewControllerWithCompletion(
            &self,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        /// Request URL with all components.
        #[method_id(url)]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Retained<NSURL>;

        /// Operation to be executed by the extension.
        #[method_id(requestedOperation)]
        #[unsafe(method_family = none)]
        pub unsafe fn requestedOperation(
            &self,
        ) -> Retained<ASAuthorizationProviderAuthorizationOperation>;

        /// Request HTTP headers.
        #[method_id(httpHeaders)]
        #[unsafe(method_family = none)]
        pub unsafe fn httpHeaders(&self) -> Retained<NSDictionary<NSString, NSString>>;

        /// Request body.
        #[method_id(httpBody)]
        #[unsafe(method_family = none)]
        pub unsafe fn httpBody(&self) -> Retained<NSData>;

        /// Realm.
        #[method_id(realm)]
        #[unsafe(method_family = none)]
        pub unsafe fn realm(&self) -> Retained<NSString>;

        /// Extension data from extension configuration provided by MDM stored as a property-list.
        #[method_id(extensionData)]
        #[unsafe(method_family = none)]
        pub unsafe fn extensionData(&self) -> Retained<NSDictionary>;

        /// Identification of the calling application.
        #[method_id(callerBundleIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn callerBundleIdentifier(&self) -> Retained<NSString>;

        /// Authorization options.
        #[method_id(authorizationOptions)]
        #[unsafe(method_family = none)]
        pub unsafe fn authorizationOptions(&self) -> Retained<NSDictionary>;

        /// Indicates whether the calling application is managed.
        #[method(isCallerManaged)]
        pub unsafe fn isCallerManaged(&self) -> bool;

        /// Team identifier of the calling application.
        #[method_id(callerTeamIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn callerTeamIdentifier(&self) -> Retained<NSString>;

        /// Localized display name of the calling application.
        #[method_id(localizedCallerDisplayName)]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedCallerDisplayName(&self) -> Retained<NSString>;

        /// Audit token of the calling application.
        #[method_id(callerAuditToken)]
        #[unsafe(method_family = none)]
        pub unsafe fn callerAuditToken(&self) -> Retained<NSData>;

        /// Indicates whether the authorization user interface is enabled.
        ///
        /// If user interface is not enabled, then the authorization will fail with
        ///
        /// See: ASAuthorizationErrorNotInteractive if it attempts to display the authorization user interface via
        ///
        /// See: presentAuthorizationViewControllerWithCompletion.
        #[method(isUserInterfaceEnabled)]
        pub unsafe fn isUserInterfaceEnabled(&self) -> bool;

        #[cfg(feature = "ASAuthorizationProviderExtensionLoginManager")]
        /// The login manager to interface with the Platform SSO configuration.
        #[method_id(loginManager)]
        #[unsafe(method_family = none)]
        pub unsafe fn loginManager(
            &self,
        ) -> Option<Retained<ASAuthorizationProviderExtensionLoginManager>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl ASAuthorizationProviderExtensionAuthorizationRequest {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
