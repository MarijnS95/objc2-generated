//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontrollerdelegate?language=objc)
    pub unsafe trait ASAuthorizationControllerDelegate:
        NSObjectProtocol + MainThreadOnly
    {
        #[cfg(feature = "ASAuthorization")]
        #[optional]
        #[method(authorizationController:didCompleteWithAuthorization:)]
        unsafe fn authorizationController_didCompleteWithAuthorization(
            &self,
            controller: &ASAuthorizationController,
            authorization: &ASAuthorization,
        );

        #[optional]
        #[method(authorizationController:didCompleteWithError:)]
        unsafe fn authorizationController_didCompleteWithError(
            &self,
            controller: &ASAuthorizationController,
            error: &NSError,
        );

        #[cfg(feature = "ASAuthorizationCustomMethod")]
        #[optional]
        #[method(authorizationController:didCompleteWithCustomMethod:)]
        unsafe fn authorizationController_didCompleteWithCustomMethod(
            &self,
            controller: &ASAuthorizationController,
            method: &ASAuthorizationCustomMethod,
        );
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontrollerpresentationcontextproviding?language=objc)
    pub unsafe trait ASAuthorizationControllerPresentationContextProviding:
        NSObjectProtocol + MainThreadOnly
    {
        #[cfg(feature = "ASFoundation")]
        #[cfg(target_os = "macos")]
        /// Return a view anchor that is most appropriate for athorization UI to be presented over.  This view will be used as a hint if a credential provider requires user interaction.
        #[method_id(@__retain_semantics Other presentationAnchorForAuthorizationController:)]
        unsafe fn presentationAnchorForAuthorizationController(
            &self,
            controller: &ASAuthorizationController,
        ) -> Retained<ASPresentationAnchor>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontrollerrequestoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASAuthorizationControllerRequestOptions(pub NSUInteger);
bitflags::bitflags! {
    impl ASAuthorizationControllerRequestOptions: NSUInteger {
/// Tell the authorization controller that it should prefer credentials that are immediately available on the local device.
        #[doc(alias = "ASAuthorizationControllerRequestOptionPreferImmediatelyAvailableCredentials")]
        const PreferImmediatelyAvailableCredentials = 1<<0;
    }
}

unsafe impl Encode for ASAuthorizationControllerRequestOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ASAuthorizationControllerRequestOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAuthorizationController;
);

unsafe impl NSObjectProtocol for ASAuthorizationController {}

extern_methods!(
    unsafe impl ASAuthorizationController {
        #[cfg(feature = "ASAuthorizationRequest")]
        /// Authorization requests that are being serviced by this controller
        #[method_id(@__retain_semantics Other authorizationRequests)]
        pub unsafe fn authorizationRequests(&self) -> Retained<NSArray<ASAuthorizationRequest>>;

        /// This delegate will be invoked upon completion of the authorization indicating success or failure.
        /// Delegate is required to receive the results of authorization.
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<ProtocolObject<dyn ASAuthorizationControllerDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn ASAuthorizationControllerDelegate>>,
        );

        /// This delegate will be invoked upon needing a presentation context to display authorization UI.
        #[method_id(@__retain_semantics Other presentationContextProvider)]
        pub unsafe fn presentationContextProvider(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<
            Retained<ProtocolObject<dyn ASAuthorizationControllerPresentationContextProviding>>,
        >;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`presentationContextProvider`][Self::presentationContextProvider].
        #[method(setPresentationContextProvider:)]
        pub unsafe fn setPresentationContextProvider(
            &self,
            presentation_context_provider: Option<
                &ProtocolObject<dyn ASAuthorizationControllerPresentationContextProviding>,
            >,
        );

        #[cfg(feature = "ASAuthorizationCustomMethod")]
        /// A list of custom authorization methods that may be displayed in the authorization UI.
        ///
        /// If the user selects one of these methods, instead of attempting to secure an authorization for the requests, the
        /// controller will call authorizationController:didCompleteWithCustomMethod: with the selected method, allowing
        /// the client to perform the requested authorization.
        #[method_id(@__retain_semantics Other customAuthorizationMethods)]
        pub unsafe fn customAuthorizationMethods(
            &self,
        ) -> Retained<NSArray<ASAuthorizationCustomMethod>>;

        #[cfg(feature = "ASAuthorizationCustomMethod")]
        /// Setter for [`customAuthorizationMethods`][Self::customAuthorizationMethods].
        #[method(setCustomAuthorizationMethods:)]
        pub unsafe fn setCustomAuthorizationMethods(
            &self,
            custom_authorization_methods: &NSArray<ASAuthorizationCustomMethod>,
        );

        #[cfg(feature = "ASAuthorizationRequest")]
        /// Initialize the controller with authorization requests.
        ///
        ///
        /// Parameter `authorizationRequests`: At least one request should be provided. Requests of same type maybe honored in first in first out order
        #[method_id(@__retain_semantics Init initWithAuthorizationRequests:)]
        pub unsafe fn initWithAuthorizationRequests(
            this: Allocated<Self>,
            authorization_requests: &NSArray<ASAuthorizationRequest>,
        ) -> Retained<Self>;

        /// Initiate the authorization flows. Upon completion, the delegate will be called with either success or failure.
        /// Certain authorization flows may require a presentation context. The
        /// `presentationContextProvider`will be called
        /// to provide it.
        ///
        /// The instance will remain retained until the flow is either completed or canceled, and the delegate callback is made.
        #[method(performRequests)]
        pub unsafe fn performRequests(&self);

        /// Initiate the authorization flows for requests that support AutoFill presentation. UI will be shown when
        /// focusing a text field with the appropriate text content type. Upon completion, the delegate will be called with either success
        /// or failure.
        ///
        /// The instance will remain retained until the flow is either completed or canceled, and the delegate callback is made.
        #[method(performAutoFillAssistedRequests)]
        pub unsafe fn performAutoFillAssistedRequests(&self);

        /// Initiate the authorization flows. Upon completion, the delegate will be called with either success or failure.
        /// Certain authorization flows may require a presentation context. The
        /// `presentationContextProvider`will be called
        /// to provide it.
        ///
        /// Calling this method with no options is the same as calling
        /// `performRequests.`The instance will remain retained until
        /// the flow is either completed or canceled, and the delegate callback is made.
        #[method(performRequestsWithOptions:)]
        pub unsafe fn performRequestsWithOptions(
            &self,
            options: ASAuthorizationControllerRequestOptions,
        );

        /// Cancel the running authorization flows, if there are any. If a flow is canceled, the delegate callback will
        /// be made indicating the cancel.
        #[method(cancel)]
        pub unsafe fn cancel(&self);

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);
