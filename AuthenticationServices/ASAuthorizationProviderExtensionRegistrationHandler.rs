//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum ASAuthorizationProviderExtensionAuthenticationMethod {
        #[doc(alias = "ASAuthorizationProviderExtensionAuthenticationMethodPassword")]
        Password = 1,
        #[doc(alias = "ASAuthorizationProviderExtensionAuthenticationMethodUserSecureEnclaveKey")]
        UserSecureEnclaveKey = 2,
        #[doc(alias = "ASAuthorizationProviderExtensionAuthenticationMethodSmartCard")]
        SmartCard = 3,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum ASAuthorizationProviderExtensionRequestOptions {
        #[doc(alias = "ASAuthorizationProviderExtensionRequestOptionsNone")]
        None = 0,
        #[doc(alias = "ASAuthorizationProviderExtensionRequestOptionsUserInteractionEnabled")]
        UserInteractionEnabled = 1 << 0,
        #[doc(alias = "ASAuthorizationProviderExtensionRequestOptionsRegistrationRepair")]
        RegistrationRepair = 1 << 1,
        #[doc(
            alias = "ASAuthorizationProviderExtensionRequestOptionsRegistrationSharedDeviceKeys"
        )]
        RegistrationSharedDeviceKeys = 1 << 2,
        #[doc(
            alias = "ASAuthorizationProviderExtensionRequestOptionsRegistrationDeviceKeyMigration"
        )]
        RegistrationDeviceKeyMigration = 1 << 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum ASAuthorizationProviderExtensionRegistrationResult {
        #[doc(alias = "ASAuthorizationProviderExtensionRegistrationResultSuccess")]
        Success = 0,
        #[doc(alias = "ASAuthorizationProviderExtensionRegistrationResultFailed")]
        Failed = 1,
        #[doc(alias = "ASAuthorizationProviderExtensionRegistrationResultUserInterfaceRequired")]
        UserInterfaceRequired = 2,
        #[doc(alias = "ASAuthorizationProviderExtensionRegistrationResultFailedNoRetry")]
        FailedNoRetry = 3,
    }
);

ns_options!(
    #[underlying(NSInteger)]
    pub enum ASAuthorizationProviderExtensionSupportedGrantTypes {
        #[doc(alias = "ASAuthorizationProviderExtensionSupportedGrantTypesNone")]
        None = 0,
        #[doc(alias = "ASAuthorizationProviderExtensionSupportedGrantTypesPassword")]
        Password = 1 << 0,
        #[doc(alias = "ASAuthorizationProviderExtensionSupportedGrantTypesJWTBearer")]
        JWTBearer = 1 << 1,
        #[doc(alias = "ASAuthorizationProviderExtensionSupportedGrantTypesSAML1_1")]
        SAML1_1 = 1 << 2,
        #[doc(alias = "ASAuthorizationProviderExtensionSupportedGrantTypesSAML2_0")]
        SAML2_0 = 1 << 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum ASAuthorizationProviderExtensionPlatformSSOProtocolVersion {
        ASAuthorizationProviderExtensionPlatformSSOProtocolVersion1_0 = 0,
        ASAuthorizationProviderExtensionPlatformSSOProtocolVersion2_0 = 1,
    }
);

extern_protocol!(
    pub unsafe trait ASAuthorizationProviderExtensionRegistrationHandler:
        NSObjectProtocol
    {
        #[cfg(feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager")]
        #[method(beginDeviceRegistrationUsingLoginManager:options:completion:)]
        unsafe fn beginDeviceRegistrationUsingLoginManager_options_completion(
            &self,
            login_manager: &ASAuthorizationProviderExtensionLoginManager,
            options: ASAuthorizationProviderExtensionRequestOptions,
            completion: &Block<dyn Fn(ASAuthorizationProviderExtensionRegistrationResult)>,
        );

        #[cfg(all(
            feature = "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager",
            feature = "Foundation_NSString"
        ))]
        #[method(beginUserRegistrationUsingLoginManager:userName:authenticationMethod:options:completion:)]
        unsafe fn beginUserRegistrationUsingLoginManager_userName_authenticationMethod_options_completion(
            &self,
            login_manager: &ASAuthorizationProviderExtensionLoginManager,
            user_name: Option<&NSString>,
            authentication_method: ASAuthorizationProviderExtensionAuthenticationMethod,
            options: ASAuthorizationProviderExtensionRequestOptions,
            completion: &Block<dyn Fn(ASAuthorizationProviderExtensionRegistrationResult)>,
        );

        #[optional]
        #[method(registrationDidComplete)]
        unsafe fn registrationDidComplete(&self);

        #[optional]
        #[method(registrationDidCancel)]
        unsafe fn registrationDidCancel(&self);

        #[optional]
        #[method(supportedGrantTypes)]
        unsafe fn supportedGrantTypes(&self)
            -> ASAuthorizationProviderExtensionSupportedGrantTypes;

        #[optional]
        #[method(protocolVersion)]
        unsafe fn protocolVersion(
            &self,
        ) -> ASAuthorizationProviderExtensionPlatformSSOProtocolVersion;
    }

    unsafe impl ProtocolType for dyn ASAuthorizationProviderExtensionRegistrationHandler {}
);
