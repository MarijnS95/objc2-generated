//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkstatisticscollection?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HKStatisticsCollection;
);

unsafe impl Send for HKStatisticsCollection {}

unsafe impl Sync for HKStatisticsCollection {}

unsafe impl NSObjectProtocol for HKStatisticsCollection {}

extern_methods!(
    unsafe impl HKStatisticsCollection {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "HKStatistics")]
        /// Returns the statistics object that this date is inside of
        ///
        /// If there are no samples for the given date, an HKStatistics instance with nil quantities will be returned.
        #[method_id(@__method_family Other statisticsForDate:)]
        pub unsafe fn statisticsForDate(&self, date: &NSDate) -> Option<Retained<HKStatistics>>;

        #[cfg(all(feature = "HKStatistics", feature = "block2"))]
        /// Enumerates all statistics objects from startDate to endDate.
        ///
        /// Statistics objects will be enumerated in chronological order. If there are no samples for an interval
        /// between the start and end date, then the HKStatistics object for that interval will have nil quantities.
        #[method(enumerateStatisticsFromDate:toDate:withBlock:)]
        pub unsafe fn enumerateStatisticsFromDate_toDate_withBlock(
            &self,
            start_date: &NSDate,
            end_date: &NSDate,
            block: &block2::Block<dyn Fn(NonNull<HKStatistics>, NonNull<Bool>)>,
        );

        #[cfg(feature = "HKStatistics")]
        /// Returns a copy of the populated statistics objects.
        ///
        /// The statistics objects are ordered chronologically.
        #[method_id(@__method_family Other statistics)]
        pub unsafe fn statistics(&self) -> Retained<NSArray<HKStatistics>>;

        #[cfg(feature = "HKSource")]
        /// Returns all HKSources found in the contained HKStatistics objects.
        ///
        /// Sources will be empty unless HKStatisticsOptionSeparateBySource is specified in the
        /// HKStatisticsCollectionQuery options.
        #[method_id(@__method_family Other sources)]
        pub unsafe fn sources(&self) -> Retained<NSSet<HKSource>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HKStatisticsCollection {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkstatisticscollectionquery?language=objc)
    #[unsafe(super(HKQuery, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HKQuery")]
    pub struct HKStatisticsCollectionQuery;
);

#[cfg(feature = "HKQuery")]
unsafe impl Send for HKStatisticsCollectionQuery {}

#[cfg(feature = "HKQuery")]
unsafe impl Sync for HKStatisticsCollectionQuery {}

#[cfg(feature = "HKQuery")]
unsafe impl NSObjectProtocol for HKStatisticsCollectionQuery {}

extern_methods!(
    #[cfg(feature = "HKQuery")]
    unsafe impl HKStatisticsCollectionQuery {
        #[method_id(@__method_family Other anchorDate)]
        pub unsafe fn anchorDate(&self) -> Retained<NSDate>;

        #[cfg(feature = "HKStatistics")]
        #[method(options)]
        pub unsafe fn options(&self) -> HKStatisticsOptions;

        #[method_id(@__method_family Other intervalComponents)]
        pub unsafe fn intervalComponents(&self) -> Retained<NSDateComponents>;

        #[cfg(feature = "block2")]
        #[method(initialResultsHandler)]
        pub unsafe fn initialResultsHandler(
            &self,
        ) -> *mut block2::Block<
            dyn Fn(NonNull<HKStatisticsCollectionQuery>, *mut HKStatisticsCollection, *mut NSError),
        >;

        #[cfg(feature = "block2")]
        /// Setter for [`initialResultsHandler`][Self::initialResultsHandler].
        #[method(setInitialResultsHandler:)]
        pub unsafe fn setInitialResultsHandler(
            &self,
            initial_results_handler: Option<
                &block2::Block<
                    dyn Fn(
                        NonNull<HKStatisticsCollectionQuery>,
                        *mut HKStatisticsCollection,
                        *mut NSError,
                    ),
                >,
            >,
        );

        #[cfg(all(feature = "HKStatistics", feature = "block2"))]
        #[method(statisticsUpdateHandler)]
        pub unsafe fn statisticsUpdateHandler(
            &self,
        ) -> *mut block2::Block<
            dyn Fn(
                NonNull<HKStatisticsCollectionQuery>,
                *mut HKStatistics,
                *mut HKStatisticsCollection,
                *mut NSError,
            ),
        >;

        #[cfg(all(feature = "HKStatistics", feature = "block2"))]
        /// Setter for [`statisticsUpdateHandler`][Self::statisticsUpdateHandler].
        #[method(setStatisticsUpdateHandler:)]
        pub unsafe fn setStatisticsUpdateHandler(
            &self,
            statistics_update_handler: Option<
                &block2::Block<
                    dyn Fn(
                        NonNull<HKStatisticsCollectionQuery>,
                        *mut HKStatistics,
                        *mut HKStatisticsCollection,
                        *mut NSError,
                    ),
                >,
            >,
        );

        #[cfg(all(feature = "HKObjectType", feature = "HKStatistics"))]
        #[method_id(@__method_family Init initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:)]
        pub unsafe fn initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents(
            this: Allocated<Self>,
            quantity_type: &HKQuantityType,
            quantity_sample_predicate: Option<&NSPredicate>,
            options: HKStatisticsOptions,
            anchor_date: &NSDate,
            interval_components: &NSDateComponents,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `HKQuery`
    #[cfg(feature = "HKQuery")]
    unsafe impl HKStatisticsCollectionQuery {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "HKQuery")]
    unsafe impl HKStatisticsCollectionQuery {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
