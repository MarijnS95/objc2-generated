//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkunit?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HKUnit;
);

unsafe impl Send for HKUnit {}

unsafe impl Sync for HKUnit {}

unsafe impl NSCoding for HKUnit {}

unsafe impl NSCopying for HKUnit {}

unsafe impl CopyingHelper for HKUnit {
    type Result = Self;
}

unsafe impl NSObjectProtocol for HKUnit {}

unsafe impl NSSecureCoding for HKUnit {}

extern_methods!(
    unsafe impl HKUnit {
        /// Returns a unique string representation for the unit that could be used with +unitFromString:
        #[method_id(unitString)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitString(&self) -> Retained<NSString>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(unitFromString:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitFromString(string: &NSString) -> Retained<Self>;

        #[method_id(unitFromMassFormatterUnit:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitFromMassFormatterUnit(
            mass_formatter_unit: NSMassFormatterUnit,
        ) -> Retained<Self>;

        #[method(massFormatterUnitFromUnit:)]
        pub unsafe fn massFormatterUnitFromUnit(unit: &HKUnit) -> NSMassFormatterUnit;

        #[method_id(unitFromLengthFormatterUnit:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitFromLengthFormatterUnit(
            length_formatter_unit: NSLengthFormatterUnit,
        ) -> Retained<Self>;

        #[method(lengthFormatterUnitFromUnit:)]
        pub unsafe fn lengthFormatterUnitFromUnit(unit: &HKUnit) -> NSLengthFormatterUnit;

        #[method_id(unitFromEnergyFormatterUnit:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitFromEnergyFormatterUnit(
            energy_formatter_unit: NSEnergyFormatterUnit,
        ) -> Retained<Self>;

        #[method(energyFormatterUnitFromUnit:)]
        pub unsafe fn energyFormatterUnitFromUnit(unit: &HKUnit) -> NSEnergyFormatterUnit;

        #[method(isNull)]
        pub unsafe fn isNull(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HKUnit {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkmetricprefix?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct HKMetricPrefix(pub NSInteger);
impl HKMetricPrefix {
    #[doc(alias = "HKMetricPrefixNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "HKMetricPrefixFemto")]
    pub const Femto: Self = Self(13);
    #[doc(alias = "HKMetricPrefixPico")]
    pub const Pico: Self = Self(1);
    #[doc(alias = "HKMetricPrefixNano")]
    pub const Nano: Self = Self(2);
    #[doc(alias = "HKMetricPrefixMicro")]
    pub const Micro: Self = Self(3);
    #[doc(alias = "HKMetricPrefixMilli")]
    pub const Milli: Self = Self(4);
    #[doc(alias = "HKMetricPrefixCenti")]
    pub const Centi: Self = Self(5);
    #[doc(alias = "HKMetricPrefixDeci")]
    pub const Deci: Self = Self(6);
    #[doc(alias = "HKMetricPrefixDeca")]
    pub const Deca: Self = Self(7);
    #[doc(alias = "HKMetricPrefixHecto")]
    pub const Hecto: Self = Self(8);
    #[doc(alias = "HKMetricPrefixKilo")]
    pub const Kilo: Self = Self(9);
    #[doc(alias = "HKMetricPrefixMega")]
    pub const Mega: Self = Self(10);
    #[doc(alias = "HKMetricPrefixGiga")]
    pub const Giga: Self = Self(11);
    #[doc(alias = "HKMetricPrefixTera")]
    pub const Tera: Self = Self(12);
}

unsafe impl Encode for HKMetricPrefix {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for HKMetricPrefix {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// Mass
    unsafe impl HKUnit {
        #[method_id(gramUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn gramUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(gramUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn gramUnit() -> Retained<Self>;

        #[method_id(ounceUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn ounceUnit() -> Retained<Self>;

        #[method_id(poundUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn poundUnit() -> Retained<Self>;

        #[method_id(stoneUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn stoneUnit() -> Retained<Self>;

        #[method_id(moleUnitWithMetricPrefix:molarMass:)]
        #[unsafe(method_family = none)]
        pub unsafe fn moleUnitWithMetricPrefix_molarMass(
            prefix: HKMetricPrefix,
            grams_per_mole: c_double,
        ) -> Retained<Self>;

        #[method_id(moleUnitWithMolarMass:)]
        #[unsafe(method_family = none)]
        pub unsafe fn moleUnitWithMolarMass(grams_per_mole: c_double) -> Retained<Self>;
    }
);

extern_methods!(
    /// Length
    unsafe impl HKUnit {
        #[method_id(meterUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn meterUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(meterUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn meterUnit() -> Retained<Self>;

        #[method_id(inchUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn inchUnit() -> Retained<Self>;

        #[method_id(footUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn footUnit() -> Retained<Self>;

        #[method_id(yardUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn yardUnit() -> Retained<Self>;

        #[method_id(mileUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn mileUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Volume
    unsafe impl HKUnit {
        #[method_id(literUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn literUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(literUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn literUnit() -> Retained<Self>;

        #[method_id(fluidOunceUSUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn fluidOunceUSUnit() -> Retained<Self>;

        #[method_id(fluidOunceImperialUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn fluidOunceImperialUnit() -> Retained<Self>;

        #[method_id(pintUSUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn pintUSUnit() -> Retained<Self>;

        #[method_id(pintImperialUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn pintImperialUnit() -> Retained<Self>;

        #[method_id(cupUSUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn cupUSUnit() -> Retained<Self>;

        #[method_id(cupImperialUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn cupImperialUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Pressure
    unsafe impl HKUnit {
        #[method_id(pascalUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn pascalUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(pascalUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn pascalUnit() -> Retained<Self>;

        #[method_id(millimeterOfMercuryUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn millimeterOfMercuryUnit() -> Retained<Self>;

        #[method_id(centimeterOfWaterUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn centimeterOfWaterUnit() -> Retained<Self>;

        #[method_id(atmosphereUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn atmosphereUnit() -> Retained<Self>;

        #[method_id(decibelAWeightedSoundPressureLevelUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn decibelAWeightedSoundPressureLevelUnit() -> Retained<Self>;

        #[method_id(inchesOfMercuryUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn inchesOfMercuryUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Time
    unsafe impl HKUnit {
        #[method_id(secondUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn secondUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(secondUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn secondUnit() -> Retained<Self>;

        #[method_id(minuteUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn minuteUnit() -> Retained<Self>;

        #[method_id(hourUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn hourUnit() -> Retained<Self>;

        #[method_id(dayUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn dayUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Energy
    unsafe impl HKUnit {
        #[method_id(jouleUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn jouleUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(jouleUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn jouleUnit() -> Retained<Self>;

        #[method_id(kilocalorieUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn kilocalorieUnit() -> Retained<Self>;

        #[method_id(smallCalorieUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn smallCalorieUnit() -> Retained<Self>;

        #[method_id(largeCalorieUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn largeCalorieUnit() -> Retained<Self>;

        #[deprecated = "Use smallCalorieUnit or largeCalorieUnit, depending on which you mean"]
        #[method_id(calorieUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn calorieUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Temperature
    unsafe impl HKUnit {
        #[method_id(degreeCelsiusUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn degreeCelsiusUnit() -> Retained<Self>;

        #[method_id(degreeFahrenheitUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn degreeFahrenheitUnit() -> Retained<Self>;

        #[method_id(kelvinUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn kelvinUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Conductance
    unsafe impl HKUnit {
        #[method_id(siemenUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn siemenUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(siemenUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn siemenUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Pharmacology
    unsafe impl HKUnit {
        #[method_id(internationalUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn internationalUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Scalar
    unsafe impl HKUnit {
        #[method_id(countUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn countUnit() -> Retained<Self>;

        #[method_id(percentUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn percentUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// HearingSensitivity
    unsafe impl HKUnit {
        #[method_id(decibelHearingLevelUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn decibelHearingLevelUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Math
    unsafe impl HKUnit {
        #[method_id(unitMultipliedByUnit:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitMultipliedByUnit(&self, unit: &HKUnit) -> Retained<HKUnit>;

        #[method_id(unitDividedByUnit:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitDividedByUnit(&self, unit: &HKUnit) -> Retained<HKUnit>;

        #[method_id(unitRaisedToPower:)]
        #[unsafe(method_family = none)]
        pub unsafe fn unitRaisedToPower(&self, power: NSInteger) -> Retained<HKUnit>;

        #[method_id(reciprocalUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn reciprocalUnit(&self) -> Retained<HKUnit>;
    }
);

extern_methods!(
    /// Frequency
    unsafe impl HKUnit {
        #[method_id(hertzUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn hertzUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(hertzUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn hertzUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// ElectricPotentialDifference
    unsafe impl HKUnit {
        #[method_id(voltUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn voltUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(voltUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn voltUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Power
    unsafe impl HKUnit {
        #[method_id(wattUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn wattUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(wattUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn wattUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// OpticalPower
    unsafe impl HKUnit {
        #[method_id(diopterUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn diopterUnit() -> Retained<Self>;

        #[method_id(prismDiopterUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn prismDiopterUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Angle
    unsafe impl HKUnit {
        #[method_id(radianAngleUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn radianAngleUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(radianAngleUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn radianAngleUnit() -> Retained<Self>;

        #[method_id(degreeAngleUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn degreeAngleUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// Illuminance
    unsafe impl HKUnit {
        #[method_id(luxUnitWithMetricPrefix:)]
        #[unsafe(method_family = none)]
        pub unsafe fn luxUnitWithMetricPrefix(prefix: HKMetricPrefix) -> Retained<Self>;

        #[method_id(luxUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn luxUnit() -> Retained<Self>;
    }
);

extern_methods!(
    /// UnitLess
    unsafe impl HKUnit {
        #[method_id(appleEffortScoreUnit)]
        #[unsafe(method_family = none)]
        pub unsafe fn appleEffortScoreUnit() -> Retained<Self>;
    }
);
