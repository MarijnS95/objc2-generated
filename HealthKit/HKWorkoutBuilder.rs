//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HKWorkoutBuilder;
);

unsafe impl NSObjectProtocol for HKWorkoutBuilder {}

extern_methods!(
    unsafe impl HKWorkoutBuilder {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "HKDevice")]
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Option<Retained<HKDevice>>;

        #[method_id(@__retain_semantics Other startDate)]
        pub unsafe fn startDate(&self) -> Option<Retained<NSDate>>;

        #[method_id(@__retain_semantics Other endDate)]
        pub unsafe fn endDate(&self) -> Option<Retained<NSDate>>;

        #[cfg(feature = "HKWorkoutConfiguration")]
        #[method_id(@__retain_semantics Other workoutConfiguration)]
        pub unsafe fn workoutConfiguration(&self) -> Retained<HKWorkoutConfiguration>;

        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "HKWorkout")]
        #[method_id(@__retain_semantics Other workoutEvents)]
        pub unsafe fn workoutEvents(&self) -> Retained<NSArray<HKWorkoutEvent>>;

        #[cfg(feature = "HKWorkoutActivity")]
        #[method_id(@__retain_semantics Other workoutActivities)]
        pub unsafe fn workoutActivities(&self) -> Retained<NSArray<HKWorkoutActivity>>;

        #[cfg(all(feature = "HKObjectType", feature = "HKStatistics"))]
        #[method_id(@__retain_semantics Other allStatistics)]
        pub unsafe fn allStatistics(&self) -> Retained<NSDictionary<HKQuantityType, HKStatistics>>;

        #[cfg(all(
            feature = "HKDevice",
            feature = "HKHealthStore",
            feature = "HKWorkoutConfiguration"
        ))]
        #[method_id(@__retain_semantics Init initWithHealthStore:configuration:device:)]
        pub unsafe fn initWithHealthStore_configuration_device(
            this: Allocated<Self>,
            health_store: &HKHealthStore,
            configuration: &HKWorkoutConfiguration,
            device: Option<&HKDevice>,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method(beginCollectionWithStartDate:completion:)]
        pub unsafe fn beginCollectionWithStartDate_completion(
            &self,
            start_date: &NSDate,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(all(feature = "HKObject", feature = "HKSample", feature = "block2"))]
        #[method(addSamples:completion:)]
        pub unsafe fn addSamples_completion(
            &self,
            samples: &NSArray<HKSample>,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(all(feature = "HKWorkout", feature = "block2"))]
        #[method(addWorkoutEvents:completion:)]
        pub unsafe fn addWorkoutEvents_completion(
            &self,
            workout_events: &NSArray<HKWorkoutEvent>,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(addMetadata:completion:)]
        pub unsafe fn addMetadata_completion(
            &self,
            metadata: &NSDictionary<NSString, AnyObject>,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(all(feature = "HKWorkoutActivity", feature = "block2"))]
        #[method(addWorkoutActivity:completion:)]
        pub unsafe fn addWorkoutActivity_completion(
            &self,
            workout_activity: &HKWorkoutActivity,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(updateActivityWithUUID:endDate:completion:)]
        pub unsafe fn updateActivityWithUUID_endDate_completion(
            &self,
            uuid: &NSUUID,
            end_date: &NSDate,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(updateActivityWithUUID:addMedatata:completion:)]
        pub unsafe fn updateActivityWithUUID_addMedatata_completion(
            &self,
            uuid: &NSUUID,
            metadata: &NSDictionary<NSString, AnyObject>,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(endCollectionWithEndDate:completion:)]
        pub unsafe fn endCollectionWithEndDate_completion(
            &self,
            end_date: &NSDate,
            completion: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(all(
            feature = "HKObject",
            feature = "HKSample",
            feature = "HKWorkout",
            feature = "block2"
        ))]
        #[method(finishWorkoutWithCompletion:)]
        pub unsafe fn finishWorkoutWithCompletion(
            &self,
            completion: &block2::Block<dyn Fn(*mut HKWorkout, *mut NSError)>,
        );

        #[method(discardWorkout)]
        pub unsafe fn discardWorkout(&self);

        #[method(elapsedTimeAtDate:)]
        pub unsafe fn elapsedTimeAtDate(&self, date: &NSDate) -> NSTimeInterval;

        #[cfg(all(feature = "HKObjectType", feature = "HKStatistics"))]
        #[method_id(@__retain_semantics Other statisticsForType:)]
        pub unsafe fn statisticsForType(
            &self,
            quantity_type: &HKQuantityType,
        ) -> Option<Retained<HKStatistics>>;

        #[cfg(all(feature = "HKObjectType", feature = "HKSeriesBuilder"))]
        #[method_id(@__retain_semantics Other seriesBuilderForType:)]
        pub unsafe fn seriesBuilderForType(
            &self,
            series_type: &HKSeriesType,
        ) -> Option<Retained<HKSeriesBuilder>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HKWorkoutBuilder {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
