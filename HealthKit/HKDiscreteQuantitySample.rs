//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An HKQuantitySample subclass representing a quantity measurement with
    /// discrete aggregation style.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkdiscretequantitysample?language=objc)
    #[unsafe(super(HKQuantitySample, HKSample, HKObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "HKObject",
        feature = "HKQuantitySample",
        feature = "HKSample"
    ))]
    pub struct HKDiscreteQuantitySample;
);

#[cfg(all(
    feature = "HKObject",
    feature = "HKQuantitySample",
    feature = "HKSample"
))]
unsafe impl Send for HKDiscreteQuantitySample {}

#[cfg(all(
    feature = "HKObject",
    feature = "HKQuantitySample",
    feature = "HKSample"
))]
unsafe impl Sync for HKDiscreteQuantitySample {}

#[cfg(all(
    feature = "HKObject",
    feature = "HKQuantitySample",
    feature = "HKSample"
))]
unsafe impl NSCoding for HKDiscreteQuantitySample {}

#[cfg(all(
    feature = "HKObject",
    feature = "HKQuantitySample",
    feature = "HKSample"
))]
unsafe impl NSObjectProtocol for HKDiscreteQuantitySample {}

#[cfg(all(
    feature = "HKObject",
    feature = "HKQuantitySample",
    feature = "HKSample"
))]
unsafe impl NSSecureCoding for HKDiscreteQuantitySample {}

extern_methods!(
    #[cfg(all(
        feature = "HKObject",
        feature = "HKQuantitySample",
        feature = "HKSample"
    ))]
    unsafe impl HKDiscreteQuantitySample {
        #[cfg(feature = "HKQuantity")]
        /// The minimum of the receiver's quantities
        #[method_id(minimumQuantity)]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumQuantity(&self) -> Retained<HKQuantity>;

        #[cfg(feature = "HKQuantity")]
        /// The average of the receiver's quantities
        #[method_id(averageQuantity)]
        #[unsafe(method_family = none)]
        pub unsafe fn averageQuantity(&self) -> Retained<HKQuantity>;

        #[cfg(feature = "HKQuantity")]
        /// The maximum of the receiver's quantities
        #[method_id(maximumQuantity)]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumQuantity(&self) -> Retained<HKQuantity>;

        #[cfg(feature = "HKQuantity")]
        /// The receiver's quantity with most recent date interval
        #[method_id(mostRecentQuantity)]
        #[unsafe(method_family = none)]
        pub unsafe fn mostRecentQuantity(&self) -> Retained<HKQuantity>;

        /// The date interval for the receiver's most recent quantity
        #[method_id(mostRecentQuantityDateInterval)]
        #[unsafe(method_family = none)]
        pub unsafe fn mostRecentQuantityDateInterval(&self) -> Retained<NSDateInterval>;
    }
);

extern_methods!(
    /// Methods declared on superclass `HKQuantitySample`
    #[cfg(all(
        feature = "HKObject",
        feature = "HKQuantitySample",
        feature = "HKSample"
    ))]
    unsafe impl HKDiscreteQuantitySample {
        #[cfg(all(feature = "HKObjectType", feature = "HKQuantity"))]
        /// Creates a new HKQuantitySample with the given type, quantity, start date, and end date.
        ///
        /// The quantity must have a unit that is compatible with the given quantity type.
        /// See -[HKQuantityType isCompatibleWithUnit:].
        #[method_id(quantitySampleWithType:quantity:startDate:endDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
        ) -> Retained<Self>;

        #[cfg(all(feature = "HKObjectType", feature = "HKQuantity"))]
        /// Creates a new HKQuantitySample with the given type, quantity, start date, end date, and metadata.
        ///
        /// The quantity must have a unit that is compatible with the given quantity type.
        /// See -[HKQuantityType isCompatibleWithUnit:].
        #[method_id(quantitySampleWithType:quantity:startDate:endDate:metadata:)]
        #[unsafe(method_family = none)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate_metadata(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
            metadata: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "HKDevice", feature = "HKObjectType", feature = "HKQuantity"))]
        /// Creates a new HKQuantitySample with the given type, quantity, start date, end date, and metadata.
        ///
        /// Parameter `quantityType`: The type of the sample.
        ///
        /// Parameter `startDate`: The start date of the sample.
        ///
        /// Parameter `endDate`: The end date of the sample.
        ///
        /// Parameter `device`: The HKDevice that generated the sample (optional).
        ///
        /// Parameter `metadata`: Metadata for the sample (optional).
        ///
        /// The quantity must have a unit that is compatible with the given quantity type.
        /// See -[HKQuantityType isCompatibleWithUnit:].
        #[method_id(quantitySampleWithType:quantity:startDate:endDate:device:metadata:)]
        #[unsafe(method_family = none)]
        pub unsafe fn quantitySampleWithType_quantity_startDate_endDate_device_metadata(
            quantity_type: &HKQuantityType,
            quantity: &HKQuantity,
            start_date: &NSDate,
            end_date: &NSDate,
            device: Option<&HKDevice>,
            metadata: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `HKObject`
    #[cfg(all(
        feature = "HKObject",
        feature = "HKQuantitySample",
        feature = "HKSample"
    ))]
    unsafe impl HKDiscreteQuantitySample {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "HKObject",
        feature = "HKQuantitySample",
        feature = "HKSample"
    ))]
    unsafe impl HKDiscreteQuantitySample {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmin?language=objc)
    pub static HKPredicateKeyPathMin: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathaverage?language=objc)
    pub static HKPredicateKeyPathAverage: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmax?language=objc)
    pub static HKPredicateKeyPathMax: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecent?language=objc)
    pub static HKPredicateKeyPathMostRecent: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentstartdate?language=objc)
    pub static HKPredicateKeyPathMostRecentStartDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentenddate?language=objc)
    pub static HKPredicateKeyPathMostRecentEndDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/healthkit/hkpredicatekeypathmostrecentduration?language=objc)
    pub static HKPredicateKeyPathMostRecentDuration: &'static NSString;
}
