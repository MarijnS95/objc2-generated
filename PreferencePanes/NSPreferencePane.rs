//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepaneunselectreply?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSPreferencePaneUnselectReply(pub NSUInteger);
impl NSPreferencePaneUnselectReply {
    #[doc(alias = "NSUnselectCancel")]
    pub const UnselectCancel: Self = Self(0);
    #[doc(alias = "NSUnselectNow")]
    pub const UnselectNow: Self = Self(1);
    #[doc(alias = "NSUnselectLater")]
    pub const UnselectLater: Self = Self(2);
}

unsafe impl Encode for NSPreferencePaneUnselectReply {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSPreferencePaneUnselectReply {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepanedounselectnotification?language=objc)
    pub static NSPreferencePaneDoUnselectNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepanecancelunselectnotification?language=objc)
    pub static NSPreferencePaneCancelUnselectNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepaneswitchtopanenotification?language=objc)
    pub static NSPreferencePaneSwitchToPaneNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferenceprefpaneisavailablenotification?language=objc)
    pub static NSPreferencePrefPaneIsAvailableNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepaneupdatehelpmenunotification?language=objc)
    pub static NSPreferencePaneUpdateHelpMenuNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nsprefpanehelpmenuinfoplistkey?language=objc)
    pub static NSPrefPaneHelpMenuInfoPListKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nsprefpanehelpmenutitlekey?language=objc)
    pub static NSPrefPaneHelpMenuTitleKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nsprefpanehelpmenuanchorkey?language=objc)
    pub static NSPrefPaneHelpMenuAnchorKey: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/preferencepanes/nspreferencepane?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPreferencePane;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for NSPreferencePane {}
);

impl NSPreferencePane {
    extern_methods!(
        #[unsafe(method(initWithBundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBundle(this: Allocated<Self>, bundle: &NSBundle) -> Retained<Self>;

        #[unsafe(method(bundle))]
        #[unsafe(method_family = none)]
        pub unsafe fn bundle(&self) -> Retained<NSBundle>;

        #[cfg(feature = "objc2-app-kit")]
        #[unsafe(method(loadMainView))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadMainView(&self, mtm: MainThreadMarker) -> Retained<NSView>;

        #[unsafe(method(mainViewDidLoad))]
        #[unsafe(method_family = none)]
        pub unsafe fn mainViewDidLoad(&self);

        #[unsafe(method(mainNibName))]
        #[unsafe(method_family = none)]
        pub unsafe fn mainNibName(&self) -> Retained<NSString>;

        #[unsafe(method(assignMainView))]
        #[unsafe(method_family = none)]
        pub unsafe fn assignMainView(&self);

        #[unsafe(method(willSelect))]
        #[unsafe(method_family = none)]
        pub unsafe fn willSelect(&self);

        #[unsafe(method(didSelect))]
        #[unsafe(method_family = none)]
        pub unsafe fn didSelect(&self);

        #[unsafe(method(shouldUnselect))]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldUnselect(&self) -> NSPreferencePaneUnselectReply;

        #[unsafe(method(replyToShouldUnselect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn replyToShouldUnselect(&self, should_unselect: bool);

        #[unsafe(method(willUnselect))]
        #[unsafe(method_family = none)]
        pub unsafe fn willUnselect(&self);

        #[unsafe(method(didUnselect))]
        #[unsafe(method_family = none)]
        pub unsafe fn didUnselect(&self);

        #[cfg(feature = "objc2-app-kit")]
        #[unsafe(method(mainView))]
        #[unsafe(method_family = none)]
        pub unsafe fn mainView(&self, mtm: MainThreadMarker) -> Retained<NSView>;

        #[cfg(feature = "objc2-app-kit")]
        /// Setter for [`mainView`][Self::mainView].
        #[unsafe(method(setMainView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMainView(&self, main_view: &NSView);

        #[cfg(feature = "objc2-app-kit")]
        #[unsafe(method(initialKeyView))]
        #[unsafe(method_family = none)]
        pub unsafe fn initialKeyView(&self, mtm: MainThreadMarker) -> Option<Retained<NSView>>;

        #[cfg(feature = "objc2-app-kit")]
        /// Setter for [`initialKeyView`][Self::initialKeyView].
        #[unsafe(method(setInitialKeyView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInitialKeyView(&self, initial_key_view: Option<&NSView>);

        #[cfg(feature = "objc2-app-kit")]
        #[unsafe(method(firstKeyView))]
        #[unsafe(method_family = none)]
        pub unsafe fn firstKeyView(&self, mtm: MainThreadMarker) -> Option<Retained<NSView>>;

        #[cfg(feature = "objc2-app-kit")]
        /// Setter for [`firstKeyView`][Self::firstKeyView].
        #[unsafe(method(setFirstKeyView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFirstKeyView(&self, first_key_view: Option<&NSView>);

        #[cfg(feature = "objc2-app-kit")]
        #[unsafe(method(lastKeyView))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastKeyView(&self, mtm: MainThreadMarker) -> Option<Retained<NSView>>;

        #[cfg(feature = "objc2-app-kit")]
        /// Setter for [`lastKeyView`][Self::lastKeyView].
        #[unsafe(method(setLastKeyView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLastKeyView(&self, last_key_view: Option<&NSView>);

        #[unsafe(method(autoSaveTextFields))]
        #[unsafe(method_family = none)]
        pub unsafe fn autoSaveTextFields(&self) -> bool;

        #[unsafe(method(isSelected))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSelected(&self) -> bool;

        #[unsafe(method(updateHelpMenuWithArray:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateHelpMenuWithArray(
            &self,
            in_array_of_menu_items: Option<&NSArray<NSDictionary<NSString, NSString>>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl NSPreferencePane {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
