//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;
#[cfg(feature = "objc2-metal")]
use objc2_metal::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// Creates a new VTFrameProcessor for the configured video effect
    ///
    /// The VTFrameProcessor class is the main class to perform frame processing. Users can specify a video effect by passing a VTFrameProcessorConfiguration based object to the startSessionWithConfiguration call. Once a session is created, the processWithParameters method is called in a loop to process the frames one by one. Once all the frames are processed, endSession needs to called to finish all pending processing.  The caller needs to ensure that all buffers passed to the processWithParameters interface are unmodified (inclduing attachments) until the function returns or the callback is received in the case of asynchronous mode.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTFrameProcessor;
);

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for VTFrameProcessor {}

#[cfg(feature = "objc2")]
impl VTFrameProcessor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(
            feature = "VTFrameProcessorConfiguration",
            feature = "objc2-foundation"
        ))]
        /// Starts a new session and configures the processor pipeline.
        ///
        /// Parameter `configuration`: A VTFrameProcessorConfiguration based object corresponding to the video effect that will be applied in the subsequent processWithParameters calls.
        ///
        /// Parameter `error`: Will contain error information if any. You may specify NULL for this parameter if you do not want the error information.
        #[unsafe(method(startSessionWithConfiguration:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn startSessionWithConfiguration_error(
            &self,
            configuration: &ProtocolObject<dyn VTFrameProcessorConfiguration>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2-foundation"))]
        /// Synchronously performs the effect specified in startSessionWithConfigurations.
        ///
        /// Frame level settings and frame level input/output parameters are passed by using the respective VTFrameProcessorParameters for the effect that VTFrameProcessor is configured for.
        ///
        /// Parameter `parameters`: A VTFrameProcessorParameters based object to specify additional frame based parameters to be used during processing. it needs to match the configuration type used during start session.
        ///
        /// Parameter `error`: Will contain error information if any. You may specify NULL for this parameter if you do not want the error information.
        #[unsafe(method(processWithParameters:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn processWithParameters_error(
            &self,
            parameters: &ProtocolObject<dyn VTFrameProcessorParameters>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(
            feature = "VTFrameProcessorParameters",
            feature = "block2",
            feature = "objc2-foundation"
        ))]
        /// Asynchronously performs the effect specified in startSessionWithConfigurations.
        ///
        /// Parameter `parameters`: A VTFrameProcessorParameters based object to specify additional frame based parameters to be used during processing. it needs to match the configuration type used during start session.
        ///
        /// Parameter `completionHandler`: This completion handler will be called when frame processing in competed.  The completion handler will receive the same parameters object that was provided tot he original call, as well as an NSError which will contain an error code if processing was not successful.
        #[unsafe(method(processWithParameters:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn processWithParameters_completionHandler(
            &self,
            parameters: &ProtocolObject<dyn VTFrameProcessorParameters>,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<ProtocolObject<dyn VTFrameProcessorParameters>>, *mut NSError),
            >,
        );

        #[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2-metal"))]
        /// This API provides a Metal API friendly version of processWithParameters.
        ///
        /// This function allows clients to add the effect to an existing Metal command buffer. This can be used by clients that have an existing Metal pipeline and want to add this effect to it. Note: this function will wait until all previously inserted tasks in the command buffer finished before running. Tasks inserted after the processWithCommandBuffer will run after the effect is applied.  Processing does not happen until the commandBuffer is executed.
        ///
        /// Parameter `commandBuffer`: An existing Metal command buffer where the frame processing will be inserted.
        ///
        /// Parameter `parameters`: A VTFrameProcessorParameters based object to specify additional frame based parameters to be used during processing. it needs to match the configuration type used during start session.
        #[unsafe(method(processWithCommandBuffer:parameters:))]
        #[unsafe(method_family = none)]
        pub unsafe fn processWithCommandBuffer_parameters(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
            parameters: &ProtocolObject<dyn VTFrameProcessorParameters>,
        );

        /// Performs all necessary tasks to end the session. After this call completes, no new frames can be processed unless startSessionWithConfigurations is called again.
        #[unsafe(method(endSession))]
        #[unsafe(method_family = none)]
        pub unsafe fn endSession(&self);
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2")]
impl VTFrameProcessor {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
