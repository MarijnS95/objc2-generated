//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// Helper class to wrap video frames that will be sent to the processor, as source frames, reference frames, or output frames.  Instances retain the buffer backing them.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessorframe?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTFrameProcessorFrame;
);

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for VTFrameProcessorFrame {}

#[cfg(feature = "objc2")]
impl VTFrameProcessorFrame {
    extern_methods!(
        #[cfg(all(feature = "objc2-core-media", feature = "objc2-core-video"))]
        /// initialize class with a CVPixelBufferRef and a presentation time. Buffer is retained.  Returns nil if no CVPixelBuffer is provided or CVPixelBuffer is not IOSurface backed.
        ///
        /// Parameter `buffer`: The CVPixelBufferRef that this VTFrameProcessorFrame will wrap.  Must not be nil and must be IOSurface backed.
        ///
        /// Parameter `presentationTimeStamp`: The presentation timestamp of the buffer.
        #[unsafe(method(initWithBuffer:presentationTimeStamp:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBuffer_presentationTimeStamp(
            this: Allocated<Self>,
            buffer: &CVPixelBuffer,
            presentation_time_stamp: CMTime,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-video")]
        /// Returns the CVPixelBufferRef  that was provided when the object was initialized with.
        #[unsafe(method(buffer))]
        #[unsafe(method_family = none)]
        pub unsafe fn buffer(&self) -> Retained<CVPixelBuffer>;

        #[cfg(feature = "objc2-core-media")]
        /// Returns the presentation timestamp that was provided when the object was initialized with
        #[unsafe(method(presentationTimeStamp))]
        #[unsafe(method_family = none)]
        pub unsafe fn presentationTimeStamp(&self) -> CMTime;
    );
}

#[cfg(feature = "objc2")]
extern_class!(
    /// Helper class to wrap optical flow that will be sent to the processor.   Instances retain the buffers backing them.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessoropticalflow?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTFrameProcessorOpticalFlow;
);

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for VTFrameProcessorOpticalFlow {}

#[cfg(feature = "objc2")]
impl VTFrameProcessorOpticalFlow {
    extern_methods!(
        #[cfg(feature = "objc2-core-video")]
        /// initialize class with forward and backward optical flow CVPixelBufferRefs. Instances retain the buffers backing them. Returns nil if a nil CVPixelBuffer is provided or CVPixelBuffers are not IOSurface backed.
        ///
        /// Parameter `forwardFlow`: CVPixelBufferRef that contains forward optical flow. Must not be nil and must be IOSurface backed.
        ///
        /// Parameter `backwardFlow`: CVPixelBufferRef that contains backward optical flow. Must not be nil and must be IOSurface backed.
        #[unsafe(method(initWithForwardFlow:backwardFlow:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithForwardFlow_backwardFlow(
            this: Allocated<Self>,
            forward_flow: &CVPixelBuffer,
            backward_flow: &CVPixelBuffer,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-video")]
        /// Returns the forward optical flow CVPixelBufferRef that was provided when the object was initialized.
        #[unsafe(method(forwardFlow))]
        #[unsafe(method_family = none)]
        pub unsafe fn forwardFlow(&self) -> Retained<CVPixelBuffer>;

        #[cfg(feature = "objc2-core-video")]
        /// Returns the backward optical flow CVPixelBufferRef that was provided when the object was initialized.
        #[unsafe(method(backwardFlow))]
        #[unsafe(method_family = none)]
        pub unsafe fn backwardFlow(&self) -> Retained<CVPixelBuffer>;
    );
}
