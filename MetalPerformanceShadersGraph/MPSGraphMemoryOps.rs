//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal-performance-shaders")]
use objc2_metal_performance_shaders::*;

use crate::*;

extern_class!(
    /// The class that defines the parameters for a variable.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphvariableop?language=objc)
    #[unsafe(super(MPSGraphOperation, MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
    pub struct MPSGraphVariableOp;
);

#[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
unsafe impl NSCopying for MPSGraphVariableOp {}

#[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
unsafe impl CopyingHelper for MPSGraphVariableOp {
    type Result = Self;
}

#[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
unsafe impl NSObjectProtocol for MPSGraphVariableOp {}

extern_methods!(
    #[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
    unsafe impl MPSGraphVariableOp {
        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// The shape of the variable.
        #[method_id(shape)]
        #[unsafe(method_family = none)]
        pub unsafe fn shape(&self) -> Retained<MPSShape>;

        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// The data type of the variable.
        #[method(dataType)]
        pub unsafe fn dataType(&self) -> MPSDataType;
    }
);

extern_methods!(
    /// Methods declared on superclass `MPSGraphOperation`
    #[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
    unsafe impl MPSGraphVariableOp {
        /// Unavailable, please utilize graph methods to create and initialize operations.
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "MPSGraphCore", feature = "MPSGraphOperation"))]
    unsafe impl MPSGraphVariableOp {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// MemoryOps
    #[cfg(all(feature = "MPSGraph", feature = "MPSGraphCore"))]
    unsafe impl MPSGraph {
        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a placeholder operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - shape: The shape of the output tensor. A nil shape will result in an unranked tensor.
        /// - dataType: The dataType of the placeholder tensor.
        /// - name: The name for the placeholder operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(placeholderWithShape:dataType:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn placeholderWithShape_dataType_name(
            &self,
            shape: Option<&MPSShape>,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a placeholder operation and returns the result tensor with the dataType of the placeholder tensor set to 32 bit float.
        ///
        /// - Parameters:
        /// - shape: The shape of the output tensor. A nil shape will result in an unranked tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(placeholderWithShape:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn placeholderWithShape_name(
            &self,
            shape: Option<&MPSShape>,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a constant op with a given shape and data, and returns the result tensor.
        ///
        /// - Parameters:
        /// - data: The data for the tensor. The number of bytes should be sizeof(dataType)numberOfElements.
        /// - shape: The shape of the output tensor. This has to be statically shaped.
        /// - dataType: The dataType of theconstant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithData:shape:dataType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithData_shape_dataType(
            &self,
            data: &NSData,
            shape: &MPSShape,
            data_type: MPSDataType,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a constant operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - scalar: The scalar value to fill the entire tensor values with.
        /// - dataType: The dataType of the constant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithScalar:dataType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithScalar_dataType(
            &self,
            scalar: c_double,
            data_type: MPSDataType,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a constant op with a given shape and returns the result tensor.
        ///
        /// - Parameters:
        /// - scalar: The scalar value to fill the entire tensor values with.
        /// - shape: The shape of the output tensor.
        /// - dataType: The dataType of the constant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithScalar:shape:dataType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithScalar_shape_dataType(
            &self,
            scalar: c_double,
            shape: &MPSShape,
            data_type: MPSDataType,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a complex constant op with the MPSDataTypeComplexFloat32 data type and returns the result tensor.
        ///
        /// - Parameters:
        /// - realPart: The real part of the complex scalar to fill the entire tensor values with.
        /// - imaginaryPart: The imaginary part of the complex scalar to fill the entire tensor values with.
        /// - dataType: The dataType of the constant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithRealPart:imaginaryPart:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithRealPart_imaginaryPart(
            &self,
            real_part: c_double,
            imaginary_part: c_double,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a complex constant operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - realPart: The real part of the complex scalar to fill the entire tensor values with.
        /// - imaginaryPart: The imaginary part of the complex scalar to fill the entire tensor values with.
        /// - dataType: The dataType of the constant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithRealPart:imaginaryPart:dataType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithRealPart_imaginaryPart_dataType(
            &self,
            real_part: c_double,
            imaginary_part: c_double,
            data_type: MPSDataType,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a complex constant op with a given shape and returns the result tensor.
        ///
        /// - Parameters:
        /// - realPart: The real part of the complex scalar to fill the entire tensor values with.
        /// - imaginaryPart: The imaginary part of the complex scalar to fill the entire tensor values with.
        /// - shape: The shape of the output tensor. This has to be statically shaped.
        /// - dataType: The dataType of the constant tensor.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(constantWithRealPart:imaginaryPart:shape:dataType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn constantWithRealPart_imaginaryPart_shape_dataType(
            &self,
            real_part: c_double,
            imaginary_part: c_double,
            shape: &MPSShape,
            data_type: MPSDataType,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a variable operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - data: The data for the tensor. The number of bytes should be sizeof(dataType)numberOfElements.
        /// - shape: The shape of the output tensor. This has to be statically shaped.
        /// - dataType: The dataType of the constant tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(variableWithData:shape:dataType:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn variableWithData_shape_dataType_name(
            &self,
            data: &NSData,
            shape: &MPSShape,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a variable from an input tensor.
        ///
        /// - Parameters:
        /// - tensor: The tensor from which to form the variable.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(variableFromTensorWithTensor:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn variableFromTensorWithTensor_name(
            &self,
            tensor: &MPSGraphTensor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a read op which reads at this point of execution of the graph and returns the result tensor.
        ///
        /// - Parameters:
        /// - variable: The variable resource tensor to read from.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(readVariable:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn readVariable_name(
            &self,
            variable: &MPSGraphTensor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(feature = "MPSGraphOperation", feature = "MPSGraphTensor"))]
        /// Creates an assign operation which writes at this point of execution of the graph.
        ///
        /// - Parameters:
        /// - variable: The variable resource tensor to assign to.
        /// - tensor: The tensor to assign to the variable.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[method_id(assignVariable:withValueOfTensor:name:)]
        #[unsafe(method_family = none)]
        pub unsafe fn assignVariable_withValueOfTensor_name(
            &self,
            variable: &MPSGraphTensor,
            tensor: &MPSGraphTensor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphOperation>;
    }
);
