//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal-performance-shaders")]
use objc2_metal_performance_shaders::*;

use crate::*;

extern_methods!(
    /// MPSGraphQuantizationOps
    #[cfg(all(feature = "MPSGraph", feature = "MPSGraphCore"))]
    unsafe impl MPSGraph {
        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a Quantize operation and returns the result tensor.
        ///
        /// Convert the float `tensor` to an i8 or u8 tensor by applying a scale + bias transform:
        /// result = (tensor / scale) + zeroPoint
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be quantized
        /// - scale: Scale scalar parameter
        /// - zeroPoint: Bias scalar parameter (converted to dataType of resultTensor)
        /// - dataType: Integer data type of the result tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(quantizeTensor:scale:zeroPoint:dataType:name:)]
        pub unsafe fn quantizeTensor_scale_zeroPoint_dataType_name(
            &self,
            tensor: &MPSGraphTensor,
            scale: c_double,
            zero_point: c_double,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates Dequantize operation and returns the result tensor.
        ///
        /// Convert the i8 or u8 `tensor` to a float tensor by applying a scale + bias transform:
        /// result = scale(tensor - zeroPoint)
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized
        /// - scale: Scale scalar parameter
        /// - zeroPoint: Bias scalar parameter (converted to dataType of tensor)
        /// - dataType: Float data type of the result tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:scale:zeroPoint:dataType:name:)]
        pub unsafe fn dequantizeTensor_scale_zeroPoint_dataType_name(
            &self,
            tensor: &MPSGraphTensor,
            scale: c_double,
            zero_point: c_double,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a Quantize operation and returns the result tensor.
        ///
        /// Convert the float `tensor` to an i8 or u8 tensor by applying a scale + bias transform:
        /// result = (tensor / scaleTensor) + zeroPoint
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be quantized
        /// - scaleTensor: Scale 1D Tensor parameter with size == tensor.shape[axis]
        /// - zeroPoint: Bias scalar parameter (converted to dataType of resultTensor)
        /// - dataType: Integer data type of the result tensor.
        /// - axis: Axis on which the scale 1D value is being broadcasted
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(quantizeTensor:scaleTensor:zeroPoint:dataType:axis:name:)]
        pub unsafe fn quantizeTensor_scaleTensor_zeroPoint_dataType_axis_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            zero_point: c_double,
            data_type: MPSDataType,
            axis: NSInteger,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates Dequantize operation and returns the result tensor.
        ///
        /// Convert the i8 or u8 `tensor` to a float tensor by applying a scale + bias transform:
        /// result = scaleTensor(tensor - zeroPoint)
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized
        /// - scaleTensor: Scale scalar or 1D Tensor parameter with size == tensor.shape[axis]
        /// - zeroPoint: Bias scalar parameter (converted to dataType of tensor)
        /// - dataType: Float data type of the result tensor.
        /// - axis: Axis on which the scale 1D value is being broadcasted
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:scaleTensor:zeroPoint:dataType:axis:name:)]
        pub unsafe fn dequantizeTensor_scaleTensor_zeroPoint_dataType_axis_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            zero_point: c_double,
            data_type: MPSDataType,
            axis: NSInteger,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a Quantize operation and returns the result tensor.
        ///
        /// Convert the float `tensor` to an i8 or u8 tensor by applying a scale + bias transform:
        /// result = (tensor / scaleTensor) + zeroPointTensor
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be quantized
        /// - scaleTensor: Scale scalar or 1D Tensor parameter with size == tensor.shape[axis]
        /// - zeroPointTensor: Bias scalar or 1D Tensor parameter with size == tensor.shape[axis]
        /// - dataType: Integer data type of the result tensor.
        /// - axis: Axis on which the scale 1D value is being broadcasted
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(quantizeTensor:scaleTensor:zeroPointTensor:dataType:axis:name:)]
        pub unsafe fn quantizeTensor_scaleTensor_zeroPointTensor_dataType_axis_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            zero_point_tensor: &MPSGraphTensor,
            data_type: MPSDataType,
            axis: NSInteger,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a dequantize operation and returns the result tensor.
        ///
        /// Convert the i8 or u8 `tensor` to a float tensor by applying a scale + bias transform:
        /// result = scaleTensor(tensor - zeroPointTensor)
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized
        /// - scaleTensor: Scale scalar or 1D Tensor parameter with size == tensor.shape[axis]
        /// - zeroPointTensor: Bias scalar or 1D Tensor parameter with size == tensor.shape[axis]
        /// - dataType: Float data type of the result tensor.
        /// - axis: Axis on which the scale 1D value is being broadcasted
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor array of datatype dataType
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:scaleTensor:zeroPointTensor:dataType:axis:name:)]
        pub unsafe fn dequantizeTensor_scaleTensor_zeroPointTensor_dataType_axis_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            zero_point_tensor: &MPSGraphTensor,
            data_type: MPSDataType,
            axis: NSInteger,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a dequantize operation and returns the result tensor.
        ///
        /// Convert the i8, u8, i4 or u4 `tensor` to a float tensor by applying a scale and bias transform:
        /// ```md
        /// result = scaleTensor(tensor - zeroPointTensor).
        /// ```
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized.
        /// - scaleTensor: The scale tensor with groups support.
        /// - zeroPointTensor: The bias tensor with groups support.
        /// - dataType: Float data type of the result tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid ``MPSGraphTensor`` array of datatype `dataType`.
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:scaleTensor:zeroPointTensor:dataType:name:)]
        pub unsafe fn dequantizeTensor_scaleTensor_zeroPointTensor_dataType_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            zero_point_tensor: &MPSGraphTensor,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a dequantize operation and returns the result tensor.
        ///
        /// Converts the i8, u8, i4 or u4 `tensor` to a float tensor by applying a scale and bias transform:
        /// ```md
        /// result = scaleTensor * tensor.
        /// ```
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized.
        /// - scaleTensor: Scale Tensor parameter with groups support.
        /// - dataType: Float data type of the result tensor.
        /// - name: The name for the operation.
        /// - Returns: A valid ``MPSGraphTensor`` array of datatype `dataType`.
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:scaleTensor:dataType:name:)]
        pub unsafe fn dequantizeTensor_scaleTensor_dataType_name(
            &self,
            tensor: &MPSGraphTensor,
            scale_tensor: &MPSGraphTensor,
            data_type: MPSDataType,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a lookup-table based quantization operation and returns the result tensor.
        ///
        /// Converts a u8 or u4 `tensor` to a float tensor by applying a lookup operation:
        /// ```md
        /// result[i1,...,in] = LUTTensor[i1',...,in',tensor[i1,...,in]].
        /// ```
        /// Note: The operation supports LUT groups up to the last 3 dimensions for `tensor`.
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized.
        /// - LUTTensor: The lookup table to use - for u4 the last dimension should have 16 elements, and for u8 256 elements.
        /// - name: The name for the operation.
        /// - Returns: A valid ``MPSGraphTensor`` object.
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:LUTTensor:name:)]
        pub unsafe fn dequantizeTensor_LUTTensor_name(
            &self,
            tensor: &MPSGraphTensor,
            lut_tensor: &MPSGraphTensor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a vector lookup-table based quantization operation and returns the result tensor.
        ///
        /// Converts a u8 or u4 `tensor` to a float tensor by applying a lookup operation, where each
        /// input index defines a vector of values. The operation reads the vector values from the last dimension of the lookup table
        /// tensor and stores them into the dimension defined by `axis` on the result tensor.
        /// ```md
        /// result[i1, ... , i_axis, ..., in] = LUTTensor[i1', ..., in', tensor[i1, ..., in], i_axis]
        /// ```
        /// Note: The operation supports LUT groups up to the last 2 dimensions for `tensor`.
        ///
        /// - Parameters:
        /// - tensor: Input tensor to be dequantized.
        /// - LUTTensor: The lookup table to use - for u4 the second to last dimension should have 16 elements, and for u8 256 elements.
        /// - axis: Axis on which the scale 1D value is being broadcasted.
        /// - name: The name for the operation.
        /// - Returns: A valid ``MPSGraphTensor`` object.
        #[unsafe(method_family(none))]
        #[method_id(dequantizeTensor:LUTTensor:axis:name:)]
        pub unsafe fn dequantizeTensor_LUTTensor_axis_name(
            &self,
            tensor: &MPSGraphTensor,
            lut_tensor: &MPSGraphTensor,
            axis: NSInteger,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;
    }
);
