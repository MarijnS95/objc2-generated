//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphrnnactivation?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSGraphRNNActivation(pub NSUInteger);
impl MPSGraphRNNActivation {
    #[doc(alias = "MPSGraphRNNActivationNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MPSGraphRNNActivationRelu")]
    pub const Relu: Self = Self(1);
    #[doc(alias = "MPSGraphRNNActivationTanh")]
    pub const Tanh: Self = Self(2);
    #[doc(alias = "MPSGraphRNNActivationSigmoid")]
    pub const Sigmoid: Self = Self(3);
    #[doc(alias = "MPSGraphRNNActivationHardSigmoid")]
    pub const HardSigmoid: Self = Self(4);
}

unsafe impl Encode for MPSGraphRNNActivation {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSGraphRNNActivation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphsinglegaternndescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphSingleGateRNNDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSCopying for MPSGraphSingleGateRNNDescriptor {}

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphSingleGateRNNDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSObjectProtocol for MPSGraphSingleGateRNNDescriptor {}

extern_methods!(
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphSingleGateRNNDescriptor {
        #[method(reverse)]
        pub unsafe fn reverse(&self) -> bool;

        #[method(setReverse:)]
        pub unsafe fn setReverse(&self, reverse: bool);

        #[method(bidirectional)]
        pub unsafe fn bidirectional(&self) -> bool;

        #[method(setBidirectional:)]
        pub unsafe fn setBidirectional(&self, bidirectional: bool);

        #[method(training)]
        pub unsafe fn training(&self) -> bool;

        #[method(setTraining:)]
        pub unsafe fn setTraining(&self, training: bool);

        #[method(activation)]
        pub unsafe fn activation(&self) -> MPSGraphRNNActivation;

        #[method(setActivation:)]
        pub unsafe fn setActivation(&self, activation: MPSGraphRNNActivation);

        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor() -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphSingleGateRNNDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphlstmdescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphLSTMDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSCopying for MPSGraphLSTMDescriptor {}

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphLSTMDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSObjectProtocol for MPSGraphLSTMDescriptor {}

extern_methods!(
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphLSTMDescriptor {
        #[method(reverse)]
        pub unsafe fn reverse(&self) -> bool;

        #[method(setReverse:)]
        pub unsafe fn setReverse(&self, reverse: bool);

        #[method(bidirectional)]
        pub unsafe fn bidirectional(&self) -> bool;

        #[method(setBidirectional:)]
        pub unsafe fn setBidirectional(&self, bidirectional: bool);

        #[method(produceCell)]
        pub unsafe fn produceCell(&self) -> bool;

        #[method(setProduceCell:)]
        pub unsafe fn setProduceCell(&self, produce_cell: bool);

        #[method(training)]
        pub unsafe fn training(&self) -> bool;

        #[method(setTraining:)]
        pub unsafe fn setTraining(&self, training: bool);

        #[method(forgetGateLast)]
        pub unsafe fn forgetGateLast(&self) -> bool;

        #[method(setForgetGateLast:)]
        pub unsafe fn setForgetGateLast(&self, forget_gate_last: bool);

        #[method(inputGateActivation)]
        pub unsafe fn inputGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setInputGateActivation:)]
        pub unsafe fn setInputGateActivation(&self, input_gate_activation: MPSGraphRNNActivation);

        #[method(forgetGateActivation)]
        pub unsafe fn forgetGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setForgetGateActivation:)]
        pub unsafe fn setForgetGateActivation(&self, forget_gate_activation: MPSGraphRNNActivation);

        #[method(cellGateActivation)]
        pub unsafe fn cellGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setCellGateActivation:)]
        pub unsafe fn setCellGateActivation(&self, cell_gate_activation: MPSGraphRNNActivation);

        #[method(outputGateActivation)]
        pub unsafe fn outputGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setOutputGateActivation:)]
        pub unsafe fn setOutputGateActivation(&self, output_gate_activation: MPSGraphRNNActivation);

        #[method(activation)]
        pub unsafe fn activation(&self) -> MPSGraphRNNActivation;

        #[method(setActivation:)]
        pub unsafe fn setActivation(&self, activation: MPSGraphRNNActivation);

        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor() -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphLSTMDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphgrudescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphGRUDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSCopying for MPSGraphGRUDescriptor {}

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphGRUDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSObjectProtocol for MPSGraphGRUDescriptor {}

extern_methods!(
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphGRUDescriptor {
        #[method(reverse)]
        pub unsafe fn reverse(&self) -> bool;

        #[method(setReverse:)]
        pub unsafe fn setReverse(&self, reverse: bool);

        #[method(bidirectional)]
        pub unsafe fn bidirectional(&self) -> bool;

        #[method(setBidirectional:)]
        pub unsafe fn setBidirectional(&self, bidirectional: bool);

        #[method(training)]
        pub unsafe fn training(&self) -> bool;

        #[method(setTraining:)]
        pub unsafe fn setTraining(&self, training: bool);

        #[method(resetGateFirst)]
        pub unsafe fn resetGateFirst(&self) -> bool;

        #[method(setResetGateFirst:)]
        pub unsafe fn setResetGateFirst(&self, reset_gate_first: bool);

        #[method(resetAfter)]
        pub unsafe fn resetAfter(&self) -> bool;

        #[method(setResetAfter:)]
        pub unsafe fn setResetAfter(&self, reset_after: bool);

        #[method(flipZ)]
        pub unsafe fn flipZ(&self) -> bool;

        #[method(setFlipZ:)]
        pub unsafe fn setFlipZ(&self, flip_z: bool);

        #[method(updateGateActivation)]
        pub unsafe fn updateGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setUpdateGateActivation:)]
        pub unsafe fn setUpdateGateActivation(&self, update_gate_activation: MPSGraphRNNActivation);

        #[method(resetGateActivation)]
        pub unsafe fn resetGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setResetGateActivation:)]
        pub unsafe fn setResetGateActivation(&self, reset_gate_activation: MPSGraphRNNActivation);

        #[method(outputGateActivation)]
        pub unsafe fn outputGateActivation(&self) -> MPSGraphRNNActivation;

        #[method(setOutputGateActivation:)]
        pub unsafe fn setOutputGateActivation(&self, output_gate_activation: MPSGraphRNNActivation);

        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor() -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphGRUDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// MPSGraphRNNOps
    #[cfg(all(feature = "MPSGraph", feature = "MPSGraphCore"))]
    unsafe impl MPSGraph {
        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNWithSourceTensor:recurrentWeight:inputWeight:bias:initState:mask:descriptor:name:)]
        pub unsafe fn singleGateRNNWithSourceTensor_recurrentWeight_inputWeight_bias_initState_mask_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNWithSourceTensor:recurrentWeight:inputWeight:bias:initState:descriptor:name:)]
        pub unsafe fn singleGateRNNWithSourceTensor_recurrentWeight_inputWeight_bias_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNWithSourceTensor:recurrentWeight:initState:descriptor:name:)]
        pub unsafe fn singleGateRNNWithSourceTensor_recurrentWeight_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:stateGradient:inputWeight:bias:initState:mask:descriptor:name:)]
        pub unsafe fn singleGateRNNGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_stateGradient_inputWeight_bias_initState_mask_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            state_gradient: Option<&MPSGraphTensor>,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:inputWeight:bias:initState:mask:descriptor:name:)]
        pub unsafe fn singleGateRNNGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_inputWeight_bias_initState_mask_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:inputWeight:bias:initState:descriptor:name:)]
        pub unsafe fn singleGateRNNGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_inputWeight_bias_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other singleGateRNNGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:initState:descriptor:name:)]
        pub unsafe fn singleGateRNNGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphSingleGateRNNDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMWithSourceTensor:recurrentWeight:inputWeight:bias:initState:initCell:mask:peephole:descriptor:name:)]
        pub unsafe fn LSTMWithSourceTensor_recurrentWeight_inputWeight_bias_initState_initCell_mask_peephole_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            peephole: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMWithSourceTensor:recurrentWeight:inputWeight:bias:initState:initCell:descriptor:name:)]
        pub unsafe fn LSTMWithSourceTensor_recurrentWeight_inputWeight_bias_initState_initCell_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMWithSourceTensor:recurrentWeight:initState:initCell:descriptor:name:)]
        pub unsafe fn LSTMWithSourceTensor_recurrentWeight_initState_initCell_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:cellOutputFwd:stateGradient:cellGradient:inputWeight:bias:initState:initCell:mask:peephole:descriptor:name:)]
        pub unsafe fn LSTMGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_cellOutputFwd_stateGradient_cellGradient_inputWeight_bias_initState_initCell_mask_peephole_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            cell_output_fwd: &MPSGraphTensor,
            state_gradient: Option<&MPSGraphTensor>,
            cell_gradient: Option<&MPSGraphTensor>,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            peephole: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:cellOutputFwd:inputWeight:bias:initState:initCell:mask:descriptor:name:)]
        pub unsafe fn LSTMGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_cellOutputFwd_inputWeight_bias_initState_initCell_mask_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            cell_output_fwd: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:cellOutputFwd:inputWeight:bias:initState:initCell:descriptor:name:)]
        pub unsafe fn LSTMGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_cellOutputFwd_inputWeight_bias_initState_initCell_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            cell_output_fwd: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            init_cell: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other LSTMGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:cellOutputFwd:descriptor:name:)]
        pub unsafe fn LSTMGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_cellOutputFwd_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            cell_output_fwd: &MPSGraphTensor,
            descriptor: &MPSGraphLSTMDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUWithSourceTensor:recurrentWeight:inputWeight:bias:initState:mask:secondaryBias:descriptor:name:)]
        pub unsafe fn GRUWithSourceTensor_recurrentWeight_inputWeight_bias_initState_mask_secondaryBias_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            secondary_bias: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUWithSourceTensor:recurrentWeight:inputWeight:bias:initState:descriptor:name:)]
        pub unsafe fn GRUWithSourceTensor_recurrentWeight_inputWeight_bias_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUWithSourceTensor:recurrentWeight:inputWeight:bias:descriptor:name:)]
        pub unsafe fn GRUWithSourceTensor_recurrentWeight_inputWeight_bias_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:outputFwd:stateGradient:inputWeight:bias:initState:mask:secondaryBias:descriptor:name:)]
        pub unsafe fn GRUGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_outputFwd_stateGradient_inputWeight_bias_initState_mask_secondaryBias_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            output_fwd: &MPSGraphTensor,
            state_gradient: Option<&MPSGraphTensor>,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            mask: Option<&MPSGraphTensor>,
            secondary_bias: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:outputFwd:inputWeight:bias:initState:descriptor:name:)]
        pub unsafe fn GRUGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_outputFwd_inputWeight_bias_initState_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            output_fwd: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            init_state: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        #[method_id(@__retain_semantics Other GRUGradientsWithSourceTensor:recurrentWeight:sourceGradient:zState:outputFwd:inputWeight:bias:descriptor:name:)]
        pub unsafe fn GRUGradientsWithSourceTensor_recurrentWeight_sourceGradient_zState_outputFwd_inputWeight_bias_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            recurrent_weight: &MPSGraphTensor,
            source_gradient: &MPSGraphTensor,
            z_state: &MPSGraphTensor,
            output_fwd: &MPSGraphTensor,
            input_weight: Option<&MPSGraphTensor>,
            bias: Option<&MPSGraphTensor>,
            descriptor: &MPSGraphGRUDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;
    }
);
