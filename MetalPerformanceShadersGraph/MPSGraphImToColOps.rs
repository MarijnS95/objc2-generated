//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal-performance-shaders")]
use objc2_metal_performance_shaders::*;

use crate::*;

extern_class!(
    /// The class that defines the parameters for an image to column or column to image operation.
    ///
    /// Use this descriptor with the following ``MPSGraph`` methods:
    /// - ``MPSGraph/imToColWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/colToImWithSourceTensor:outputShape:descriptor:name:``
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphimtocolopdescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphImToColOpDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSCopying for MPSGraphImToColOpDescriptor {}

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphImToColOpDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
unsafe impl NSObjectProtocol for MPSGraphImToColOpDescriptor {}

extern_methods!(
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphImToColOpDescriptor {
        /// The property that defines the kernel size in width dimension.
        #[unsafe(method(kernelWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// Setter for [`kernelWidth`][Self::kernelWidth].
        #[unsafe(method(setKernelWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKernelWidth(&self, kernel_width: NSUInteger);

        /// The property that defines the kernel size  in height dimension.
        #[unsafe(method(kernelHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Setter for [`kernelHeight`][Self::kernelHeight].
        #[unsafe(method(setKernelHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKernelHeight(&self, kernel_height: NSUInteger);

        /// The property that defines the stride in width dimension.
        #[unsafe(method(strideInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInX(&self) -> NSUInteger;

        /// Setter for [`strideInX`][Self::strideInX].
        #[unsafe(method(setStrideInX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrideInX(&self, stride_in_x: NSUInteger);

        /// The property that defines the stride in height dimension.
        #[unsafe(method(strideInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInY(&self) -> NSUInteger;

        /// Setter for [`strideInY`][Self::strideInY].
        #[unsafe(method(setStrideInY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrideInY(&self, stride_in_y: NSUInteger);

        /// The property that defines the dilation in width dimension.
        #[unsafe(method(dilationRateInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInX(&self) -> NSUInteger;

        /// Setter for [`dilationRateInX`][Self::dilationRateInX].
        #[unsafe(method(setDilationRateInX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDilationRateInX(&self, dilation_rate_in_x: NSUInteger);

        /// The property that defines the dilation in height dimension.
        #[unsafe(method(dilationRateInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInY(&self) -> NSUInteger;

        /// Setter for [`dilationRateInY`][Self::dilationRateInY].
        #[unsafe(method(setDilationRateInY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDilationRateInY(&self, dilation_rate_in_y: NSUInteger);

        /// The property that defines the padding in width dimension on the left side.
        #[unsafe(method(paddingLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingLeft(&self) -> NSUInteger;

        /// Setter for [`paddingLeft`][Self::paddingLeft].
        #[unsafe(method(setPaddingLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingLeft(&self, padding_left: NSUInteger);

        /// The property that defines the padding in width dimension on the right side.
        #[unsafe(method(paddingRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingRight(&self) -> NSUInteger;

        /// Setter for [`paddingRight`][Self::paddingRight].
        #[unsafe(method(setPaddingRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingRight(&self, padding_right: NSUInteger);

        /// The property that defines the padding in height dimension at the top.
        #[unsafe(method(paddingTop))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingTop(&self) -> NSUInteger;

        /// Setter for [`paddingTop`][Self::paddingTop].
        #[unsafe(method(setPaddingTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingTop(&self, padding_top: NSUInteger);

        /// The property that defines the padding in height dimension at the bottom.
        #[unsafe(method(paddingBottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingBottom(&self) -> NSUInteger;

        /// Setter for [`paddingBottom`][Self::paddingBottom].
        #[unsafe(method(setPaddingBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingBottom(&self, padding_bottom: NSUInteger);

        /// The property that defines the layout of source or output  tensor.
        /// e.g. `batch x channels x width x height` for `NCHW` layout
        #[unsafe(method(dataLayout))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataLayout(&self) -> MPSGraphTensorNamedDataLayout;

        /// Setter for [`dataLayout`][Self::dataLayout].
        #[unsafe(method(setDataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDataLayout(&self, data_layout: MPSGraphTensorNamedDataLayout);

        /// Creates an image to column descriptor with given values for parameters.
        /// - Parameters:
        /// - kernelWidth: See `kernelWidth` property.
        /// - kernelHeight: See `kernelHeight` property.
        /// - strideInX: See `strideInX` property.
        /// - strideInY: See `strideInY` property.
        /// - dilationRateInX: See `dilationRateInX` property.
        /// - dilationRateInY: See `dilationRateInY` property.
        /// - paddingLeft: See `paddingLeft` property.
        /// - paddingRight: See `paddingRight` property.
        /// - paddingTop: See `paddingTop` property.
        /// - paddingBottom: See `paddingBottom` property.
        /// - dataLayout: See `dataLayout` property.
        /// - Returns: A valid MPSGraphImToColOpDescriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelWidth:kernelHeight:strideInX:strideInY:dilationRateInX:dilationRateInY:paddingLeft:paddingRight:paddingTop:paddingBottom:dataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelWidth_kernelHeight_strideInX_strideInY_dilationRateInX_dilationRateInY_paddingLeft_paddingRight_paddingTop_paddingBottom_dataLayout(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_x: NSUInteger,
            stride_in_y: NSUInteger,
            dilation_rate_in_x: NSUInteger,
            dilation_rate_in_y: NSUInteger,
            padding_left: NSUInteger,
            padding_right: NSUInteger,
            padding_top: NSUInteger,
            padding_bottom: NSUInteger,
            data_layout: MPSGraphTensorNamedDataLayout,
        ) -> Option<Retained<Self>>;

        /// Creates column to image descriptor with given values for parameters.
        /// - Parameters:
        /// - kernelWidth: See `kernelWidth` property.
        /// - kernelHeight: See `kernelHeight` property.
        /// - strideInX: See `strideInX` property.
        /// - strideInY: See `strideInY` property.
        /// - dilationRateInX: See `dilationRateInX` property.
        /// - dilationRateInY: See `dilationRateInY` property.
        /// - dataLayout: See `dataLayout` property.
        /// - Returns: A valid MPSGraphImToColOpDescriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelWidth:kernelHeight:strideInX:strideInY:dilationRateInX:dilationRateInY:dataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelWidth_kernelHeight_strideInX_strideInY_dilationRateInX_dilationRateInY_dataLayout(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_x: NSUInteger,
            stride_in_y: NSUInteger,
            dilation_rate_in_x: NSUInteger,
            dilation_rate_in_y: NSUInteger,
            data_layout: MPSGraphTensorNamedDataLayout,
        ) -> Option<Retained<Self>>;

        /// Sets the descriptor's padding to the given values.
        /// - Parameters:
        /// - paddingLeft: See `paddingLeft` property.
        /// - paddingRight: See `paddingRight` property.
        /// - paddingTop: See `paddingTop` property.
        /// - paddingBottom: See `paddingBottom` property.
        #[unsafe(method(setExplicitPaddingWithPaddingLeft:paddingRight:paddingTop:paddingBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExplicitPaddingWithPaddingLeft_paddingRight_paddingTop_paddingBottom(
            &self,
            padding_left: NSUInteger,
            padding_right: NSUInteger,
            padding_top: NSUInteger,
            padding_bottom: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MPSGraphCore")]
    unsafe impl MPSGraphImToColOpDescriptor {
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// MPSGraphImToColOps
    #[cfg(all(feature = "MPSGraph", feature = "MPSGraphCore"))]
    unsafe impl MPSGraph {
        #[cfg(feature = "MPSGraphTensor")]
        /// Creates an imToCol operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: The tensor containing the source data. Must be of rank 4. The layout is defined by `descriptor.dataLayout`.
        /// - descriptor: The descriptor object that specifies the parameters of the operation.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(imToColWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn imToColWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphImToColOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a column to image operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: The tensor containing the source data. Must be of rank 4. The layout is defined by `descriptor.dataLayout`.
        /// - outputShape: The result tensor shape.
        /// - descriptor: The descriptor object that specifies the parameters of the operation.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(colToImWithSourceTensor:outputShape:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colToImWithSourceTensor_outputShape_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            output_shape: &MPSShape,
            descriptor: &MPSGraphImToColOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;
    }
);
