//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsindexpath?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSIndexPath;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSIndexPath {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSIndexPath {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSIndexPath {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSIndexPath {}

#[cfg(feature = "NSObject")]
unsafe impl NSSecureCoding for NSIndexPath {}

extern_methods!(
    unsafe impl NSIndexPath {
        #[method_id(@__method_family Other indexPathWithIndex:)]
        pub unsafe fn indexPathWithIndex(index: NSUInteger) -> Retained<Self>;

        #[method_id(@__method_family Other indexPathWithIndexes:length:)]
        pub unsafe fn indexPathWithIndexes_length(
            indexes: *mut NSUInteger,
            length: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithIndexes:length:)]
        pub unsafe fn initWithIndexes_length(
            this: Allocated<Self>,
            indexes: *mut NSUInteger,
            length: NSUInteger,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithIndex:)]
        pub unsafe fn initWithIndex(this: Allocated<Self>, index: NSUInteger) -> Retained<Self>;

        #[method_id(@__method_family Other indexPathByAddingIndex:)]
        pub unsafe fn indexPathByAddingIndex(&self, index: NSUInteger) -> Retained<NSIndexPath>;

        #[method_id(@__method_family Other indexPathByRemovingLastIndex)]
        pub unsafe fn indexPathByRemovingLastIndex(&self) -> Retained<NSIndexPath>;

        #[method(indexAtPosition:)]
        pub unsafe fn indexAtPosition(&self, position: NSUInteger) -> NSUInteger;

        #[method(length)]
        pub unsafe fn length(&self) -> NSUInteger;

        #[cfg(feature = "NSRange")]
        /// Copies the indexes stored in this index path from the positions specified by positionRange into indexes.
        ///
        /// Parameter `indexes`: Buffer of at least as many NSUIntegers as specified by the length of positionRange. On return, this memory will hold the index path's indexes.
        ///
        /// Parameter `positionRange`: A range of valid positions within this index path.  If the location plus the length of positionRange is greater than the length of this index path, this method raises an NSRangeException.
        ///
        /// It is the developerâ€™s responsibility to allocate the memory for the C array.
        #[method(getIndexes:range:)]
        pub unsafe fn getIndexes_range(
            &self,
            indexes: NonNull<NSUInteger>,
            position_range: NSRange,
        );

        #[cfg(feature = "NSObjCRuntime")]
        #[method(compare:)]
        pub unsafe fn compare(&self, other_object: &NSIndexPath) -> NSComparisonResult;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSIndexPath {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSDeprecated
    unsafe impl NSIndexPath {
        /// This method is unsafe because it could potentially cause buffer overruns. You should use -getIndexes:range: instead.
        #[deprecated]
        #[method(getIndexes:)]
        pub unsafe fn getIndexes(&self, indexes: NonNull<NSUInteger>);
    }
);
