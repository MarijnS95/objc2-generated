//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandle?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileHandle;
);

unsafe impl Send for NSFileHandle {}

unsafe impl Sync for NSFileHandle {}

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSFileHandle {}

unsafe impl NSObjectProtocol for NSFileHandle {}

#[cfg(feature = "NSObject")]
unsafe impl NSSecureCoding for NSFileHandle {}

extern_methods!(
    unsafe impl NSFileHandle {
        #[cfg(feature = "NSData")]
        #[method(availableData)]
        #[unsafe(method_family = none)]
        pub unsafe fn availableData(&self) -> Retained<NSData>;

        #[method(initWithFileDescriptor:closeOnDealloc:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileDescriptor_closeOnDealloc(
            this: Allocated<Self>,
            fd: c_int,
            closeopt: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(all(feature = "NSData", feature = "NSError"))]
        #[method(readDataToEndOfFileAndReturnError:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn readDataToEndOfFileAndReturnError(
            &self,
        ) -> Result<Retained<NSData>, Retained<NSError>>;

        #[cfg(all(feature = "NSData", feature = "NSError"))]
        #[method(readDataUpToLength:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn readDataUpToLength_error(
            &self,
            length: NSUInteger,
        ) -> Result<Retained<NSData>, Retained<NSError>>;

        #[cfg(all(feature = "NSData", feature = "NSError"))]
        #[method(writeData:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn writeData_error(&self, data: &NSData) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(getOffset:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn getOffset_error(
            &self,
            offset_in_file: NonNull<c_ulonglong>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(seekToEndReturningOffset:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToEndReturningOffset_error(
            &self,
            offset_in_file: *mut c_ulonglong,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(seekToOffset:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToOffset_error(
            &self,
            offset: c_ulonglong,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(truncateAtOffset:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn truncateAtOffset_error(
            &self,
            offset: c_ulonglong,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(synchronizeAndReturnError:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn synchronizeAndReturnError(&self) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "NSError")]
        #[method(closeAndReturnError:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn closeAndReturnError(&self) -> Result<(), Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSFileHandle {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSFileHandleCreation
    unsafe impl NSFileHandle {
        #[method(fileHandleWithStandardInput)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleWithStandardInput() -> Retained<NSFileHandle>;

        #[method(fileHandleWithStandardOutput)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleWithStandardOutput() -> Retained<NSFileHandle>;

        #[method(fileHandleWithStandardError)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleWithStandardError() -> Retained<NSFileHandle>;

        #[method(fileHandleWithNullDevice)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleWithNullDevice() -> Retained<NSFileHandle>;

        #[cfg(feature = "NSString")]
        #[method(fileHandleForReadingAtPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForReadingAtPath(path: &NSString) -> Option<Retained<Self>>;

        #[cfg(feature = "NSString")]
        #[method(fileHandleForWritingAtPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForWritingAtPath(path: &NSString) -> Option<Retained<Self>>;

        #[cfg(feature = "NSString")]
        #[method(fileHandleForUpdatingAtPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForUpdatingAtPath(path: &NSString) -> Option<Retained<Self>>;

        #[cfg(all(feature = "NSError", feature = "NSURL"))]
        #[method(fileHandleForReadingFromURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForReadingFromURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "NSError", feature = "NSURL"))]
        #[method(fileHandleForWritingToURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForWritingToURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "NSError", feature = "NSURL"))]
        #[method(fileHandleForUpdatingURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForUpdatingURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandleoperationexception?language=objc)
    #[cfg(all(feature = "NSObjCRuntime", feature = "NSString"))]
    pub static NSFileHandleOperationException: &'static NSExceptionName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandlereadcompletionnotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSFileHandleReadCompletionNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandlereadtoendoffilecompletionnotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSFileHandleReadToEndOfFileCompletionNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandleconnectionacceptednotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSFileHandleConnectionAcceptedNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandledataavailablenotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSFileHandleDataAvailableNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandlenotificationdataitem?language=objc)
    #[cfg(feature = "NSString")]
    pub static NSFileHandleNotificationDataItem: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandlenotificationfilehandleitem?language=objc)
    #[cfg(feature = "NSString")]
    pub static NSFileHandleNotificationFileHandleItem: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsfilehandlenotificationmonitormodes?language=objc)
    #[cfg(feature = "NSString")]
    pub static NSFileHandleNotificationMonitorModes: &'static NSString;
}

extern_methods!(
    /// NSFileHandleAsynchronousAccess
    unsafe impl NSFileHandle {
        #[cfg(all(feature = "NSArray", feature = "NSObjCRuntime", feature = "NSString"))]
        #[method(readInBackgroundAndNotifyForModes:)]
        #[unsafe(method_family = none)]
        pub unsafe fn readInBackgroundAndNotifyForModes(
            &self,
            modes: Option<&NSArray<NSRunLoopMode>>,
        );

        #[method(readInBackgroundAndNotify)]
        #[unsafe(method_family = none)]
        pub unsafe fn readInBackgroundAndNotify(&self);

        #[cfg(all(feature = "NSArray", feature = "NSObjCRuntime", feature = "NSString"))]
        #[method(readToEndOfFileInBackgroundAndNotifyForModes:)]
        #[unsafe(method_family = none)]
        pub unsafe fn readToEndOfFileInBackgroundAndNotifyForModes(
            &self,
            modes: Option<&NSArray<NSRunLoopMode>>,
        );

        #[method(readToEndOfFileInBackgroundAndNotify)]
        #[unsafe(method_family = none)]
        pub unsafe fn readToEndOfFileInBackgroundAndNotify(&self);

        #[cfg(all(feature = "NSArray", feature = "NSObjCRuntime", feature = "NSString"))]
        #[method(acceptConnectionInBackgroundAndNotifyForModes:)]
        #[unsafe(method_family = none)]
        pub unsafe fn acceptConnectionInBackgroundAndNotifyForModes(
            &self,
            modes: Option<&NSArray<NSRunLoopMode>>,
        );

        #[method(acceptConnectionInBackgroundAndNotify)]
        #[unsafe(method_family = none)]
        pub unsafe fn acceptConnectionInBackgroundAndNotify(&self);

        #[cfg(all(feature = "NSArray", feature = "NSObjCRuntime", feature = "NSString"))]
        #[method(waitForDataInBackgroundAndNotifyForModes:)]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForDataInBackgroundAndNotifyForModes(
            &self,
            modes: Option<&NSArray<NSRunLoopMode>>,
        );

        #[method(waitForDataInBackgroundAndNotify)]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForDataInBackgroundAndNotify(&self);

        #[cfg(feature = "block2")]
        #[method(readabilityHandler)]
        #[unsafe(method_family = none)]
        pub unsafe fn readabilityHandler(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<NSFileHandle>)>;

        #[cfg(feature = "block2")]
        /// Setter for [`readabilityHandler`][Self::readabilityHandler].
        #[method(setReadabilityHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setReadabilityHandler(
            &self,
            readability_handler: Option<&block2::Block<dyn Fn(NonNull<NSFileHandle>)>>,
        );

        #[cfg(feature = "block2")]
        #[method(writeabilityHandler)]
        #[unsafe(method_family = none)]
        pub unsafe fn writeabilityHandler(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<NSFileHandle>)>;

        #[cfg(feature = "block2")]
        /// Setter for [`writeabilityHandler`][Self::writeabilityHandler].
        #[method(setWriteabilityHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setWriteabilityHandler(
            &self,
            writeability_handler: Option<&block2::Block<dyn Fn(NonNull<NSFileHandle>)>>,
        );
    }
);

extern_methods!(
    /// NSFileHandlePlatformSpecific
    unsafe impl NSFileHandle {
        #[method(initWithFileDescriptor:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileDescriptor(this: Allocated<Self>, fd: c_int) -> Retained<Self>;

        #[method(fileDescriptor)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileDescriptor(&self) -> c_int;
    }
);

extern_methods!(
    unsafe impl NSFileHandle {
        #[cfg(feature = "NSData")]
        #[deprecated]
        #[method(readDataToEndOfFile)]
        #[unsafe(method_family = none)]
        pub unsafe fn readDataToEndOfFile(&self) -> Retained<NSData>;

        #[cfg(feature = "NSData")]
        #[deprecated]
        #[method(readDataOfLength:)]
        #[unsafe(method_family = none)]
        pub unsafe fn readDataOfLength(&self, length: NSUInteger) -> Retained<NSData>;

        #[cfg(feature = "NSData")]
        #[deprecated]
        #[method(writeData:)]
        #[unsafe(method_family = none)]
        pub unsafe fn writeData(&self, data: &NSData);

        #[deprecated]
        #[method(offsetInFile)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetInFile(&self) -> c_ulonglong;

        #[deprecated]
        #[method(seekToEndOfFile)]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToEndOfFile(&self) -> c_ulonglong;

        #[deprecated]
        #[method(seekToFileOffset:)]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToFileOffset(&self, offset: c_ulonglong);

        #[deprecated]
        #[method(truncateFileAtOffset:)]
        #[unsafe(method_family = none)]
        pub unsafe fn truncateFileAtOffset(&self, offset: c_ulonglong);

        #[deprecated]
        #[method(synchronizeFile)]
        #[unsafe(method_family = none)]
        pub unsafe fn synchronizeFile(&self);

        #[deprecated]
        #[method(closeFile)]
        #[unsafe(method_family = none)]
        pub unsafe fn closeFile(&self);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nspipe?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPipe;
);

unsafe impl Send for NSPipe {}

unsafe impl Sync for NSPipe {}

unsafe impl NSObjectProtocol for NSPipe {}

extern_methods!(
    unsafe impl NSPipe {
        #[method(fileHandleForReading)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForReading(&self) -> Retained<NSFileHandle>;

        #[method(fileHandleForWriting)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForWriting(&self) -> Retained<NSFileHandle>;

        #[method(pipe)]
        #[unsafe(method_family = none)]
        pub unsafe fn pipe() -> Retained<NSPipe>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSPipe {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
