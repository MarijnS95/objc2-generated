//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nstestcomparisonoperation?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSTestComparisonOperation(pub NSUInteger);
impl NSTestComparisonOperation {
    #[doc(alias = "NSEqualToComparison")]
    pub const EqualToComparison: Self = Self(0);
    #[doc(alias = "NSLessThanOrEqualToComparison")]
    pub const LessThanOrEqualToComparison: Self = Self(1);
    #[doc(alias = "NSLessThanComparison")]
    pub const LessThanComparison: Self = Self(2);
    #[doc(alias = "NSGreaterThanOrEqualToComparison")]
    pub const GreaterThanOrEqualToComparison: Self = Self(3);
    #[doc(alias = "NSGreaterThanComparison")]
    pub const GreaterThanComparison: Self = Self(4);
    #[doc(alias = "NSBeginsWithComparison")]
    pub const BeginsWithComparison: Self = Self(5);
    #[doc(alias = "NSEndsWithComparison")]
    pub const EndsWithComparison: Self = Self(6);
    #[doc(alias = "NSContainsComparison")]
    pub const ContainsComparison: Self = Self(7);
}

unsafe impl Encode for NSTestComparisonOperation {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSTestComparisonOperation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsscriptwhosetest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSScriptWhoseTest;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSScriptWhoseTest {}

unsafe impl NSObjectProtocol for NSScriptWhoseTest {}

extern_methods!(
    unsafe impl NSScriptWhoseTest {
        #[method(isTrue)]
        pub unsafe fn isTrue(&self) -> bool;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            in_coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSScriptWhoseTest {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nslogicaltest?language=objc)
    #[unsafe(super(NSScriptWhoseTest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSLogicalTest;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSLogicalTest {}

unsafe impl NSObjectProtocol for NSLogicalTest {}

extern_methods!(
    unsafe impl NSLogicalTest {
        #[cfg(feature = "NSArray")]
        #[unsafe(method_family(init))]
        #[method_id(initAndTestWithTests:)]
        pub unsafe fn initAndTestWithTests(
            this: Allocated<Self>,
            sub_tests: &NSArray<NSSpecifierTest>,
        ) -> Retained<Self>;

        #[cfg(feature = "NSArray")]
        #[unsafe(method_family(init))]
        #[method_id(initOrTestWithTests:)]
        pub unsafe fn initOrTestWithTests(
            this: Allocated<Self>,
            sub_tests: &NSArray<NSSpecifierTest>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initNotTestWithTest:)]
        pub unsafe fn initNotTestWithTest(
            this: Allocated<Self>,
            sub_test: &NSScriptWhoseTest,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSScriptWhoseTest`
    unsafe impl NSLogicalTest {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            in_coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSLogicalTest {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsspecifiertest?language=objc)
    #[unsafe(super(NSScriptWhoseTest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSpecifierTest;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSSpecifierTest {}

unsafe impl NSObjectProtocol for NSSpecifierTest {}

extern_methods!(
    unsafe impl NSSpecifierTest {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            in_coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSScriptObjectSpecifiers")]
        #[unsafe(method_family(init))]
        #[method_id(initWithObjectSpecifier:comparisonOperator:testObject:)]
        pub unsafe fn initWithObjectSpecifier_comparisonOperator_testObject(
            this: Allocated<Self>,
            obj1: Option<&NSScriptObjectSpecifier>,
            comp_op: NSTestComparisonOperation,
            obj2: Option<&AnyObject>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSSpecifierTest {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_category!(
    /// Category "NSComparisonMethods" on [`NSObject`].
    #[doc(alias = "NSComparisonMethods")]
    pub unsafe trait NSObjectNSComparisonMethods {
        #[method(isEqualTo:)]
        unsafe fn isEqualTo(&self, object: Option<&AnyObject>) -> bool;

        #[method(isLessThanOrEqualTo:)]
        unsafe fn isLessThanOrEqualTo(&self, object: Option<&AnyObject>) -> bool;

        #[method(isLessThan:)]
        unsafe fn isLessThan(&self, object: Option<&AnyObject>) -> bool;

        #[method(isGreaterThanOrEqualTo:)]
        unsafe fn isGreaterThanOrEqualTo(&self, object: Option<&AnyObject>) -> bool;

        #[method(isGreaterThan:)]
        unsafe fn isGreaterThan(&self, object: Option<&AnyObject>) -> bool;

        #[method(isNotEqualTo:)]
        unsafe fn isNotEqualTo(&self, object: Option<&AnyObject>) -> bool;

        #[method(doesContain:)]
        unsafe fn doesContain(&self, object: &AnyObject) -> bool;

        #[cfg(feature = "NSString")]
        #[method(isLike:)]
        unsafe fn isLike(&self, object: &NSString) -> bool;

        #[cfg(feature = "NSString")]
        #[method(isCaseInsensitiveLike:)]
        unsafe fn isCaseInsensitiveLike(&self, object: &NSString) -> bool;
    }

    unsafe impl NSObjectNSComparisonMethods for NSObject {}
);

extern_category!(
    /// Category "NSScriptingComparisonMethods" on [`NSObject`].
    #[doc(alias = "NSScriptingComparisonMethods")]
    pub unsafe trait NSObjectNSScriptingComparisonMethods {
        #[method(scriptingIsEqualTo:)]
        unsafe fn scriptingIsEqualTo(&self, object: &AnyObject) -> bool;

        #[method(scriptingIsLessThanOrEqualTo:)]
        unsafe fn scriptingIsLessThanOrEqualTo(&self, object: &AnyObject) -> bool;

        #[method(scriptingIsLessThan:)]
        unsafe fn scriptingIsLessThan(&self, object: &AnyObject) -> bool;

        #[method(scriptingIsGreaterThanOrEqualTo:)]
        unsafe fn scriptingIsGreaterThanOrEqualTo(&self, object: &AnyObject) -> bool;

        #[method(scriptingIsGreaterThan:)]
        unsafe fn scriptingIsGreaterThan(&self, object: &AnyObject) -> bool;

        #[method(scriptingBeginsWith:)]
        unsafe fn scriptingBeginsWith(&self, object: &AnyObject) -> bool;

        #[method(scriptingEndsWith:)]
        unsafe fn scriptingEndsWith(&self, object: &AnyObject) -> bool;

        #[method(scriptingContains:)]
        unsafe fn scriptingContains(&self, object: &AnyObject) -> bool;
    }

    unsafe impl NSObjectNSScriptingComparisonMethods for NSObject {}
);
