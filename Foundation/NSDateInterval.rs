//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsdateinterval?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDateInterval;
);

unsafe impl Send for NSDateInterval {}

unsafe impl Sync for NSDateInterval {}

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSDateInterval {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSDateInterval {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSDateInterval {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSDateInterval {}

#[cfg(feature = "NSObject")]
unsafe impl NSSecureCoding for NSDateInterval {}

extern_methods!(
    unsafe impl NSDateInterval {
        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(none))]
        #[method_id(startDate)]
        pub unsafe fn startDate(&self) -> Retained<NSDate>;

        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(none))]
        #[method_id(endDate)]
        pub unsafe fn endDate(&self) -> Retained<NSDate>;

        #[cfg(feature = "NSDate")]
        #[method(duration)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;

        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(init))]
        #[method_id(initWithStartDate:duration:)]
        pub unsafe fn initWithStartDate_duration(
            this: Allocated<Self>,
            start_date: &NSDate,
            duration: NSTimeInterval,
        ) -> Retained<Self>;

        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(init))]
        #[method_id(initWithStartDate:endDate:)]
        pub unsafe fn initWithStartDate_endDate(
            this: Allocated<Self>,
            start_date: &NSDate,
            end_date: &NSDate,
        ) -> Retained<Self>;

        #[cfg(feature = "NSObjCRuntime")]
        #[method(compare:)]
        pub unsafe fn compare(&self, date_interval: &NSDateInterval) -> NSComparisonResult;

        #[method(isEqualToDateInterval:)]
        pub unsafe fn isEqualToDateInterval(&self, date_interval: &NSDateInterval) -> bool;

        #[method(intersectsDateInterval:)]
        pub unsafe fn intersectsDateInterval(&self, date_interval: &NSDateInterval) -> bool;

        #[unsafe(method_family(none))]
        #[method_id(intersectionWithDateInterval:)]
        pub unsafe fn intersectionWithDateInterval(
            &self,
            date_interval: &NSDateInterval,
        ) -> Option<Retained<NSDateInterval>>;

        #[cfg(feature = "NSDate")]
        #[method(containsDate:)]
        pub unsafe fn containsDate(&self, date: &NSDate) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSDateInterval {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
