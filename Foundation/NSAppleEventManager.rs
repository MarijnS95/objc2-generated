//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/__nsappleeventmanagersuspension?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct __NSAppleEventManagerSuspension {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __NSAppleEventManagerSuspension {
    const ENCODING_REF: Encoding =
        Encoding::Pointer(&Encoding::Struct("__NSAppleEventManagerSuspension", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventmanagersuspensionid?language=objc)
pub type NSAppleEventManagerSuspensionID = *const __NSAppleEventManagerSuspension;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventtimeoutdefault?language=objc)
    pub static NSAppleEventTimeOutDefault: c_double;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventtimeoutnone?language=objc)
    pub static NSAppleEventTimeOutNone: c_double;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventmanagerwillprocessfirsteventnotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSAppleEventManagerWillProcessFirstEventNotification: &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventmanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAppleEventManager;
);

unsafe impl NSObjectProtocol for NSAppleEventManager {}

extern_methods!(
    unsafe impl NSAppleEventManager {
        #[unsafe(method_family(none))]
        #[method_id(sharedAppleEventManager)]
        pub unsafe fn sharedAppleEventManager() -> Retained<NSAppleEventManager>;

        #[cfg(feature = "NSAppleEventDescriptor")]
        #[unsafe(method_family(none))]
        #[method_id(currentAppleEvent)]
        pub unsafe fn currentAppleEvent(&self) -> Option<Retained<NSAppleEventDescriptor>>;

        #[cfg(feature = "NSAppleEventDescriptor")]
        #[unsafe(method_family(none))]
        #[method_id(currentReplyAppleEvent)]
        pub unsafe fn currentReplyAppleEvent(&self) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method(suspendCurrentAppleEvent)]
        pub unsafe fn suspendCurrentAppleEvent(&self) -> NSAppleEventManagerSuspensionID;

        #[cfg(feature = "NSAppleEventDescriptor")]
        #[unsafe(method_family(none))]
        #[method_id(appleEventForSuspensionID:)]
        pub unsafe fn appleEventForSuspensionID(
            &self,
            suspension_id: NSAppleEventManagerSuspensionID,
        ) -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSAppleEventDescriptor")]
        #[unsafe(method_family(none))]
        #[method_id(replyAppleEventForSuspensionID:)]
        pub unsafe fn replyAppleEventForSuspensionID(
            &self,
            suspension_id: NSAppleEventManagerSuspensionID,
        ) -> Retained<NSAppleEventDescriptor>;

        #[method(setCurrentAppleEventAndReplyEventWithSuspensionID:)]
        pub unsafe fn setCurrentAppleEventAndReplyEventWithSuspensionID(
            &self,
            suspension_id: NSAppleEventManagerSuspensionID,
        );

        #[method(resumeWithSuspensionID:)]
        pub unsafe fn resumeWithSuspensionID(&self, suspension_id: NSAppleEventManagerSuspensionID);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSAppleEventManager {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
