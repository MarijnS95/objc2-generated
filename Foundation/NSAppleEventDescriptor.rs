//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventsendoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSAppleEventSendOptions(pub NSUInteger);
bitflags::bitflags! {
    impl NSAppleEventSendOptions: NSUInteger {
        #[doc(alias = "NSAppleEventSendNoReply")]
        const NoReply = 1;
        #[doc(alias = "NSAppleEventSendQueueReply")]
        const QueueReply = 2;
        #[doc(alias = "NSAppleEventSendWaitForReply")]
        const WaitForReply = 3;
        #[doc(alias = "NSAppleEventSendNeverInteract")]
        const NeverInteract = 16;
        #[doc(alias = "NSAppleEventSendCanInteract")]
        const CanInteract = 32;
        #[doc(alias = "NSAppleEventSendAlwaysInteract")]
        const AlwaysInteract = 48;
        #[doc(alias = "NSAppleEventSendCanSwitchLayer")]
        const CanSwitchLayer = 64;
        #[doc(alias = "NSAppleEventSendDontRecord")]
        const DontRecord = 4096;
        #[doc(alias = "NSAppleEventSendDontExecute")]
        const DontExecute = 8192;
        #[doc(alias = "NSAppleEventSendDontAnnotate")]
        const DontAnnotate = 65536;
        #[doc(alias = "NSAppleEventSendDefaultOptions")]
        const DefaultOptions = 35;
    }
}

unsafe impl Encode for NSAppleEventSendOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSAppleEventSendOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsappleeventdescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAppleEventDescriptor;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSAppleEventDescriptor {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSAppleEventDescriptor {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSAppleEventDescriptor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSAppleEventDescriptor {}

#[cfg(feature = "NSObject")]
unsafe impl NSSecureCoding for NSAppleEventDescriptor {}

extern_methods!(
    unsafe impl NSAppleEventDescriptor {
        #[unsafe(method_family(none))]
        #[method_id(nullDescriptor)]
        pub unsafe fn nullDescriptor() -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(descriptorWithBoolean:)]
        pub unsafe fn descriptorWithBoolean(boolean: Boolean) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(descriptorWithEnumCode:)]
        pub unsafe fn descriptorWithEnumCode(
            enumerator: OSType,
        ) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(descriptorWithInt32:)]
        pub unsafe fn descriptorWithInt32(signed_int: i32) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(descriptorWithDouble:)]
        pub unsafe fn descriptorWithDouble(
            double_value: c_double,
        ) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(descriptorWithTypeCode:)]
        pub unsafe fn descriptorWithTypeCode(type_code: OSType)
            -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSString")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithString:)]
        pub unsafe fn descriptorWithString(string: &NSString) -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithDate:)]
        pub unsafe fn descriptorWithDate(date: &NSDate) -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSURL")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithFileURL:)]
        pub unsafe fn descriptorWithFileURL(file_url: &NSURL) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(listDescriptor)]
        pub unsafe fn listDescriptor() -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(recordDescriptor)]
        pub unsafe fn recordDescriptor() -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(none))]
        #[method_id(currentProcessDescriptor)]
        pub unsafe fn currentProcessDescriptor() -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "libc")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithProcessIdentifier:)]
        pub unsafe fn descriptorWithProcessIdentifier(
            process_identifier: libc::pid_t,
        ) -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSString")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithBundleIdentifier:)]
        pub unsafe fn descriptorWithBundleIdentifier(
            bundle_identifier: &NSString,
        ) -> Retained<NSAppleEventDescriptor>;

        #[cfg(feature = "NSURL")]
        #[unsafe(method_family(none))]
        #[method_id(descriptorWithApplicationURL:)]
        pub unsafe fn descriptorWithApplicationURL(
            application_url: &NSURL,
        ) -> Retained<NSAppleEventDescriptor>;

        #[unsafe(method_family(init))]
        #[method_id(initListDescriptor)]
        pub unsafe fn initListDescriptor(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initRecordDescriptor)]
        pub unsafe fn initRecordDescriptor(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSData")]
        #[unsafe(method_family(none))]
        #[method_id(data)]
        pub unsafe fn data(&self) -> Retained<NSData>;

        #[method(booleanValue)]
        pub unsafe fn booleanValue(&self) -> Boolean;

        #[method(enumCodeValue)]
        pub unsafe fn enumCodeValue(&self) -> OSType;

        #[method(int32Value)]
        pub unsafe fn int32Value(&self) -> i32;

        #[method(doubleValue)]
        pub unsafe fn doubleValue(&self) -> c_double;

        #[method(typeCodeValue)]
        pub unsafe fn typeCodeValue(&self) -> OSType;

        #[cfg(feature = "NSString")]
        #[unsafe(method_family(none))]
        #[method_id(stringValue)]
        pub unsafe fn stringValue(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "NSDate")]
        #[unsafe(method_family(none))]
        #[method_id(dateValue)]
        pub unsafe fn dateValue(&self) -> Option<Retained<NSDate>>;

        #[cfg(feature = "NSURL")]
        #[unsafe(method_family(none))]
        #[method_id(fileURLValue)]
        pub unsafe fn fileURLValue(&self) -> Option<Retained<NSURL>>;

        #[method(isRecordDescriptor)]
        pub unsafe fn isRecordDescriptor(&self) -> bool;

        #[method(numberOfItems)]
        pub unsafe fn numberOfItems(&self) -> NSInteger;

        #[method(insertDescriptor:atIndex:)]
        pub unsafe fn insertDescriptor_atIndex(
            &self,
            descriptor: &NSAppleEventDescriptor,
            index: NSInteger,
        );

        #[unsafe(method_family(none))]
        #[method_id(descriptorAtIndex:)]
        pub unsafe fn descriptorAtIndex(
            &self,
            index: NSInteger,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method(removeDescriptorAtIndex:)]
        pub unsafe fn removeDescriptorAtIndex(&self, index: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSAppleEventDescriptor {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
