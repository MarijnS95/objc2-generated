//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsdateintervalformatterstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSDateIntervalFormatterStyle(pub NSUInteger);
impl NSDateIntervalFormatterStyle {
    #[doc(alias = "NSDateIntervalFormatterNoStyle")]
    pub const NoStyle: Self = Self(0);
    #[doc(alias = "NSDateIntervalFormatterShortStyle")]
    pub const ShortStyle: Self = Self(1);
    #[doc(alias = "NSDateIntervalFormatterMediumStyle")]
    pub const MediumStyle: Self = Self(2);
    #[doc(alias = "NSDateIntervalFormatterLongStyle")]
    pub const LongStyle: Self = Self(3);
    #[doc(alias = "NSDateIntervalFormatterFullStyle")]
    pub const FullStyle: Self = Self(4);
}

unsafe impl Encode for NSDateIntervalFormatterStyle {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSDateIntervalFormatterStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsdateintervalformatter?language=objc)
    #[unsafe(super(NSFormatter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSFormatter")]
    pub struct NSDateIntervalFormatter;
);

#[cfg(feature = "NSFormatter")]
unsafe impl Send for NSDateIntervalFormatter {}

#[cfg(feature = "NSFormatter")]
unsafe impl Sync for NSDateIntervalFormatter {}

#[cfg(all(feature = "NSFormatter", feature = "NSObject"))]
unsafe impl NSCoding for NSDateIntervalFormatter {}

#[cfg(all(feature = "NSFormatter", feature = "NSObject"))]
unsafe impl NSCopying for NSDateIntervalFormatter {}

#[cfg(all(feature = "NSFormatter", feature = "NSObject"))]
unsafe impl CopyingHelper for NSDateIntervalFormatter {
    type Result = Self;
}

#[cfg(feature = "NSFormatter")]
unsafe impl NSObjectProtocol for NSDateIntervalFormatter {}

extern_methods!(
    #[cfg(feature = "NSFormatter")]
    unsafe impl NSDateIntervalFormatter {
        #[cfg(feature = "NSLocale")]
        #[method(locale)]
        #[unsafe(method_family = none)]
        pub unsafe fn locale(&self) -> Retained<NSLocale>;

        #[cfg(feature = "NSLocale")]
        /// Setter for [`locale`][Self::locale].
        #[method(setLocale:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setLocale(&self, locale: Option<&NSLocale>);

        #[cfg(feature = "NSCalendar")]
        #[method(calendar)]
        #[unsafe(method_family = none)]
        pub unsafe fn calendar(&self) -> Retained<NSCalendar>;

        #[cfg(feature = "NSCalendar")]
        /// Setter for [`calendar`][Self::calendar].
        #[method(setCalendar:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCalendar(&self, calendar: Option<&NSCalendar>);

        #[cfg(feature = "NSTimeZone")]
        #[method(timeZone)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeZone(&self) -> Retained<NSTimeZone>;

        #[cfg(feature = "NSTimeZone")]
        /// Setter for [`timeZone`][Self::timeZone].
        #[method(setTimeZone:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimeZone(&self, time_zone: Option<&NSTimeZone>);

        #[cfg(feature = "NSString")]
        #[method(dateTemplate)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateTemplate(&self) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        /// Setter for [`dateTemplate`][Self::dateTemplate].
        #[method(setDateTemplate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDateTemplate(&self, date_template: Option<&NSString>);

        #[method(dateStyle)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateStyle(&self) -> NSDateIntervalFormatterStyle;

        /// Setter for [`dateStyle`][Self::dateStyle].
        #[method(setDateStyle:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDateStyle(&self, date_style: NSDateIntervalFormatterStyle);

        #[method(timeStyle)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeStyle(&self) -> NSDateIntervalFormatterStyle;

        /// Setter for [`timeStyle`][Self::timeStyle].
        #[method(setTimeStyle:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimeStyle(&self, time_style: NSDateIntervalFormatterStyle);

        #[cfg(all(feature = "NSDate", feature = "NSString"))]
        #[method(stringFromDate:toDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn stringFromDate_toDate(
            &self,
            from_date: &NSDate,
            to_date: &NSDate,
        ) -> Retained<NSString>;

        #[cfg(all(feature = "NSDateInterval", feature = "NSString"))]
        #[method(stringFromDateInterval:)]
        #[unsafe(method_family = none)]
        pub unsafe fn stringFromDateInterval(
            &self,
            date_interval: &NSDateInterval,
        ) -> Option<Retained<NSString>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSFormatter")]
    unsafe impl NSDateIntervalFormatter {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
