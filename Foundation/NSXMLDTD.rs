//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// Defines the order, repetition, and allowable values for a document
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/foundation/nsxmldtd?language=objc)
    #[unsafe(super(NSXMLNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSXMLNode")]
    pub struct NSXMLDTD;
);

#[cfg(all(feature = "NSObject", feature = "NSXMLNode"))]
unsafe impl NSCopying for NSXMLDTD {}

#[cfg(all(feature = "NSObject", feature = "NSXMLNode"))]
unsafe impl CopyingHelper for NSXMLDTD {
    type Result = Self;
}

#[cfg(feature = "NSXMLNode")]
unsafe impl NSObjectProtocol for NSXMLDTD {}

extern_methods!(
    #[cfg(feature = "NSXMLNode")]
    unsafe impl NSXMLDTD {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "NSXMLNodeOptions")]
        #[method_id(initWithKind:options:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithKind_options(
            this: Allocated<Self>,
            kind: NSXMLNodeKind,
            options: NSXMLNodeOptions,
        ) -> Retained<Self>;

        #[cfg(all(feature = "NSError", feature = "NSURL", feature = "NSXMLNodeOptions"))]
        #[method_id(initWithContentsOfURL:options:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_options_error(
            this: Allocated<Self>,
            url: &NSURL,
            mask: NSXMLNodeOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "NSData", feature = "NSError", feature = "NSXMLNodeOptions"))]
        #[method_id(initWithData:options:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithData_options_error(
            this: Allocated<Self>,
            data: &NSData,
            mask: NSXMLNodeOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "NSString")]
        /// Sets the public id. This identifier should be in the default catalog in /etc/xml/catalog or in a path specified by the environment variable XML_CATALOG_FILES. When the public id is set the system id must also be set.
        #[method_id(publicID)]
        #[unsafe(method_family = none)]
        pub unsafe fn publicID(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "NSString")]
        /// Setter for [`publicID`][Self::publicID].
        #[method(setPublicID:)]
        pub unsafe fn setPublicID(&self, public_id: Option<&NSString>);

        #[cfg(feature = "NSString")]
        /// Sets the system id. This should be a URL that points to a valid DTD.
        #[method_id(systemID)]
        #[unsafe(method_family = none)]
        pub unsafe fn systemID(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "NSString")]
        /// Setter for [`systemID`][Self::systemID].
        #[method(setSystemID:)]
        pub unsafe fn setSystemID(&self, system_id: Option<&NSString>);

        /// Inserts a child at a particular index.
        #[method(insertChild:atIndex:)]
        pub unsafe fn insertChild_atIndex(&self, child: &NSXMLNode, index: NSUInteger);

        #[cfg(feature = "NSArray")]
        /// Insert several children at a particular index.
        #[method(insertChildren:atIndex:)]
        pub unsafe fn insertChildren_atIndex(
            &self,
            children: &NSArray<NSXMLNode>,
            index: NSUInteger,
        );

        /// Removes a child at a particular index.
        #[method(removeChildAtIndex:)]
        pub unsafe fn removeChildAtIndex(&self, index: NSUInteger);

        #[cfg(feature = "NSArray")]
        /// Removes all existing children and replaces them with the new children. Set children to nil to simply remove all children.
        #[method(setChildren:)]
        pub unsafe fn setChildren(&self, children: Option<&NSArray<NSXMLNode>>);

        /// Adds a child to the end of the existing children.
        #[method(addChild:)]
        pub unsafe fn addChild(&self, child: &NSXMLNode);

        /// Replaces a child at a particular index with another child.
        #[method(replaceChildAtIndex:withNode:)]
        pub unsafe fn replaceChildAtIndex_withNode(&self, index: NSUInteger, node: &NSXMLNode);

        #[cfg(all(feature = "NSString", feature = "NSXMLDTDNode"))]
        /// Returns the entity declaration matching this name.
        #[method_id(entityDeclarationForName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn entityDeclarationForName(
            &self,
            name: &NSString,
        ) -> Option<Retained<NSXMLDTDNode>>;

        #[cfg(all(feature = "NSString", feature = "NSXMLDTDNode"))]
        /// Returns the notation declaration matching this name.
        #[method_id(notationDeclarationForName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn notationDeclarationForName(
            &self,
            name: &NSString,
        ) -> Option<Retained<NSXMLDTDNode>>;

        #[cfg(all(feature = "NSString", feature = "NSXMLDTDNode"))]
        /// Returns the element declaration matching this name.
        #[method_id(elementDeclarationForName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn elementDeclarationForName(
            &self,
            name: &NSString,
        ) -> Option<Retained<NSXMLDTDNode>>;

        #[cfg(all(feature = "NSString", feature = "NSXMLDTDNode"))]
        /// Returns the attribute declaration matching this name.
        #[method_id(attributeDeclarationForName:elementName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn attributeDeclarationForName_elementName(
            &self,
            name: &NSString,
            element_name: &NSString,
        ) -> Option<Retained<NSXMLDTDNode>>;

        #[cfg(all(feature = "NSString", feature = "NSXMLDTDNode"))]
        /// Returns the predefined entity declaration matching this name.
        ///
        /// The five predefined entities are
        /// <ul>
        /// <li>
        /// &
        /// lt; -
        /// <
        /// </li>
        /// <li>
        /// &
        /// gt; -
        /// >
        /// </li>
        /// <li>
        /// &
        /// amp; -
        /// &
        /// </li>
        /// <li>
        /// &
        /// quot; -
        /// "
        /// </li>
        /// <li>
        /// &
        /// apos; -
        /// &
        /// </li>
        /// </ul>
        #[method_id(predefinedEntityDeclarationForName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn predefinedEntityDeclarationForName(
            name: &NSString,
        ) -> Option<Retained<NSXMLDTDNode>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSXMLNode`
    #[cfg(feature = "NSXMLNode")]
    unsafe impl NSXMLDTD {
        /// Invokes
        ///
        /// ```text
        ///  initWithKind:options:
        /// ```
        ///
        /// with options set to NSXMLNodeOptionsNone
        #[method_id(initWithKind:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithKind(this: Allocated<Self>, kind: NSXMLNodeKind) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSXMLNode")]
    unsafe impl NSXMLDTD {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
