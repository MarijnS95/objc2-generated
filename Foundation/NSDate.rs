//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nssystemclockdidchangenotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSSystemClockDidChangeNotification: &'static NSNotificationName;
}

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nstimeinterval?language=objc)
pub type NSTimeInterval = c_double;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsdate?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDate;
);

unsafe impl Send for NSDate {}

unsafe impl Sync for NSDate {}

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSDate {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSDate {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSDate {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSDate {}

#[cfg(feature = "NSObject")]
unsafe impl NSSecureCoding for NSDate {}

extern_methods!(
    unsafe impl NSDate {
        #[method(timeIntervalSinceReferenceDate)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeIntervalSinceReferenceDate(&self) -> NSTimeInterval;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(initWithTimeIntervalSinceReferenceDate:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTimeIntervalSinceReferenceDate(
            this: Allocated<Self>,
            ti: NSTimeInterval,
        ) -> Retained<Self>;

        #[cfg(feature = "NSCoder")]
        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSDate {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSExtendedDate
    unsafe impl NSDate {
        #[method(timeIntervalSinceDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeIntervalSinceDate(&self, another_date: &NSDate) -> NSTimeInterval;

        #[method(timeIntervalSinceNow)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeIntervalSinceNow(&self) -> NSTimeInterval;

        #[method(timeIntervalSince1970)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeIntervalSince1970(&self) -> NSTimeInterval;

        #[deprecated = "Use dateByAddingTimeInterval instead"]
        #[method(addTimeInterval:)]
        #[unsafe(method_family = none)]
        pub unsafe fn addTimeInterval(&self, seconds: NSTimeInterval) -> Retained<AnyObject>;

        #[method(dateByAddingTimeInterval:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateByAddingTimeInterval(&self, ti: NSTimeInterval) -> Retained<Self>;

        #[method(earlierDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn earlierDate(&self, another_date: &NSDate) -> Retained<NSDate>;

        #[method(laterDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn laterDate(&self, another_date: &NSDate) -> Retained<NSDate>;

        #[cfg(feature = "NSObjCRuntime")]
        #[method(compare:)]
        #[unsafe(method_family = none)]
        pub unsafe fn compare(&self, other: &NSDate) -> NSComparisonResult;

        #[method(isEqualToDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn isEqualToDate(&self, other_date: &NSDate) -> bool;

        #[cfg(feature = "NSString")]
        #[method(description)]
        #[unsafe(method_family = none)]
        pub unsafe fn description(&self) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method(descriptionWithLocale:)]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptionWithLocale(
            &self,
            locale: Option<&AnyObject>,
        ) -> Retained<NSString>;

        #[method(timeIntervalSinceReferenceDate)]
        #[unsafe(method_family = none)]
        pub unsafe fn timeIntervalSinceReferenceDate_class() -> NSTimeInterval;
    }
);

extern_methods!(
    /// NSDateCreation
    unsafe impl NSDate {
        #[method(date)]
        #[unsafe(method_family = none)]
        pub unsafe fn date() -> Retained<Self>;

        #[method(dateWithTimeIntervalSinceNow:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateWithTimeIntervalSinceNow(secs: NSTimeInterval) -> Retained<Self>;

        #[method(dateWithTimeIntervalSinceReferenceDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateWithTimeIntervalSinceReferenceDate(ti: NSTimeInterval) -> Retained<Self>;

        #[method(dateWithTimeIntervalSince1970:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateWithTimeIntervalSince1970(secs: NSTimeInterval) -> Retained<Self>;

        #[method(dateWithTimeInterval:sinceDate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dateWithTimeInterval_sinceDate(
            secs_to_be_added: NSTimeInterval,
            date: &NSDate,
        ) -> Retained<Self>;

        #[method(distantFuture)]
        #[unsafe(method_family = none)]
        pub unsafe fn distantFuture() -> Retained<NSDate>;

        #[method(distantPast)]
        #[unsafe(method_family = none)]
        pub unsafe fn distantPast() -> Retained<NSDate>;

        #[method(now)]
        #[unsafe(method_family = none)]
        pub unsafe fn now() -> Retained<NSDate>;

        #[method(initWithTimeIntervalSinceNow:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTimeIntervalSinceNow(
            this: Allocated<Self>,
            secs: NSTimeInterval,
        ) -> Retained<Self>;

        #[method(initWithTimeIntervalSince1970:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTimeIntervalSince1970(
            this: Allocated<Self>,
            secs: NSTimeInterval,
        ) -> Retained<Self>;

        #[method(initWithTimeInterval:sinceDate:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTimeInterval_sinceDate(
            this: Allocated<Self>,
            secs_to_be_added: NSTimeInterval,
            date: &NSDate,
        ) -> Retained<Self>;
    }
);
