//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nssocketnativehandle?language=objc)
pub type NSSocketNativeHandle = c_int;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsportdidbecomeinvalidnotification?language=objc)
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSPortDidBecomeInvalidNotification: &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsport?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPort;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSPort {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSPort {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSPort {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSPort {}

extern_methods!(
    unsafe impl NSPort {
        #[method_id(@__method_family Other port)]
        pub unsafe fn port() -> Retained<NSPort>;

        #[method(invalidate)]
        pub unsafe fn invalidate(&self);

        #[method(isValid)]
        pub unsafe fn isValid(&self) -> bool;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, an_object: Option<&ProtocolObject<dyn NSPortDelegate>>);

        #[method_id(@__method_family Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn NSPortDelegate>>>;

        #[cfg(all(feature = "NSObjCRuntime", feature = "NSRunLoop", feature = "NSString"))]
        #[method(scheduleInRunLoop:forMode:)]
        pub unsafe fn scheduleInRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

        #[cfg(all(feature = "NSObjCRuntime", feature = "NSRunLoop", feature = "NSString"))]
        #[method(removeFromRunLoop:forMode:)]
        pub unsafe fn removeFromRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

        #[method(reservedSpaceLength)]
        pub unsafe fn reservedSpaceLength(&self) -> NSUInteger;

        #[cfg(all(feature = "NSArray", feature = "NSDate"))]
        #[method(sendBeforeDate:components:from:reserved:)]
        pub unsafe fn sendBeforeDate_components_from_reserved(
            &self,
            limit_date: &NSDate,
            components: Option<&NSMutableArray>,
            receive_port: Option<&NSPort>,
            header_space_reserved: NSUInteger,
        ) -> bool;

        #[cfg(all(feature = "NSArray", feature = "NSDate"))]
        #[method(sendBeforeDate:msgid:components:from:reserved:)]
        pub unsafe fn sendBeforeDate_msgid_components_from_reserved(
            &self,
            limit_date: &NSDate,
            msg_id: NSUInteger,
            components: Option<&NSMutableArray>,
            receive_port: Option<&NSPort>,
            header_space_reserved: NSUInteger,
        ) -> bool;

        #[cfg(all(
            feature = "NSConnection",
            feature = "NSObjCRuntime",
            feature = "NSRunLoop",
            feature = "NSString"
        ))]
        #[deprecated = "Use NSXPCConnection instead"]
        #[method(addConnection:toRunLoop:forMode:)]
        pub unsafe fn addConnection_toRunLoop_forMode(
            &self,
            conn: &NSConnection,
            run_loop: &NSRunLoop,
            mode: &NSRunLoopMode,
        );

        #[cfg(all(
            feature = "NSConnection",
            feature = "NSObjCRuntime",
            feature = "NSRunLoop",
            feature = "NSString"
        ))]
        #[deprecated = "Use NSXPCConnection instead"]
        #[method(removeConnection:fromRunLoop:forMode:)]
        pub unsafe fn removeConnection_fromRunLoop_forMode(
            &self,
            conn: &NSConnection,
            run_loop: &NSRunLoop,
            mode: &NSRunLoopMode,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSPort {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsportdelegate?language=objc)
    pub unsafe trait NSPortDelegate: NSObjectProtocol {
        #[cfg(feature = "NSPortMessage")]
        #[optional]
        #[method(handlePortMessage:)]
        unsafe fn handlePortMessage(&self, message: &NSPortMessage);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsmachportoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSMachPortOptions(pub NSUInteger);
bitflags::bitflags! {
    impl NSMachPortOptions: NSUInteger {
        #[doc(alias = "NSMachPortDeallocateNone")]
        const DeallocateNone = 0;
        #[doc(alias = "NSMachPortDeallocateSendRight")]
        const DeallocateSendRight = 1<<0;
        #[doc(alias = "NSMachPortDeallocateReceiveRight")]
        const DeallocateReceiveRight = 1<<1;
    }
}

unsafe impl Encode for NSMachPortOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSMachPortOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsmachport?language=objc)
    #[unsafe(super(NSPort, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMachPort;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSMachPort {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSMachPort {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSMachPort {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSMachPort {}

extern_methods!(
    unsafe impl NSMachPort {
        #[method_id(@__method_family Other portWithMachPort:)]
        pub unsafe fn portWithMachPort(mach_port: u32) -> Retained<NSPort>;

        #[method_id(@__method_family Init initWithMachPort:)]
        pub unsafe fn initWithMachPort(this: Allocated<Self>, mach_port: u32) -> Retained<Self>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            an_object: Option<&ProtocolObject<dyn NSMachPortDelegate>>,
        );

        #[method_id(@__method_family Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn NSMachPortDelegate>>>;

        #[method_id(@__method_family Other portWithMachPort:options:)]
        pub unsafe fn portWithMachPort_options(
            mach_port: u32,
            f: NSMachPortOptions,
        ) -> Retained<NSPort>;

        #[method_id(@__method_family Init initWithMachPort:options:)]
        pub unsafe fn initWithMachPort_options(
            this: Allocated<Self>,
            mach_port: u32,
            f: NSMachPortOptions,
        ) -> Retained<Self>;

        #[method(machPort)]
        pub unsafe fn machPort(&self) -> u32;

        #[cfg(all(feature = "NSObjCRuntime", feature = "NSRunLoop", feature = "NSString"))]
        #[method(scheduleInRunLoop:forMode:)]
        pub unsafe fn scheduleInRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);

        #[cfg(all(feature = "NSObjCRuntime", feature = "NSRunLoop", feature = "NSString"))]
        #[method(removeFromRunLoop:forMode:)]
        pub unsafe fn removeFromRunLoop_forMode(&self, run_loop: &NSRunLoop, mode: &NSRunLoopMode);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSMachPort {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsmachportdelegate?language=objc)
    pub unsafe trait NSMachPortDelegate: NSPortDelegate {
        #[optional]
        #[method(handleMachMessage:)]
        unsafe fn handleMachMessage(&self, msg: NonNull<c_void>);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nsmessageport?language=objc)
    #[unsafe(super(NSPort, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMessagePort;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSMessagePort {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSMessagePort {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSMessagePort {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSMessagePort {}

extern_methods!(
    unsafe impl NSMessagePort {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSMessagePort {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/foundation/nssocketport?language=objc)
    #[unsafe(super(NSPort, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSocketPort;
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSSocketPort {}

#[cfg(feature = "NSObject")]
unsafe impl NSCopying for NSSocketPort {}

#[cfg(feature = "NSObject")]
unsafe impl CopyingHelper for NSSocketPort {
    type Result = Self;
}

unsafe impl NSObjectProtocol for NSSocketPort {}

extern_methods!(
    unsafe impl NSSocketPort {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family Init initWithTCPPort:)]
        pub unsafe fn initWithTCPPort(
            this: Allocated<Self>,
            port: c_ushort,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSData")]
        #[method_id(@__method_family Init initWithProtocolFamily:socketType:protocol:address:)]
        pub unsafe fn initWithProtocolFamily_socketType_protocol_address(
            this: Allocated<Self>,
            family: c_int,
            r#type: c_int,
            protocol: c_int,
            address: &NSData,
        ) -> Option<Retained<Self>>;

        #[method_id(@__method_family Init initWithProtocolFamily:socketType:protocol:socket:)]
        pub unsafe fn initWithProtocolFamily_socketType_protocol_socket(
            this: Allocated<Self>,
            family: c_int,
            r#type: c_int,
            protocol: c_int,
            sock: NSSocketNativeHandle,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSString")]
        #[method_id(@__method_family Init initRemoteWithTCPPort:host:)]
        pub unsafe fn initRemoteWithTCPPort_host(
            this: Allocated<Self>,
            port: c_ushort,
            host_name: Option<&NSString>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSData")]
        #[method_id(@__method_family Init initRemoteWithProtocolFamily:socketType:protocol:address:)]
        pub unsafe fn initRemoteWithProtocolFamily_socketType_protocol_address(
            this: Allocated<Self>,
            family: c_int,
            r#type: c_int,
            protocol: c_int,
            address: &NSData,
        ) -> Retained<Self>;

        #[method(protocolFamily)]
        pub unsafe fn protocolFamily(&self) -> c_int;

        #[method(socketType)]
        pub unsafe fn socketType(&self) -> c_int;

        #[method(protocol)]
        pub unsafe fn protocol(&self) -> c_int;

        #[cfg(feature = "NSData")]
        #[method_id(@__method_family Other address)]
        pub unsafe fn address(&self) -> Retained<NSData>;

        #[method(socket)]
        pub unsafe fn socket(&self) -> NSSocketNativeHandle;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSSocketPort {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
