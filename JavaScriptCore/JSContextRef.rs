//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

extern "C-unwind" {
    /// Creates a JavaScript context group.
    ///
    /// A JSContextGroup associates JavaScript contexts with one another.
    /// Contexts in the same group may share and exchange JavaScript objects. Sharing and/or exchanging
    /// JavaScript objects between contexts in different groups will produce undefined behavior.
    /// When objects from the same context group are used in multiple threads, explicit
    /// synchronization is required.
    ///
    /// A JSContextGroup may need to run deferred tasks on a run loop, such as garbage collection
    /// or resolving WebAssembly compilations. By default, calling JSContextGroupCreate will use
    /// the run loop of the thread it was called on. Currently, there is no API to change a
    /// JSContextGroup's run loop once it has been created.
    ///
    /// Returns: The created JSContextGroup.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGroupCreate() -> JSContextGroupRef;
}

extern "C-unwind" {
    /// Retains a JavaScript context group.
    ///
    /// Parameter `group`: The JSContextGroup to retain.
    ///
    /// Returns: A JSContextGroup that is the same as group.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGroupRetain(group: JSContextGroupRef) -> JSContextGroupRef;
}

extern "C-unwind" {
    /// Releases a JavaScript context group.
    ///
    /// Parameter `group`: The JSContextGroup to release.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGroupRelease(group: JSContextGroupRef);
}

extern "C-unwind" {
    /// Creates a global JavaScript execution context.
    ///
    /// JSGlobalContextCreate allocates a global object and populates it with all the
    /// built-in JavaScript objects, such as Object, Function, String, and Array.
    ///
    /// In WebKit version 4.0 and later, the context is created in a unique context group.
    /// Therefore, scripts may execute in it concurrently with scripts executing in other contexts.
    /// However, you may not use values created in the context in other contexts.
    ///
    /// Parameter `globalObjectClass`: The class to use when creating the global object. Pass
    /// NULL to use the default object class.
    ///
    /// Returns: A JSGlobalContext with a global object of class globalObjectClass.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextCreate(global_object_class: JSClassRef) -> JSGlobalContextRef;
}

extern "C-unwind" {
    /// Creates a global JavaScript execution context in the context group provided.
    ///
    /// JSGlobalContextCreateInGroup allocates a global object and populates it with
    /// all the built-in JavaScript objects, such as Object, Function, String, and Array.
    ///
    /// Parameter `globalObjectClass`: The class to use when creating the global object. Pass
    /// NULL to use the default object class.
    ///
    /// Parameter `group`: The context group to use. The created global context retains the group.
    /// Pass NULL to create a unique group for the context.
    ///
    /// Returns: A JSGlobalContext with a global object of class globalObjectClass and a context
    /// group equal to group.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextCreateInGroup(
        group: JSContextGroupRef,
        global_object_class: JSClassRef,
    ) -> JSGlobalContextRef;
}

extern "C-unwind" {
    /// Retains a global JavaScript execution context.
    ///
    /// Parameter `ctx`: The JSGlobalContext to retain.
    ///
    /// Returns: A JSGlobalContext that is the same as ctx.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextRetain(ctx: JSGlobalContextRef) -> JSGlobalContextRef;
}

extern "C-unwind" {
    /// Releases a global JavaScript execution context.
    ///
    /// Parameter `ctx`: The JSGlobalContext to release.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextRelease(ctx: JSGlobalContextRef);
}

extern "C-unwind" {
    /// Gets the global object of a JavaScript execution context.
    ///
    /// Parameter `ctx`: The JSContext whose global object you want to get.
    ///
    /// Returns: ctx's global object.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGetGlobalObject(ctx: JSContextRef) -> JSObjectRef;
}

extern "C-unwind" {
    /// Gets the context group to which a JavaScript execution context belongs.
    ///
    /// Parameter `ctx`: The JSContext whose group you want to get.
    ///
    /// Returns: ctx's group.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGetGroup(ctx: JSContextRef) -> JSContextGroupRef;
}

extern "C-unwind" {
    /// Gets the global context of a JavaScript execution context.
    ///
    /// Parameter `ctx`: The JSContext whose global context you want to get.
    ///
    /// Returns: ctx's global context.
    #[cfg(feature = "JSBase")]
    pub fn JSContextGetGlobalContext(ctx: JSContextRef) -> JSGlobalContextRef;
}

extern "C-unwind" {
    /// Gets a copy of the name of a context.
    ///
    /// Parameter `ctx`: The JSGlobalContext whose name you want to get.
    ///
    /// Returns: The name for ctx.
    ///
    /// A JSGlobalContext's name is exposed when inspecting the context to make it easier to identify the context you would like to inspect.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextCopyName(ctx: JSGlobalContextRef) -> JSStringRef;
}

extern "C-unwind" {
    /// Sets the name exposed when inspecting a context.
    ///
    /// Parameter `ctx`: The JSGlobalContext that you want to name.
    ///
    /// Parameter `name`: The name to set on the context.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextSetName(ctx: JSGlobalContextRef, name: JSStringRef);
}

extern "C-unwind" {
    /// Gets whether the context is inspectable in Web Inspector.
    ///
    /// Parameter `ctx`: The JSGlobalContext that you want to change the inspectability of.
    ///
    /// Returns: Whether the context is inspectable in Web Inspector.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextIsInspectable(ctx: JSGlobalContextRef) -> bool;
}

extern "C-unwind" {
    /// Sets whether the context is inspectable in Web Inspector. Default value is NO.
    ///
    /// Parameter `ctx`: The JSGlobalContext that you want to change the inspectability of.
    ///
    /// Parameter `inspectable`: YES to allow Web Inspector to connect to the context, otherwise NO.
    #[cfg(feature = "JSBase")]
    pub fn JSGlobalContextSetInspectable(ctx: JSGlobalContextRef, inspectable: bool);
}
