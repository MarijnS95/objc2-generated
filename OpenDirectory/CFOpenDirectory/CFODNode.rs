//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn ODNodeGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeCreateWithNodeType(
        allocator: CFAllocatorRef,
        session: ODSessionRef,
        node_type: ODNodeType,
        error: *mut CFErrorRef,
    ) -> ODNodeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCreateWithName(
        allocator: CFAllocatorRef,
        session: ODSessionRef,
        node_name: CFStringRef,
        error: *mut CFErrorRef,
    ) -> ODNodeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCreateCopy(
        allocator: CFAllocatorRef,
        node: ODNodeRef,
        error: *mut CFErrorRef,
    ) -> ODNodeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCopySubnodeNames(node: ODNodeRef, error: *mut CFErrorRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCopyUnreachableSubnodeNames(node: ODNodeRef, error: *mut CFErrorRef)
        -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeGetName(node: ODNodeRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCopyDetails(
        node: ODNodeRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCopySupportedRecordTypes(node: ODNodeRef, error: *mut CFErrorRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeCopySupportedAttributes(
        node: ODNodeRef,
        record_type: Option<&ODRecordType>,
        error: *mut CFErrorRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeSetCredentials(
        node: ODNodeRef,
        record_type: Option<&ODRecordType>,
        record_name: CFStringRef,
        password: CFStringRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeSetCredentialsExtended(
        node: ODNodeRef,
        record_type: Option<&ODRecordType>,
        auth_type: Option<&ODAuthenticationType>,
        auth_items: CFArrayRef,
        out_auth_items: *mut CFArrayRef,
        out_context: *mut ODContextRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    #[deprecated]
    pub fn ODNodeSetCredentialsUsingKerberosCache(
        node: ODNodeRef,
        cache_name: CFStringRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeCreateRecord(
        node: ODNodeRef,
        record_type: Option<&ODRecordType>,
        record_name: CFStringRef,
        attribute_dict: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> ODRecordRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeCopyRecord(
        node: ODNodeRef,
        record_type: Option<&ODRecordType>,
        record_name: CFStringRef,
        attributes: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> ODRecordRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCustomCall(
        node: ODNodeRef,
        custom_code: CFIndex,
        data: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCustomFunction(
        node: ODNodeRef,
        function: CFStringRef,
        payload: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    #[deprecated = "use ODNodeCopyAccountPolicies"]
    pub fn ODNodeCopyPolicies(node: ODNodeRef, error: *mut CFErrorRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    #[deprecated]
    pub fn ODNodeCopySupportedPolicies(node: ODNodeRef, error: *mut CFErrorRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    #[deprecated = "use ODNodeSetAccountPolicies"]
    pub fn ODNodeSetPolicies(
        node: ODNodeRef,
        policies: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    #[deprecated = "use ODNodeAddAccountPolicy"]
    pub fn ODNodeSetPolicy(
        node: ODNodeRef,
        policy_type: Option<&ODPolicyType>,
        value: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    #[deprecated = "use ODNodeRemoveAccountPolicy"]
    pub fn ODNodeRemovePolicy(
        node: ODNodeRef,
        policy_type: Option<&ODPolicyType>,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeAddAccountPolicy(
        node: ODNodeRef,
        policy: CFDictionaryRef,
        category: Option<&ODPolicyCategoryType>,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFOpenDirectory",
        feature = "CFOpenDirectoryConstants",
        feature = "objc2-core-foundation"
    ))]
    pub fn ODNodeRemoveAccountPolicy(
        node: ODNodeRef,
        policy: CFDictionaryRef,
        category: Option<&ODPolicyCategoryType>,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeSetAccountPolicies(
        node: ODNodeRef,
        policies: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodeCopyAccountPolicies(node: ODNodeRef, error: *mut CFErrorRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFOpenDirectory", feature = "objc2-core-foundation"))]
    pub fn ODNodePasswordContentCheck(
        node: ODNodeRef,
        password: CFStringRef,
        record_name: CFStringRef,
        error: *mut CFErrorRef,
    ) -> bool;
}
