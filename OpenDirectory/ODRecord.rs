//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/opendirectory/odrecord?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ODRecord;
);

unsafe impl NSObjectProtocol for ODRecord {}

extern_methods!(
    unsafe impl ODRecord {
        #[method(setNodeCredentials:password:error:)]
        pub unsafe fn setNodeCredentials_password_error(
            &self,
            in_username: Option<&NSString>,
            in_password: Option<&NSString>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(setNodeCredentialsWithRecordType:authenticationType:authenticationItems:continueItems:context:error:)]
        pub unsafe fn setNodeCredentialsWithRecordType_authenticationType_authenticationItems_continueItems_context_error(
            &self,
            in_record_type: Option<&ODRecordType>,
            in_type: Option<&ODAuthenticationType>,
            in_items: Option<&NSArray>,
            out_items: Option<&mut Option<Retained<NSArray>>>,
            out_context: Option<&mut Option<Retained<AnyObject>>>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[deprecated]
        #[method(setNodeCredentialsUsingKerberosCache:error:)]
        pub unsafe fn setNodeCredentialsUsingKerberosCache_error(
            &self,
            in_cache_name: Option<&NSString>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[deprecated = "use effectivePoliciesAndReturnError"]
        #[method_id(@__retain_semantics Other passwordPolicyAndReturnError:)]
        pub unsafe fn passwordPolicyAndReturnError(
            &self,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[method(verifyPassword:error:)]
        pub unsafe fn verifyPassword_error(
            &self,
            in_password: Option<&NSString>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(verifyExtendedWithAuthenticationType:authenticationItems:continueItems:context:error:)]
        pub unsafe fn verifyExtendedWithAuthenticationType_authenticationItems_continueItems_context_error(
            &self,
            in_type: Option<&ODAuthenticationType>,
            in_items: Option<&NSArray>,
            out_items: Option<&mut Option<Retained<NSArray>>>,
            out_context: Option<&mut Option<Retained<AnyObject>>>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(changePassword:toPassword:error:)]
        pub unsafe fn changePassword_toPassword_error(
            &self,
            old_password: Option<&NSString>,
            new_password: Option<&NSString>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(synchronizeAndReturnError:)]
        pub unsafe fn synchronizeAndReturnError(
            &self,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method_id(@__retain_semantics Other recordType)]
        pub unsafe fn recordType(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other recordName)]
        pub unsafe fn recordName(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other recordDetailsForAttributes:error:)]
        pub unsafe fn recordDetailsForAttributes_error(
            &self,
            in_attributes: Option<&NSArray>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method_id(@__retain_semantics Other valuesForAttribute:error:)]
        pub unsafe fn valuesForAttribute_error(
            &self,
            in_attribute: Option<&ODAttributeType>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSArray>>;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(setValue:forAttribute:error:)]
        pub unsafe fn setValue_forAttribute_error(
            &self,
            in_value_or_values: Option<&AnyObject>,
            in_attribute: Option<&ODAttributeType>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(removeValuesForAttribute:error:)]
        pub unsafe fn removeValuesForAttribute_error(
            &self,
            in_attribute: Option<&ODAttributeType>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(addValue:toAttribute:error:)]
        pub unsafe fn addValue_toAttribute_error(
            &self,
            in_value: Option<&AnyObject>,
            in_attribute: Option<&ODAttributeType>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(removeValue:fromAttribute:error:)]
        pub unsafe fn removeValue_fromAttribute_error(
            &self,
            in_value: Option<&AnyObject>,
            in_attribute: Option<&ODAttributeType>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(deleteRecordAndReturnError:)]
        pub unsafe fn deleteRecordAndReturnError(
            &self,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[deprecated = "use accountPoliciesAndReturnError:"]
        #[method_id(@__retain_semantics Other policiesAndReturnError:)]
        pub unsafe fn policiesAndReturnError(
            &self,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[deprecated = "use authenticationAllowedAndReturnError: and similar methods"]
        #[method_id(@__retain_semantics Other effectivePoliciesAndReturnError:)]
        pub unsafe fn effectivePoliciesAndReturnError(
            &self,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[deprecated]
        #[method_id(@__retain_semantics Other supportedPoliciesAndReturnError:)]
        pub unsafe fn supportedPoliciesAndReturnError(
            &self,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[deprecated = "use setAccountPolicies:error:"]
        #[method(setPolicies:error:)]
        pub unsafe fn setPolicies_error(
            &self,
            policies: Option<&NSDictionary>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[deprecated = "use addAccountPolicy:toCategory:error:"]
        #[method(setPolicy:value:error:)]
        pub unsafe fn setPolicy_value_error(
            &self,
            policy: Option<&ODPolicyType>,
            value: Option<&AnyObject>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[deprecated = "use removeAccountPolicy:fromCategory:error:"]
        #[method(removePolicy:error:)]
        pub unsafe fn removePolicy_error(
            &self,
            policy: Option<&ODPolicyType>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(addAccountPolicy:toCategory:error:)]
        pub unsafe fn addAccountPolicy_toCategory_error(
            &self,
            policy: Option<&NSDictionary>,
            category: Option<&ODPolicyCategoryType>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[cfg(feature = "CFOpenDirectoryConstants")]
        #[method(removeAccountPolicy:fromCategory:error:)]
        pub unsafe fn removeAccountPolicy_fromCategory_error(
            &self,
            policy: Option<&NSDictionary>,
            category: Option<&ODPolicyCategoryType>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(setAccountPolicies:error:)]
        pub unsafe fn setAccountPolicies_error(
            &self,
            policies: Option<&NSDictionary>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method_id(@__retain_semantics Other accountPoliciesAndReturnError:)]
        pub unsafe fn accountPoliciesAndReturnError(
            &self,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[method(authenticationAllowedAndReturnError:)]
        pub unsafe fn authenticationAllowedAndReturnError(
            &self,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(passwordChangeAllowed:error:)]
        pub unsafe fn passwordChangeAllowed_error(
            &self,
            new_password: Option<&NSString>,
            error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(willPasswordExpire:)]
        pub unsafe fn willPasswordExpire(&self, will_expire_in: u64) -> bool;

        #[method(willAuthenticationsExpire:)]
        pub unsafe fn willAuthenticationsExpire(&self, will_expire_in: u64) -> bool;

        #[method(secondsUntilPasswordExpires)]
        pub unsafe fn secondsUntilPasswordExpires(&self) -> i64;

        #[method(secondsUntilAuthenticationsExpire)]
        pub unsafe fn secondsUntilAuthenticationsExpire(&self) -> i64;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl ODRecord {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// ODRecordGroupExtensions
    unsafe impl ODRecord {
        #[method(addMemberRecord:error:)]
        pub unsafe fn addMemberRecord_error(
            &self,
            in_record: Option<&ODRecord>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(removeMemberRecord:error:)]
        pub unsafe fn removeMemberRecord_error(
            &self,
            in_record: Option<&ODRecord>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;

        #[method(isMemberRecord:error:)]
        pub unsafe fn isMemberRecord_error(
            &self,
            in_record: Option<&ODRecord>,
            out_error: Option<&mut Option<Retained<NSError>>>,
        ) -> bool;
    }
);
