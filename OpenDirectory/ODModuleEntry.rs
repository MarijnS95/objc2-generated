//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/opendirectory/odmoduleentry?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ODModuleEntry;
);

unsafe impl NSObjectProtocol for ODModuleEntry {}

extern_methods!(
    unsafe impl ODModuleEntry {
        #[cfg(feature = "ODMappings")]
        #[method_id(@__retain_semantics Other mappings)]
        pub unsafe fn mappings(&self) -> Option<Retained<ODMappings>>;

        #[cfg(feature = "ODMappings")]
        #[method(setMappings:)]
        pub unsafe fn setMappings(&self, mappings: Option<&ODMappings>);

        #[method_id(@__retain_semantics Other supportedOptions)]
        pub unsafe fn supportedOptions(&self) -> Retained<NSArray>;

        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[method_id(@__retain_semantics Other xpcServiceName)]
        pub unsafe fn xpcServiceName(&self) -> Retained<NSString>;

        #[method(setXpcServiceName:)]
        pub unsafe fn setXpcServiceName(&self, xpc_service_name: Option<&NSString>);

        #[method_id(@__retain_semantics Other uuidString)]
        pub unsafe fn uuidString(&self) -> Retained<NSString>;

        #[method(setUuidString:)]
        pub unsafe fn setUuidString(&self, uuid_string: Option<&NSString>);

        #[method_id(@__retain_semantics Other moduleEntryWithName:xpcServiceName:)]
        pub unsafe fn moduleEntryWithName_xpcServiceName(
            name: Option<&NSString>,
            xpc_service_name: Option<&NSString>,
        ) -> Option<Retained<Self>>;

        #[method(setOption:value:)]
        pub unsafe fn setOption_value(
            &self,
            option_name: Option<&NSString>,
            value: Option<&AnyObject>,
        );

        #[method_id(@__retain_semantics Other option:)]
        pub unsafe fn option(&self, option_name: Option<&NSString>) -> Option<Retained<AnyObject>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl ODModuleEntry {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
