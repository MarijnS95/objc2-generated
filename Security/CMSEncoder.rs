//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/cmsencoder?language=objc)
#[repr(C)]
pub struct CMSEncoder {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl CMSEncoder {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"_CMSEncoder"> for CMSEncoder {}
);

unsafe impl ConcreteType for CMSEncoder {
    #[doc(alias = "CMSEncoderGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CMSEncoderGetTypeID() -> CFTypeID;
        }
        unsafe { CMSEncoderGetTypeID() }
    }
}

extern "C-unwind" {
    pub fn CMSEncoderCreate(cms_encoder_out: NonNull<*mut CMSEncoder>) -> OSStatus;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kcmsencoderdigestalgorithmsha1?language=objc)
    pub static kCMSEncoderDigestAlgorithmSHA1: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kcmsencoderdigestalgorithmsha256?language=objc)
    pub static kCMSEncoderDigestAlgorithmSHA256: &'static CFString;
}

extern "C-unwind" {
    pub fn CMSEncoderSetSignerAlgorithm(
        cms_encoder: &CMSEncoder,
        digest_algorithm: &CFString,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderAddSigners(cms_encoder: &CMSEncoder, signer_or_array: &CFType) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopySigners(
        cms_encoder: &CMSEncoder,
        signers_out: NonNull<*const CFArray>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderAddRecipients(
        cms_encoder: &CMSEncoder,
        recipient_or_array: &CFType,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopyRecipients(
        cms_encoder: &CMSEncoder,
        recipients_out: NonNull<*const CFArray>,
    ) -> OSStatus;
}

#[inline]
pub unsafe extern "C-unwind" fn CMSEncoderSetHasDetachedContent(
    cms_encoder: &CMSEncoder,
    detached_content: bool,
) -> OSStatus {
    extern "C-unwind" {
        fn CMSEncoderSetHasDetachedContent(
            cms_encoder: &CMSEncoder,
            detached_content: Boolean,
        ) -> OSStatus;
    }
    unsafe { CMSEncoderSetHasDetachedContent(cms_encoder, detached_content as _) }
}

extern "C-unwind" {
    pub fn CMSEncoderGetHasDetachedContent(
        cms_encoder: &CMSEncoder,
        detached_content_out: NonNull<Boolean>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated]
    pub fn CMSEncoderSetEncapsulatedContentType(
        cms_encoder: &CMSEncoder,
        e_content_type: NonNull<SecAsn1Oid>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderSetEncapsulatedContentTypeOID(
        cms_encoder: &CMSEncoder,
        e_content_type_oid: &CFType,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopyEncapsulatedContentType(
        cms_encoder: &CMSEncoder,
        e_content_type_out: NonNull<*const CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderAddSupportingCerts(
        cms_encoder: &CMSEncoder,
        cert_or_array: &CFType,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopySupportingCerts(
        cms_encoder: &CMSEncoder,
        certs_out: NonNull<*const CFArray>,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/cmssignedattributes?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMSSignedAttributes(pub u32);
bitflags::bitflags! {
    impl CMSSignedAttributes: u32 {
        #[doc(alias = "kCMSAttrNone")]
        const AttrNone = 0x0000;
        #[doc(alias = "kCMSAttrSmimeCapabilities")]
        const AttrSmimeCapabilities = 0x0001;
        #[doc(alias = "kCMSAttrSmimeEncryptionKeyPrefs")]
        const AttrSmimeEncryptionKeyPrefs = 0x0002;
        #[doc(alias = "kCMSAttrSmimeMSEncryptionKeyPrefs")]
        const AttrSmimeMSEncryptionKeyPrefs = 0x0004;
        #[doc(alias = "kCMSAttrSigningTime")]
        const AttrSigningTime = 0x0008;
        #[doc(alias = "kCMSAttrAppleCodesigningHashAgility")]
        const AttrAppleCodesigningHashAgility = 0x0010;
        #[doc(alias = "kCMSAttrAppleCodesigningHashAgilityV2")]
        const AttrAppleCodesigningHashAgilityV2 = 0x0020;
        #[doc(alias = "kCMSAttrAppleExpirationTime")]
        const AttrAppleExpirationTime = 0x0040;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMSSignedAttributes {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMSSignedAttributes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CMSEncoderAddSignedAttributes(
        cms_encoder: &CMSEncoder,
        signed_attributes: CMSSignedAttributes,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/cmscertificatechainmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMSCertificateChainMode(pub u32);
impl CMSCertificateChainMode {
    #[doc(alias = "kCMSCertificateNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "kCMSCertificateSignerOnly")]
    pub const SignerOnly: Self = Self(1);
    #[doc(alias = "kCMSCertificateChain")]
    pub const Chain: Self = Self(2);
    #[doc(alias = "kCMSCertificateChainWithRoot")]
    pub const ChainWithRoot: Self = Self(3);
    #[doc(alias = "kCMSCertificateChainWithRootOrFail")]
    pub const ChainWithRootOrFail: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMSCertificateChainMode {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMSCertificateChainMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CMSEncoderSetCertificateChainMode(
        cms_encoder: &CMSEncoder,
        chain_mode: CMSCertificateChainMode,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderGetCertificateChainMode(
        cms_encoder: &CMSEncoder,
        chain_mode_out: NonNull<CMSCertificateChainMode>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderUpdateContent(
        cms_encoder: &CMSEncoder,
        content: NonNull<c_void>,
        content_len: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopyEncodedContent(
        cms_encoder: &CMSEncoder,
        encoded_content_out: NonNull<*const CFData>,
    ) -> OSStatus;
}

#[cfg(feature = "SecAsn1Types")]
#[deprecated]
#[inline]
pub unsafe extern "C-unwind" fn CMSEncode(
    signers: Option<&CFType>,
    recipients: Option<&CFType>,
    e_content_type: *const SecAsn1Oid,
    detached_content: bool,
    signed_attributes: CMSSignedAttributes,
    content: NonNull<c_void>,
    content_len: usize,
    encoded_content_out: NonNull<*const CFData>,
) -> OSStatus {
    extern "C-unwind" {
        fn CMSEncode(
            signers: Option<&CFType>,
            recipients: Option<&CFType>,
            e_content_type: *const SecAsn1Oid,
            detached_content: Boolean,
            signed_attributes: CMSSignedAttributes,
            content: NonNull<c_void>,
            content_len: usize,
            encoded_content_out: NonNull<*const CFData>,
        ) -> OSStatus;
    }
    unsafe {
        CMSEncode(
            signers,
            recipients,
            e_content_type,
            detached_content as _,
            signed_attributes,
            content,
            content_len,
            encoded_content_out,
        )
    }
}

#[inline]
pub unsafe extern "C-unwind" fn CMSEncodeContent(
    signers: Option<&CFType>,
    recipients: Option<&CFType>,
    e_content_type_oid: Option<&CFType>,
    detached_content: bool,
    signed_attributes: CMSSignedAttributes,
    content: NonNull<c_void>,
    content_len: usize,
    encoded_content_out: *mut *const CFData,
) -> OSStatus {
    extern "C-unwind" {
        fn CMSEncodeContent(
            signers: Option<&CFType>,
            recipients: Option<&CFType>,
            e_content_type_oid: Option<&CFType>,
            detached_content: Boolean,
            signed_attributes: CMSSignedAttributes,
            content: NonNull<c_void>,
            content_len: usize,
            encoded_content_out: *mut *const CFData,
        ) -> OSStatus;
    }
    unsafe {
        CMSEncodeContent(
            signers,
            recipients,
            e_content_type_oid,
            detached_content as _,
            signed_attributes,
            content,
            content_len,
            encoded_content_out,
        )
    }
}

extern "C-unwind" {
    pub fn CMSEncoderCopySignerTimestamp(
        cms_encoder: &CMSEncoder,
        signer_index: usize,
        timestamp: NonNull<CFAbsoluteTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSEncoderCopySignerTimestampWithPolicy(
        cms_encoder: &CMSEncoder,
        time_stamp_policy: Option<&CFType>,
        signer_index: usize,
        timestamp: NonNull<CFAbsoluteTime>,
    ) -> OSStatus;
}
