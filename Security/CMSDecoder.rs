//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/cmsdecoder?language=objc)
#[repr(C)]
pub struct CMSDecoder {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "_CMSDecoder"]
    unsafe impl CMSDecoder {}
);

unsafe impl ConcreteType for CMSDecoder {
    #[doc(alias = "CMSDecoderGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CMSDecoderGetTypeID() -> CFTypeID;
        }
        unsafe { CMSDecoderGetTypeID() }
    }
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/cmssignerstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMSSignerStatus(pub u32);
impl CMSSignerStatus {
    #[doc(alias = "kCMSSignerUnsigned")]
    pub const Unsigned: Self = Self(0);
    #[doc(alias = "kCMSSignerValid")]
    pub const Valid: Self = Self(1);
    #[doc(alias = "kCMSSignerNeedsDetachedContent")]
    pub const NeedsDetachedContent: Self = Self(2);
    #[doc(alias = "kCMSSignerInvalidSignature")]
    pub const InvalidSignature: Self = Self(3);
    #[doc(alias = "kCMSSignerInvalidCert")]
    pub const InvalidCert: Self = Self(4);
    #[doc(alias = "kCMSSignerInvalidIndex")]
    pub const InvalidIndex: Self = Self(5);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMSSignerStatus {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMSSignerStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CMSDecoderCreate(cms_decoder_out: NonNull<*mut CMSDecoder>) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderUpdateMessage(
        cms_decoder: &CMSDecoder,
        msg_bytes: NonNull<c_void>,
        msg_bytes_len: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderFinalizeMessage(cms_decoder: &CMSDecoder) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderSetDetachedContent(
        cms_decoder: &CMSDecoder,
        detached_content: &CFData,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopyDetachedContent(
        cms_decoder: &CMSDecoder,
        detached_content_out: NonNull<*mut CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[deprecated]
    pub fn CMSDecoderSetSearchKeychain(
        cms_decoder: &CMSDecoder,
        keychain_or_array: &CFType,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderGetNumSigners(
        cms_decoder: &CMSDecoder,
        num_signers_out: NonNull<usize>,
    ) -> OSStatus;
}

#[cfg(feature = "SecTrust")]
#[inline]
pub unsafe extern "C-unwind" fn CMSDecoderCopySignerStatus(
    cms_decoder: &CMSDecoder,
    signer_index: usize,
    policy_or_array: &CFType,
    evaluate_sec_trust: bool,
    signer_status_out: *mut CMSSignerStatus,
    sec_trust_out: *mut *mut SecTrust,
    cert_verify_result_code_out: *mut OSStatus,
) -> OSStatus {
    extern "C-unwind" {
        fn CMSDecoderCopySignerStatus(
            cms_decoder: &CMSDecoder,
            signer_index: usize,
            policy_or_array: &CFType,
            evaluate_sec_trust: Boolean,
            signer_status_out: *mut CMSSignerStatus,
            sec_trust_out: *mut *mut SecTrust,
            cert_verify_result_code_out: *mut OSStatus,
        ) -> OSStatus;
    }
    unsafe {
        CMSDecoderCopySignerStatus(
            cms_decoder,
            signer_index,
            policy_or_array,
            evaluate_sec_trust as _,
            signer_status_out,
            sec_trust_out,
            cert_verify_result_code_out,
        )
    }
}

extern "C-unwind" {
    pub fn CMSDecoderCopySignerEmailAddress(
        cms_decoder: &CMSDecoder,
        signer_index: usize,
        signer_email_address_out: NonNull<*mut CFString>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    pub fn CMSDecoderCopySignerCert(
        cms_decoder: &CMSDecoder,
        signer_index: usize,
        signer_cert_out: NonNull<*mut SecCertificate>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderIsContentEncrypted(
        cms_decoder: &CMSDecoder,
        is_encrypted_out: NonNull<Boolean>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopyEncapsulatedContentType(
        cms_decoder: &CMSDecoder,
        e_content_type_out: NonNull<*mut CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopyAllCerts(
        cms_decoder: &CMSDecoder,
        certs_out: NonNull<*mut CFArray>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopyContent(
        cms_decoder: &CMSDecoder,
        content_out: NonNull<*mut CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopySignerSigningTime(
        cms_decoder: &CMSDecoder,
        signer_index: usize,
        signing_time: NonNull<CFAbsoluteTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopySignerTimestamp(
        cms_decoder: &CMSDecoder,
        signer_index: usize,
        timestamp: NonNull<CFAbsoluteTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopySignerTimestampWithPolicy(
        cms_decoder: &CMSDecoder,
        time_stamp_policy: Option<&CFType>,
        signer_index: usize,
        timestamp: NonNull<CFAbsoluteTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMSDecoderCopySignerTimestampCertificates(
        cms_decoder: &CMSDecoder,
        signer_index: usize,
        certificate_refs: NonNull<*mut CFArray>,
    ) -> OSStatus;
}
