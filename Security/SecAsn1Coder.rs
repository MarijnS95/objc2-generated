//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/secasn1coder?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct SecAsn1Coder {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecAsn1Coder {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("SecAsn1Coder", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/secasn1coderref?language=objc)
pub type SecAsn1CoderRef = *mut SecAsn1Coder;

extern "C-unwind" {
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1CoderCreate(coder: NonNull<SecAsn1CoderRef>) -> OSStatus;
}

extern "C-unwind" {
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1CoderRelease(coder: SecAsn1CoderRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1Decode(
        coder: SecAsn1CoderRef,
        src: NonNull<c_void>,
        len: usize,
        templates: NonNull<SecAsn1Template>,
        dest: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1DecodeData(
        coder: SecAsn1CoderRef,
        src: NonNull<SecAsn1Item>,
        templ: NonNull<SecAsn1Template>,
        dest: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1EncodeItem(
        coder: SecAsn1CoderRef,
        src: NonNull<c_void>,
        templates: NonNull<SecAsn1Template>,
        dest: NonNull<SecAsn1Item>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1Malloc(coder: SecAsn1CoderRef, len: usize) -> NonNull<c_void>;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1AllocItem(
        coder: SecAsn1CoderRef,
        item: NonNull<SecAsn1Item>,
        len: usize,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1AllocCopy(
        coder: SecAsn1CoderRef,
        src: NonNull<c_void>,
        len: usize,
        dest: NonNull<SecAsn1Item>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1AllocCopyItem(
        coder: SecAsn1CoderRef,
        src: NonNull<SecAsn1Item>,
        dest: NonNull<SecAsn1Item>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecAsn1Types")]
    #[deprecated = "SecAsn1 is not supported"]
    pub fn SecAsn1OidCompare(oid1: NonNull<SecAsn1Oid>, oid2: NonNull<SecAsn1Oid>) -> bool;
}
