//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/sectrustsettingskeyusage?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecTrustSettingsKeyUsage(pub u32);
bitflags::bitflags! {
    impl SecTrustSettingsKeyUsage: u32 {
        #[doc(alias = "kSecTrustSettingsKeyUseSignature")]
        const UseSignature = 0x00000001;
        #[doc(alias = "kSecTrustSettingsKeyUseEnDecryptData")]
        const UseEnDecryptData = 0x00000002;
        #[doc(alias = "kSecTrustSettingsKeyUseEnDecryptKey")]
        const UseEnDecryptKey = 0x00000004;
        #[doc(alias = "kSecTrustSettingsKeyUseSignCert")]
        const UseSignCert = 0x00000008;
        #[doc(alias = "kSecTrustSettingsKeyUseSignRevocation")]
        const UseSignRevocation = 0x00000010;
        #[doc(alias = "kSecTrustSettingsKeyUseKeyExchange")]
        const UseKeyExchange = 0x00000020;
        #[doc(alias = "kSecTrustSettingsKeyUseAny")]
        const UseAny = 0xffffffff;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecTrustSettingsKeyUsage {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecTrustSettingsKeyUsage {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Result of a trust settings evaluation.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/sectrustsettingsresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecTrustSettingsResult(pub u32);
impl SecTrustSettingsResult {
    #[doc(alias = "kSecTrustSettingsResultInvalid")]
    pub const Invalid: Self = Self(0);
    #[doc(alias = "kSecTrustSettingsResultTrustRoot")]
    pub const TrustRoot: Self = Self(1);
    #[doc(alias = "kSecTrustSettingsResultTrustAsRoot")]
    pub const TrustAsRoot: Self = Self(2);
    #[doc(alias = "kSecTrustSettingsResultDeny")]
    pub const Deny: Self = Self(3);
    #[doc(alias = "kSecTrustSettingsResultUnspecified")]
    pub const Unspecified: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecTrustSettingsResult {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecTrustSettingsResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/sectrustsettingsdomain?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecTrustSettingsDomain(pub u32);
impl SecTrustSettingsDomain {
    #[doc(alias = "kSecTrustSettingsDomainUser")]
    pub const User: Self = Self(0);
    #[doc(alias = "kSecTrustSettingsDomainAdmin")]
    pub const Admin: Self = Self(1);
    #[doc(alias = "kSecTrustSettingsDomainSystem")]
    pub const System: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecTrustSettingsDomain {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecTrustSettingsDomain {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    pub fn SecTrustSettingsCopyTrustSettings(
        cert_ref: &SecCertificate,
        domain: SecTrustSettingsDomain,
        trust_settings: NonNull<*mut CFArray>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    pub fn SecTrustSettingsSetTrustSettings(
        cert_ref: &SecCertificate,
        domain: SecTrustSettingsDomain,
        trust_settings_dict_or_array: Option<&CFType>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    pub fn SecTrustSettingsRemoveTrustSettings(
        cert_ref: &SecCertificate,
        domain: SecTrustSettingsDomain,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn SecTrustSettingsCopyCertificates(
        domain: SecTrustSettingsDomain,
        cert_array: *mut *mut CFArray,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    pub fn SecTrustSettingsCopyModificationDate(
        cert_ref: &SecCertificate,
        domain: SecTrustSettingsDomain,
        modification_date: NonNull<*mut CFDate>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn SecTrustSettingsCreateExternalRepresentation(
        domain: SecTrustSettingsDomain,
        trust_settings: NonNull<*mut CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn SecTrustSettingsImportExternalRepresentation(
        domain: SecTrustSettingsDomain,
        trust_settings: &CFData,
    ) -> OSStatus;
}
