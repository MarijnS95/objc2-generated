//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/sec_protocol_metadata?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct sec_protocol_metadata {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for sec_protocol_metadata {
    const ENCODING_REF: Encoding =
        Encoding::Pointer(&Encoding::Struct("sec_protocol_metadata", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/security/sec_protocol_metadata_t?language=objc)
pub type sec_protocol_metadata_t = *mut sec_protocol_metadata;

extern "C-unwind" {
    /// Get the application protocol negotiated, e.g., via the TLS ALPN extension.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A NULL-terminated string carrying the negotiated protocol.
    pub fn sec_protocol_metadata_get_negotiated_protocol(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    /// Get the negotiated TLS version.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A `tls_protocol_version_t` value.
    #[cfg(feature = "SecProtocolTypes")]
    pub fn sec_protocol_metadata_get_negotiated_tls_protocol_version(
        metadata: sec_protocol_metadata_t,
    ) -> tls_protocol_version_t;
}

extern "C-unwind" {
    /// Get the negotiated TLS version.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A SSLProtocol enum of the TLS version.
    #[cfg(feature = "SecProtocolTypes")]
    #[deprecated]
    pub fn sec_protocol_metadata_get_negotiated_protocol_version(
        metadata: sec_protocol_metadata_t,
    ) -> SSLProtocol;
}

extern "C-unwind" {
    /// Get the negotiated TLS ciphersuite.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A `tls_ciphersuite_t`.
    #[cfg(feature = "SecProtocolTypes")]
    pub fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(
        metadata: sec_protocol_metadata_t,
    ) -> tls_ciphersuite_t;
}

extern "C-unwind" {
    /// Get the negotiated TLS ciphersuite.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A SSLCipherSuite.
    #[cfg(feature = "CipherSuite")]
    #[deprecated]
    pub fn sec_protocol_metadata_get_negotiated_ciphersuite(
        metadata: sec_protocol_metadata_t,
    ) -> SSLCipherSuite;
}

extern "C-unwind" {
    /// Determine if early data was accepted by the peer.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A bool indicating if early data was accepted.
    pub fn sec_protocol_metadata_get_early_data_accepted(metadata: sec_protocol_metadata_t)
        -> bool;
}

extern "C-unwind" {
    /// Get the certificate chain of the protocol instance peer.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `handler`: A block to invoke one or more times with sec_certificate_t objects
    ///
    ///
    /// Returns: Returns true if the peer certificates were accessible, false otherwise.
    #[cfg(all(feature = "SecProtocolTypes", feature = "block2"))]
    pub fn sec_protocol_metadata_access_peer_certificate_chain(
        metadata: sec_protocol_metadata_t,
        handler: &block2::Block<dyn Fn(sec_certificate_t)>,
    ) -> bool;
}

extern "C-unwind" {
    /// Get the signature algorithms supported by the peer. Clients may call this
    /// in response to a challenge block.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `handler`: A block to invoke one or more times with OCSP data
    ///
    ///
    /// Returns: Returns true if the supported signature list was accessible, false otherwise.
    #[cfg(feature = "block2")]
    pub fn sec_protocol_metadata_access_supported_signature_algorithms(
        metadata: sec_protocol_metadata_t,
        handler: &block2::Block<dyn Fn(u16)>,
    ) -> bool;
}

extern "C-unwind" {
    /// Obtain the server name offered by a client or server during
    /// connection establishmet. This is the value commonly carried
    /// in the TLS SNI extesion.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns A NULL-terminated string carrying the server name, or NULL
    /// if none was provided.
    pub fn sec_protocol_metadata_get_server_name(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    /// Compare peer information for two `sec_protocol_metadata` instances.
    /// This comparison does not include protocol configuration options, e.g., ciphersuites.
    ///
    ///
    /// Parameter `metadataA`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `metadataB`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns true if both metadata values refer to the same peer, and false otherwise.
    pub fn sec_protocol_metadata_peers_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool;
}

extern "C-unwind" {
    /// Compare challenge-relevant information for two `sec_protocol_metadata` instances.
    ///
    /// This comparison includes all information relevant to a challenge request, including:
    /// distinguished names, signature algorithms, and supported certificate types.
    /// See Section 7.4.4 of RFC5246 for more details.
    ///
    ///
    /// Parameter `metadataA`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `metadataB`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns true if both metadata values have the same challenge parameters.
    pub fn sec_protocol_metadata_challenge_parameters_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool;
}
