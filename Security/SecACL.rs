//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/seckeychainpromptselector?language=objc)
// NS_OPTIONS
#[cfg(feature = "cssmconfig")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecKeychainPromptSelector(pub uint16);
#[cfg(feature = "cssmconfig")]
bitflags::bitflags! {
    impl SecKeychainPromptSelector: uint16 {
        #[doc(alias = "kSecKeychainPromptRequirePassphase")]
        const RequirePassphase = 0x0001;
        #[doc(alias = "kSecKeychainPromptUnsigned")]
        const Unsigned = 0x0010;
        #[doc(alias = "kSecKeychainPromptUnsignedAct")]
        const UnsignedAct = 0x0020;
        #[doc(alias = "kSecKeychainPromptInvalid")]
        const Invalid = 0x0040;
        #[doc(alias = "kSecKeychainPromptInvalidAct")]
        const InvalidAct = 0x0080;
    }
}

#[cfg(all(feature = "cssmconfig", feature = "objc2"))]
unsafe impl Encode for SecKeychainPromptSelector {
    const ENCODING: Encoding = uint16::ENCODING;
}

#[cfg(all(feature = "cssmconfig", feature = "objc2"))]
unsafe impl RefEncode for SecKeychainPromptSelector {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[cfg(feature = "SecBase")]
unsafe impl ConcreteType for SecACL {
    /// Returns the type identifier of SecACL instances.
    ///
    /// Returns: The CFTypeID of SecACL instances.
    #[doc(alias = "SecACLGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn SecACLGetTypeID() -> CFTypeID;
        }
        unsafe { SecACLGetTypeID() }
    }
}

extern "C-unwind" {
    /// Creates a new access control list entry from the application list, description, and prompt selector provided and adds it to an item's access.
    ///
    /// Parameter `access`: An access reference.
    ///
    /// Parameter `applicationList`: An array of SecTrustedApplication instances that will be allowed access without prompting.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.
    ///
    /// Parameter `newAcl`: A pointer to an access control list entry.  On return, this points to the reference of the new access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCreateWithSimpleContents instead.
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    pub fn SecACLCreateFromSimpleContents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Creates a new access control list entry from the application list, description, and prompt selector provided and adds it to an item's access.
    ///
    /// Parameter `access`: An access reference.
    ///
    /// Parameter `applicationList`: An array of SecTrustedApplication instances that will be allowed access without prompting.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A SecKeychainPromptSelector selector.
    ///
    /// Parameter `newAcl`: A pointer to an access control list entry.  On return, this points to the reference of the new access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    pub fn SecACLCreateWithSimpleContents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Removes the access control list entry specified.
    ///
    /// Parameter `aclRef`: The reference to the access control list entry to remove.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[cfg(feature = "SecBase")]
    #[deprecated = "SecKeychain is deprecated"]
    pub fn SecACLRemove(acl_ref: &SecACL) -> OSStatus;
}

extern "C-unwind" {
    /// Returns the application list, description, and CSSM prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `applicationList`: On return, An array of SecTrustedApplication instances that will be allowed access without prompting, for the given access control list entry.  The caller needs to call CFRelease on this array when it's no longer needed.
    ///
    /// Parameter `description`: On return, the human readable name that will be used to refer to this item when the user is prompted, for the given access control list entry. The caller needs to call CFRelease on this string when it's no longer needed.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.  On return, this points to the CSSM prompt selector for the given access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCopyContents instead.
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    pub fn SecACLCopySimpleContents(
        acl: &SecACL,
        application_list: NonNull<*mut CFArray>,
        description: NonNull<*mut CFString>,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns the application list, description, and prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `applicationList`: On return, An array of SecTrustedApplication instances that will be allowed access without prompting, for the given access control list entry.  The caller needs to call CFRelease on this array when it's no longer needed.
    ///
    /// Parameter `description`: On return, the human readable name that will be used to refer to this item when the user is prompted, for the given access control list entry. The caller needs to call CFRelease on this string when it's no longer needed.
    ///
    /// Parameter `promptSelector`: A pointer to a SecKeychainPromptSelector.  On return, this points to the SecKeychainPromptSelector for the given access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    pub fn SecACLCopyContents(
        acl: &SecACL,
        application_list: NonNull<*mut CFArray>,
        description: NonNull<*mut CFString>,
        prompt_selector: NonNull<SecKeychainPromptSelector>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Sets the application list, description, and CSSM prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: A reference to the access control list entry to edit.
    ///
    /// Parameter `applicationList`: An application list reference.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLSetContents instead.
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    pub fn SecACLSetSimpleContents(
        acl: &SecACL,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Sets the application list, description, and prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: A reference to the access control list entry to edit.
    ///
    /// Parameter `applicationList`: An application list reference.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A SecKeychainPromptSelector selector.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    pub fn SecACLSetContents(
        acl: &SecACL,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Retrieve the CSSM authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `tags`: On return, this points to the first item in an array of CSSM authorization tags.
    ///
    /// Parameter `tagCount`: On return, this points to the number of tags in the CSSM authorization tag array.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCopyAuthorizations instead.
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "CSSM is not supported"]
    pub fn SecACLGetAuthorizations(
        acl: &SecACL,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: NonNull<uint32>,
    ) -> OSStatus;
}

/// Retrieve the authorization tags of a given access control list entry.
///
/// Parameter `acl`: An access control list entry reference.
///
/// Returns: On return, a CFArrayRef of the authorizations for this ACL.
#[cfg(feature = "SecBase")]
#[deprecated = "SecKeychain is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn SecACLCopyAuthorizations(acl: &SecACL) -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn SecACLCopyAuthorizations(acl: &SecACL) -> NonNull<CFArray>;
    }
    let ret = unsafe { SecACLCopyAuthorizations(acl) };
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// Sets the CSSM authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `tags`: A pointer to the first item in an array of CSSM authorization tags.
    ///
    /// Parameter `tagCount`: The number of tags in the CSSM authorization tag array.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLUpdateAuthorizations instead.
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "CSSM is not supported"]
    pub fn SecACLSetAuthorizations(
        acl: &SecACL,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: uint32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Sets the authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `authorizations`: A pointer to an array of authorization tags.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[cfg(feature = "SecBase")]
    #[deprecated = "SecKeychain is deprecated"]
    pub fn SecACLUpdateAuthorizations(acl: &SecACL, authorizations: &CFArray) -> OSStatus;
}
