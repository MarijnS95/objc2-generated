//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdllighttype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLLightType(pub NSUInteger);
impl MDLLightType {
    #[doc(alias = "MDLLightTypeUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "MDLLightTypeAmbient")]
    pub const Ambient: Self = Self(1);
    #[doc(alias = "MDLLightTypeDirectional")]
    pub const Directional: Self = Self(2);
    #[doc(alias = "MDLLightTypeSpot")]
    pub const Spot: Self = Self(3);
    #[doc(alias = "MDLLightTypePoint")]
    pub const Point: Self = Self(4);
    #[doc(alias = "MDLLightTypeLinear")]
    pub const Linear: Self = Self(5);
    #[doc(alias = "MDLLightTypeDiscArea")]
    pub const DiscArea: Self = Self(6);
    #[doc(alias = "MDLLightTypeRectangularArea")]
    pub const RectangularArea: Self = Self(7);
    #[doc(alias = "MDLLightTypeSuperElliptical")]
    pub const SuperElliptical: Self = Self(8);
    #[doc(alias = "MDLLightTypePhotometric")]
    pub const Photometric: Self = Self(9);
    #[doc(alias = "MDLLightTypeProbe")]
    pub const Probe: Self = Self(10);
    #[doc(alias = "MDLLightTypeEnvironment")]
    pub const Environment: Self = Self(11);
}

unsafe impl Encode for MDLLightType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLLightType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdllight?language=objc)
    #[unsafe(super(MDLObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MDLObject")]
    pub struct MDLLight;
);

#[cfg(all(feature = "MDLObject", feature = "MDLTypes"))]
unsafe impl MDLNamed for MDLLight {}

#[cfg(feature = "MDLObject")]
unsafe impl NSObjectProtocol for MDLLight {}

extern_methods!(
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLLight {
        #[method(lightType)]
        pub unsafe fn lightType(&self) -> MDLLightType;

        /// Setter for [`lightType`][Self::lightType].
        #[method(setLightType:)]
        pub unsafe fn setLightType(&self, light_type: MDLLightType);

        #[unsafe(method_family(none))]
        #[method_id(colorSpace)]
        pub unsafe fn colorSpace(&self) -> Retained<NSString>;

        /// Setter for [`colorSpace`][Self::colorSpace].
        #[method(setColorSpace:)]
        pub unsafe fn setColorSpace(&self, color_space: &NSString);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLLight {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A light with characteristics representing plausible real world lights
    ///
    ///
    ///
    ///
    ///
    /// quadratically attenuates to zero.
    ///
    /// light is maximally bright.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlphysicallyplausiblelight?language=objc)
    #[unsafe(super(MDLLight, MDLObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MDLObject")]
    pub struct MDLPhysicallyPlausibleLight;
);

#[cfg(all(feature = "MDLObject", feature = "MDLTypes"))]
unsafe impl MDLNamed for MDLPhysicallyPlausibleLight {}

#[cfg(feature = "MDLObject")]
unsafe impl NSObjectProtocol for MDLPhysicallyPlausibleLight {}

extern_methods!(
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLPhysicallyPlausibleLight {
        /// Light color specified by color temperature, in degrees Kelvin
        ///
        /// default color is 6500K, cool daylight.
        #[method(setColorByTemperature:)]
        pub unsafe fn setColorByTemperature(&self, temperature: c_float);

        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method_family(none))]
        #[method_id(color)]
        pub unsafe fn color(&self) -> Option<Retained<CGColor>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        pub unsafe fn setColor(&self, color: Option<&CGColor>);

        #[method(lumens)]
        pub unsafe fn lumens(&self) -> c_float;

        /// Setter for [`lumens`][Self::lumens].
        #[method(setLumens:)]
        pub unsafe fn setLumens(&self, lumens: c_float);

        #[method(innerConeAngle)]
        pub unsafe fn innerConeAngle(&self) -> c_float;

        /// Setter for [`innerConeAngle`][Self::innerConeAngle].
        #[method(setInnerConeAngle:)]
        pub unsafe fn setInnerConeAngle(&self, inner_cone_angle: c_float);

        #[method(outerConeAngle)]
        pub unsafe fn outerConeAngle(&self) -> c_float;

        /// Setter for [`outerConeAngle`][Self::outerConeAngle].
        #[method(setOuterConeAngle:)]
        pub unsafe fn setOuterConeAngle(&self, outer_cone_angle: c_float);

        #[method(attenuationStartDistance)]
        pub unsafe fn attenuationStartDistance(&self) -> c_float;

        /// Setter for [`attenuationStartDistance`][Self::attenuationStartDistance].
        #[method(setAttenuationStartDistance:)]
        pub unsafe fn setAttenuationStartDistance(&self, attenuation_start_distance: c_float);

        #[method(attenuationEndDistance)]
        pub unsafe fn attenuationEndDistance(&self) -> c_float;

        /// Setter for [`attenuationEndDistance`][Self::attenuationEndDistance].
        #[method(setAttenuationEndDistance:)]
        pub unsafe fn setAttenuationEndDistance(&self, attenuation_end_distance: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLPhysicallyPlausibleLight {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlarealight?language=objc)
    #[unsafe(super(MDLPhysicallyPlausibleLight, MDLLight, MDLObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MDLObject")]
    pub struct MDLAreaLight;
);

#[cfg(all(feature = "MDLObject", feature = "MDLTypes"))]
unsafe impl MDLNamed for MDLAreaLight {}

#[cfg(feature = "MDLObject")]
unsafe impl NSObjectProtocol for MDLAreaLight {}

extern_methods!(
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLAreaLight {
        #[method(areaRadius)]
        pub unsafe fn areaRadius(&self) -> c_float;

        /// Setter for [`areaRadius`][Self::areaRadius].
        #[method(setAreaRadius:)]
        pub unsafe fn setAreaRadius(&self, area_radius: c_float);

        #[method(aspect)]
        pub unsafe fn aspect(&self) -> c_float;

        /// Setter for [`aspect`][Self::aspect].
        #[method(setAspect:)]
        pub unsafe fn setAspect(&self, aspect: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLAreaLight {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A light created from measurements at various angles.
    ///
    ///
    /// learn the intensity of the light in that direction.
    ///
    /// used to calculate the spherical harmonics coefficients
    ///
    /// calculated by generateSphericalHarmonicsFromLight:
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlphotometriclight?language=objc)
    #[unsafe(super(MDLPhysicallyPlausibleLight, MDLLight, MDLObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MDLObject")]
    pub struct MDLPhotometricLight;
);

#[cfg(all(feature = "MDLObject", feature = "MDLTypes"))]
unsafe impl MDLNamed for MDLPhotometricLight {}

#[cfg(feature = "MDLObject")]
unsafe impl NSObjectProtocol for MDLPhotometricLight {}

extern_methods!(
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLPhotometricLight {
        #[unsafe(method_family(init))]
        #[method_id(initWithIESProfile:)]
        pub unsafe fn initWithIESProfile(
            this: Allocated<Self>,
            url: &NSURL,
        ) -> Option<Retained<Self>>;

        #[method(generateSphericalHarmonicsFromLight:)]
        pub unsafe fn generateSphericalHarmonicsFromLight(
            &self,
            spherical_harmonics_level: NSUInteger,
        );

        #[method(generateCubemapFromLight:)]
        pub unsafe fn generateCubemapFromLight(&self, texture_size: NSUInteger);

        #[cfg(feature = "MDLTexture")]
        /// Generate an IES compliant MDLTexture
        /// 1D when the number of horizontal angles is one and the innerConeAngle is
        /// <
        /// 180
        /// 2D when the previous statement fails and innerConeAngle
        /// <
        /// 89
        /// 3D in all other cases
        /// the parameter textureSize is the size in pixels of the texture image. For a size of N,
        /// 1D generates an Nx1 image, 2D generates an NxN image, 3D generates an Nx(N*6) image (i.e. cubemap).
        #[unsafe(method_family(none))]
        #[method_id(generateTexture:)]
        pub unsafe fn generateTexture(&self, texture_size: NSUInteger) -> Retained<MDLTexture>;

        #[cfg(feature = "MDLTexture")]
        #[unsafe(method_family(none))]
        #[method_id(lightCubeMap)]
        pub unsafe fn lightCubeMap(&self) -> Option<Retained<MDLTexture>>;

        #[method(sphericalHarmonicsLevel)]
        pub unsafe fn sphericalHarmonicsLevel(&self) -> NSUInteger;

        #[unsafe(method_family(none))]
        #[method_id(sphericalHarmonicsCoefficients)]
        pub unsafe fn sphericalHarmonicsCoefficients(&self) -> Option<Retained<NSData>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLPhotometricLight {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdllightprobe?language=objc)
    #[unsafe(super(MDLLight, MDLObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MDLObject")]
    pub struct MDLLightProbe;
);

#[cfg(all(feature = "MDLObject", feature = "MDLTypes"))]
unsafe impl MDLNamed for MDLLightProbe {}

#[cfg(feature = "MDLObject")]
unsafe impl NSObjectProtocol for MDLLightProbe {}

extern_methods!(
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLLightProbe {
        #[cfg(feature = "MDLTexture")]
        #[unsafe(method_family(init))]
        #[method_id(initWithReflectiveTexture:irradianceTexture:)]
        pub unsafe fn initWithReflectiveTexture_irradianceTexture(
            this: Allocated<Self>,
            reflective_texture: Option<&MDLTexture>,
            irradiance_texture: Option<&MDLTexture>,
        ) -> Retained<Self>;

        #[method(generateSphericalHarmonicsFromIrradiance:)]
        pub unsafe fn generateSphericalHarmonicsFromIrradiance(
            &self,
            spherical_harmonics_level: NSUInteger,
        );

        #[cfg(feature = "MDLTexture")]
        #[unsafe(method_family(none))]
        #[method_id(reflectiveTexture)]
        pub unsafe fn reflectiveTexture(&self) -> Option<Retained<MDLTexture>>;

        #[cfg(feature = "MDLTexture")]
        #[unsafe(method_family(none))]
        #[method_id(irradianceTexture)]
        pub unsafe fn irradianceTexture(&self) -> Option<Retained<MDLTexture>>;

        #[method(sphericalHarmonicsLevel)]
        pub unsafe fn sphericalHarmonicsLevel(&self) -> NSUInteger;

        #[unsafe(method_family(none))]
        #[method_id(sphericalHarmonicsCoefficients)]
        pub unsafe fn sphericalHarmonicsCoefficients(&self) -> Option<Retained<NSData>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLLightProbe {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// MDLLightBaking
    #[cfg(feature = "MDLObject")]
    unsafe impl MDLLightProbe {
        #[cfg(all(feature = "MDLTexture", feature = "MDLTransform"))]
        #[unsafe(method_family(none))]
        #[method_id(lightProbeWithTextureSize:forLocation:lightsToConsider:objectsToConsider:reflectiveCubemap:irradianceCubemap:)]
        pub unsafe fn lightProbeWithTextureSize_forLocation_lightsToConsider_objectsToConsider_reflectiveCubemap_irradianceCubemap(
            texture_size: NSInteger,
            transform: &MDLTransform,
            lights_to_consider: &NSArray<MDLLight>,
            objects_to_consider: &NSArray<MDLObject>,
            reflective_cubemap: Option<&MDLTexture>,
            irradiance_cubemap: Option<&MDLTexture>,
        ) -> Option<Retained<MDLLightProbe>>;
    }
);
