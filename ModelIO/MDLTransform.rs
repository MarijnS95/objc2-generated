//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// MDLTransformComponent
    /// a container for a time sampled local transformation
    ///
    ///
    /// Accessors to get the local transform and the global transform
    /// for a particular MDLObject are provided.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdltransformcomponent?language=objc)
    #[cfg(feature = "MDLTypes")]
    pub unsafe trait MDLTransformComponent: MDLComponent {
        /// if YES, this transform is intended to be in global space, not parent space
        #[method(resetsTransform)]
        unsafe fn resetsTransform(&self) -> bool;

        /// Setter for [`resetsTransform`][Self::resetsTransform].
        #[method(setResetsTransform:)]
        unsafe fn setResetsTransform(&self, resets_transform: bool);

        /// If no animation data is present, minimumTime and maximumTime will be zero
        #[method(minimumTime)]
        unsafe fn minimumTime(&self) -> NSTimeInterval;

        #[method(maximumTime)]
        unsafe fn maximumTime(&self) -> NSTimeInterval;

        /// An array of sample times for which a key has been stored
        /// If no animation data is present, the array will contain a single value of zero
        #[unsafe(method_family(none))]
        #[method_id(keyTimes)]
        unsafe fn keyTimes(&self) -> Retained<NSArray<NSNumber>>;
    }
);

extern_class!(
    /// Concrete implementation of
    /// <MDLTransformComponent
    /// >.
    /// For more complex transform components create a class that conforms to
    /// <MDLTransformComponent
    /// >.
    ///
    ///
    /// Setting any of scale, translation, or rotation individually will
    /// set the matrix property, and clear any timing information.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdltransform?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLTransform;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLComponent for MDLTransform {}

#[cfg(feature = "MDLTypes")]
unsafe impl MDLTransformComponent for MDLTransform {}

unsafe impl NSCopying for MDLTransform {}

unsafe impl CopyingHelper for MDLTransform {
    type Result = Self;
}

unsafe impl NSObjectProtocol for MDLTransform {}

extern_methods!(
    unsafe impl MDLTransform {
        /// Initialize an MDLTransform's matrices with identity
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[deprecated]
        #[unsafe(method_family(init))]
        #[method_id(initWithIdentity)]
        pub unsafe fn initWithIdentity(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "MDLTypes")]
        #[unsafe(method_family(init))]
        #[method_id(initWithTransformComponent:)]
        pub unsafe fn initWithTransformComponent(
            this: Allocated<Self>,
            component: &ProtocolObject<dyn MDLTransformComponent>,
        ) -> Retained<Self>;

        #[cfg(feature = "MDLTypes")]
        #[unsafe(method_family(init))]
        #[method_id(initWithTransformComponent:resetsTransform:)]
        pub unsafe fn initWithTransformComponent_resetsTransform(
            this: Allocated<Self>,
            component: &ProtocolObject<dyn MDLTransformComponent>,
            resets_transform: bool,
        ) -> Retained<Self>;

        /// Set all transform components to identity
        #[method(setIdentity)]
        pub unsafe fn setIdentity(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLTransform {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
