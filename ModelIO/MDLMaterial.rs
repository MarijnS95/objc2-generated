//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;

use crate::*;

/// MDLMaterialSemantic
///
/// The material semantics are identifiers for material properties
/// formally identified by one of the standard material descriptors.
///
///
/// When files containing material properties are loaded and translated
/// by ModelIO, an appropriate standard material descriptor will be
/// chosen, and any properties translated from the loaded file can be
/// retrieved using one of these semantics.
///
/// MDLMaterialSemanticBaseColor
/// The inherent color of a surface to be used as a modulator during shading.
/// Default is 50% gray
///
/// MDLMaterialSemanticSubsurface,
/// The degree to which light scatters under the surface of a material
///
/// MDLMaterialSemanticMetallic
/// A blend between a material behaving as a dielectric material at zero, and a
/// metal at one.
///
/// MDLMaterialSemanticSpecular
/// Specular response to incident light
///
/// MDLMaterialSemanticSpecularExponent
/// Power of the specular exponent in the case that a Blinn/Phong BSDF is in use.
///
/// MDLMaterialSemanticSpecularTint
/// At zero, the specular highlight will use the hue, saturation, and intensity
/// of incoming light to color the specular response; at one, the material's
/// base color, and the light's intensity will be used.
///
/// MDLMaterialSemanticRoughness
/// Controls diffuse and specular response. A value of zero is smooth and shiny.
/// At one, a diffuse material will retroreflect, and the specular highlight
/// will be very spread out.
///
/// MDLMaterialSemanticAnisotropic
/// The degree to which the specular highlight is elongated in the direction of
/// the local tangent basis. A mesh that does not have a tangent basis will not
/// respond to this parameter.
///
/// MDLMaterialSemanticAnisotropicRotation
/// The degree to which the anisotropy is rotated relative to the direction of the
/// local tangent basis. Values from zero to one are mapped to zero to two PI.
///
/// MDLMaterialSemanticSheen
/// A specular tint that appears at glancing angles on an object
///
/// MDLMaterialSemanticSheenTint
/// At zero, the specular highlight will use the hue, saturation, and intensity
/// of incoming light to color the specular response; at one, the material's
/// base color, and the light's intensity will be used.
///
/// MDLMaterialSemanticClearcoat
/// A second specular highlight, much like the gloss that results from a clear
/// coat on an automotive finish
///
/// MDLMaterialSemanticClearcoatGloss
/// The glossiness of the clear coat highlight.
///
/// MDLMaterialSemanticEmission
/// A value that is to be emitted as radiance by a surface
///
/// MDLMaterialSemanticBump
/// A value that perturbs surface normals according to the local gradient of
/// the property
///
/// MDLMaterialSemanticOpacity
/// The opacity of the surface
///
/// MDLMaterialSemanticInterfaceIndexOfRefraction
/// n1 in Schlick's equation, typically 1.0 for air
///
/// MDLMaterialSemanticMaterialIndexOfRefraction
/// n2 in Schlick's equation
///
/// MDLMaterialSemanticObjectSpaceNormal
/// A value that perturbs surface normals in object space
///
/// MDLMaterialSemanticTangentSpaceNormal
/// A value that perturbs surface normals in a local tangent space
///
/// MDLMaterialSemanticDisplacement
/// Displacement of a surface relative to surface normal
///
/// MDLMaterialSemanticDisplacementScale
/// Scaling factor for displacement
///
/// MDLMaterialSemanticAmbientOcclusion
/// Ambient occlusion describes the accessibility of the surface to the
/// surrounding radiant environment and is typically used to attenuate it. It is
/// not intended to attenuate direct illumination sources.
///
/// MDLMaterialSemanticAmbientOcclusionScale
/// The degree to which the ambient occlusion values are applied
///
/// MDLMaterialSemanticUserDefined = 0x8000
/// Properties with this value are created when material properties are
/// translated for which no known semantic applies.
/// Semantics defined at greater than this value are available to be user defined.
/// The first value is also used to indicate
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialsemantic?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialSemantic(pub NSUInteger);
impl MDLMaterialSemantic {
    #[doc(alias = "MDLMaterialSemanticBaseColor")]
    pub const BaseColor: Self = Self(0);
    #[doc(alias = "MDLMaterialSemanticSubsurface")]
    pub const Subsurface: Self = Self(1);
    #[doc(alias = "MDLMaterialSemanticMetallic")]
    pub const Metallic: Self = Self(2);
    #[doc(alias = "MDLMaterialSemanticSpecular")]
    pub const Specular: Self = Self(3);
    #[doc(alias = "MDLMaterialSemanticSpecularExponent")]
    pub const SpecularExponent: Self = Self(4);
    #[doc(alias = "MDLMaterialSemanticSpecularTint")]
    pub const SpecularTint: Self = Self(5);
    #[doc(alias = "MDLMaterialSemanticRoughness")]
    pub const Roughness: Self = Self(6);
    #[doc(alias = "MDLMaterialSemanticAnisotropic")]
    pub const Anisotropic: Self = Self(7);
    #[doc(alias = "MDLMaterialSemanticAnisotropicRotation")]
    pub const AnisotropicRotation: Self = Self(8);
    #[doc(alias = "MDLMaterialSemanticSheen")]
    pub const Sheen: Self = Self(9);
    #[doc(alias = "MDLMaterialSemanticSheenTint")]
    pub const SheenTint: Self = Self(10);
    #[doc(alias = "MDLMaterialSemanticClearcoat")]
    pub const Clearcoat: Self = Self(11);
    #[doc(alias = "MDLMaterialSemanticClearcoatGloss")]
    pub const ClearcoatGloss: Self = Self(12);
    #[doc(alias = "MDLMaterialSemanticEmission")]
    pub const Emission: Self = Self(13);
    #[doc(alias = "MDLMaterialSemanticBump")]
    pub const Bump: Self = Self(14);
    #[doc(alias = "MDLMaterialSemanticOpacity")]
    pub const Opacity: Self = Self(15);
    #[doc(alias = "MDLMaterialSemanticInterfaceIndexOfRefraction")]
    pub const InterfaceIndexOfRefraction: Self = Self(16);
    #[doc(alias = "MDLMaterialSemanticMaterialIndexOfRefraction")]
    pub const MaterialIndexOfRefraction: Self = Self(17);
    #[doc(alias = "MDLMaterialSemanticObjectSpaceNormal")]
    pub const ObjectSpaceNormal: Self = Self(18);
    #[doc(alias = "MDLMaterialSemanticTangentSpaceNormal")]
    pub const TangentSpaceNormal: Self = Self(19);
    #[doc(alias = "MDLMaterialSemanticDisplacement")]
    pub const Displacement: Self = Self(20);
    #[doc(alias = "MDLMaterialSemanticDisplacementScale")]
    pub const DisplacementScale: Self = Self(21);
    #[doc(alias = "MDLMaterialSemanticAmbientOcclusion")]
    pub const AmbientOcclusion: Self = Self(22);
    #[doc(alias = "MDLMaterialSemanticAmbientOcclusionScale")]
    pub const AmbientOcclusionScale: Self = Self(23);
    #[doc(alias = "MDLMaterialSemanticNone")]
    pub const None: Self = Self(0x8000);
    #[doc(alias = "MDLMaterialSemanticUserDefined")]
    pub const UserDefined: Self = Self(0x8001);
}

unsafe impl Encode for MDLMaterialSemantic {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialSemantic {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialpropertytype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialPropertyType(pub NSUInteger);
impl MDLMaterialPropertyType {
    #[doc(alias = "MDLMaterialPropertyTypeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MDLMaterialPropertyTypeString")]
    pub const String: Self = Self(1);
    #[doc(alias = "MDLMaterialPropertyTypeURL")]
    pub const URL: Self = Self(2);
    #[doc(alias = "MDLMaterialPropertyTypeTexture")]
    pub const Texture: Self = Self(3);
    #[doc(alias = "MDLMaterialPropertyTypeColor")]
    pub const Color: Self = Self(4);
    #[doc(alias = "MDLMaterialPropertyTypeFloat")]
    pub const Float: Self = Self(5);
    #[doc(alias = "MDLMaterialPropertyTypeFloat2")]
    pub const Float2: Self = Self(6);
    #[doc(alias = "MDLMaterialPropertyTypeFloat3")]
    pub const Float3: Self = Self(7);
    #[doc(alias = "MDLMaterialPropertyTypeFloat4")]
    pub const Float4: Self = Self(8);
    #[doc(alias = "MDLMaterialPropertyTypeMatrix44")]
    pub const Matrix44: Self = Self(9);
    #[doc(alias = "MDLMaterialPropertyTypeBuffer")]
    pub const Buffer: Self = Self(10);
}

unsafe impl Encode for MDLMaterialPropertyType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialPropertyType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Texture filtering
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialtexturewrapmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialTextureWrapMode(pub NSUInteger);
impl MDLMaterialTextureWrapMode {
    #[doc(alias = "MDLMaterialTextureWrapModeClamp")]
    pub const Clamp: Self = Self(0);
    #[doc(alias = "MDLMaterialTextureWrapModeRepeat")]
    pub const Repeat: Self = Self(1);
    #[doc(alias = "MDLMaterialTextureWrapModeMirror")]
    pub const Mirror: Self = Self(2);
}

unsafe impl Encode for MDLMaterialTextureWrapMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialTextureWrapMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialtexturefiltermode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialTextureFilterMode(pub NSUInteger);
impl MDLMaterialTextureFilterMode {
    #[doc(alias = "MDLMaterialTextureFilterModeNearest")]
    pub const Nearest: Self = Self(0);
    #[doc(alias = "MDLMaterialTextureFilterModeLinear")]
    pub const Linear: Self = Self(1);
}

unsafe impl Encode for MDLMaterialTextureFilterMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialTextureFilterMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialmipmapfiltermode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialMipMapFilterMode(pub NSUInteger);
impl MDLMaterialMipMapFilterMode {
    #[doc(alias = "MDLMaterialMipMapFilterModeNearest")]
    pub const Nearest: Self = Self(0);
    #[doc(alias = "MDLMaterialMipMapFilterModeLinear")]
    pub const Linear: Self = Self(1);
}

unsafe impl Encode for MDLMaterialMipMapFilterMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialMipMapFilterMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdltexturefilter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLTextureFilter;
);

unsafe impl NSObjectProtocol for MDLTextureFilter {}

extern_methods!(
    unsafe impl MDLTextureFilter {
        #[method(sWrapMode)]
        pub unsafe fn sWrapMode(&self) -> MDLMaterialTextureWrapMode;

        /// Setter for [`sWrapMode`][Self::sWrapMode].
        #[method(setSWrapMode:)]
        pub unsafe fn setSWrapMode(&self, s_wrap_mode: MDLMaterialTextureWrapMode);

        #[method(tWrapMode)]
        pub unsafe fn tWrapMode(&self) -> MDLMaterialTextureWrapMode;

        /// Setter for [`tWrapMode`][Self::tWrapMode].
        #[method(setTWrapMode:)]
        pub unsafe fn setTWrapMode(&self, t_wrap_mode: MDLMaterialTextureWrapMode);

        #[method(rWrapMode)]
        pub unsafe fn rWrapMode(&self) -> MDLMaterialTextureWrapMode;

        /// Setter for [`rWrapMode`][Self::rWrapMode].
        #[method(setRWrapMode:)]
        pub unsafe fn setRWrapMode(&self, r_wrap_mode: MDLMaterialTextureWrapMode);

        #[method(minFilter)]
        pub unsafe fn minFilter(&self) -> MDLMaterialTextureFilterMode;

        /// Setter for [`minFilter`][Self::minFilter].
        #[method(setMinFilter:)]
        pub unsafe fn setMinFilter(&self, min_filter: MDLMaterialTextureFilterMode);

        #[method(magFilter)]
        pub unsafe fn magFilter(&self) -> MDLMaterialTextureFilterMode;

        /// Setter for [`magFilter`][Self::magFilter].
        #[method(setMagFilter:)]
        pub unsafe fn setMagFilter(&self, mag_filter: MDLMaterialTextureFilterMode);

        #[method(mipFilter)]
        pub unsafe fn mipFilter(&self) -> MDLMaterialMipMapFilterMode;

        /// Setter for [`mipFilter`][Self::mipFilter].
        #[method(setMipFilter:)]
        pub unsafe fn setMipFilter(&self, mip_filter: MDLMaterialMipMapFilterMode);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLTextureFilter {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdltexturesampler?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLTextureSampler;
);

unsafe impl NSObjectProtocol for MDLTextureSampler {}

extern_methods!(
    unsafe impl MDLTextureSampler {
        #[cfg(feature = "MDLTexture")]
        #[method_id(@__method_family Other texture)]
        pub unsafe fn texture(&self) -> Option<Retained<MDLTexture>>;

        #[cfg(feature = "MDLTexture")]
        /// Setter for [`texture`][Self::texture].
        #[method(setTexture:)]
        pub unsafe fn setTexture(&self, texture: Option<&MDLTexture>);

        #[method_id(@__method_family Other hardwareFilter)]
        pub unsafe fn hardwareFilter(&self) -> Option<Retained<MDLTextureFilter>>;

        /// Setter for [`hardwareFilter`][Self::hardwareFilter].
        #[method(setHardwareFilter:)]
        pub unsafe fn setHardwareFilter(&self, hardware_filter: Option<&MDLTextureFilter>);

        #[cfg(feature = "MDLTransform")]
        #[method_id(@__method_family Other transform)]
        pub unsafe fn transform(&self) -> Option<Retained<MDLTransform>>;

        #[cfg(feature = "MDLTransform")]
        /// Setter for [`transform`][Self::transform].
        #[method(setTransform:)]
        pub unsafe fn setTransform(&self, transform: Option<&MDLTransform>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLTextureSampler {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// If a color is encoded in a floatN property, it is to be interpreted as
    /// a Rec 709 color.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialproperty?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLMaterialProperty;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLMaterialProperty {}

unsafe impl NSCopying for MDLMaterialProperty {}

unsafe impl CopyingHelper for MDLMaterialProperty {
    type Result = Self;
}

unsafe impl NSObjectProtocol for MDLMaterialProperty {}

extern_methods!(
    unsafe impl MDLMaterialProperty {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family Init initWithName:semantic:)]
        pub unsafe fn initWithName_semantic(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithName:semantic:float:)]
        pub unsafe fn initWithName_semantic_float(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
            value: c_float,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithName:semantic:URL:)]
        pub unsafe fn initWithName_semantic_URL(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
            url: Option<&NSURL>,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithName:semantic:string:)]
        pub unsafe fn initWithName_semantic_string(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
            string: Option<&NSString>,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init initWithName:semantic:textureSampler:)]
        pub unsafe fn initWithName_semantic_textureSampler(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
            texture_sampler: Option<&MDLTextureSampler>,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Init initWithName:semantic:color:)]
        pub unsafe fn initWithName_semantic_color(
            this: Allocated<Self>,
            name: &NSString,
            semantic: MDLMaterialSemantic,
            color: &CGColor,
        ) -> Retained<Self>;

        #[method(setProperties:)]
        pub unsafe fn setProperties(&self, property: &MDLMaterialProperty);

        #[method(semantic)]
        pub unsafe fn semantic(&self) -> MDLMaterialSemantic;

        /// Setter for [`semantic`][Self::semantic].
        #[method(setSemantic:)]
        pub unsafe fn setSemantic(&self, semantic: MDLMaterialSemantic);

        #[method(type)]
        pub unsafe fn r#type(&self) -> MDLMaterialPropertyType;

        /// Setter for [`type`][Self::type].
        #[method(setType:)]
        pub unsafe fn setType(&self, r#type: MDLMaterialPropertyType);

        /// See: MDLNamed
        #[method_id(@__method_family Other name)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &NSString);

        #[method_id(@__method_family Other stringValue)]
        pub unsafe fn stringValue(&self) -> Option<Retained<NSString>>;

        /// Setter for [`stringValue`][Self::stringValue].
        #[method(setStringValue:)]
        pub unsafe fn setStringValue(&self, string_value: Option<&NSString>);

        #[method_id(@__method_family Other URLValue)]
        pub unsafe fn URLValue(&self) -> Option<Retained<NSURL>>;

        /// Setter for [`URLValue`][Self::URLValue].
        #[method(setURLValue:)]
        pub unsafe fn setURLValue(&self, url_value: Option<&NSURL>);

        #[method_id(@__method_family Other textureSamplerValue)]
        pub unsafe fn textureSamplerValue(&self) -> Option<Retained<MDLTextureSampler>>;

        /// Setter for [`textureSamplerValue`][Self::textureSamplerValue].
        #[method(setTextureSamplerValue:)]
        pub unsafe fn setTextureSamplerValue(
            &self,
            texture_sampler_value: Option<&MDLTextureSampler>,
        );

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__method_family Other color)]
        pub unsafe fn color(&self) -> Option<Retained<CGColor>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`color`][Self::color].
        #[method(setColor:)]
        pub unsafe fn setColor(&self, color: Option<&CGColor>);

        #[method(floatValue)]
        pub unsafe fn floatValue(&self) -> c_float;

        /// Setter for [`floatValue`][Self::floatValue].
        #[method(setFloatValue:)]
        pub unsafe fn setFloatValue(&self, float_value: c_float);

        #[method(luminance)]
        pub unsafe fn luminance(&self) -> c_float;

        /// Setter for [`luminance`][Self::luminance].
        #[method(setLuminance:)]
        pub unsafe fn setLuminance(&self, luminance: c_float);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLMaterialProperty {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialpropertyconnection?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLMaterialPropertyConnection;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLMaterialPropertyConnection {}

unsafe impl NSObjectProtocol for MDLMaterialPropertyConnection {}

extern_methods!(
    unsafe impl MDLMaterialPropertyConnection {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Connects the output to the input
        #[method_id(@__method_family Init initWithOutput:input:)]
        pub unsafe fn initWithOutput_input(
            this: Allocated<Self>,
            output: &MDLMaterialProperty,
            input: &MDLMaterialProperty,
        ) -> Retained<Self>;

        #[method_id(@__method_family Other output)]
        pub unsafe fn output(&self) -> Option<Retained<MDLMaterialProperty>>;

        #[method_id(@__method_family Other input)]
        pub unsafe fn input(&self) -> Option<Retained<MDLMaterialProperty>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLMaterialPropertyConnection {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialpropertynode?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLMaterialPropertyNode;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLMaterialPropertyNode {}

unsafe impl NSObjectProtocol for MDLMaterialPropertyNode {}

extern_methods!(
    unsafe impl MDLMaterialPropertyNode {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method_id(@__method_family Init initWithInputs:outputs:evaluationFunction:)]
        pub unsafe fn initWithInputs_outputs_evaluationFunction(
            this: Allocated<Self>,
            inputs: &NSArray<MDLMaterialProperty>,
            outputs: &NSArray<MDLMaterialProperty>,
            function: &block2::Block<dyn Fn(NonNull<MDLMaterialPropertyNode>)>,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method(evaluationFunction)]
        pub unsafe fn evaluationFunction(
            &self,
        ) -> NonNull<block2::Block<dyn Fn(NonNull<MDLMaterialPropertyNode>)>>;

        #[cfg(feature = "block2")]
        /// Setter for [`evaluationFunction`][Self::evaluationFunction].
        #[method(setEvaluationFunction:)]
        pub unsafe fn setEvaluationFunction(
            &self,
            evaluation_function: &block2::Block<dyn Fn(NonNull<MDLMaterialPropertyNode>)>,
        );

        #[method_id(@__method_family Other inputs)]
        pub unsafe fn inputs(&self) -> Retained<NSArray<MDLMaterialProperty>>;

        #[method_id(@__method_family Other outputs)]
        pub unsafe fn outputs(&self) -> Retained<NSArray<MDLMaterialProperty>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLMaterialPropertyNode {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// inputs and outputs will contain all of the inputs and outputs
    /// external to the graph, which are all the inputs and outputs not
    /// internally connected to something
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialpropertygraph?language=objc)
    #[unsafe(super(MDLMaterialPropertyNode, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLMaterialPropertyGraph;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLMaterialPropertyGraph {}

unsafe impl NSObjectProtocol for MDLMaterialPropertyGraph {}

extern_methods!(
    unsafe impl MDLMaterialPropertyGraph {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family Init initWithNodes:connections:)]
        pub unsafe fn initWithNodes_connections(
            this: Allocated<Self>,
            nodes: &NSArray<MDLMaterialPropertyNode>,
            connections: &NSArray<MDLMaterialPropertyConnection>,
        ) -> Retained<Self>;

        #[method(evaluate)]
        pub unsafe fn evaluate(&self);

        #[method_id(@__method_family Other nodes)]
        pub unsafe fn nodes(&self) -> Retained<NSArray<MDLMaterialPropertyNode>>;

        #[method_id(@__method_family Other connections)]
        pub unsafe fn connections(&self) -> Retained<NSArray<MDLMaterialPropertyConnection>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MDLMaterialPropertyNode`
    unsafe impl MDLMaterialPropertyGraph {
        #[cfg(feature = "block2")]
        #[method_id(@__method_family Init initWithInputs:outputs:evaluationFunction:)]
        pub unsafe fn initWithInputs_outputs_evaluationFunction(
            this: Allocated<Self>,
            inputs: &NSArray<MDLMaterialProperty>,
            outputs: &NSArray<MDLMaterialProperty>,
            function: &block2::Block<dyn Fn(NonNull<MDLMaterialPropertyNode>)>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLMaterialPropertyGraph {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The base scattering function is Lambertian, with a Blinn-Phong specular response.
    /// Specular power for Blinn-Phong can be derived from the roughness property using
    /// an approximation.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlscatteringfunction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLScatteringFunction;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLScatteringFunction {}

unsafe impl NSObjectProtocol for MDLScatteringFunction {}

extern_methods!(
    unsafe impl MDLScatteringFunction {
        /// See: MDLNamed
        #[method_id(@__method_family Other name)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &NSString);

        #[method_id(@__method_family Other baseColor)]
        pub unsafe fn baseColor(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other emission)]
        pub unsafe fn emission(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other specular)]
        pub unsafe fn specular(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other materialIndexOfRefraction)]
        pub unsafe fn materialIndexOfRefraction(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other interfaceIndexOfRefraction)]
        pub unsafe fn interfaceIndexOfRefraction(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other normal)]
        pub unsafe fn normal(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other ambientOcclusion)]
        pub unsafe fn ambientOcclusion(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other ambientOcclusionScale)]
        pub unsafe fn ambientOcclusionScale(&self) -> Retained<MDLMaterialProperty>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLScatteringFunction {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlphysicallyplausiblescatteringfunction?language=objc)
    #[unsafe(super(MDLScatteringFunction, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLPhysicallyPlausibleScatteringFunction;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLPhysicallyPlausibleScatteringFunction {}

unsafe impl NSObjectProtocol for MDLPhysicallyPlausibleScatteringFunction {}

extern_methods!(
    unsafe impl MDLPhysicallyPlausibleScatteringFunction {
        #[method(version)]
        pub unsafe fn version(&self) -> NSInteger;

        #[method_id(@__method_family Other subsurface)]
        pub unsafe fn subsurface(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other metallic)]
        pub unsafe fn metallic(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other specularAmount)]
        pub unsafe fn specularAmount(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other specularTint)]
        pub unsafe fn specularTint(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other roughness)]
        pub unsafe fn roughness(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other anisotropic)]
        pub unsafe fn anisotropic(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other anisotropicRotation)]
        pub unsafe fn anisotropicRotation(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other sheen)]
        pub unsafe fn sheen(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other sheenTint)]
        pub unsafe fn sheenTint(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other clearcoat)]
        pub unsafe fn clearcoat(&self) -> Retained<MDLMaterialProperty>;

        #[method_id(@__method_family Other clearcoatGloss)]
        pub unsafe fn clearcoatGloss(&self) -> Retained<MDLMaterialProperty>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLPhysicallyPlausibleScatteringFunction {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterialface?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MDLMaterialFace(pub NSUInteger);
impl MDLMaterialFace {
    #[doc(alias = "MDLMaterialFaceFront")]
    pub const Front: Self = Self(0);
    #[doc(alias = "MDLMaterialFaceBack")]
    pub const Back: Self = Self(1);
    #[doc(alias = "MDLMaterialFaceDoubleSided")]
    pub const DoubleSided: Self = Self(2);
}

unsafe impl Encode for MDLMaterialFace {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MDLMaterialFace {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/modelio/mdlmaterial?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MDLMaterial;
);

#[cfg(feature = "MDLTypes")]
unsafe impl MDLNamed for MDLMaterial {}

unsafe impl NSFastEnumeration for MDLMaterial {}

unsafe impl NSObjectProtocol for MDLMaterial {}

extern_methods!(
    unsafe impl MDLMaterial {
        #[method_id(@__method_family Init initWithName:scatteringFunction:)]
        pub unsafe fn initWithName_scatteringFunction(
            this: Allocated<Self>,
            name: &NSString,
            scattering_function: &MDLScatteringFunction,
        ) -> Retained<Self>;

        #[method(setProperty:)]
        pub unsafe fn setProperty(&self, property: &MDLMaterialProperty);

        #[method(removeProperty:)]
        pub unsafe fn removeProperty(&self, property: &MDLMaterialProperty);

        #[method_id(@__method_family Other propertyNamed:)]
        pub unsafe fn propertyNamed(
            &self,
            name: &NSString,
        ) -> Option<Retained<MDLMaterialProperty>>;

        #[method_id(@__method_family Other propertyWithSemantic:)]
        pub unsafe fn propertyWithSemantic(
            &self,
            semantic: MDLMaterialSemantic,
        ) -> Option<Retained<MDLMaterialProperty>>;

        #[method_id(@__method_family Other propertiesWithSemantic:)]
        pub unsafe fn propertiesWithSemantic(
            &self,
            semantic: MDLMaterialSemantic,
        ) -> Retained<NSArray<MDLMaterialProperty>>;

        #[method(removeAllProperties)]
        pub unsafe fn removeAllProperties(&self);

        #[cfg(feature = "MDLAssetResolver")]
        #[method(resolveTexturesWithResolver:)]
        pub unsafe fn resolveTexturesWithResolver(
            &self,
            resolver: &ProtocolObject<dyn MDLAssetResolver>,
        );

        #[cfg(feature = "MDLAssetResolver")]
        #[method(loadTexturesUsingResolver:)]
        pub unsafe fn loadTexturesUsingResolver(
            &self,
            resolver: &ProtocolObject<dyn MDLAssetResolver>,
        );

        #[method_id(@__method_family Other scatteringFunction)]
        pub unsafe fn scatteringFunction(&self) -> Retained<MDLScatteringFunction>;

        /// See: MDLNamed
        #[method_id(@__method_family Other name)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &NSString);

        #[method_id(@__method_family Other baseMaterial)]
        pub unsafe fn baseMaterial(&self) -> Option<Retained<MDLMaterial>>;

        /// Setter for [`baseMaterial`][Self::baseMaterial].
        #[method(setBaseMaterial:)]
        pub unsafe fn setBaseMaterial(&self, base_material: Option<&MDLMaterial>);

        #[method_id(@__method_family Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(
            &self,
            idx: NSUInteger,
        ) -> Option<Retained<MDLMaterialProperty>>;

        #[method_id(@__method_family Other objectForKeyedSubscript:)]
        pub unsafe fn objectForKeyedSubscript(
            &self,
            name: &NSString,
        ) -> Option<Retained<MDLMaterialProperty>>;

        #[method(count)]
        pub unsafe fn count(&self) -> NSUInteger;

        #[method(materialFace)]
        pub unsafe fn materialFace(&self) -> MDLMaterialFace;

        /// Setter for [`materialFace`][Self::materialFace].
        #[method(setMaterialFace:)]
        pub unsafe fn setMaterialFace(&self, material_face: MDLMaterialFace);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MDLMaterial {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
