//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-location")]
use objc2_core_location::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// A string that identifies the activation payload’s error domain.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appclip/apactivationpayloaderrordomain?language=objc)
    pub static APActivationPayloadErrorDomain: &'static NSErrorDomain;
}

/// Error codes that an App Clip activation payload returns.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/appclip/apactivationpayloaderrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct APActivationPayloadErrorCode(pub NSInteger);
impl APActivationPayloadErrorCode {
    /// The user denied location access, or the source of the App Clip
    /// invocation wasn’t from an NFC tag or visual code.
    #[doc(alias = "APActivationPayloadErrorCodeDisallowed")]
    pub const Disallowed: Self = Self(1);
    /// The provided URL doesn’t match the registered App Clip URL.
    #[doc(alias = "APActivationPayloadErrorCodeDoesNotMatch")]
    pub const DoesNotMatch: Self = Self(2);
}

unsafe impl Encode for APActivationPayloadErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for APActivationPayloadErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Information that’s passed to an App Clip on launch.
    ///
    /// When users launch an App Clip, the platform passes an activation payload to
    /// the App Clip as part of an
    /// <doc
    /// ://com.apple.documentation/documentation/foundation/nsuseractivity>
    /// object. When the App Clip receives the payload, confirm the user’s physical
    /// location at the time of the invocation.
    ///
    /// For more information, see
    /// <doc
    /// :responding-to-invocations>.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/appclip/apactivationpayload?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct APActivationPayload;
);

unsafe impl NSCoding for APActivationPayload {}

unsafe impl NSCopying for APActivationPayload {}

unsafe impl CopyingHelper for APActivationPayload {
    type Result = Self;
}

unsafe impl NSObjectProtocol for APActivationPayload {}

unsafe impl NSSecureCoding for APActivationPayload {}

impl APActivationPayload {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// The URL of the link that launched the App Clip.
        ///
        /// Use `url` to retrieve data that’s passed to an App Clip on launch, and use
        /// the data to update the user interface of the App Clip.
        ///
        /// The value of `url` is the same as the
        /// <doc
        /// ://com.apple.documentation/documentation/foundation/nsuseractivity>
        /// <doc
        /// ://com.apple.documentation/documentation/foundation/nsuseractivity/1418086-webpageurl>
        /// property. If you don’t need to verify the user’s location when they launch
        /// your App Clip, use `webpageURL` instead.
        ///
        /// For more information, see
        /// <doc
        /// :responding-to-invocations>.
        #[unsafe(method(URL))]
        #[unsafe(method_family = none)]
        pub unsafe fn URL(&self) -> Option<Retained<NSURL>>;

        #[cfg(all(feature = "block2", feature = "objc2-core-location"))]
        /// Checks whether an App Clip invocation happened at an expected physical
        /// location.
        ///
        /// - Parameters:
        /// - region: The expected physical location at the time of the App Clip
        /// invocation.
        /// - completionHandler: A closure called when the platform confirms the
        /// expected physical location at the time of the App Clip invocation.
        ///
        /// The closure takes the following parameters:
        ///
        /// - term `inRegion`: A Boolean value that indicates whether the App Clip
        /// invocation happened at the expected physical location.
        /// - term `error`: The error object that describes why the platform
        /// couldn't confirm the user's physical location.
        ///
        /// This parameter is `nil` if the platform was able to determine the user's
        /// physical location at the time of the App Clip invocation.
        ///
        /// Confirm the user's location at the time of the App Clip invocation if the
        /// App Clip is associated with a physical location. The request to confirm the
        /// location fails with ``App_clips/Apactivationpayloaderror/disallowed`` if the
        /// source of the invocation isn't an NFC tag or visual code.
        ///
        /// For the platform to accept the request to confirm the user's location, you
        /// need to make modifications to the `Info.plist` file of the App Clip. For
        /// more information, see
        /// <doc
        /// :enabling-notifications-in-app-clips>.
        ///
        /// - Note: Functionality to confirm the user's location is only available to
        /// App Clips. For the full app, request permission to access the user's
        /// location and make use of the
        /// <doc
        /// ://com.apple.documentation/documentation/corelocation> framework. For
        /// more information, see
        /// <doc
        /// ://com.apple.documentation/documentation/corelocation/getting_the_current_location_of_a_device>.
        #[unsafe(method(confirmAcquiredInRegion:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn confirmAcquiredInRegion_completionHandler(
            &self,
            region: &CLRegion,
            completion_handler: &block2::DynBlock<dyn Fn(Bool, *mut NSError)>,
        );
    );
}
