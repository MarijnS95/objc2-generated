//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/insetmessageattributeintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    pub struct INSetMessageAttributeIntent;
);

#[cfg(feature = "INIntent")]
unsafe impl NSCoding for INSetMessageAttributeIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSCopying for INSetMessageAttributeIntent {}

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INSetMessageAttributeIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
unsafe impl NSObjectProtocol for INSetMessageAttributeIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSSecureCoding for INSetMessageAttributeIntent {}

#[cfg(feature = "INIntent")]
impl INSetMessageAttributeIntent {
    extern_methods!(
        #[cfg(feature = "INMessageAttribute")]
        #[unsafe(method(initWithIdentifiers:attribute:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifiers_attribute(
            this: Allocated<Self>,
            identifiers: Option<&NSArray<NSString>>,
            attribute: INMessageAttribute,
        ) -> Retained<Self>;

        #[unsafe(method(identifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifiers(&self) -> Option<Retained<NSArray<NSString>>>;

        #[cfg(feature = "INMessageAttribute")]
        #[unsafe(method(attribute))]
        #[unsafe(method_family = none)]
        pub unsafe fn attribute(&self) -> INMessageAttribute;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INSetMessageAttributeIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INSetMessageAttributeIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/insetmessageattributeintenthandling?language=objc)
    pub unsafe trait INSetMessageAttributeIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INSetMessageAttributeIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INSetMessageAttributeIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INSetMessageAttributeIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INSetMessageAttributeIntentResponse
        #[unsafe(method(handleSetMessageAttribute:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleSetMessageAttribute_completion(
            &self,
            intent: &INSetMessageAttributeIntent,
            completion: &block2::Block<dyn Fn(NonNull<INSetMessageAttributeIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INSetMessageAttributeIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INSetMessageAttributeIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INSetMessageAttributeIntentResponse
        #[optional]
        #[unsafe(method(confirmSetMessageAttribute:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmSetMessageAttribute_completion(
            &self,
            intent: &INSetMessageAttributeIntent,
            completion: &block2::Block<dyn Fn(NonNull<INSetMessageAttributeIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INMessageAttributeResolutionResult",
            feature = "block2"
        ))]
        /// Resolution methods - Determine if this intent is ready for the next step (confirmation)
        ///
        /// Called to make sure the app extension is capable of handling this intent in its current form. This method is for validating if the intent needs any further fleshing out.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INIntentResolutionResult for the parameter being resolved
        ///
        ///
        /// See: INIntentResolutionResult
        #[optional]
        #[unsafe(method(resolveAttributeForSetMessageAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveAttributeForSetMessageAttribute_withCompletion(
            &self,
            intent: &INSetMessageAttributeIntent,
            completion: &block2::Block<dyn Fn(NonNull<INMessageAttributeResolutionResult>)>,
        );
    }
);
