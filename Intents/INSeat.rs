//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/inseat?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct INSeat;
);

unsafe impl NSCoding for INSeat {}

unsafe impl NSCopying for INSeat {}

unsafe impl CopyingHelper for INSeat {
    type Result = Self;
}

unsafe impl NSObjectProtocol for INSeat {}

unsafe impl NSSecureCoding for INSeat {}

impl INSeat {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(initWithSeatSection:seatRow:seatNumber:seatingType:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSeatSection_seatRow_seatNumber_seatingType(
            this: Allocated<Self>,
            seat_section: Option<&NSString>,
            seat_row: Option<&NSString>,
            seat_number: Option<&NSString>,
            seating_type: Option<&NSString>,
        ) -> Retained<Self>;

        #[unsafe(method(seatSection))]
        #[unsafe(method_family = none)]
        pub unsafe fn seatSection(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(seatRow))]
        #[unsafe(method_family = none)]
        pub unsafe fn seatRow(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(seatNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn seatNumber(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(seatingType))]
        #[unsafe(method_family = none)]
        pub unsafe fn seatingType(&self) -> Option<Retained<NSString>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl INSeat {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
