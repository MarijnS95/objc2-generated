//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/indeletetasksintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    #[deprecated = "INDeleteTasksIntent is deprecated. There is no replacement."]
    pub struct INDeleteTasksIntent;
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCoding for INDeleteTasksIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCopying for INDeleteTasksIntent {}
);

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INDeleteTasksIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INDeleteTasksIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSSecureCoding for INDeleteTasksIntent {}
);

#[cfg(feature = "INIntent")]
impl INDeleteTasksIntent {
    extern_methods!(
        #[cfg(all(feature = "INTask", feature = "INTaskList"))]
        #[deprecated = "INDeleteTasksIntent is deprecated. There is no replacement."]
        #[unsafe(method(initWithTaskList:tasks:all:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTaskList_tasks_all(
            this: Allocated<Self>,
            task_list: Option<&INTaskList>,
            tasks: Option<&NSArray<INTask>>,
            all: Option<&NSNumber>,
        ) -> Retained<Self>;

        #[cfg(feature = "INTaskList")]
        #[deprecated = "INDeleteTasksIntent is deprecated. There is no replacement."]
        #[unsafe(method(taskList))]
        #[unsafe(method_family = none)]
        pub unsafe fn taskList(&self) -> Option<Retained<INTaskList>>;

        #[cfg(feature = "INTask")]
        #[deprecated = "INDeleteTasksIntent is deprecated. There is no replacement."]
        #[unsafe(method(tasks))]
        #[unsafe(method_family = none)]
        pub unsafe fn tasks(&self) -> Option<Retained<NSArray<INTask>>>;

        #[deprecated = "INDeleteTasksIntent is deprecated. There is no replacement."]
        #[unsafe(method(all))]
        #[unsafe(method_family = none)]
        pub unsafe fn all(&self) -> Option<Retained<NSNumber>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INDeleteTasksIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INDeleteTasksIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/indeletetasksintenthandling?language=objc)
    #[deprecated = "INDeleteTasksIntentHandling is deprecated. There is no replacement."]
    pub unsafe trait INDeleteTasksIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INDeleteTasksIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INDeleteTasksIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INDeleteTasksIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INDeleteTasksIntentResponse
        #[deprecated = "INDeleteTasksIntentHandling is deprecated. There is no replacement."]
        #[unsafe(method(handleDeleteTasks:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleDeleteTasks_completion(
            &self,
            intent: &INDeleteTasksIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INDeleteTasksIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INDeleteTasksIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INDeleteTasksIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INDeleteTasksIntentResponse
        #[deprecated = "INDeleteTasksIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(confirmDeleteTasks:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmDeleteTasks_completion(
            &self,
            intent: &INDeleteTasksIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INDeleteTasksIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INDeleteTasksTaskListResolutionResult",
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTaskListResolutionResult",
            feature = "block2"
        ))]
        /// Resolution methods - Determine if this intent is ready for the next step (confirmation)
        ///
        /// Called to make sure the app extension is capable of handling this intent in its current form. This method is for validating if the intent needs any further fleshing out.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INIntentResolutionResult for the parameter being resolved
        ///
        ///
        /// See: INIntentResolutionResult
        #[deprecated = "INDeleteTasksIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(resolveTaskListForDeleteTasks:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTaskListForDeleteTasks_withCompletion(
            &self,
            intent: &INDeleteTasksIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INDeleteTasksTaskListResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INDeleteTasksTaskResolutionResult",
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTaskResolutionResult",
            feature = "block2"
        ))]
        #[deprecated = "INDeleteTasksIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(resolveTasksForDeleteTasks:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTasksForDeleteTasks_withCompletion(
            &self,
            intent: &INDeleteTasksIntent,
            completion: &block2::DynBlock<
                dyn Fn(NonNull<NSArray<INDeleteTasksTaskResolutionResult>>),
            >,
        );
    }
);
