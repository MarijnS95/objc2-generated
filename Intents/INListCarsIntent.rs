//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/inlistcarsintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    pub struct INListCarsIntent;
);

#[cfg(feature = "INIntent")]
unsafe impl NSCoding for INListCarsIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSCopying for INListCarsIntent {}

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INListCarsIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
unsafe impl NSObjectProtocol for INListCarsIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSSecureCoding for INListCarsIntent {}

#[cfg(feature = "INIntent")]
impl INListCarsIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INListCarsIntent {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INListCarsIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/inlistcarsintenthandling?language=objc)
    pub unsafe trait INListCarsIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INListCarsIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INListCarsIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INListCarsIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INListCarsIntentResponse
        #[unsafe(method(handleListCars:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleListCars_completion(
            &self,
            intent: &INListCarsIntent,
            completion: &block2::Block<dyn Fn(NonNull<INListCarsIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INListCarsIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INListCarsIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INListCarsIntentResponse
        #[optional]
        #[unsafe(method(confirmListCars:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmListCars_completion(
            &self,
            intent: &INListCarsIntent,
            completion: &block2::Block<dyn Fn(NonNull<INListCarsIntentResponse>)>,
        );
    }
);
