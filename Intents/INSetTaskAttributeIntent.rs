//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/insettaskattributeintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    pub struct INSetTaskAttributeIntent;
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCoding for INSetTaskAttributeIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCopying for INSetTaskAttributeIntent {}
);

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INSetTaskAttributeIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INSetTaskAttributeIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSSecureCoding for INSetTaskAttributeIntent {}
);

#[cfg(feature = "INIntent")]
impl INSetTaskAttributeIntent {
    extern_methods!(
        #[cfg(all(
            feature = "INSpatialEventTrigger",
            feature = "INSpeakableString",
            feature = "INTask",
            feature = "INTaskPriority",
            feature = "INTaskStatus",
            feature = "INTemporalEventTrigger"
        ))]
        #[unsafe(method(initWithTargetTask:taskTitle:status:priority:spatialEventTrigger:temporalEventTrigger:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetTask_taskTitle_status_priority_spatialEventTrigger_temporalEventTrigger(
            this: Allocated<Self>,
            target_task: Option<&INTask>,
            task_title: Option<&INSpeakableString>,
            status: INTaskStatus,
            priority: INTaskPriority,
            spatial_event_trigger: Option<&INSpatialEventTrigger>,
            temporal_event_trigger: Option<&INTemporalEventTrigger>,
        ) -> Retained<Self>;

        #[cfg(feature = "INTask")]
        #[unsafe(method(targetTask))]
        #[unsafe(method_family = none)]
        pub unsafe fn targetTask(&self) -> Option<Retained<INTask>>;

        #[cfg(feature = "INSpeakableString")]
        #[unsafe(method(taskTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn taskTitle(&self) -> Option<Retained<INSpeakableString>>;

        #[cfg(feature = "INTaskStatus")]
        #[unsafe(method(status))]
        #[unsafe(method_family = none)]
        pub unsafe fn status(&self) -> INTaskStatus;

        #[cfg(feature = "INTaskPriority")]
        #[unsafe(method(priority))]
        #[unsafe(method_family = none)]
        pub unsafe fn priority(&self) -> INTaskPriority;

        #[cfg(feature = "INSpatialEventTrigger")]
        #[unsafe(method(spatialEventTrigger))]
        #[unsafe(method_family = none)]
        pub unsafe fn spatialEventTrigger(&self) -> Option<Retained<INSpatialEventTrigger>>;

        #[cfg(feature = "INTemporalEventTrigger")]
        #[unsafe(method(temporalEventTrigger))]
        #[unsafe(method_family = none)]
        pub unsafe fn temporalEventTrigger(&self) -> Option<Retained<INTemporalEventTrigger>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INSetTaskAttributeIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INSetTaskAttributeIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/insettaskattributeintenthandling?language=objc)
    pub unsafe trait INSetTaskAttributeIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INSetTaskAttributeIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INSetTaskAttributeIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INSetTaskAttributeIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INSetTaskAttributeIntentResponse
        #[unsafe(method(handleSetTaskAttribute:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleSetTaskAttribute_completion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INSetTaskAttributeIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INSetTaskAttributeIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INSetTaskAttributeIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INSetTaskAttributeIntentResponse
        #[optional]
        #[unsafe(method(confirmSetTaskAttribute:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmSetTaskAttribute_completion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INSetTaskAttributeIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTaskResolutionResult",
            feature = "block2"
        ))]
        /// Resolution methods - Determine if this intent is ready for the next step (confirmation)
        ///
        /// Called to make sure the app extension is capable of handling this intent in its current form. This method is for validating if the intent needs any further fleshing out.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INIntentResolutionResult for the parameter being resolved
        ///
        ///
        /// See: INIntentResolutionResult
        #[optional]
        #[unsafe(method(resolveTargetTaskForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTargetTaskForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INTaskResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INSpeakableStringResolutionResult",
            feature = "block2"
        ))]
        #[optional]
        #[unsafe(method(resolveTaskTitleForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTaskTitleForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INSpeakableStringResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTaskStatusResolutionResult",
            feature = "block2"
        ))]
        #[optional]
        #[unsafe(method(resolveStatusForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveStatusForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INTaskStatusResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTaskPriorityResolutionResult",
            feature = "block2"
        ))]
        #[optional]
        #[unsafe(method(resolvePriorityForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolvePriorityForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INTaskPriorityResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INSpatialEventTriggerResolutionResult",
            feature = "block2"
        ))]
        #[optional]
        #[unsafe(method(resolveSpatialEventTriggerForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveSpatialEventTriggerForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INSpatialEventTriggerResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INTemporalEventTriggerResolutionResult",
            feature = "block2"
        ))]
        #[deprecated = "resolveTemporalEventTriggerForSetTaskAttribute:withCompletion: is deprecated. Use resolveTemporalEventTriggerForSetTaskAttribute:completion: instead"]
        #[optional]
        #[unsafe(method(resolveTemporalEventTriggerForSetTaskAttribute:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTemporalEventTriggerForSetTaskAttribute_withCompletion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INTemporalEventTriggerResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INSetTaskAttributeTemporalEventTriggerResolutionResult",
            feature = "INTemporalEventTriggerResolutionResult",
            feature = "block2"
        ))]
        #[optional]
        #[unsafe(method(resolveTemporalEventTriggerForSetTaskAttribute:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTemporalEventTriggerForSetTaskAttribute_completion(
            &self,
            intent: &INSetTaskAttributeIntent,
            completion: &block2::DynBlock<
                dyn Fn(NonNull<INSetTaskAttributeTemporalEventTriggerResolutionResult>),
            >,
        );
    }
);
