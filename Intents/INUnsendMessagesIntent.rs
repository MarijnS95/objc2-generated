//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/inunsendmessagesintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    pub struct INUnsendMessagesIntent;
);

#[cfg(feature = "INIntent")]
unsafe impl NSCoding for INUnsendMessagesIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSCopying for INUnsendMessagesIntent {}

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INUnsendMessagesIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
unsafe impl NSObjectProtocol for INUnsendMessagesIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSSecureCoding for INUnsendMessagesIntent {}

#[cfg(feature = "INIntent")]
impl INUnsendMessagesIntent {
    extern_methods!(
        #[unsafe(method(initWithMessageIdentifiers:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithMessageIdentifiers(
            this: Allocated<Self>,
            message_identifiers: Option<&NSArray<NSString>>,
        ) -> Retained<Self>;

        #[unsafe(method(messageIdentifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn messageIdentifiers(&self) -> Option<Retained<NSArray<NSString>>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INUnsendMessagesIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INUnsendMessagesIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/inunsendmessagesintenthandling?language=objc)
    pub unsafe trait INUnsendMessagesIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INUnsendMessagesIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INUnsendMessagesIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INUnsendMessagesIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INUnsendMessagesIntentResponse
        #[unsafe(method(handleUnsendMessages:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleUnsendMessages_completion(
            &self,
            intent: &INUnsendMessagesIntent,
            completion: &block2::Block<dyn Fn(NonNull<INUnsendMessagesIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "INUnsendMessagesIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INUnsendMessagesIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INUnsendMessagesIntentResponse
        #[optional]
        #[unsafe(method(confirmUnsendMessages:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmUnsendMessages_completion(
            &self,
            intent: &INUnsendMessagesIntent,
            completion: &block2::Block<dyn Fn(NonNull<INUnsendMessagesIntentResponse>)>,
        );
    }
);
