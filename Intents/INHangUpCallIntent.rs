//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/inhangupcallintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    pub struct INHangUpCallIntent;
);

#[cfg(feature = "INIntent")]
unsafe impl NSCoding for INHangUpCallIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSCopying for INHangUpCallIntent {}

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INHangUpCallIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
unsafe impl NSObjectProtocol for INHangUpCallIntent {}

#[cfg(feature = "INIntent")]
unsafe impl NSSecureCoding for INHangUpCallIntent {}

#[cfg(feature = "INIntent")]
impl INHangUpCallIntent {
    extern_methods!(
        #[unsafe(method(initWithCallIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCallIdentifier(
            this: Allocated<Self>,
            call_identifier: Option<&NSString>,
        ) -> Retained<Self>;

        #[unsafe(method(callIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn callIdentifier(&self) -> Option<Retained<NSString>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INHangUpCallIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INHangUpCallIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/inhangupcallintenthandling?language=objc)
    pub unsafe trait INHangUpCallIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INHangUpCallIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INHangUpCallIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INHangUpCallIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INHangUpCallIntentResponse
        #[unsafe(method(handleHangUpCall:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleHangUpCall_completion(
            &self,
            intent: &INHangUpCallIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INHangUpCallIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INHangUpCallIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INHangUpCallIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INHangUpCallIntentResponse
        #[optional]
        #[unsafe(method(confirmHangUpCall:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmHangUpCall_completion(
            &self,
            intent: &INHangUpCallIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INHangUpCallIntentResponse>)>,
        );
    }
);
