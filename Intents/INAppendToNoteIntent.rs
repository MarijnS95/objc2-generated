//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intents/inappendtonoteintent?language=objc)
    #[unsafe(super(INIntent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "INIntent")]
    #[deprecated = "INAppendToNoteIntent is deprecated. There is no replacement."]
    pub struct INAppendToNoteIntent;
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCoding for INAppendToNoteIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSCopying for INAppendToNoteIntent {}
);

#[cfg(feature = "INIntent")]
unsafe impl CopyingHelper for INAppendToNoteIntent {
    type Result = Self;
}

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INAppendToNoteIntent {}
);

#[cfg(feature = "INIntent")]
extern_conformance!(
    unsafe impl NSSecureCoding for INAppendToNoteIntent {}
);

#[cfg(feature = "INIntent")]
impl INAppendToNoteIntent {
    extern_methods!(
        #[cfg(all(feature = "INNote", feature = "INNoteContent"))]
        #[deprecated = "INAppendToNoteIntent is deprecated. There is no replacement."]
        #[unsafe(method(initWithTargetNote:content:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetNote_content(
            this: Allocated<Self>,
            target_note: Option<&INNote>,
            content: Option<&INNoteContent>,
        ) -> Retained<Self>;

        #[cfg(feature = "INNote")]
        #[deprecated = "INAppendToNoteIntent is deprecated. There is no replacement."]
        #[unsafe(method(targetNote))]
        #[unsafe(method_family = none)]
        pub unsafe fn targetNote(&self) -> Option<Retained<INNote>>;

        #[cfg(feature = "INNoteContent")]
        #[deprecated = "INAppendToNoteIntent is deprecated. There is no replacement."]
        #[unsafe(method(content))]
        #[unsafe(method_family = none)]
        pub unsafe fn content(&self) -> Option<Retained<INNoteContent>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "INIntent")]
impl INAppendToNoteIntent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol to declare support for handling an INAppendToNoteIntent. By implementing this protocol, a class can provide logic for resolving, confirming and handling the intent.
    ///
    /// The minimum requirement for an implementing class is that it should be able to handle the intent. The resolution and confirmation methods are optional. The handling method is always called last, after resolving and confirming the intent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/inappendtonoteintenthandling?language=objc)
    #[deprecated = "INAppendToNoteIntentHandling is deprecated. There is no replacement."]
    pub unsafe trait INAppendToNoteIntentHandling: NSObjectProtocol {
        #[cfg(all(
            feature = "INAppendToNoteIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Handling method - Execute the task represented by the INAppendToNoteIntent that's passed in
        ///
        /// Called to actually execute the intent. The app must return a response for this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response handling block takes a INAppendToNoteIntentResponse containing the details of the result of having executed the intent
        ///
        ///
        /// See: INAppendToNoteIntentResponse
        #[deprecated = "INAppendToNoteIntentHandling is deprecated. There is no replacement."]
        #[unsafe(method(handleAppendToNote:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn handleAppendToNote_completion(
            &self,
            intent: &INAppendToNoteIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INAppendToNoteIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INAppendToNoteIntentResponse",
            feature = "INIntent",
            feature = "INIntentResponse",
            feature = "block2"
        ))]
        /// Confirmation method - Validate that this intent is ready for the next step (i.e. handling)
        ///
        /// Called prior to asking the app to handle the intent. The app should return a response object that contains additional information about the intent, which may be relevant for the system to show the user prior to handling. If unimplemented, the system will assume the intent is valid following resolution, and will assume there is no additional information relevant to this intent.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INAppendToNoteIntentResponse containing additional details about the intent that may be relevant for the system to show the user prior to handling.
        ///
        ///
        /// See: INAppendToNoteIntentResponse
        #[deprecated = "INAppendToNoteIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(confirmAppendToNote:completion:))]
        #[unsafe(method_family = none)]
        unsafe fn confirmAppendToNote_completion(
            &self,
            intent: &INAppendToNoteIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INAppendToNoteIntentResponse>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INNoteResolutionResult",
            feature = "block2"
        ))]
        /// Resolution methods - Determine if this intent is ready for the next step (confirmation)
        ///
        /// Called to make sure the app extension is capable of handling this intent in its current form. This method is for validating if the intent needs any further fleshing out.
        ///
        ///
        /// Parameter `intent`: The input intent
        ///
        /// Parameter `completion`: The response block contains an INIntentResolutionResult for the parameter being resolved
        ///
        ///
        /// See: INIntentResolutionResult
        #[deprecated = "INAppendToNoteIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(resolveTargetNoteForAppendToNote:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveTargetNoteForAppendToNote_withCompletion(
            &self,
            intent: &INAppendToNoteIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INNoteResolutionResult>)>,
        );

        #[cfg(all(
            feature = "INIntent",
            feature = "INIntentResolutionResult",
            feature = "INNoteContentResolutionResult",
            feature = "block2"
        ))]
        #[deprecated = "INAppendToNoteIntentHandling is deprecated. There is no replacement."]
        #[optional]
        #[unsafe(method(resolveContentForAppendToNote:withCompletion:))]
        #[unsafe(method_family = none)]
        unsafe fn resolveContentForAppendToNote_withCompletion(
            &self,
            intent: &INAppendToNoteIntent,
            completion: &block2::DynBlock<dyn Fn(NonNull<INNoteContentResolutionResult>)>,
        );
    }
);
