//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicplaybackstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPMusicPlaybackState(pub NSInteger);
impl MPMusicPlaybackState {
    #[doc(alias = "MPMusicPlaybackStateStopped")]
    pub const Stopped: Self = Self(0);
    #[doc(alias = "MPMusicPlaybackStatePlaying")]
    pub const Playing: Self = Self(1);
    #[doc(alias = "MPMusicPlaybackStatePaused")]
    pub const Paused: Self = Self(2);
    #[doc(alias = "MPMusicPlaybackStateInterrupted")]
    pub const Interrupted: Self = Self(3);
    #[doc(alias = "MPMusicPlaybackStateSeekingForward")]
    pub const SeekingForward: Self = Self(4);
    #[doc(alias = "MPMusicPlaybackStateSeekingBackward")]
    pub const SeekingBackward: Self = Self(5);
}

unsafe impl Encode for MPMusicPlaybackState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MPMusicPlaybackState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicrepeatmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPMusicRepeatMode(pub NSInteger);
impl MPMusicRepeatMode {
    #[doc(alias = "MPMusicRepeatModeDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "MPMusicRepeatModeNone")]
    pub const None: Self = Self(1);
    #[doc(alias = "MPMusicRepeatModeOne")]
    pub const One: Self = Self(2);
    #[doc(alias = "MPMusicRepeatModeAll")]
    pub const All: Self = Self(3);
}

unsafe impl Encode for MPMusicRepeatMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MPMusicRepeatMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicshufflemode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPMusicShuffleMode(pub NSInteger);
impl MPMusicShuffleMode {
    #[doc(alias = "MPMusicShuffleModeDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "MPMusicShuffleModeOff")]
    pub const Off: Self = Self(1);
    #[doc(alias = "MPMusicShuffleModeSongs")]
    pub const Songs: Self = Self(2);
    #[doc(alias = "MPMusicShuffleModeAlbums")]
    pub const Albums: Self = Self(3);
}

unsafe impl Encode for MPMusicShuffleMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MPMusicShuffleMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpsystemmusicplayercontroller?language=objc)
    pub unsafe trait MPSystemMusicPlayerController: NSObjectProtocol {
        #[cfg(feature = "MPMusicPlayerQueueDescriptor")]
        /// Switches to Music to play the content provided by the queue descriptor.
        #[method(openToPlayQueueDescriptor:)]
        #[unsafe(method_family = none)]
        unsafe fn openToPlayQueueDescriptor(&self, queue_descriptor: &MPMusicPlayerQueueDescriptor);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPMusicPlayerController;
);

#[cfg(feature = "MPMediaPlayback")]
unsafe impl MPMediaPlayback for MPMusicPlayerController {}

unsafe impl NSObjectProtocol for MPMusicPlayerController {}

extern_methods!(
    unsafe impl MPMusicPlayerController {
        /// Playing items with applicationMusicPlayer does not affect Music's playback state.
        #[method(applicationMusicPlayer)]
        #[unsafe(method_family = none)]
        pub unsafe fn applicationMusicPlayer() -> Retained<MPMusicPlayerController>;

        #[cfg(feature = "MPMusicPlayerApplicationController")]
        /// Similar to applicationMusicPlayer, but allows direct manipulation of the queue.
        #[method(applicationQueuePlayer)]
        #[unsafe(method_family = none)]
        pub unsafe fn applicationQueuePlayer() -> Retained<MPMusicPlayerApplicationController>;

        /// Playing media items with the systemMusicPlayer will replace the user's current Music state.
        #[method(systemMusicPlayer)]
        #[unsafe(method_family = none)]
        pub unsafe fn systemMusicPlayer() -> Retained<MPMusicPlayerController>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(playbackState)]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackState(&self) -> MPMusicPlaybackState;

        #[method(repeatMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn repeatMode(&self) -> MPMusicRepeatMode;

        /// Setter for [`repeatMode`][Self::repeatMode].
        #[method(setRepeatMode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setRepeatMode(&self, repeat_mode: MPMusicRepeatMode);

        #[method(shuffleMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn shuffleMode(&self) -> MPMusicShuffleMode;

        /// Setter for [`shuffleMode`][Self::shuffleMode].
        #[method(setShuffleMode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setShuffleMode(&self, shuffle_mode: MPMusicShuffleMode);

        #[deprecated = "Use MPVolumeView for volume control."]
        #[method(volume)]
        #[unsafe(method_family = none)]
        pub unsafe fn volume(&self) -> c_float;

        /// Setter for [`volume`][Self::volume].
        #[deprecated = "Use MPVolumeView for volume control."]
        #[method(setVolume:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[cfg(all(feature = "MPMediaEntity", feature = "MPMediaItem"))]
        #[method(nowPlayingItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn nowPlayingItem(&self) -> Option<Retained<MPMediaItem>>;

        #[cfg(all(feature = "MPMediaEntity", feature = "MPMediaItem"))]
        /// Setter for [`nowPlayingItem`][Self::nowPlayingItem].
        #[method(setNowPlayingItem:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setNowPlayingItem(&self, now_playing_item: Option<&MPMediaItem>);

        #[method(indexOfNowPlayingItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn indexOfNowPlayingItem(&self) -> NSUInteger;

        #[cfg(feature = "MPMediaQuery")]
        #[method(setQueueWithQuery:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setQueueWithQuery(&self, query: &MPMediaQuery);

        #[cfg(all(feature = "MPMediaEntity", feature = "MPMediaItemCollection"))]
        #[method(setQueueWithItemCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setQueueWithItemCollection(&self, item_collection: &MPMediaItemCollection);

        #[method(setQueueWithStoreIDs:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setQueueWithStoreIDs(&self, store_i_ds: &NSArray<NSString>);

        #[cfg(feature = "MPMusicPlayerQueueDescriptor")]
        #[method(setQueueWithDescriptor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setQueueWithDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "MPMusicPlayerQueueDescriptor")]
        #[method(prependQueueDescriptor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn prependQueueDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "MPMusicPlayerQueueDescriptor")]
        #[method(appendQueueDescriptor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn appendQueueDescriptor(&self, descriptor: &MPMusicPlayerQueueDescriptor);

        #[cfg(feature = "block2")]
        #[method(prepareToPlayWithCompletionHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareToPlayWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[method(skipToNextItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn skipToNextItem(&self);

        #[method(skipToBeginning)]
        #[unsafe(method_family = none)]
        pub unsafe fn skipToBeginning(&self);

        #[method(skipToPreviousItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn skipToPreviousItem(&self);

        #[method(beginGeneratingPlaybackNotifications)]
        #[unsafe(method_family = none)]
        pub unsafe fn beginGeneratingPlaybackNotifications(&self);

        #[method(endGeneratingPlaybackNotifications)]
        #[unsafe(method_family = none)]
        pub unsafe fn endGeneratingPlaybackNotifications(&self);

        #[deprecated]
        #[method(iPodMusicPlayer)]
        #[unsafe(method_family = none)]
        pub unsafe fn iPodMusicPlayer() -> Retained<MPMusicPlayerController>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollerplaybackstatedidchangenotification?language=objc)
    pub static MPMusicPlayerControllerPlaybackStateDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollernowplayingitemdidchangenotification?language=objc)
    pub static MPMusicPlayerControllerNowPlayingItemDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmusicplayercontrollervolumedidchangenotification?language=objc)
    pub static MPMusicPlayerControllerVolumeDidChangeNotification: &'static NSNotificationName;
}
