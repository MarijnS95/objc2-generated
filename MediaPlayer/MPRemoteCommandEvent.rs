//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpremotecommandevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPRemoteCommandEvent;
);

unsafe impl NSObjectProtocol for MPRemoteCommandEvent {}

extern_methods!(
    unsafe impl MPRemoteCommandEvent {
        #[cfg(feature = "MPRemoteCommand")]
        /// The command that sent the event.
        #[unsafe(method_family(none))]
        #[method_id(command)]
        pub unsafe fn command(&self) -> Retained<MPRemoteCommand>;

        /// The time when the event occurred.
        #[method(timestamp)]
        pub unsafe fn timestamp(&self) -> NSTimeInterval;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPRemoteCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpskipintervalcommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSkipIntervalCommandEvent;
);

unsafe impl NSObjectProtocol for MPSkipIntervalCommandEvent {}

extern_methods!(
    unsafe impl MPSkipIntervalCommandEvent {
        /// The chosen interval for this skip command event.
        #[method(interval)]
        pub unsafe fn interval(&self) -> NSTimeInterval;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSkipIntervalCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpseekcommandeventtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSeekCommandEventType(pub NSUInteger);
impl MPSeekCommandEventType {
    #[doc(alias = "MPSeekCommandEventTypeBeginSeeking")]
    pub const BeginSeeking: Self = Self(0);
    #[doc(alias = "MPSeekCommandEventTypeEndSeeking")]
    pub const EndSeeking: Self = Self(1);
}

unsafe impl Encode for MPSeekCommandEventType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSeekCommandEventType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpseekcommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPSeekCommandEvent;
);

unsafe impl NSObjectProtocol for MPSeekCommandEvent {}

extern_methods!(
    unsafe impl MPSeekCommandEvent {
        /// The type of seek command event, which specifies whether an external player
        /// began or ended seeking.
        #[method(type)]
        pub unsafe fn r#type(&self) -> MPSeekCommandEventType;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPSeekCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpratingcommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPRatingCommandEvent;
);

unsafe impl NSObjectProtocol for MPRatingCommandEvent {}

extern_methods!(
    unsafe impl MPRatingCommandEvent {
        /// The chosen rating for this command event. This value will be within the
        /// minimumRating and maximumRating values set for the MPRatingCommand object.
        #[method(rating)]
        pub unsafe fn rating(&self) -> c_float;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPRatingCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackratecommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPChangePlaybackRateCommandEvent;
);

unsafe impl NSObjectProtocol for MPChangePlaybackRateCommandEvent {}

extern_methods!(
    unsafe impl MPChangePlaybackRateCommandEvent {
        /// The chosen playback rate for this command event. This value will be equal
        /// to one of the values specified in the supportedPlaybackRates array for the
        /// MPChangePlaybackRateCommand object.
        #[method(playbackRate)]
        pub unsafe fn playbackRate(&self) -> c_float;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPChangePlaybackRateCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpfeedbackcommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPFeedbackCommandEvent;
);

unsafe impl NSObjectProtocol for MPFeedbackCommandEvent {}

extern_methods!(
    unsafe impl MPFeedbackCommandEvent {
        /// Whether the command event is a negative operation. For example, the command
        /// might ask that the app remove a bookmark for a particular track, rather than
        /// add it. In this case, the handler for the bookmark command should check this
        /// flag and remove the bookmark if it is set to YES.
        ///
        /// For like/dislike, a "negative like" might be treated differently from a
        /// dislike command. The app might want to remove the "like" flag from the
        /// current track, but not treat it as a dislike command.
        #[method(isNegative)]
        pub unsafe fn isNegative(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPFeedbackCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpchangelanguageoptioncommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPChangeLanguageOptionCommandEvent;
);

unsafe impl NSObjectProtocol for MPChangeLanguageOptionCommandEvent {}

extern_methods!(
    unsafe impl MPChangeLanguageOptionCommandEvent {
        #[cfg(feature = "MPNowPlayingInfoLanguageOption")]
        /// The requested language option to change.
        /// The supplied language option may be the Automatic Legible Language Option
        /// which would mean that best legible language option based on user preferences
        /// is being requested. See MPNowPlayingInfoLanguageOption isAutomaticLegibleLanguageOption
        #[unsafe(method_family(none))]
        #[method_id(languageOption)]
        pub unsafe fn languageOption(&self) -> Retained<MPNowPlayingInfoLanguageOption>;

        #[cfg(feature = "MPRemoteControlTypes")]
        /// Describes the extent of the changed language option
        #[method(setting)]
        pub unsafe fn setting(&self) -> MPChangeLanguageOptionSetting;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPChangeLanguageOptionCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpchangeplaybackpositioncommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPChangePlaybackPositionCommandEvent;
);

unsafe impl NSObjectProtocol for MPChangePlaybackPositionCommandEvent {}

extern_methods!(
    unsafe impl MPChangePlaybackPositionCommandEvent {
        /// The desired playback position to use when setting the current time of the player.
        #[method(positionTime)]
        pub unsafe fn positionTime(&self) -> NSTimeInterval;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPChangePlaybackPositionCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpchangeshufflemodecommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPChangeShuffleModeCommandEvent;
);

unsafe impl NSObjectProtocol for MPChangeShuffleModeCommandEvent {}

extern_methods!(
    unsafe impl MPChangeShuffleModeCommandEvent {
        #[cfg(feature = "MPRemoteControlTypes")]
        /// The desired shuffle type to use when fulfilling the request.
        #[method(shuffleType)]
        pub unsafe fn shuffleType(&self) -> MPShuffleType;

        /// Whether or not the selection should be preserved between playback sessions
        #[method(preservesShuffleMode)]
        pub unsafe fn preservesShuffleMode(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPChangeShuffleModeCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpchangerepeatmodecommandevent?language=objc)
    #[unsafe(super(MPRemoteCommandEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPChangeRepeatModeCommandEvent;
);

unsafe impl NSObjectProtocol for MPChangeRepeatModeCommandEvent {}

extern_methods!(
    unsafe impl MPChangeRepeatModeCommandEvent {
        #[cfg(feature = "MPRemoteControlTypes")]
        /// The desired repeat type to use when fulfilling the request.
        #[method(repeatType)]
        pub unsafe fn repeatType(&self) -> MPRepeatType;

        /// Whether or not the selection should be preserved between playback sessions
        #[method(preservesRepeatMode)]
        pub unsafe fn preservesRepeatMode(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MPChangeRepeatModeCommandEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
