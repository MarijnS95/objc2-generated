//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::MediaPlayer::*;

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPMediaType(pub NSUInteger);
impl MPMediaType {
    #[doc(alias = "MPMediaTypeMusic")]
    pub const Music: Self = Self(1 << 0);
    #[doc(alias = "MPMediaTypePodcast")]
    pub const Podcast: Self = Self(1 << 1);
    #[doc(alias = "MPMediaTypeAudioBook")]
    pub const AudioBook: Self = Self(1 << 2);
    #[doc(alias = "MPMediaTypeAudioITunesU")]
    pub const AudioITunesU: Self = Self(1 << 3);
    #[doc(alias = "MPMediaTypeAnyAudio")]
    pub const AnyAudio: Self = Self(0x00ff);
    #[doc(alias = "MPMediaTypeMovie")]
    pub const Movie: Self = Self(1 << 8);
    #[doc(alias = "MPMediaTypeTVShow")]
    pub const TVShow: Self = Self(1 << 9);
    #[doc(alias = "MPMediaTypeVideoPodcast")]
    pub const VideoPodcast: Self = Self(1 << 10);
    #[doc(alias = "MPMediaTypeMusicVideo")]
    pub const MusicVideo: Self = Self(1 << 11);
    #[doc(alias = "MPMediaTypeVideoITunesU")]
    pub const VideoITunesU: Self = Self(1 << 12);
    #[doc(alias = "MPMediaTypeHomeVideo")]
    pub const HomeVideo: Self = Self(1 << 13);
    #[doc(alias = "MPMediaTypeAnyVideo")]
    pub const AnyVideo: Self = Self(0xff00);
    #[doc(alias = "MPMediaTypeAny")]
    pub const Any: Self = Self(!0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MPMediaType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MPMediaType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyMediaType: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyTitle: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumTitle: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyArtist: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyArtistPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumArtist: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumArtistPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyGenre: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyGenrePersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyComposer: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyComposerPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPlaybackDuration: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumTrackNumber: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAlbumTrackCount: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyDiscNumber: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyDiscCount: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyArtwork: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyIsExplicit: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyLyrics: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyIsCompilation: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyReleaseDate: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyBeatsPerMinute: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyComments: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyAssetURL: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyIsCloudItem: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyHasProtectedAsset: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPodcastTitle: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPodcastPersistentID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPlayCount: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertySkipCount: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyRating: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyLastPlayedDate: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyUserGrouping: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyBookmarkTime: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyDateAdded: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyPlaybackStoreID: &'static NSString;
}

extern "C" {
    #[cfg(feature = "Foundation_NSString")]
    pub static MPMediaItemPropertyIsPreorder: &'static NSString;
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MediaPlayer_MPMediaEntity")]
    pub struct MPMediaItem;

    #[cfg(feature = "MediaPlayer_MPMediaEntity")]
    unsafe impl ClassType for MPMediaItem {
        #[inherits(NSObject)]
        type Super = MPMediaEntity;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(feature = "Foundation_NSObject", feature = "MediaPlayer_MPMediaEntity"))]
unsafe impl NSCoding for MPMediaItem {}

#[cfg(feature = "MediaPlayer_MPMediaEntity")]
unsafe impl NSObjectProtocol for MPMediaItem {}

#[cfg(all(feature = "Foundation_NSObject", feature = "MediaPlayer_MPMediaEntity"))]
unsafe impl NSSecureCoding for MPMediaItem {}

extern_methods!(
    #[cfg(feature = "MediaPlayer_MPMediaEntity")]
    unsafe impl MPMediaItem {
        #[method(persistentID)]
        pub unsafe fn persistentID(&self) -> MPMediaEntityPersistentID;

        #[method(mediaType)]
        pub unsafe fn mediaType(&self) -> MPMediaType;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other albumTitle)]
        pub unsafe fn albumTitle(&self) -> Option<Id<NSString>>;

        #[method(albumPersistentID)]
        pub unsafe fn albumPersistentID(&self) -> MPMediaEntityPersistentID;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other artist)]
        pub unsafe fn artist(&self) -> Option<Id<NSString>>;

        #[method(artistPersistentID)]
        pub unsafe fn artistPersistentID(&self) -> MPMediaEntityPersistentID;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other albumArtist)]
        pub unsafe fn albumArtist(&self) -> Option<Id<NSString>>;

        #[method(albumArtistPersistentID)]
        pub unsafe fn albumArtistPersistentID(&self) -> MPMediaEntityPersistentID;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other genre)]
        pub unsafe fn genre(&self) -> Option<Id<NSString>>;

        #[method(genrePersistentID)]
        pub unsafe fn genrePersistentID(&self) -> MPMediaEntityPersistentID;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other composer)]
        pub unsafe fn composer(&self) -> Option<Id<NSString>>;

        #[method(composerPersistentID)]
        pub unsafe fn composerPersistentID(&self) -> MPMediaEntityPersistentID;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(playbackDuration)]
        pub unsafe fn playbackDuration(&self) -> NSTimeInterval;

        #[method(albumTrackNumber)]
        pub unsafe fn albumTrackNumber(&self) -> NSUInteger;

        #[method(albumTrackCount)]
        pub unsafe fn albumTrackCount(&self) -> NSUInteger;

        #[method(discNumber)]
        pub unsafe fn discNumber(&self) -> NSUInteger;

        #[method(discCount)]
        pub unsafe fn discCount(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other artwork)]
        pub unsafe fn artwork(&self) -> Option<Id<MPMediaItemArtwork>>;

        #[method(isExplicitItem)]
        pub unsafe fn isExplicitItem(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other lyrics)]
        pub unsafe fn lyrics(&self) -> Option<Id<NSString>>;

        #[method(isCompilation)]
        pub unsafe fn isCompilation(&self) -> bool;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other releaseDate)]
        pub unsafe fn releaseDate(&self) -> Option<Id<NSDate>>;

        #[method(beatsPerMinute)]
        pub unsafe fn beatsPerMinute(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other comments)]
        pub unsafe fn comments(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other assetURL)]
        pub unsafe fn assetURL(&self) -> Option<Id<NSURL>>;

        #[method(isCloudItem)]
        pub unsafe fn isCloudItem(&self) -> bool;

        #[method(hasProtectedAsset)]
        pub unsafe fn hasProtectedAsset(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other podcastTitle)]
        pub unsafe fn podcastTitle(&self) -> Option<Id<NSString>>;

        #[method(podcastPersistentID)]
        pub unsafe fn podcastPersistentID(&self) -> MPMediaEntityPersistentID;

        #[method(playCount)]
        pub unsafe fn playCount(&self) -> NSUInteger;

        #[method(skipCount)]
        pub unsafe fn skipCount(&self) -> NSUInteger;

        #[method(rating)]
        pub unsafe fn rating(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other lastPlayedDate)]
        pub unsafe fn lastPlayedDate(&self) -> Option<Id<NSDate>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other userGrouping)]
        pub unsafe fn userGrouping(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(bookmarkTime)]
        pub unsafe fn bookmarkTime(&self) -> NSTimeInterval;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other dateAdded)]
        pub unsafe fn dateAdded(&self) -> Id<NSDate>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other playbackStoreID)]
        pub unsafe fn playbackStoreID(&self) -> Id<NSString>;

        #[method(isPreorder)]
        pub unsafe fn isPreorder(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MediaPlayer_MPMediaEntity")]
    unsafe impl MPMediaItem {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPMediaItemArtwork;

    unsafe impl ClassType for MPMediaItemArtwork {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MPMediaItemArtwork {}

extern_methods!(
    unsafe impl MPMediaItemArtwork {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSGeometry"))]
        #[method_id(@__retain_semantics Init initWithBoundsSize:requestHandler:)]
        pub unsafe fn initWithBoundsSize_requestHandler(
            this: Allocated<Self>,
            bounds_size: CGSize,
            request_handler: &Block<dyn Fn(CGSize) -> NonNull<NSImage>>,
        ) -> Id<Self>;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSGeometry"))]
        #[method_id(@__retain_semantics Other imageWithSize:)]
        pub unsafe fn imageWithSize(&self, size: CGSize) -> Option<Id<NSImage>>;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[method(bounds)]
        pub unsafe fn bounds(&self) -> CGRect;

        #[cfg(feature = "Foundation_NSGeometry")]
        #[deprecated = "cropRect is no longer used"]
        #[method(imageCropRect)]
        pub unsafe fn imageCropRect(&self) -> CGRect;
    }
);
