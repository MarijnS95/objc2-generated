//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// These constants describe the features supported by a given iTunes library.
///
/// No features are supported
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibexportfeature?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibExportFeature(pub NSUInteger);
impl ITLibExportFeature {
    #[doc(alias = "ITLibExportFeatureNone")]
    pub const None: Self = Self(0);
}

unsafe impl Encode for ITLibExportFeature {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibExportFeature {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// These constants describe the options that can be passed supported by a given iTunes library.
///
/// Load the library immediately on ITLibrary instance creation.
///
/// Don't load the library until the first request for data.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibinitoptions?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibInitOptions(pub NSUInteger);
impl ITLibInitOptions {
    #[doc(alias = "ITLibInitOptionNone")]
    pub const None: Self = Self(0);
    /// ITLibrary will be initialized but no iTunes library data will be loaded. Data will be lazy-loaded upon request.
    #[doc(alias = "ITLibInitOptionLazyLoadData")]
    pub const LazyLoadData: Self = Self(1);
}

unsafe impl Encode for ITLibInitOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibInitOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// This notification is sent to NSDistributedNotificationCenter when a change has occurred in the library.
    /// The client should call [ITLibrary -reloadData] if it wants a new view of the library contents.
    ///
    /// Note: This is not a fine-grained notification.  This API does not support per-object change notifications.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibrarydidchangenotification?language=objc)
    pub static ITLibraryDidChangeNotification: &'static NSNotificationName;
}

extern_class!(
    /// A class representing an iTunes library whose metadata is being queried.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibrary?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ITLibrary;
);

unsafe impl NSObjectProtocol for ITLibrary {}

impl ITLibrary {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// The version of iTunes being accessed.
        #[unsafe(method(applicationVersion))]
        #[unsafe(method_family = none)]
        pub unsafe fn applicationVersion(&self) -> Retained<NSString>;

        /// A bitwise OR combination of the features of this library.
        #[unsafe(method(features))]
        #[unsafe(method_family = none)]
        pub unsafe fn features(&self) -> ITLibExportFeature;

        /// The major version number of this API.
        #[unsafe(method(apiMajorVersion))]
        #[unsafe(method_family = none)]
        pub unsafe fn apiMajorVersion(&self) -> NSUInteger;

        /// The minor version number of this API.
        #[unsafe(method(apiMinorVersion))]
        #[unsafe(method_family = none)]
        pub unsafe fn apiMinorVersion(&self) -> NSUInteger;

        /// The location of the iTunes music folder.
        #[unsafe(method(mediaFolderLocation))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaFolderLocation(&self) -> Option<Retained<NSURL>>;

        /// The location of the iTunes music folder. Replaced by mediaFolderLocation.
        #[unsafe(method(musicFolderLocation))]
        #[unsafe(method_family = none)]
        pub unsafe fn musicFolderLocation(&self) -> Option<Retained<NSURL>>;

        /// Whether to show content rating labels.
        #[unsafe(method(shouldShowContentRating))]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldShowContentRating(&self) -> bool;

        #[cfg(all(feature = "ITLibMediaEntity", feature = "ITLibMediaItem"))]
        /// All media items in the library.
        #[unsafe(method(allMediaItems))]
        #[unsafe(method_family = none)]
        pub unsafe fn allMediaItems(&self) -> Retained<NSArray<ITLibMediaItem>>;

        #[cfg(all(feature = "ITLibMediaEntity", feature = "ITLibPlaylist"))]
        /// All playlists in the library.
        #[unsafe(method(allPlaylists))]
        #[unsafe(method_family = none)]
        pub unsafe fn allPlaylists(&self) -> Retained<NSArray<ITLibPlaylist>>;

        /// Creates and initializes an instance of ITLibrary which can be used to retrieve media entities.
        ///
        /// Upon initialization of the ITLibrary class, the default iTunes database for the current user will be read and parsed.
        /// At this point all media entities will be cached in memory until the time the object is deallocated.
        ///
        /// Parameter `requestedAPIVersion`: The version of the iTunesLibrary API that the application is requesting, provide "1.0" if unknown.
        ///
        /// Parameter `error`: A pointer to a variable that will receive an NSError if this method fails. May be nil if caller does not care about error.
        ///
        /// Returns: An ITLibrary instance, or nil if this method fails.
        #[unsafe(method(libraryWithAPIVersion:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn libraryWithAPIVersion_error(
            requested_api_version: &NSString,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        /// Creates and initializes an instance of ITLibrary which can be used to retrieve media entities.
        ///
        /// Unless the ITLibInitOptionLazyLoadData option is specified, the default iTunes database for the current user will be
        /// read and parsed upon initialization of the ITLibrary class, and all media entities will be cached in memory.
        ///
        /// Parameter `requestedAPIVersion`: The version of the iTunesLibrary API that the application is requesting, provide "1.0" if unknown.
        ///
        /// Parameter `options`: Options that change the initialization behavior.
        ///
        /// Parameter `error`: A pointer to a variable that will receive an NSError if this method fails. May be nil if caller does not care about error.
        ///
        /// Returns: An ITLibrary instance, or nil if this method fails.
        #[unsafe(method(libraryWithAPIVersion:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn libraryWithAPIVersion_options_error(
            requested_api_version: &NSString,
            options: ITLibInitOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        /// Initializes an instance of ITLibrary which can be used to retrieve media entities.
        ///
        /// Upon initialization of the ITLibrary class, the default iTunes database for the current user will be read and parsed.
        /// At this point all media entities will be cached in memory until the time the object is deallocated.
        ///
        /// Parameter `requestedAPIVersion`: The version of the iTunesLibrary API that the application is requesting, provide "1.0" if unknown.
        ///
        /// Parameter `error`: A pointer to a variable that will receive an NSError if this method fails. May be nil if caller does not care about error.
        ///
        /// Returns: An ITLibrary instance, or nil if this method fails.
        #[unsafe(method(initWithAPIVersion:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAPIVersion_error(
            this: Allocated<Self>,
            requested_api_version: &NSString,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        /// Initializes an instance of ITLibrary which can be used to retrieve media entities.
        ///
        /// Unless the ITLibInitOptionLazyLoadData option is specified, the default iTunes database for the current user will be
        /// read and parsed upon initialization of the ITLibrary class, and all media entities will be cached in memory.
        ///
        /// Parameter `requestedAPIVersion`: The version of the iTunesLibrary API that the application is requesting, provide "1.0" if unknown.
        ///
        /// Parameter `options`: Options that change the initialization behavior.
        ///
        /// Parameter `error`: A pointer to a variable that will receive an NSError if this method fails. May be nil if caller does not care about error.
        ///
        /// Returns: An ITLibrary instance, or nil if this method fails.
        #[unsafe(method(initWithAPIVersion:options:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAPIVersion_options_error(
            this: Allocated<Self>,
            requested_api_version: &NSString,
            options: ITLibInitOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "ITLibArtwork")]
        /// Retrieves the artwork from a media file.
        ///
        /// Parameter `mediaFileURL`: The URL of the media file whose artwork should be extracted.
        ///
        /// Returns: A ITLibArtwork instance represeting the media file artwork, or nil if the artwork was not found or could not be extracted.
        #[unsafe(method(artworkForMediaFile:))]
        #[unsafe(method_family = none)]
        pub unsafe fn artworkForMediaFile(
            &self,
            media_file_url: &NSURL,
        ) -> Option<Retained<ITLibArtwork>>;

        /// Refreshes the data used by the framework.
        ///
        /// Returns: YES if the data was reloaded, false if an error occurred.
        #[unsafe(method(reloadData))]
        #[unsafe(method_family = none)]
        pub unsafe fn reloadData(&self) -> bool;

        /// Unloads the data used by the framework.
        #[unsafe(method(unloadData))]
        #[unsafe(method_family = none)]
        pub unsafe fn unloadData(&self);
    );
}

/// Methods declared on superclass `NSObject`.
impl ITLibrary {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
