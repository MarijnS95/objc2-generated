//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/speech/sfspeechrecognizerauthorizationstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SFSpeechRecognizerAuthorizationStatus(pub NSInteger);
impl SFSpeechRecognizerAuthorizationStatus {
    #[doc(alias = "SFSpeechRecognizerAuthorizationStatusNotDetermined")]
    pub const NotDetermined: Self = Self(0);
    #[doc(alias = "SFSpeechRecognizerAuthorizationStatusDenied")]
    pub const Denied: Self = Self(1);
    #[doc(alias = "SFSpeechRecognizerAuthorizationStatusRestricted")]
    pub const Restricted: Self = Self(2);
    #[doc(alias = "SFSpeechRecognizerAuthorizationStatusAuthorized")]
    pub const Authorized: Self = Self(3);
}

unsafe impl Encode for SFSpeechRecognizerAuthorizationStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SFSpeechRecognizerAuthorizationStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/speech/sfspeechrecognizer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFSpeechRecognizer;
);

unsafe impl NSObjectProtocol for SFSpeechRecognizer {}

extern_methods!(
    unsafe impl SFSpeechRecognizer {
        #[method_id(supportedLocales)]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedLocales() -> Retained<NSSet<NSLocale>>;

        #[method(authorizationStatus)]
        pub unsafe fn authorizationStatus() -> SFSpeechRecognizerAuthorizationStatus;

        #[cfg(feature = "block2")]
        #[method(requestAuthorization:)]
        pub unsafe fn requestAuthorization(
            handler: &block2::Block<dyn Fn(SFSpeechRecognizerAuthorizationStatus)>,
        );

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Option<Retained<Self>>;

        #[method_id(initWithLocale:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocale(
            this: Allocated<Self>,
            locale: &NSLocale,
        ) -> Option<Retained<Self>>;

        #[method(isAvailable)]
        pub unsafe fn isAvailable(&self) -> bool;

        #[method_id(locale)]
        #[unsafe(method_family = none)]
        pub unsafe fn locale(&self) -> Retained<NSLocale>;

        #[method(supportsOnDeviceRecognition)]
        pub unsafe fn supportsOnDeviceRecognition(&self) -> bool;

        /// Setter for [`supportsOnDeviceRecognition`][Self::supportsOnDeviceRecognition].
        #[method(setSupportsOnDeviceRecognition:)]
        pub unsafe fn setSupportsOnDeviceRecognition(&self, supports_on_device_recognition: bool);

        #[method_id(delegate)]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn SFSpeechRecognizerDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn SFSpeechRecognizerDelegate>>,
        );

        #[cfg(feature = "SFSpeechRecognitionTaskHint")]
        #[method(defaultTaskHint)]
        pub unsafe fn defaultTaskHint(&self) -> SFSpeechRecognitionTaskHint;

        #[cfg(feature = "SFSpeechRecognitionTaskHint")]
        /// Setter for [`defaultTaskHint`][Self::defaultTaskHint].
        #[method(setDefaultTaskHint:)]
        pub unsafe fn setDefaultTaskHint(&self, default_task_hint: SFSpeechRecognitionTaskHint);

        #[cfg(all(
            feature = "SFSpeechRecognitionRequest",
            feature = "SFSpeechRecognitionResult",
            feature = "SFSpeechRecognitionTask",
            feature = "block2"
        ))]
        #[method_id(recognitionTaskWithRequest:resultHandler:)]
        #[unsafe(method_family = none)]
        pub unsafe fn recognitionTaskWithRequest_resultHandler(
            &self,
            request: &SFSpeechRecognitionRequest,
            result_handler: &block2::Block<dyn Fn(*mut SFSpeechRecognitionResult, *mut NSError)>,
        ) -> Retained<SFSpeechRecognitionTask>;

        #[cfg(all(
            feature = "SFSpeechRecognitionRequest",
            feature = "SFSpeechRecognitionTask"
        ))]
        #[method_id(recognitionTaskWithRequest:delegate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn recognitionTaskWithRequest_delegate(
            &self,
            request: &SFSpeechRecognitionRequest,
            delegate: &ProtocolObject<dyn SFSpeechRecognitionTaskDelegate>,
        ) -> Retained<SFSpeechRecognitionTask>;

        #[method_id(queue)]
        #[unsafe(method_family = none)]
        pub unsafe fn queue(&self) -> Retained<NSOperationQueue>;

        /// Setter for [`queue`][Self::queue].
        #[method(setQueue:)]
        pub unsafe fn setQueue(&self, queue: &NSOperationQueue);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SFSpeechRecognizer {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/speech/sfspeechrecognizerdelegate?language=objc)
    pub unsafe trait SFSpeechRecognizerDelegate: NSObjectProtocol {
        #[optional]
        #[method(speechRecognizer:availabilityDidChange:)]
        unsafe fn speechRecognizer_availabilityDidChange(
            &self,
            speech_recognizer: &SFSpeechRecognizer,
            available: bool,
        );
    }
);
