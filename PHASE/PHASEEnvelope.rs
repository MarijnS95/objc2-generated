//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A numeric pair.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasenumericpair?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASENumericPair;
);

unsafe impl NSObjectProtocol for PHASENumericPair {}

impl PHASENumericPair {
    extern_methods!(
        /// Initialize a numeric pair with a first and second value.
        ///
        /// Parameter `first`: The first value in the pair.
        ///
        /// Parameter `second`: The second value in the pair.
        ///
        /// Returns: A new pair.
        #[unsafe(method(initWithFirstValue:secondValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFirstValue_secondValue(
            this: Allocated<Self>,
            first: c_double,
            second: c_double,
        ) -> Retained<Self>;

        /// The first value in the numeric pair.
        ///
        /// The default value is 0.0.
        #[unsafe(method(first))]
        #[unsafe(method_family = none)]
        pub unsafe fn first(&self) -> c_double;

        /// Setter for [`first`][Self::first].
        #[unsafe(method(setFirst:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFirst(&self, first: c_double);

        /// The second value in the numeric pair.
        ///
        /// The default value is 0.0.
        #[unsafe(method(second))]
        #[unsafe(method_family = none)]
        pub unsafe fn second(&self) -> c_double;

        /// Setter for [`second`][Self::second].
        #[unsafe(method(setSecond:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSecond(&self, second: c_double);
    );
}

/// Methods declared on superclass `NSObject`.
impl PHASENumericPair {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// An envelope segment defined by an end point and a curve type.
    ///
    /// Envelope segments do 'not' contain a start point.
    /// We do this so we can connect envelope segments together end to end and gaurantee continuity along the x and y axes.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseenvelopesegment?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEEnvelopeSegment;
);

unsafe impl NSObjectProtocol for PHASEEnvelopeSegment {}

impl PHASEEnvelopeSegment {
    extern_methods!(
        #[cfg(feature = "PHASETypes")]
        /// The curve type of the envelope segment.
        ///
        /// The default value is PHASECurveTypeLinear.
        #[unsafe(method(curveType))]
        #[unsafe(method_family = none)]
        pub unsafe fn curveType(&self) -> PHASECurveType;

        #[cfg(feature = "PHASETypes")]
        /// Setter for [`curveType`][Self::curveType].
        #[unsafe(method(setCurveType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurveType(&self, curve_type: PHASECurveType);
    );
}

/// Methods declared on superclass `NSObject`.
impl PHASEEnvelopeSegment {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A segmented envelope.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseenvelope?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEEnvelope;
);

unsafe impl NSObjectProtocol for PHASEEnvelope {}

impl PHASEEnvelope {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Evaluates the envelope.
        ///
        /// If required, x will be clamped to the envelope's domain.
        ///
        /// Parameter `x`: The input along the x-axis.
        ///
        /// Returns: The output along the y-axis.
        #[unsafe(method(evaluateForValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn evaluateForValue(&self, x: c_double) -> c_double;

        /// The segments of the envelope.
        #[unsafe(method(segments))]
        #[unsafe(method_family = none)]
        pub unsafe fn segments(&self) -> Retained<NSArray<PHASEEnvelopeSegment>>;

        /// The domain (along the x-axis).
        ///
        /// The first value in the pair is the minimum value of the domain.
        /// The second value in the pair is the maximum value of the domain.
        #[unsafe(method(domain))]
        #[unsafe(method_family = none)]
        pub unsafe fn domain(&self) -> Retained<PHASENumericPair>;

        /// The range (along the y-axis).
        ///
        /// The first value in the pair is the minimum value of the range.
        /// The second value in the pair is the maximum value of the range.
        #[unsafe(method(range))]
        #[unsafe(method_family = none)]
        pub unsafe fn range(&self) -> Retained<PHASENumericPair>;
    );
}
