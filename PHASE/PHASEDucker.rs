//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASEDucker is used to describe ducking behavior across different groups.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseducker?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEDucker;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEDucker {}
);

impl PHASEDucker {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(
            feature = "PHASEEngine",
            feature = "PHASEGroup",
            feature = "PHASETypes"
        ))]
        /// Whenever a generator node from any source group plays, all the generator nodes in the target groups will be
        /// ducked by the given gain using the given attack and release times.
        ///
        /// Note: The ducker is initialially inactive. The client must call activate() to make it active.
        /// Once a ducker is active, it will listen for generator nodes to start playback in source groups. Once triggered, it will duck its target groups.
        /// Deactivating a ducker will make it stop listening. Furthermore, it will enter the release phase if it has been previously triggered.
        /// Dealloc'ing a ducker will force the ducker into its release phase if it is actively ducking and remove it from the system when it finishes.
        ///
        /// Parameter `engine`: The engine to register this ducker with.
        ///
        /// Parameter `sourceGroups`: The source groups that will trigger the ducker when a sound in one of the source groups starts playback.
        ///
        /// Parameter `targetGroups`: The target groups that will be ducked when a sound in one of the source groups triggers the ducker.
        ///
        /// Parameter `gain`: The linear gain scalar to apply when the ducker is engaged. 0 means full attenuation. 1 is no attenuation. Values are clamped to the range [0, 1].
        ///
        /// Parameter `attackTime`: The time for the attenuation gain to ramp into effect.
        /// This value is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        ///
        /// Parameter `releaseTime`: The time for the ducked sounds to ramp back to their original level.
        /// This value is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        ///
        /// Parameter `attackCurve`: The type of curve function to use during the attack phase of gain reduction.
        ///
        /// Parameter `releaseCurve`: The type of curve function to use during the release phase of gain reduction.
        #[unsafe(method(initWithEngine:sourceGroups:targetGroups:gain:attackTime:releaseTime:attackCurve:releaseCurve:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_sourceGroups_targetGroups_gain_attackTime_releaseTime_attackCurve_releaseCurve(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            source_groups: &NSSet<PHASEGroup>,
            target_groups: &NSSet<PHASEGroup>,
            gain: c_double,
            attack_time: c_double,
            release_time: c_double,
            attack_curve: PHASECurveType,
            release_curve: PHASECurveType,
        ) -> Retained<Self>;

        /// Activates the ducker
        #[unsafe(method(activate))]
        #[unsafe(method_family = none)]
        pub unsafe fn activate(&self);

        /// Deactivates the ducker
        #[unsafe(method(deactivate))]
        #[unsafe(method_family = none)]
        pub unsafe fn deactivate(&self);

        #[cfg(feature = "PHASEGroup")]
        /// The source groups that will trigger the ducker when a sound in one of the source groups starts playback.
        #[unsafe(method(sourceGroups))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceGroups(&self) -> Retained<NSSet<PHASEGroup>>;

        #[cfg(feature = "PHASEGroup")]
        /// The target groups that will be ducked when a sound in one of the source groups triggers the ducker.
        #[unsafe(method(targetGroups))]
        #[unsafe(method_family = none)]
        pub unsafe fn targetGroups(&self) -> Retained<NSSet<PHASEGroup>>;

        /// YES if the ducker is active; otherwise, NO.
        #[unsafe(method(isActive))]
        #[unsafe(method_family = none)]
        pub unsafe fn isActive(&self) -> bool;

        /// Linear gain scalar.
        ///
        /// Note: Values are clamped to the range [0, 1]. Default value is 1.
        #[unsafe(method(gain))]
        #[unsafe(method_family = none)]
        pub unsafe fn gain(&self) -> c_double;

        /// The time for the attenuation gain to ramp into effect.
        ///
        /// Note: The attack time is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(attackTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn attackTime(&self) -> c_double;

        /// The time for the ducked sounds to ramp back to their original level.
        ///
        /// Note: The release time is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(releaseTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn releaseTime(&self) -> c_double;

        #[cfg(feature = "PHASETypes")]
        /// The type of curve function to use during the attack phase of gain reduction.
        #[unsafe(method(attackCurve))]
        #[unsafe(method_family = none)]
        pub unsafe fn attackCurve(&self) -> PHASECurveType;

        #[cfg(feature = "PHASETypes")]
        /// The type of curve function to use during the release phase of gain reduction.
        #[unsafe(method(releaseCurve))]
        #[unsafe(method_family = none)]
        pub unsafe fn releaseCurve(&self) -> PHASECurveType;

        /// The identifier that uniquely represents this ducker.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;
    );
}
