//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASESoundEvent is an object that represents a playable sound event in the PHASE system.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasesoundevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASESoundEvent;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASESoundEvent {}
);

impl PHASESoundEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "PHASEEngine", feature = "PHASEMixer"))]
        /// Creates a new sound event instance
        ///
        /// Parameter `engine`: The PHASEEngine object that the sound event will be played by.
        ///
        /// Parameter `assetIdentifier`: The identifier registered with the Asset Registry for the particular PHASESoundEventNodeAsset that this sound instance will play.
        /// If the asset identifier is not registered, this function will fail.
        ///
        /// Parameter `mixerParameters`: A dictionary of PHASEMixerParameters objects with keys that match the identifiers of the spatial mixers in the sound event
        ///
        /// This will look up the asset in the asset registry and create the necessary objects to play the sound event
        #[unsafe(method(initWithEngine:assetIdentifier:mixerParameters:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_assetIdentifier_mixerParameters_error(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            asset_identifier: &NSString,
            mixer_parameters: &PHASEMixerParameters,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "PHASEEngine")]
        /// Creates a new sound event instance
        ///
        /// Parameter `engine`: The PHASEEngine object that the sound event will be played by.
        ///
        /// Parameter `assetIdentifier`: The identifier registered with the Asset Registry for the particular PHASESoundEventNodeAsset that this sound event will play.
        /// If the asset identifier is not registered, this function will fail.
        ///
        /// This will look up the asset in the asset registry and create the necessary objects to play the sound event
        #[unsafe(method(initWithEngine:assetIdentifier:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_assetIdentifier_error(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            asset_identifier: &NSString,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Prepare the sound event
        ///
        /// Parameter `handler`: The block that will be called when the PHASESoundEvent has finished preparing and is ready to start. Pass in nil for no handler.
        ///
        /// This function notifies the engine to begin preparing a sound event, then returns immediately.
        /// Once the sound event is prepared (or has failed to prepare), you will receive a callback via the completion.
        /// If you call startWithCompletion() before receiving the callback, the sound event will start as soon as it's prepared.
        #[unsafe(method(prepareWithCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareWithCompletion(
            &self,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventPrepareHandlerReason)>>,
        );

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Start the sound event
        ///
        /// Parameter `handler`: The block that will be called when the sound event has stopped.
        ///
        /// This function notifies the engine to start the sound event, then returns immediately.
        /// Once the sound event is playing (or has failed to start), you will receive a callback via the completion.
        /// Playback will begin immediately if the sound event has been prepared; otherwise, it will start as soon as it is finished preparing.
        #[unsafe(method(startWithCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startWithCompletion(
            &self,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventStartHandlerReason)>>,
        );

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Seeks all leaf nodes in a PHASESoundEvent to a specified time relative to the start of the sound event.
        ///
        /// This function notifies the engine to seek the sound event, then returns immediately.
        /// Once the sound event has seeked to the new offset (or has failed to seek), you will receive a callback via the completion.
        /// If any leaf nodes do not support seeking, those nodes will ignore this command.
        /// Nodes that have finished playing or have stopped will not seek.
        /// Nodes that are sleeping will seek, and will resume at the correct time when they wake up.
        ///
        /// Note: The time is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(seekToTime:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToTime_completion(
            &self,
            time: c_double,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventSeekHandlerReason)>>,
        );

        /// Pause the sound event.
        #[unsafe(method(pause))]
        #[unsafe(method_family = none)]
        pub unsafe fn pause(&self);

        /// Resume the sound event.
        #[unsafe(method(resume))]
        #[unsafe(method_family = none)]
        pub unsafe fn resume(&self);

        /// stop and invalidate the sound event
        #[unsafe(method(stopAndInvalidate))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopAndInvalidate(&self);

        #[cfg(feature = "PHASETypes")]
        /// Sound Event's current rendering state
        #[unsafe(method(renderingState))]
        #[unsafe(method_family = none)]
        pub unsafe fn renderingState(&self) -> PHASERenderingState;

        #[cfg(feature = "PHASETypes")]
        /// Sound Event's current preparation state
        #[unsafe(method(prepareState))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareState(&self) -> PHASESoundEventPrepareState;

        #[cfg(feature = "PHASEMetaParameter")]
        /// A Dictionary containing the MetaParameters associated with this sound event
        #[unsafe(method(metaParameters))]
        #[unsafe(method_family = none)]
        pub unsafe fn metaParameters(&self)
            -> Retained<NSDictionary<NSString, PHASEMetaParameter>>;

        #[cfg(feature = "PHASEMixer")]
        /// A Dictionary containing the mix nodes associated with this sound event
        #[unsafe(method(mixers))]
        #[unsafe(method_family = none)]
        pub unsafe fn mixers(&self) -> Retained<NSDictionary<NSString, PHASEMixer>>;

        #[cfg(feature = "PHASESoundEventNodes")]
        /// A Dictionary containing the push stream nodes associated with this sound event, for pushing buffers to.
        #[unsafe(method(pushStreamNodes))]
        #[unsafe(method_family = none)]
        pub unsafe fn pushStreamNodes(
            &self,
        ) -> Retained<NSDictionary<NSString, PHASEPushStreamNode>>;

        #[cfg(feature = "PHASESoundEventNodes")]
        /// A Dictionary containing the pull stream nodes associated with this sound event, for setting renderBlocks on.
        #[unsafe(method(pullStreamNodes))]
        #[unsafe(method_family = none)]
        pub unsafe fn pullStreamNodes(
            &self,
        ) -> Retained<NSDictionary<NSString, PHASEPullStreamNode>>;

        /// A boolean that tell if this sound event will run indefinitely, or finish executing on its own
        #[unsafe(method(isIndefinite))]
        #[unsafe(method_family = none)]
        pub unsafe fn isIndefinite(&self) -> bool;
    );
}
