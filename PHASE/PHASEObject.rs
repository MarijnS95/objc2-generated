//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASEObject represents a 3D object in the engine, which can be organized into a hierarchy with relative transforms.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseobject?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEObject;
);

unsafe impl NSCopying for PHASEObject {}

unsafe impl CopyingHelper for PHASEObject {
    type Result = Self;
}

unsafe impl NSObjectProtocol for PHASEObject {}

impl PHASEObject {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "PHASEEngine")]
        /// Initialize a new object.
        #[unsafe(method(initWithEngine:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine(this: Allocated<Self>, engine: &PHASEEngine)
            -> Retained<Self>;

        /// Add a child to this object
        ///
        /// Parameter `child`: The child object
        ///
        /// Parameter `error`: Returns an error if the child already has a parent.
        ///
        /// Returns: YES for success
        #[unsafe(method(addChild:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addChild_error(&self, child: &PHASEObject) -> Result<(), Retained<NSError>>;

        /// Remove a child from this object.
        #[unsafe(method(removeChild:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeChild(&self, child: &PHASEObject);

        /// Remove all the children from this object
        #[unsafe(method(removeChildren))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeChildren(&self);

        /// The parent of this object, or nil if this object doesn't have a parent object.
        #[unsafe(method(parent))]
        #[unsafe(method_family = none)]
        pub unsafe fn parent(&self) -> Option<Retained<PHASEObject>>;

        /// The children of this object.
        #[unsafe(method(children))]
        #[unsafe(method_family = none)]
        pub unsafe fn children(&self) -> Retained<NSArray<PHASEObject>>;
    );
}
