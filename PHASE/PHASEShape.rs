//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-model-io")]
use objc2_model_io::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A single element within a shape. The attached material defines its acoustical properties.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseshapeelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEShapeElement;
);

unsafe impl NSObjectProtocol for PHASEShapeElement {}

impl PHASEShapeElement {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "PHASEMaterial")]
        /// The shape's material defines the acoustical properties of this element.
        #[unsafe(method(material))]
        #[unsafe(method_family = none)]
        pub unsafe fn material(&self) -> Option<Retained<PHASEMaterial>>;

        #[cfg(feature = "PHASEMaterial")]
        /// Setter for [`material`][Self::material].
        #[unsafe(method(setMaterial:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaterial(&self, material: Option<&PHASEMaterial>);
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// The physical representation of an object within the simulated acoustic scene.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseshape?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEShape;
);

unsafe impl NSCopying for PHASEShape {}

unsafe impl CopyingHelper for PHASEShape {
    type Result = Self;
}

unsafe impl NSObjectProtocol for PHASEShape {}

impl PHASEShape {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "PHASEEngine", feature = "objc2-model-io"))]
        /// Initialize a shape from a mesh.
        ///
        /// One PHASEShapeElement will be created for every submesh within the mesh.
        ///
        /// Note: A single shape can be used to create multiple instances of sources and occluders.
        /// For example, a client could create a single shape for a window, then create multiple occluders from it.
        /// The same can be done with with sources.
        ///
        /// Parameter `engine`: The engine this shape will be used with.
        ///
        /// Parameter `mesh`: A Model I/O mesh object.
        ///
        /// Returns: A new shape object
        #[unsafe(method(initWithEngine:mesh:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_mesh(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            mesh: &MDLMesh,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "PHASEEngine",
            feature = "PHASEMaterial",
            feature = "objc2-model-io"
        ))]
        /// Initialize a shape from an MDLMesh and a list of materials
        ///
        /// Parameter `engine`: The engine this shape will be used with
        ///
        /// Parameter `mesh`: A Model I/O mesh object.
        ///
        /// Parameter `materials`: An array of PHASEMaterial objects that overrides any acoustical materials within the mesh object
        ///
        /// Returns: A new shape object
        ///
        /// The materials array cannot be empty and cannot contain nil entries, otherwise an exception is thrown.
        /// If the number of submeshes within the mesh are less than or equal to the size of the material array, the material will be assigned
        /// to the corresponding element. If the number of submeshes within the mesh is greater than the size of the material array, the material
        /// assigned to the element will be the index of the element modulo the number of materials. IE: given a mesh with 6 submeshes and an array
        /// of 3 materials, the element at index 5 will be assigned the material at index: 5 % 3 = 2.
        #[unsafe(method(initWithEngine:mesh:materials:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_mesh_materials(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            mesh: &MDLMesh,
            materials: &NSArray<PHASEMaterial>,
        ) -> Retained<Self>;

        /// List of all the shape elements associated with this shape.
        #[unsafe(method(elements))]
        #[unsafe(method_family = none)]
        pub unsafe fn elements(&self) -> Retained<NSArray<PHASEShapeElement>>;
    );
}
