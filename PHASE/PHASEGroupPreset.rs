//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASEGroupPresetSetting is an object that holds settings that can be applied to a PHASEGroup object.
    ///
    /// These can be either be manually created and added to a PHASEGroupPreset object, or created inline using PHASEGroupPreset addGroup.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasegrouppresetsetting?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEGroupPresetSetting;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEGroupPresetSetting {}
);

impl PHASEGroupPresetSetting {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "PHASETypes")]
        /// Initialize the PHASEGroupPresetSetting object with an existing PHASEGroup object.
        ///
        /// Parameter `gain`: The main gain setting to apply to the group. Values are clamped to the range [0, 1]. Default value is 1.
        ///
        /// Parameter `rate`: The playback rate setting to apply to the group. Values are clamped to the range [0.25, 4]. Default value is 1.
        ///
        /// Parameter `gainCurveType`: The type of curve to apply to the gain as the preset changes to this new setting.
        ///
        /// Parameter `rateCurveType`: The type of curve to apply to the rate as the preset changes to this new setting.
        #[unsafe(method(initWithGain:rate:gainCurveType:rateCurveType:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithGain_rate_gainCurveType_rateCurveType(
            this: Allocated<Self>,
            gain: c_double,
            rate: c_double,
            gain_curve_type: PHASECurveType,
            rate_curve_type: PHASECurveType,
        ) -> Retained<Self>;

        /// Linear gain scalar.
        ///
        /// Note: Values are clamped to the range [0, 1]. Default value is 1.
        #[unsafe(method(gain))]
        #[unsafe(method_family = none)]
        pub unsafe fn gain(&self) -> c_double;

        /// Linear rate scalar.
        #[unsafe(method(rate))]
        #[unsafe(method_family = none)]
        pub unsafe fn rate(&self) -> c_double;

        #[cfg(feature = "PHASETypes")]
        /// The type of curve to apply to the gain as the preset changes to this new setting.
        #[unsafe(method(gainCurveType))]
        #[unsafe(method_family = none)]
        pub unsafe fn gainCurveType(&self) -> PHASECurveType;

        #[cfg(feature = "PHASETypes")]
        /// The type of curve to apply to the rate as the preset changes to this new setting.
        #[unsafe(method(rateCurveType))]
        #[unsafe(method_family = none)]
        pub unsafe fn rateCurveType(&self) -> PHASECurveType;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASEGroupPreset holds a collection of PHASEGroupPresetSetting objects and other parameters to be applied all at once during playback.
    ///
    /// Initialize beforehand, and use activate or deactivate to switch to the new preset during playback.
    /// Activating a preset will automatically deactivate the current one.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasegrouppreset?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEGroupPreset;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEGroupPreset {}
);

impl PHASEGroupPreset {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "PHASEEngine")]
        /// Create a new PHASEGroupPreset object with a given PHASEEngine object.
        ///
        /// Parameter `engine`: The PHASEEngine object to register this preset with.
        ///
        /// Parameter `settings`: A dictionary containing PHASEGroupPresetSetting objects paired with PHASEGroup objects as keys.
        ///
        /// Parameter `timeToTarget`: The time interval that all group settings in this preset will take to gradually fade to the new value
        ///
        /// Parameter `timeToReset`: The time interval that all group settings in this preset will take to gradually fade to the unity value
        ///
        /// Note: The timeToTarget and timeToReset are scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(initWithEngine:settings:timeToTarget:timeToReset:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_settings_timeToTarget_timeToReset(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            settings: &NSDictionary<NSString, PHASEGroupPresetSetting>,
            time_to_target: c_double,
            time_to_reset: c_double,
        ) -> Retained<Self>;

        /// The collection of PHASEGroupPresetSetting objects to apply when this preset is activated.
        #[unsafe(method(settings))]
        #[unsafe(method_family = none)]
        pub unsafe fn settings(&self) -> Retained<NSDictionary<NSString, PHASEGroupPresetSetting>>;

        /// The time interval that all group settings in this preset will take to gradually fade to the new value
        ///
        /// Note: The timeToTarget is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(timeToTarget))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeToTarget(&self) -> c_double;

        /// The time interval that all group settings in this preset will take to gradually fade to the unity value
        ///
        /// Note: The timeToReset is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(timeToReset))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeToReset(&self) -> c_double;

        /// Activate this preset in the PHASEEngine object it was initialized with. The internal timeToTarget value is used.
        /// The current preset will be deactivated automatically.
        #[unsafe(method(activate))]
        #[unsafe(method_family = none)]
        pub unsafe fn activate(&self);

        /// Activate this preset in the PHASEEngine object it was initialized with.
        /// The current preset will be deactivated automatically.
        ///
        /// Parameter `timeToTargetOverride`: Override the timeToTarget value in the preset with this value.
        ///
        /// Note: The timeToTargetOverride is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(activateWithTimeToTargetOverride:))]
        #[unsafe(method_family = none)]
        pub unsafe fn activateWithTimeToTargetOverride(&self, time_to_target_override: c_double);

        /// Deactivate this preset and return the system to default unity values. The internal timeToReset value is used.
        #[unsafe(method(deactivate))]
        #[unsafe(method_family = none)]
        pub unsafe fn deactivate(&self);

        /// Deactivate this preset and return the system to default unity values.
        ///
        /// Parameter `timeToResetOverride`: Override the timeToReset value in the preset with this value.
        ///
        /// Note: The timeToResetOverride is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(deactivateWithTimeToResetOverride:))]
        #[unsafe(method_family = none)]
        pub unsafe fn deactivateWithTimeToResetOverride(&self, time_to_reset_override: c_double);
    );
}
