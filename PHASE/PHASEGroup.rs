//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASEGroup allows clients to group generator nodes for shared processing.
    /// Clients can set the gain and playback rate, as well as mute and solo the generator nodes in a group.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasegroup?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEGroup;
);

unsafe impl NSObjectProtocol for PHASEGroup {}

impl PHASEGroup {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Create a new group.
        ///
        /// Parameter `identifier`: The identifier that uniquely represents this group.
        #[unsafe(method(initWithIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSString,
        ) -> Retained<Self>;

        #[cfg(feature = "PHASEEngine")]
        /// Registers a group with a particular engine so that referenced assets can find it.
        ///
        /// Note: An exception will be thrown if the engine is invalid or the group already exists.
        ///
        /// Parameter `engine`: An engine object to associate this group with.
        #[unsafe(method(registerWithEngine:))]
        #[unsafe(method_family = none)]
        pub unsafe fn registerWithEngine(&self, engine: &PHASEEngine);

        /// Unregister the group from a particular engine.
        #[unsafe(method(unregisterFromEngine))]
        #[unsafe(method_family = none)]
        pub unsafe fn unregisterFromEngine(&self);

        #[cfg(feature = "PHASETypes")]
        /// Fade the gain of this group over a specified duration and curve.
        ///
        /// Note: The fade gain is applied on top of the base gain of the group.
        ///
        /// Parameter `gain`: A target linear gain scalar. Values are clamped to the range [0, 1].
        ///
        /// Parameter `duration`: The duration over which to ramp to the target linear gain scalar. Values must be >= 0.
        /// The duration is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        ///
        /// Parameter `curveType`: The type of curve function that is applied during the fade.
        #[unsafe(method(fadeGain:duration:curveType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeGain_duration_curveType(
            &self,
            gain: c_double,
            duration: c_double,
            curve_type: PHASECurveType,
        );

        #[cfg(feature = "PHASETypes")]
        /// Fade the playback rate of this group over a specified duration and curve.
        ///
        /// Note: The fade gain is applied on top of the base gain of the group.
        ///
        /// Parameter `rate`: A target linear rate scalar. Values are clamped to the range [0.25, 4.0].
        ///
        /// Parameter `duration`: The duration over which to ramp to the target linear rate scalar. Values must be >= 0.
        /// The duration is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        ///
        /// Parameter `curveType`: The type of curve function that is applied during the fade.
        #[unsafe(method(fadeRate:duration:curveType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeRate_duration_curveType(
            &self,
            rate: c_double,
            duration: c_double,
            curve_type: PHASECurveType,
        );

        /// Mute the group.
        #[unsafe(method(mute))]
        #[unsafe(method_family = none)]
        pub unsafe fn mute(&self);

        /// Unmute the group.
        #[unsafe(method(unmute))]
        #[unsafe(method_family = none)]
        pub unsafe fn unmute(&self);

        /// Solo the group.
        #[unsafe(method(solo))]
        #[unsafe(method_family = none)]
        pub unsafe fn solo(&self);

        /// Unsolo the group.
        #[unsafe(method(unsolo))]
        #[unsafe(method_family = none)]
        pub unsafe fn unsolo(&self);

        /// The identifier that uniquely represents this group.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// Linear gain scalar.
        ///
        /// Note: Values are clamped to the range [0, 1]. Default value is 1.
        #[unsafe(method(gain))]
        #[unsafe(method_family = none)]
        pub unsafe fn gain(&self) -> c_double;

        /// Setter for [`gain`][Self::gain].
        #[unsafe(method(setGain:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGain(&self, gain: c_double);

        /// Linear rate scalar.
        ///
        /// Note: Values are clamped to the range [0.25, 4]. Default value is 1.
        #[unsafe(method(rate))]
        #[unsafe(method_family = none)]
        pub unsafe fn rate(&self) -> c_double;

        /// Setter for [`rate`][Self::rate].
        #[unsafe(method(setRate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRate(&self, rate: c_double);

        /// Whether or not this group is muted.
        #[unsafe(method(isMuted))]
        #[unsafe(method_family = none)]
        pub unsafe fn isMuted(&self) -> bool;

        /// Whether or not this group is soloed.
        #[unsafe(method(isSoloed))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSoloed(&self) -> bool;
    );
}
