//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An abstract class for representing task requests.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/backgroundtasks/bgtaskrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BGTaskRequest;
);

unsafe impl NSCopying for BGTaskRequest {}

unsafe impl CopyingHelper for BGTaskRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for BGTaskRequest {}

extern_methods!(
    unsafe impl BGTaskRequest {
        /// The identifier of the task associated with the request.
        #[method_id(identifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// The earliest date and time at which to run the task.
        ///
        /// Specify `nil` for no start delay.
        ///
        /// Setting the property indicates that the background task shouldn’t start any
        /// earlier than this date. However, the system doesn’t guarantee launching the
        /// task at the specified date, but only that it won’t begin sooner.
        #[method_id(earliestBeginDate)]
        #[unsafe(method_family = none)]
        pub unsafe fn earliestBeginDate(&self) -> Option<Retained<NSDate>>;

        /// Setter for [`earliestBeginDate`][Self::earliestBeginDate].
        #[method(setEarliestBeginDate:)]
        pub unsafe fn setEarliestBeginDate(&self, earliest_begin_date: Option<&NSDate>);

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A request to launch your app in the background to execute a short refresh task.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/backgroundtasks/bgapprefreshtaskrequest?language=objc)
    #[unsafe(super(BGTaskRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BGAppRefreshTaskRequest;
);

unsafe impl NSCopying for BGAppRefreshTaskRequest {}

unsafe impl CopyingHelper for BGAppRefreshTaskRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for BGAppRefreshTaskRequest {}

extern_methods!(
    unsafe impl BGAppRefreshTaskRequest {
        /// Return a new refresh task request for the specified identifier.
        ///
        /// - Parameters:
        /// - identifier: The string identifier of the refresh task associated with the request.
        #[method_id(initWithIdentifier:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSString,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `BGTaskRequest`
    unsafe impl BGAppRefreshTaskRequest {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A request to launch your app in the background to execute a processing task
    /// that can take minutes to complete.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/backgroundtasks/bgprocessingtaskrequest?language=objc)
    #[unsafe(super(BGTaskRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BGProcessingTaskRequest;
);

unsafe impl NSCopying for BGProcessingTaskRequest {}

unsafe impl CopyingHelper for BGProcessingTaskRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for BGProcessingTaskRequest {}

extern_methods!(
    unsafe impl BGProcessingTaskRequest {
        /// Return a new processing task request for the specified identifier.
        ///
        /// - Parameters:
        /// - identifier: The string identifier of the processing task associated with the request.
        #[method_id(initWithIdentifier:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSString,
        ) -> Retained<Self>;

        /// A Boolean specifying if the processing task requires network connectivity.
        #[method(requiresNetworkConnectivity)]
        pub unsafe fn requiresNetworkConnectivity(&self) -> bool;

        /// Setter for [`requiresNetworkConnectivity`][Self::requiresNetworkConnectivity].
        #[method(setRequiresNetworkConnectivity:)]
        pub unsafe fn setRequiresNetworkConnectivity(&self, requires_network_connectivity: bool);

        /// A Boolean specifying if the processing task requires a device connected to power.
        #[method(requiresExternalPower)]
        pub unsafe fn requiresExternalPower(&self) -> bool;

        /// Setter for [`requiresExternalPower`][Self::requiresExternalPower].
        #[method(setRequiresExternalPower:)]
        pub unsafe fn setRequiresExternalPower(&self, requires_external_power: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `BGTaskRequest`
    unsafe impl BGProcessingTaskRequest {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A request to launch your app in the background to execute a health research task for studies a user has opted into and
    /// that can take minutes to complete.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/backgroundtasks/bghealthresearchtaskrequest?language=objc)
    #[unsafe(super(BGProcessingTaskRequest, BGTaskRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BGHealthResearchTaskRequest;
);

unsafe impl NSCopying for BGHealthResearchTaskRequest {}

unsafe impl CopyingHelper for BGHealthResearchTaskRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for BGHealthResearchTaskRequest {}

extern_methods!(
    unsafe impl BGHealthResearchTaskRequest {
        /// A String indicating file protection availability required for processing.
        #[method_id(protectionTypeOfRequiredData)]
        #[unsafe(method_family = none)]
        pub unsafe fn protectionTypeOfRequiredData(&self) -> Retained<NSFileProtectionType>;

        /// Setter for [`protectionTypeOfRequiredData`][Self::protectionTypeOfRequiredData].
        #[method(setProtectionTypeOfRequiredData:)]
        pub unsafe fn setProtectionTypeOfRequiredData(
            &self,
            protection_type_of_required_data: &NSFileProtectionType,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `BGProcessingTaskRequest`
    unsafe impl BGHealthResearchTaskRequest {
        /// Return a new processing task request for the specified identifier.
        ///
        /// - Parameters:
        /// - identifier: The string identifier of the processing task associated with the request.
        #[method_id(initWithIdentifier:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier(
            this: Allocated<Self>,
            identifier: &NSString,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `BGTaskRequest`
    unsafe impl BGHealthResearchTaskRequest {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
