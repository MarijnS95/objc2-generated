//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// NSError domain for DeviceAccess errors.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/dderrordomain?language=objc)
    pub static DDErrorDomain: &'static NSString;
}

/// Error codes used with DDErrorDomain.
/// DeviceDiscoveryExtension error code range: 350000-350999.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/dderrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct DDErrorCode(pub NSInteger);
impl DDErrorCode {
    #[doc(alias = "DDErrorCodeSuccess")]
    pub const Success: Self = Self(0);
    /// Success.
    #[doc(alias = "DDErrorCodeUnknown")]
    pub const Unknown: Self = Self(350000);
    /// Underlying failure with an unknown cause.
    #[doc(alias = "DDErrorCodeBadParameter")]
    pub const BadParameter: Self = Self(350001);
    /// Bad parameter.
    #[doc(alias = "DDErrorCodeUnsupported")]
    pub const Unsupported: Self = Self(350002);
    /// Unsupported value, operation, etc.
    #[doc(alias = "DDErrorCodeTimeout")]
    pub const Timeout: Self = Self(350003);
    /// Session or operation timed out.
    #[doc(alias = "DDErrorCodeInternal")]
    pub const Internal: Self = Self(350004);
    /// Internal problem.
    #[doc(alias = "DDErrorCodeMissingEntitlement")]
    pub const MissingEntitlement: Self = Self(350005);
    /// Missing entitlement.
    #[doc(alias = "DDErrorCodePermission")]
    pub const Permission: Self = Self(350006);
    /// Lacks permission to perform the operation.
    #[doc(alias = "DDErrorCodeNext")]
    pub const Next: Self = Self(350007);
}

unsafe impl Encode for DDErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for DDErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Type for returning NSError's from functions. Avoids long and repetitious method signatures.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/dderrorouttype?language=objc)
pub type DDErrorOutType = *mut *mut NSError;

/// Invoked when a fail-able operation completes or an error occurs.
///
/// Parameter `inError`: nil if successful. non-nil if an error occurred.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/dderrorhandler?language=objc)
#[cfg(feature = "block2")]
pub type DDErrorHandler = *mut block2::Block<dyn Fn(*mut NSError)>;
