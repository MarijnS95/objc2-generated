//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfattributedstringref?language=objc)
pub type CFAttributedStringRef = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutableattributedstringref?language=objc)
pub type CFMutableAttributedStringRef = *mut c_void;

extern "C-unwind" {
    /// Returns the type identifier of all CFAttributedString instances.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    /// Creates an attributed string with the specified string and attributes (both copied).
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}

extern "C-unwind" {
    /// Creates a sub-attributed string from the specified range. It's a programming error for range to specify characters outside the bounds of aStr.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        a_str: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}

extern "C-unwind" {
    /// Creates an immutable attributed string copy.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        a_str: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}

extern "C-unwind" {
    /// Returns the string for the attributed string. For performance reasons, this will often point at the backing store of the attributed string, and it might change if the attributed string is edited.  However, this is an implementation detail, and definitely not something that should be counted on.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetString(a_str: CFAttributedStringRef) -> CFStringRef;
}

extern "C-unwind" {
    /// Returns the length of the attributed string in characters; same as CFStringGetLength(CFAttributedStringGetString(aStr))
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetLength(a_str: CFAttributedStringRef) -> CFIndex;
}

extern "C-unwind" {
    /// Returns the attributes at the specified location. If effectiveRange is not NULL, upon return *effectiveRange contains a range over which the exact same set of attributes apply. Note that for performance reasons, the returned effectiveRange is not necessarily the maximal range - for that, use CFAttributedStringGetAttributesAndLongestEffectiveRange().  It's a programming error for loc to specify a location outside the bounds of the attributed string.
    ///
    /// Note that the returned attribute dictionary might change in unpredictable ways from under the caller if the attributed string is edited after this call. If you wish to hang on to the dictionary long-term, you should make an actual copy of it rather than just retaining it.  Also, no assumptions should be made about the relationship of the actual CFDictionaryRef returned by this call and the dictionary originally used to set the attributes, other than the fact that the values stored in the dictionary will be identical (that is, ==) to those originally specified.
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFAttributedStringGetAttributes(
        a_str: CFAttributedStringRef,
        loc: CFIndex,
        effective_range: *mut CFRange,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    /// Returns the value of a single attribute at the specified location. If the specified attribute doesn't exist at the location, returns NULL. If effectiveRange is not NULL, upon return *effectiveRange contains a range over which the exact same attribute value applies. Note that for performance reasons, the returned effectiveRange is not necessarily the maximal range - for that, use CFAttributedStringGetAttributeAndLongestEffectiveRange(). It's a programming error for loc to specify a location outside the bounds of the attributed string.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetAttribute(
        a_str: CFAttributedStringRef,
        loc: CFIndex,
        attr_name: CFStringRef,
        effective_range: *mut CFRange,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    /// Returns the attributes at the specified location. If longestEffectiveRange is not NULL, upon return *longestEffectiveRange contains the maximal range within inRange over which the exact same set of attributes apply. The returned range is clipped to inRange. It's a programming error for loc or inRange to specify locations outside the bounds of the attributed string.
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        a_str: CFAttributedStringRef,
        loc: CFIndex,
        in_range: CFRange,
        longest_effective_range: *mut CFRange,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    /// Returns the value of a single attribute at the specified location. If longestEffectiveRange is not NULL, upon return *longestEffectiveRange contains the maximal range within inRange over which the exact same attribute value applies. The returned range is clipped to inRange. It's a programming error for loc or inRange to specify locations outside the bounds of the attributed string.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        a_str: CFAttributedStringRef,
        loc: CFIndex,
        attr_name: CFStringRef,
        in_range: CFRange,
        longest_effective_range: *mut CFRange,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    /// Creates a mutable attributed string copy. maxLength, if not 0, is a hard bound on the length of the attributed string; exceeding this size limit during any editing operation is a programming error. If 0, there is no limit on the length.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        max_length: CFIndex,
        a_str: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}

extern "C-unwind" {
    /// Creates a mutable empty attributed string. maxLength, if not 0, is a hard bound on the length of the attributed string; exceeding this size limit during any editing operation is a programming error. If 0, there is no limit on the length.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        max_length: CFIndex,
    ) -> CFMutableAttributedStringRef;
}

extern "C-unwind" {
    /// Modifies the string for the attributed string, much like CFStringReplace().  It's an error for range to specify characters outside the bounds of aStr.
    ///
    /// (Note: This function is a convenience on CFAttributedStringGetMutableString(); however, until CFAttributedStringGetMutableString() is implemented, it remains the only way to edit the string of the attributed string.)
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringReplaceString(
        a_str: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}

extern "C-unwind" {
    /// Gets the string for the attributed string as a mutable string, allowing editing the character contents of the string as if it were an CFMutableString. Attributes corresponding to the edited range are appropriately modified. If, as a result of the edit, new characters are introduced into the string, they inherit the attributes of the first replaced character from range. If no existing characters are replaced by the edit, the new characters inherit the attributes of the character preceding range if it has any, otherwise of the character following range. If the initial string is empty, the attributes for the new characters are also empty.
    ///
    /// (Note: This function is not yet implemented and will return NULL except for toll-free bridged instances.)
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetMutableString(
        a_str: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}

extern "C-unwind" {
    /// Sets the value of multiple attributes over the specified range, which should be valid. If clearOtherAttributes is false, existing attributes (which aren't being replaced) are left alone; otherwise they are cleared. The dictionary should be setup for "usual" CF type usage --- CFString keys, and arbitrary CFType values. Note that after this call, further mutations to the replacement dictionary argument by the caller will not affect the contents of the attributed string.
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFAttributedStringSetAttributes(
        a_str: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clear_other_attributes: Boolean,
    );
}

extern "C-unwind" {
    /// Sets the value of a single attribute over the specified range, which should be valid. value should not be NULL.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringSetAttribute(
        a_str: CFMutableAttributedStringRef,
        range: CFRange,
        attr_name: CFStringRef,
        value: CFTypeRef,
    );
}

extern "C-unwind" {
    /// Removes the value of a single attribute over the specified range, which should be valid. It's OK for the attribute not the exist over the specified range.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringRemoveAttribute(
        a_str: CFMutableAttributedStringRef,
        range: CFRange,
        attr_name: CFStringRef,
    );
}

extern "C-unwind" {
    /// Replaces the attributed substring over the specified range with the attributed string specified in replacement. range should be valid. To delete a range of the attributed string, call CFAttributedStringReplaceString() with empty string and specified range.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringReplaceAttributedString(
        a_str: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}

extern "C-unwind" {
    /// In cases where attributed string might do a bunch of work to assure self-consistency, CFAttributedStringBeginEditing/CFAttributedStringEndEditing allow disabling that to allow deferring and coalescing any work. It's a good idea to call these around a set of related mutation calls which don't require the string to be in consistent state in between. These calls can be nested.
    pub fn CFAttributedStringBeginEditing(a_str: CFMutableAttributedStringRef);
}

extern "C-unwind" {
    /// In cases where attributed string might do a bunch of work to assure self-consistency, CFAttributedStringBeginEditing/CFAttributedStringEndEditing allow disabling that to allow deferring and coalescing any work. It's a good idea to call these around a set of related mutation calls which don't require the string to be in consistent state in between. These calls can be nested.
    pub fn CFAttributedStringEndEditing(a_str: CFMutableAttributedStringRef);
}

extern "C-unwind" {
    /// Fills bidiLevels by applying the Unicode Bidi Algorithm (P, X, W, N, and I) to the characters in range. Returns true if the result is not uni-level LTR (in other words, needing further Bidi processing). baseDirection is NSWritingDirection (NSWritingDirectionNatural, NSWritingDirectionLeftToRight, and NSWritingDirectionRightToLeft).  Understands NSWritingDirectionAttributeName values.
    #[cfg(feature = "CFBase")]
    pub fn CFAttributedStringGetBidiLevelsAndResolvedDirections(
        attributed_string: CFAttributedStringRef,
        range: CFRange,
        base_direction: i8,
        bidi_levels: *mut u8,
        base_directions: *mut u8,
    ) -> bool;
}
