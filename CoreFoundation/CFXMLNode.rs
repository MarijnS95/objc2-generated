//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfxmlnodecurrentversion?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFXMLNodeCurrentVersion: CFIndex = 1;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlnoderef?language=objc)
pub type CFXMLNodeRef = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmltreeref?language=objc)
#[cfg(feature = "CFTree")]
pub type CFXMLTreeRef = CFTreeRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlnodetypecode?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFXMLNodeTypeCode(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFXMLNodeTypeCode {
    pub const kCFXMLNodeTypeDocument: Self = Self(1);
    pub const kCFXMLNodeTypeElement: Self = Self(2);
    pub const kCFXMLNodeTypeAttribute: Self = Self(3);
    pub const kCFXMLNodeTypeProcessingInstruction: Self = Self(4);
    pub const kCFXMLNodeTypeComment: Self = Self(5);
    pub const kCFXMLNodeTypeText: Self = Self(6);
    pub const kCFXMLNodeTypeCDATASection: Self = Self(7);
    pub const kCFXMLNodeTypeDocumentFragment: Self = Self(8);
    pub const kCFXMLNodeTypeEntity: Self = Self(9);
    pub const kCFXMLNodeTypeEntityReference: Self = Self(10);
    pub const kCFXMLNodeTypeDocumentType: Self = Self(11);
    pub const kCFXMLNodeTypeWhitespace: Self = Self(12);
    pub const kCFXMLNodeTypeNotation: Self = Self(13);
    pub const kCFXMLNodeTypeElementTypeDeclaration: Self = Self(14);
    pub const kCFXMLNodeTypeAttributeListDeclaration: Self = Self(15);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLNodeTypeCode {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLNodeTypeCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlelementinfo?language=objc)
#[cfg(all(feature = "CFArray", feature = "CFDictionary"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub(crate) _reserved: [c_char; 3],
}

#[cfg(all(feature = "CFArray", feature = "CFDictionary", feature = "objc2"))]
unsafe impl Encode for CFXMLElementInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFDictionaryRef>::ENCODING,
            <CFArrayRef>::ENCODING,
            <Boolean>::ENCODING,
            <[c_char; 3]>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFArray", feature = "CFDictionary", feature = "objc2"))]
unsafe impl RefEncode for CFXMLElementInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlprocessinginstructioninfo?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLProcessingInstructionInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFStringRef>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLProcessingInstructionInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmldocumentinfo?language=objc)
#[cfg(all(feature = "CFString", feature = "CFURL"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}

#[cfg(all(feature = "CFString", feature = "CFURL", feature = "objc2"))]
unsafe impl Encode for CFXMLDocumentInfo {
    const ENCODING: Encoding =
        Encoding::Struct("?", &[<CFURLRef>::ENCODING, <CFStringEncoding>::ENCODING]);
}

#[cfg(all(feature = "CFString", feature = "CFURL", feature = "objc2"))]
unsafe impl RefEncode for CFXMLDocumentInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlexternalid?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFURL"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl Encode for CFXMLExternalID {
    const ENCODING: Encoding =
        Encoding::Struct("?", &[<CFURLRef>::ENCODING, <CFStringRef>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl RefEncode for CFXMLExternalID {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmldocumenttypeinfo?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFURL"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl Encode for CFXMLDocumentTypeInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFXMLExternalID>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl RefEncode for CFXMLDocumentTypeInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlnotationinfo?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFURL"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl Encode for CFXMLNotationInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFXMLExternalID>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl RefEncode for CFXMLNotationInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlelementtypedeclarationinfo?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLElementTypeDeclarationInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFStringRef>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLElementTypeDeclarationInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlattributedeclarationinfo?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLAttributeDeclarationInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFStringRef>::ENCODING,
            <CFStringRef>::ENCODING,
            <CFStringRef>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLAttributeDeclarationInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlattributelistdeclarationinfo?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLAttributeListDeclarationInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut CFXMLAttributeDeclarationInfo>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLAttributeListDeclarationInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlentitytypecode?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFXMLEntityTypeCode(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFXMLEntityTypeCode {
    pub const kCFXMLEntityTypeParameter: Self = Self(0);
    pub const kCFXMLEntityTypeParsedInternal: Self = Self(1);
    pub const kCFXMLEntityTypeParsedExternal: Self = Self(2);
    pub const kCFXMLEntityTypeUnparsed: Self = Self(3);
    pub const kCFXMLEntityTypeCharacter: Self = Self(4);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLEntityTypeCode {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLEntityTypeCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlentityinfo?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFURL"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl Encode for CFXMLEntityInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFXMLEntityTypeCode>::ENCODING,
            <CFStringRef>::ENCODING,
            <CFXMLExternalID>::ENCODING,
            <CFStringRef>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "CFURL", feature = "objc2"))]
unsafe impl RefEncode for CFXMLEntityInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlentityreferenceinfo?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLEntityReferenceInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFXMLEntityTypeCode>::ENCODING]);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLEntityReferenceInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xml_type: CFXMLNodeTypeCode,
        data_string: CFStringRef,
        additional_info_ptr: *const c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, orig_node: CFXMLNodeRef) -> CFXMLNodeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}

extern "C-unwind" {
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFTree"))]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFTree")]
    #[deprecated = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeGetNode(xml_tree: CFXMLTreeRef) -> CFXMLNodeRef;
}
