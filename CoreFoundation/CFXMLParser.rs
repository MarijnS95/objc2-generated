//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserref?language=objc)
pub type CFXMLParserRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparseroptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFXMLParserOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFXMLParserOptions: CFOptionFlags {
        const kCFXMLParserValidateDocument = 1<<0;
        const kCFXMLParserSkipMetaData = 1<<1;
        const kCFXMLParserReplacePhysicalEntities = 1<<2;
        const kCFXMLParserSkipWhitespace = 1<<3;
        const kCFXMLParserResolveExternalEntities = 1<<4;
        const kCFXMLParserAddImpliedAttributes = 1<<5;
        const kCFXMLParserAllOptions = 0x00FFFFFF;
        const kCFXMLParserNoOptions = 0;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLParserOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLParserOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserstatuscode?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFXMLParserStatusCode(pub CFIndex);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFXMLParserStatusCode: CFIndex {
        const kCFXMLStatusParseNotBegun = -2;
        const kCFXMLStatusParseInProgress = -1;
        const kCFXMLStatusParseSuccessful = 0;
        const kCFXMLErrorUnexpectedEOF = 1;
        const kCFXMLErrorUnknownEncoding = 2;
        const kCFXMLErrorEncodingConversionFailure = 3;
        const kCFXMLErrorMalformedProcessingInstruction = 4;
        const kCFXMLErrorMalformedDTD = 5;
        const kCFXMLErrorMalformedName = 6;
        const kCFXMLErrorMalformedCDSect = 7;
        const kCFXMLErrorMalformedCloseTag = 8;
        const kCFXMLErrorMalformedStartTag = 9;
        const kCFXMLErrorMalformedDocument = 10;
        const kCFXMLErrorElementlessDocument = 11;
        const kCFXMLErrorMalformedComment = 12;
        const kCFXMLErrorMalformedCharacterReference = 13;
        const kCFXMLErrorMalformedParsedCharacterData = 14;
        const kCFXMLErrorNoData = 15;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLParserStatusCode {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLParserStatusCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparsercreatexmlstructurecallback?language=objc)
#[cfg(feature = "CFXMLNode")]
pub type CFXMLParserCreateXMLStructureCallBack =
    Option<unsafe extern "C-unwind" fn(CFXMLParserRef, CFXMLNodeRef, *mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparseraddchildcallback?language=objc)
pub type CFXMLParserAddChildCallBack =
    Option<unsafe extern "C-unwind" fn(CFXMLParserRef, *mut c_void, *mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserendxmlstructurecallback?language=objc)
pub type CFXMLParserEndXMLStructureCallBack =
    Option<unsafe extern "C-unwind" fn(CFXMLParserRef, *mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserresolveexternalentitycallback?language=objc)
#[cfg(all(
    feature = "CFBase",
    feature = "CFData",
    feature = "CFURL",
    feature = "CFXMLNode"
))]
pub type CFXMLParserResolveExternalEntityCallBack = Option<
    unsafe extern "C-unwind" fn(CFXMLParserRef, *mut CFXMLExternalID, *mut c_void) -> CFDataRef,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserhandleerrorcallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFXMLParserHandleErrorCallBack = Option<
    unsafe extern "C-unwind" fn(CFXMLParserRef, CFXMLParserStatusCode, *mut c_void) -> Boolean,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparsercallbacks?language=objc)
#[cfg(all(
    feature = "CFBase",
    feature = "CFData",
    feature = "CFURL",
    feature = "CFXMLNode"
))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}

#[cfg(all(
    feature = "CFBase",
    feature = "CFData",
    feature = "CFURL",
    feature = "CFXMLNode",
    feature = "objc2"
))]
unsafe impl Encode for CFXMLParserCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFXMLParserCreateXMLStructureCallBack>::ENCODING,
            <CFXMLParserAddChildCallBack>::ENCODING,
            <CFXMLParserEndXMLStructureCallBack>::ENCODING,
            <CFXMLParserResolveExternalEntityCallBack>::ENCODING,
            <CFXMLParserHandleErrorCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(
    feature = "CFBase",
    feature = "CFData",
    feature = "CFURL",
    feature = "CFXMLNode",
    feature = "objc2"
))]
unsafe impl RefEncode for CFXMLParserCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserretaincallback?language=objc)
pub type CFXMLParserRetainCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparserreleasecallback?language=objc)
pub type CFXMLParserReleaseCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparsercopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFXMLParserCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfxmlparsercontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFXMLParserContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <CFXMLParserRetainCallBack>::ENCODING,
            <CFXMLParserReleaseCallBack>::ENCODING,
            <CFXMLParserCopyDescriptionCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFXMLParserContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xml_data: CFDataRef,
        data_source: CFURLRef,
        parse_options: CFOptionFlags,
        version_of_nodes: CFIndex,
        call_backs: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        data_source: CFURLRef,
        parse_options: CFOptionFlags,
        version_of_nodes: CFIndex,
        call_backs: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, call_backs: *mut CFXMLParserCallBacks);
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}

extern "C-unwind" {
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        error_code: CFXMLParserStatusCode,
        error_description: CFStringRef,
    );
}

extern "C-unwind" {
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFTree",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xml_data: CFDataRef,
        data_source: CFURLRef,
        parse_options: CFOptionFlags,
        version_of_nodes: CFIndex,
    ) -> CFXMLTreeRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFDictionary",
        feature = "CFTree",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xml_data: CFDataRef,
        data_source: CFURLRef,
        parse_options: CFOptionFlags,
        version_of_nodes: CFIndex,
        error_dict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFTree",
        feature = "CFURL",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        data_source: CFURLRef,
        parse_options: CFOptionFlags,
        version_of_nodes: CFIndex,
    ) -> CFXMLTreeRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFBase",
        feature = "CFData",
        feature = "CFTree",
        feature = "CFXMLNode"
    ))]
    #[deprecated = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead"]
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xml_tree: CFXMLTreeRef) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entities_dictionary: CFDictionaryRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entities_dictionary: CFDictionaryRef,
    ) -> CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfxmltreeerrordescription?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfxmltreeerrorlinenumber?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfxmltreeerrorlocation?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfxmltreeerrorstatuscode?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
