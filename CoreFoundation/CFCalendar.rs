//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfcalendarref?language=objc)
#[repr(C)]
pub struct CFCalendarRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFCalendar"]
    unsafe impl CFCalendarRef {}
);

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFCalendarCopyCurrent() -> *mut CFCalendarRef;
}

extern "C-unwind" {
    /// Creates a calendar.  The identifiers are the `kCF*Calendar` constants in CFLocale.h.
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFCalendarCreateWithIdentifier(
        allocator: Option<&CFAllocatorRef>,
        identifier: Option<&CFCalendarIdentifier>,
    ) -> *mut CFCalendarRef;
}

extern "C-unwind" {
    /// Returns the calendar's identifier.
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFCalendarGetIdentifier(calendar: Option<&CFCalendarRef>) -> *mut CFCalendarIdentifier;
}

extern "C-unwind" {
    #[cfg(feature = "CFLocale")]
    pub fn CFCalendarCopyLocale(calendar: Option<&CFCalendarRef>) -> *mut CFLocaleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFLocale")]
    pub fn CFCalendarSetLocale(calendar: Option<&CFCalendarRef>, locale: Option<&CFLocaleRef>);
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFCalendarCopyTimeZone(calendar: Option<&CFCalendarRef>) -> *mut CFTimeZoneRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFCalendarSetTimeZone(calendar: Option<&CFCalendarRef>, tz: Option<&CFTimeZoneRef>);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarGetFirstWeekday(calendar: Option<&CFCalendarRef>) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarSetFirstWeekday(calendar: Option<&CFCalendarRef>, wkdy: CFIndex);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: Option<&CFCalendarRef>) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: Option<&CFCalendarRef>, mwd: CFIndex);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfcalendarunit?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFCalendarUnit(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFCalendarUnit: CFOptionFlags {
        #[doc(alias = "kCFCalendarUnitEra")]
        const Era = 1<<1;
        #[doc(alias = "kCFCalendarUnitYear")]
        const Year = 1<<2;
        #[doc(alias = "kCFCalendarUnitMonth")]
        const Month = 1<<3;
        #[doc(alias = "kCFCalendarUnitDay")]
        const Day = 1<<4;
        #[doc(alias = "kCFCalendarUnitHour")]
        const Hour = 1<<5;
        #[doc(alias = "kCFCalendarUnitMinute")]
        const Minute = 1<<6;
        #[doc(alias = "kCFCalendarUnitSecond")]
        const Second = 1<<7;
#[deprecated = "Use kCFCalendarUnitWeekOfYear or kCFCalendarUnitWeekOfMonth instead"]
        #[doc(alias = "kCFCalendarUnitWeek")]
        const Week = 1<<8;
        #[doc(alias = "kCFCalendarUnitWeekday")]
        const Weekday = 1<<9;
        #[doc(alias = "kCFCalendarUnitWeekdayOrdinal")]
        const WeekdayOrdinal = 1<<10;
        #[doc(alias = "kCFCalendarUnitQuarter")]
        const Quarter = 1<<11;
        #[doc(alias = "kCFCalendarUnitWeekOfMonth")]
        const WeekOfMonth = 1<<12;
        #[doc(alias = "kCFCalendarUnitWeekOfYear")]
        const WeekOfYear = 1<<13;
        #[doc(alias = "kCFCalendarUnitYearForWeekOfYear")]
        const YearForWeekOfYear = 1<<14;
        #[doc(alias = "kCFCalendarUnitDayOfYear")]
        const DayOfYear = 1<<16;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFCalendarUnit {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFCalendarUnit {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: Option<&CFCalendarRef>,
        unit: CFCalendarUnit,
    ) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: Option<&CFCalendarRef>,
        unit: CFCalendarUnit,
    ) -> CFRange;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFCalendarGetRangeOfUnit(
        calendar: Option<&CFCalendarRef>,
        smaller_unit: CFCalendarUnit,
        bigger_unit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: Option<&CFCalendarRef>,
        smaller_unit: CFCalendarUnit,
        bigger_unit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: Option<&CFCalendarRef>,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfcalendarcomponentswrap?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFCalendarComponentsWrap: CFOptionFlags = 1 << 0;
