//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryretaincallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFDictionaryRetainCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryreleasecallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFDictionaryReleaseCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionarycopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFDictionaryCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryequalcallback?language=objc)
pub type CFDictionaryEqualCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryhashcallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFDictionaryHashCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFHashCode>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionarykeycallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFDictionaryKeyCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFDictionaryRetainCallBack>::ENCODING,
            <CFDictionaryReleaseCallBack>::ENCODING,
            <CFDictionaryCopyDescriptionCallBack>::ENCODING,
            <CFDictionaryEqualCallBack>::ENCODING,
            <CFDictionaryHashCallBack>::ENCODING,
        ],
    );
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFDictionaryKeyCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftypedictionarykeycallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfcopystringdictionarykeycallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryvaluecallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFDictionaryValueCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFDictionaryRetainCallBack>::ENCODING,
            <CFDictionaryReleaseCallBack>::ENCODING,
            <CFDictionaryCopyDescriptionCallBack>::ENCODING,
            <CFDictionaryEqualCallBack>::ENCODING,
        ],
    );
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFDictionaryValueCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftypedictionaryvaluecallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryapplierfunction?language=objc)
pub type CFDictionaryApplierFunction =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdictionaryref?language=objc)
pub type CFDictionaryRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutabledictionaryref?language=objc)
pub type CFMutableDictionaryRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *mut c_void,
        values: *mut *mut c_void,
        num_values: CFIndex,
        key_call_backs: *mut CFDictionaryKeyCallBacks,
        value_call_backs: *mut CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        the_dict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        key_call_backs: *mut CFDictionaryKeyCallBacks,
        value_call_backs: *mut CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_dict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryGetCount(the_dict: CFDictionaryRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryGetCountOfKey(the_dict: CFDictionaryRef, key: *mut c_void) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDictionaryGetCountOfValue(the_dict: CFDictionaryRef, value: *mut c_void) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFDictionaryContainsKey(the_dict: CFDictionaryRef, key: *mut c_void) -> Boolean;
}

extern "C-unwind" {
    pub fn CFDictionaryContainsValue(the_dict: CFDictionaryRef, value: *mut c_void) -> Boolean;
}

extern "C-unwind" {
    pub fn CFDictionaryGetValue(the_dict: CFDictionaryRef, key: *mut c_void) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFDictionaryGetValueIfPresent(
        the_dict: CFDictionaryRef,
        key: *mut c_void,
        value: *mut *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFDictionaryGetKeysAndValues(
        the_dict: CFDictionaryRef,
        keys: *mut *mut c_void,
        values: *mut *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFDictionaryApplyFunction(
        the_dict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFDictionaryAddValue(
        the_dict: CFMutableDictionaryRef,
        key: *mut c_void,
        value: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFDictionarySetValue(
        the_dict: CFMutableDictionaryRef,
        key: *mut c_void,
        value: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFDictionaryReplaceValue(
        the_dict: CFMutableDictionaryRef,
        key: *mut c_void,
        value: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFDictionaryRemoveValue(the_dict: CFMutableDictionaryRef, key: *mut c_void);
}

extern "C-unwind" {
    pub fn CFDictionaryRemoveAllValues(the_dict: CFMutableDictionaryRef);
}
