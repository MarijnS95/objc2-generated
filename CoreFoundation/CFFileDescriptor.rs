//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffiledescriptornativedescriptor?language=objc)
pub type CFFileDescriptorNativeDescriptor = c_int;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffiledescriptorref?language=objc)
pub type CFFileDescriptorRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcffiledescriptorreadcallback?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFFileDescriptorReadCallBack: CFOptionFlags = 1 << 0;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcffiledescriptorwritecallback?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFFileDescriptorWriteCallBack: CFOptionFlags = 1 << 1;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffiledescriptorcallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFFileDescriptorCallBack =
    Option<unsafe extern "C-unwind" fn(CFFileDescriptorRef, CFOptionFlags, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffiledescriptorcontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>,
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFFileDescriptorContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void)>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>>::ENCODING,
        ],
    );
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFFileDescriptorContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        close_on_invalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *mut CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}

extern "C-unwind" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, call_back_types: CFOptionFlags);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, call_back_types: CFOptionFlags);
}

extern "C-unwind" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}

extern "C-unwind" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFRunLoop"))]
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
