//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpropertylistmutabilityoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFPropertyListMutabilityOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFPropertyListMutabilityOptions: CFOptionFlags {
        const kCFPropertyListImmutable = 0;
        const kCFPropertyListMutableContainers = 1<<0;
        const kCFPropertyListMutableContainersAndLeaves = 1<<1;
    }
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFPropertyListMutabilityOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFPropertyListMutabilityOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "Use CFPropertyListCreateWithData instead."]
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xml_data: CFDataRef,
        mutability_option: CFOptionFlags,
        error_string: *mut CFStringRef,
    ) -> CFPropertyListRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "Use CFPropertyListCreateData instead."]
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
        mutability_option: CFOptionFlags,
    ) -> CFPropertyListRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpropertylistformat?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFPropertyListFormat(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFPropertyListFormat {
    pub const kCFPropertyListOpenStepFormat: Self = Self(1);
    pub const kCFPropertyListXMLFormat_v1_0: Self = Self(100);
    pub const kCFPropertyListBinaryFormat_v1_0: Self = Self(200);
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFPropertyListFormat {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFPropertyListFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFStream"))]
    #[deprecated = "Use CFPropertyListWrite instead."]
    pub fn CFPropertyListWriteToStream(
        property_list: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        error_string: *mut CFStringRef,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFStream"))]
    #[deprecated = "Use CFPropertyListCreateWithStream instead."]
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        stream_length: CFIndex,
        mutability_option: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error_string: *mut CFStringRef,
    ) -> CFPropertyListRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadcorrupterror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadCorruptError: CFIndex = 3840;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadunknownversionerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadUnknownVersionError: CFIndex = 3841;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadstreamerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadStreamError: CFIndex = 3842;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistwritestreamerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListWriteStreamError: CFIndex = 3851;

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError", feature = "CFStream"))]
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        stream_length: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError", feature = "CFStream"))]
    pub fn CFPropertyListWrite(
        property_list: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        property_list: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
