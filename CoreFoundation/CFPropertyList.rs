//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpropertylistmutabilityoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFPropertyListMutabilityOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFPropertyListMutabilityOptions: CFOptionFlags {
        #[doc(alias = "kCFPropertyListImmutable")]
        const Immutable = 0;
        #[doc(alias = "kCFPropertyListMutableContainers")]
        const MutableContainers = 1<<0;
        #[doc(alias = "kCFPropertyListMutableContainersAndLeaves")]
        const MutableContainersAndLeaves = 1<<1;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFPropertyListMutabilityOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFPropertyListMutabilityOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "Use CFPropertyListCreateWithData instead."]
    pub fn CFPropertyListCreateFromXMLData(
        allocator: Option<&CFAllocator>,
        xml_data: Option<&CFData>,
        mutability_option: CFOptionFlags,
        error_string: *mut CFString,
    ) -> *mut CFPropertyList;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "Use CFPropertyListCreateData instead."]
    pub fn CFPropertyListCreateXMLData(
        allocator: Option<&CFAllocator>,
        property_list: Option<&CFPropertyList>,
    ) -> *mut CFData;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPropertyListCreateDeepCopy(
        allocator: Option<&CFAllocator>,
        property_list: Option<&CFPropertyList>,
        mutability_option: CFOptionFlags,
    ) -> *mut CFPropertyList;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpropertylistformat?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFPropertyListFormat(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFPropertyListFormat {
    #[doc(alias = "kCFPropertyListOpenStepFormat")]
    pub const OpenStepFormat: Self = Self(1);
    #[doc(alias = "kCFPropertyListXMLFormat_v1_0")]
    pub const XMLFormat_v1_0: Self = Self(100);
    #[doc(alias = "kCFPropertyListBinaryFormat_v1_0")]
    pub const BinaryFormat_v1_0: Self = Self(200);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFPropertyListFormat {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFPropertyListFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPropertyListIsValid(
        plist: Option<&CFPropertyList>,
        format: CFPropertyListFormat,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFStream"))]
    #[deprecated = "Use CFPropertyListWrite instead."]
    pub fn CFPropertyListWriteToStream(
        property_list: Option<&CFPropertyList>,
        stream: Option<&CFWriteStream>,
        format: CFPropertyListFormat,
        error_string: *mut CFString,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFStream"))]
    #[deprecated = "Use CFPropertyListCreateWithStream instead."]
    pub fn CFPropertyListCreateFromStream(
        allocator: Option<&CFAllocator>,
        stream: Option<&CFReadStream>,
        stream_length: CFIndex,
        mutability_option: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error_string: *mut CFString,
    ) -> *mut CFPropertyList;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadcorrupterror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadCorruptError: CFIndex = 3840;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadunknownversionerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadUnknownVersionError: CFIndex = 3841;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistreadstreamerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListReadStreamError: CFIndex = 3842;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpropertylistwritestreamerror?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFPropertyListWriteStreamError: CFIndex = 3851;

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFPropertyListCreateWithData(
        allocator: Option<&CFAllocator>,
        data: Option<&CFData>,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFError,
    ) -> *mut CFPropertyList;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError", feature = "CFStream"))]
    pub fn CFPropertyListCreateWithStream(
        allocator: Option<&CFAllocator>,
        stream: Option<&CFReadStream>,
        stream_length: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFError,
    ) -> *mut CFPropertyList;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError", feature = "CFStream"))]
    pub fn CFPropertyListWrite(
        property_list: Option<&CFPropertyList>,
        stream: Option<&CFWriteStream>,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFError,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFPropertyListCreateData(
        allocator: Option<&CFAllocator>,
        property_list: Option<&CFPropertyList>,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFError,
    ) -> *mut CFData;
}
