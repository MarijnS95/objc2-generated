//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}

extern "C-unwind" {
    pub fn CFTimeZoneResetSystem();
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFDate"))]
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        try_abbrev: Boolean,
    ) -> CFTimeZoneRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFData", feature = "CFDate"))]
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftimezonenamestyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFTimeZoneNameStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFTimeZoneNameStyle {
    pub const kCFTimeZoneNameStyleStandard: Self = Self(0);
    pub const kCFTimeZoneNameStyleShortStandard: Self = Self(1);
    pub const kCFTimeZoneNameStyleDaylightSaving: Self = Self(2);
    pub const kCFTimeZoneNameStyleShortDaylightSaving: Self = Self(3);
    pub const kCFTimeZoneNameStyleGeneric: Self = Self(4);
    pub const kCFTimeZoneNameStyleShortGeneric: Self = Self(5);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFTimeZoneNameStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFTimeZoneNameStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate", feature = "CFLocale"))]
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftimezonesystemtimezonedidchangenotification?language=objc)
    #[cfg(all(feature = "CFBase", feature = "CFNotificationCenter"))]
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
