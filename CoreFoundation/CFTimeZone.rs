//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

#[cfg(all(feature = "CFBase", feature = "CFDate"))]
unsafe impl ConcreteType for CFTimeZone {
    #[doc(alias = "CFTimeZoneGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CFTimeZoneGetTypeID() -> CFTypeID;
        }
        unsafe { CFTimeZoneGetTypeID() }
    }
}

#[cfg(feature = "CFDate")]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopySystem() -> Option<CFRetained<CFTimeZone>> {
    extern "C-unwind" {
        fn CFTimeZoneCopySystem() -> *mut CFTimeZone;
    }
    let ret = unsafe { CFTimeZoneCopySystem() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn CFTimeZoneResetSystem();
}

#[cfg(feature = "CFDate")]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopyDefault() -> Option<CFRetained<CFTimeZone>> {
    extern "C-unwind" {
        fn CFTimeZoneCopyDefault() -> *mut CFTimeZone;
    }
    let ret = unsafe { CFTimeZoneCopyDefault() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneSetDefault(tz: &CFTimeZone);
}

#[cfg(feature = "CFArray")]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopyKnownNames() -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn CFTimeZoneCopyKnownNames() -> *mut CFArray;
    }
    let ret = unsafe { CFTimeZoneCopyKnownNames() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(feature = "CFDictionary")]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopyAbbreviationDictionary(
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn CFTimeZoneCopyAbbreviationDictionary() -> *mut CFDictionary;
    }
    let ret = unsafe { CFTimeZoneCopyAbbreviationDictionary() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: Option<&CFDictionary>);
}

#[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCreate(
    allocator: Option<&CFAllocator>,
    name: Option<&CFString>,
    data: Option<&CFData>,
) -> Option<CFRetained<CFTimeZone>> {
    extern "C-unwind" {
        fn CFTimeZoneCreate(
            allocator: Option<&CFAllocator>,
            name: Option<&CFString>,
            data: Option<&CFData>,
        ) -> *mut CFTimeZone;
    }
    let ret = unsafe { CFTimeZoneCreate(allocator, name, data) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(all(feature = "CFBase", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCreateWithTimeIntervalFromGMT(
    allocator: Option<&CFAllocator>,
    ti: CFTimeInterval,
) -> Option<CFRetained<CFTimeZone>> {
    extern "C-unwind" {
        fn CFTimeZoneCreateWithTimeIntervalFromGMT(
            allocator: Option<&CFAllocator>,
            ti: CFTimeInterval,
        ) -> *mut CFTimeZone;
    }
    let ret = unsafe { CFTimeZoneCreateWithTimeIntervalFromGMT(allocator, ti) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(all(feature = "CFBase", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCreateWithName(
    allocator: Option<&CFAllocator>,
    name: Option<&CFString>,
    try_abbrev: bool,
) -> Option<CFRetained<CFTimeZone>> {
    extern "C-unwind" {
        fn CFTimeZoneCreateWithName(
            allocator: Option<&CFAllocator>,
            name: Option<&CFString>,
            try_abbrev: Boolean,
        ) -> *mut CFTimeZone;
    }
    let ret = unsafe { CFTimeZoneCreateWithName(allocator, name, try_abbrev as _) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(all(feature = "CFBase", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneGetName(tz: &CFTimeZone) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn CFTimeZoneGetName(tz: &CFTimeZone) -> *mut CFString;
    }
    let ret = unsafe { CFTimeZoneGetName(tz) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

#[cfg(all(feature = "CFData", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneGetData(tz: &CFTimeZone) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn CFTimeZoneGetData(tz: &CFTimeZone) -> *mut CFData;
    }
    let ret = unsafe { CFTimeZoneGetData(tz) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetSecondsFromGMT(tz: &CFTimeZone, at: CFAbsoluteTime) -> CFTimeInterval;
}

#[cfg(all(feature = "CFBase", feature = "CFDate"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopyAbbreviation(
    tz: &CFTimeZone,
    at: CFAbsoluteTime,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn CFTimeZoneCopyAbbreviation(tz: &CFTimeZone, at: CFAbsoluteTime) -> *mut CFString;
    }
    let ret = unsafe { CFTimeZoneCopyAbbreviation(tz, at) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(feature = "CFDate")]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneIsDaylightSavingTime(
    tz: &CFTimeZone,
    at: CFAbsoluteTime,
) -> bool {
    extern "C-unwind" {
        fn CFTimeZoneIsDaylightSavingTime(tz: &CFTimeZone, at: CFAbsoluteTime) -> Boolean;
    }
    let ret = unsafe { CFTimeZoneIsDaylightSavingTime(tz, at) };
    ret != 0
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: &CFTimeZone,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: &CFTimeZone,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftimezonenamestyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFTimeZoneNameStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFTimeZoneNameStyle {
    #[doc(alias = "kCFTimeZoneNameStyleStandard")]
    pub const Standard: Self = Self(0);
    #[doc(alias = "kCFTimeZoneNameStyleShortStandard")]
    pub const ShortStandard: Self = Self(1);
    #[doc(alias = "kCFTimeZoneNameStyleDaylightSaving")]
    pub const DaylightSaving: Self = Self(2);
    #[doc(alias = "kCFTimeZoneNameStyleShortDaylightSaving")]
    pub const ShortDaylightSaving: Self = Self(3);
    #[doc(alias = "kCFTimeZoneNameStyleGeneric")]
    pub const Generic: Self = Self(4);
    #[doc(alias = "kCFTimeZoneNameStyleShortGeneric")]
    pub const ShortGeneric: Self = Self(5);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFTimeZoneNameStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFTimeZoneNameStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[cfg(all(feature = "CFBase", feature = "CFDate", feature = "CFLocale"))]
#[inline]
pub unsafe extern "C-unwind" fn CFTimeZoneCopyLocalizedName(
    tz: &CFTimeZone,
    style: CFTimeZoneNameStyle,
    locale: Option<&CFLocale>,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn CFTimeZoneCopyLocalizedName(
            tz: &CFTimeZone,
            style: CFTimeZoneNameStyle,
            locale: Option<&CFLocale>,
        ) -> *mut CFString;
    }
    let ret = unsafe { CFTimeZoneCopyLocalizedName(tz, style, locale) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftimezonesystemtimezonedidchangenotification?language=objc)
    #[cfg(all(feature = "CFBase", feature = "CFNotificationCenter"))]
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: Option<&'static CFNotificationName>;
}
