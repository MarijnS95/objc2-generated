//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmessageportref?language=objc)
pub type CFMessagePortRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageportsuccess?language=objc)
pub const kCFMessagePortSuccess: i32 = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageportsendtimeout?language=objc)
pub const kCFMessagePortSendTimeout: i32 = -1;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageportreceivetimeout?language=objc)
pub const kCFMessagePortReceiveTimeout: i32 = -2;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageportisinvalid?language=objc)
pub const kCFMessagePortIsInvalid: i32 = -3;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageporttransporterror?language=objc)
pub const kCFMessagePortTransportError: i32 = -4;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfmessageportbecameinvaliderror?language=objc)
pub const kCFMessagePortBecameInvalidError: i32 = -5;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmessageportcontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFMessagePortContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void)>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFMessagePortContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmessageportcallback?language=objc)
#[cfg(feature = "CFData")]
pub type CFMessagePortCallBack =
    Option<unsafe extern "C-unwind" fn(CFMessagePortRef, i32, CFDataRef, *mut c_void) -> CFDataRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmessageportinvalidationcallback?language=objc)
pub type CFMessagePortInvalidationCallBack =
    Option<unsafe extern "C-unwind" fn(CFMessagePortRef, *mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        should_free_info: *mut Boolean,
    ) -> CFMessagePortRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}

extern "C-unwind" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, new_name: CFStringRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}

extern "C-unwind" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}

extern "C-unwind" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}

extern "C-unwind" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFDate"))]
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: i32,
        data: CFDataRef,
        send_timeout: CFTimeInterval,
        rcv_timeout: CFTimeInterval,
        reply_mode: CFStringRef,
        return_data: *mut CFDataRef,
    ) -> i32;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFRunLoop"))]
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
