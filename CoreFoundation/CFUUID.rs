//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfuuidref?language=objc)
#[repr(C)]
pub struct CFUUIDRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFUUID"]
    unsafe impl CFUUIDRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfuuidbytes?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFUUIDBytes {
    pub byte0: u8,
    pub byte1: u8,
    pub byte2: u8,
    pub byte3: u8,
    pub byte4: u8,
    pub byte5: u8,
    pub byte6: u8,
    pub byte7: u8,
    pub byte8: u8,
    pub byte9: u8,
    pub byte10: u8,
    pub byte11: u8,
    pub byte12: u8,
    pub byte13: u8,
    pub byte14: u8,
    pub byte15: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFUUIDBytes {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFUUIDBytes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDCreate(alloc: Option<&CFAllocatorRef>) -> *mut CFUUIDRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDCreateWithBytes(
        alloc: Option<&CFAllocatorRef>,
        byte0: u8,
        byte1: u8,
        byte2: u8,
        byte3: u8,
        byte4: u8,
        byte5: u8,
        byte6: u8,
        byte7: u8,
        byte8: u8,
        byte9: u8,
        byte10: u8,
        byte11: u8,
        byte12: u8,
        byte13: u8,
        byte14: u8,
        byte15: u8,
    ) -> *mut CFUUIDRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDCreateFromString(
        alloc: Option<&CFAllocatorRef>,
        uuid_str: Option<&CFStringRef>,
    ) -> *mut CFUUIDRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDCreateString(
        alloc: Option<&CFAllocatorRef>,
        uuid: Option<&CFUUIDRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: Option<&CFAllocatorRef>,
        byte0: u8,
        byte1: u8,
        byte2: u8,
        byte3: u8,
        byte4: u8,
        byte5: u8,
        byte6: u8,
        byte7: u8,
        byte8: u8,
        byte9: u8,
        byte10: u8,
        byte11: u8,
        byte12: u8,
        byte13: u8,
        byte14: u8,
        byte15: u8,
    ) -> *mut CFUUIDRef;
}

extern "C-unwind" {
    pub fn CFUUIDGetUUIDBytes(uuid: Option<&CFUUIDRef>) -> CFUUIDBytes;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFUUIDCreateFromUUIDBytes(
        alloc: Option<&CFAllocatorRef>,
        bytes: CFUUIDBytes,
    ) -> *mut CFUUIDRef;
}
