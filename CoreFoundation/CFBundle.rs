//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbundleref?language=objc)
pub type CFBundleRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginref?language=objc)
pub type CFPlugInRef = *mut c_void;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleinfodictionaryversionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleExecutableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleversionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleVersionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundledevelopmentregionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundlenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundlelocalizationskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleLocalizationsKey: CFStringRef;
}

extern "C-unwind" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetBundleWithIdentifier(bundle_id: CFStringRef) -> CFBundleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundle_url: CFURLRef) -> CFBundleRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directory_url: CFURLRef,
        bundle_type: CFStringRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        package_type: *mut u32,
        package_creator: *mut u32,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> u32;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFURL"))]
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundle_url: CFURLRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        package_type: *mut u32,
        package_creator: *mut u32,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        table_name: CFStringRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLInDirectory(
        bundle_url: CFURLRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundle_url: CFURLRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyPreferredLocalizationsFromArray(loc_array: CFArrayRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyLocalizationsForPreferences(
        loc_array: CFArrayRef,
        pref_array: CFArrayRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resource_name: CFStringRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
        localization_name: CFStringRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resource_type: CFStringRef,
        sub_dir_name: CFStringRef,
        localization_name: CFStringRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFURL"))]
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFURL"))]
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFURL"))]
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturei386?language=objc)
pub const kCFBundleExecutableArchitectureI386: c_uint = 0x00000007;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitectureppc?language=objc)
pub const kCFBundleExecutableArchitecturePPC: c_uint = 0x00000012;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturex86_64?language=objc)
pub const kCFBundleExecutableArchitectureX86_64: c_uint = 0x01000007;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitectureppc64?language=objc)
pub const kCFBundleExecutableArchitecturePPC64: c_uint = 0x01000012;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturearm64?language=objc)
pub const kCFBundleExecutableArchitectureARM64: c_uint = 0x0100000c;

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        function_name: CFStringRef,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        function_names: CFArrayRef,
        ftbl: *mut *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbol_name: CFStringRef,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbol_names: CFArrayRef,
        stbl: *mut *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executable_name: CFStringRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFBundleIsArchitectureLoadable(arch: libc::cpu_type_t) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbundlerefnum?language=objc)
pub type CFBundleRefNum = c_int;

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        ref_num: *mut CFBundleRefNum,
        localized_ref_num: *mut CFBundleRefNum,
    ) -> i32;
}

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, ref_num: CFBundleRefNum);
}
