//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbundle?language=objc)
#[repr(C)]
pub struct CFBundle {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFBundle"]
    unsafe impl CFBundle {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugin?language=objc)
#[repr(C)]
pub struct CFPlugIn {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFBundle"]
    unsafe impl CFPlugIn {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleinfodictionaryversionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleInfoDictionaryVersionKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleExecutableKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleIdentifierKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleversionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleVersionKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundledevelopmentregionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleDevelopmentRegionKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundlenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleNameKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundlelocalizationskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFBundleLocalizationsKey: Option<&'static CFString>;
}

extern "C-unwind" {
    pub fn CFBundleGetMainBundle() -> *mut CFBundle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetBundleWithIdentifier(bundle_id: Option<&CFString>) -> *mut CFBundle;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetAllBundles() -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCreate(
        allocator: Option<&CFAllocator>,
        bundle_url: Option<&CFURL>,
    ) -> *mut CFBundle;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: Option<&CFAllocator>,
        directory_url: Option<&CFURL>,
        bundle_type: Option<&CFString>,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyBundleURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetValueForInfoDictionaryKey(
        bundle: Option<&CFBundle>,
        key: Option<&CFString>,
    ) -> *mut CFType;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFBundleGetInfoDictionary(bundle: Option<&CFBundle>) -> *mut CFDictionary;
}

extern "C-unwind" {
    #[cfg(feature = "CFDictionary")]
    pub fn CFBundleGetLocalInfoDictionary(bundle: Option<&CFBundle>) -> *mut CFDictionary;
}

extern "C-unwind" {
    pub fn CFBundleGetPackageInfo(
        bundle: Option<&CFBundle>,
        package_type: *mut u32,
        package_creator: *mut u32,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetIdentifier(bundle: Option<&CFBundle>) -> *mut CFString;
}

extern "C-unwind" {
    pub fn CFBundleGetVersionNumber(bundle: Option<&CFBundle>) -> u32;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetDevelopmentRegion(bundle: Option<&CFBundle>) -> *mut CFString;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySharedFrameworksURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopySharedSupportURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFURL"))]
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundle_url: Option<&CFURL>) -> *mut CFDictionary;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleGetPackageInfoInDirectory(
        url: Option<&CFURL>,
        package_type: *mut u32,
        package_creator: *mut u32,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURL(
        bundle: Option<&CFBundle>,
        resource_name: Option<&CFString>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
    ) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: Option<&CFBundle>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleCopyLocalizedString(
        bundle: Option<&CFBundle>,
        key: Option<&CFString>,
        value: Option<&CFString>,
        table_name: Option<&CFString>,
    ) -> *mut CFString;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLInDirectory(
        bundle_url: Option<&CFURL>,
        resource_name: Option<&CFString>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
    ) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundle_url: Option<&CFURL>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyBundleLocalizations(bundle: Option<&CFBundle>) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyPreferredLocalizationsFromArray(loc_array: Option<&CFArray>)
        -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyLocalizationsForPreferences(
        loc_array: Option<&CFArray>,
        pref_array: Option<&CFArray>,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: Option<&CFBundle>,
        resource_name: Option<&CFString>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
        localization_name: Option<&CFString>,
    ) -> *mut CFURL;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: Option<&CFBundle>,
        resource_type: Option<&CFString>,
        sub_dir_name: Option<&CFString>,
        localization_name: Option<&CFString>,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFURL"))]
    pub fn CFBundleCopyInfoDictionaryForURL(url: Option<&CFURL>) -> *mut CFDictionary;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFURL"))]
    pub fn CFBundleCopyLocalizationsForURL(url: Option<&CFURL>) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFURL"))]
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: Option<&CFURL>) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleCopyExecutableURL(bundle: Option<&CFBundle>) -> *mut CFURL;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturei386?language=objc)
pub const kCFBundleExecutableArchitectureI386: c_uint = 0x00000007;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitectureppc?language=objc)
pub const kCFBundleExecutableArchitecturePPC: c_uint = 0x00000012;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturex86_64?language=objc)
pub const kCFBundleExecutableArchitectureX86_64: c_uint = 0x01000007;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitectureppc64?language=objc)
pub const kCFBundleExecutableArchitecturePPC64: c_uint = 0x01000012;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbundleexecutablearchitecturearm64?language=objc)
pub const kCFBundleExecutableArchitectureARM64: c_uint = 0x0100000c;

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleCopyExecutableArchitectures(bundle: Option<&CFBundle>) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFBundlePreflightExecutable(bundle: Option<&CFBundle>, error: *mut CFError) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: Option<&CFBundle>,
        error: *mut CFError,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleLoadExecutable(bundle: Option<&CFBundle>) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleIsExecutableLoaded(bundle: Option<&CFBundle>) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleUnloadExecutable(bundle: Option<&CFBundle>);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetFunctionPointerForName(
        bundle: Option<&CFBundle>,
        function_name: Option<&CFString>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: Option<&CFBundle>,
        function_names: Option<&CFArray>,
        ftbl: *mut *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBundleGetDataPointerForName(
        bundle: Option<&CFBundle>,
        symbol_name: Option<&CFString>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFBundleGetDataPointersForNames(
        bundle: Option<&CFBundle>,
        symbol_names: Option<&CFArray>,
        stbl: *mut *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFURL"))]
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: Option<&CFBundle>,
        executable_name: Option<&CFString>,
    ) -> *mut CFURL;
}

extern "C-unwind" {
    pub fn CFBundleIsExecutableLoadable(bundle: Option<&CFBundle>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFURL")]
    pub fn CFBundleIsExecutableLoadableForURL(url: Option<&CFURL>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFBundleIsArchitectureLoadable(arch: libc::cpu_type_t) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBundleGetPlugIn(bundle: Option<&CFBundle>) -> *mut CFPlugIn;
}

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleOpenBundleResourceMap(bundle: Option<&CFBundle>) -> CFBundleRefNum;
}

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: Option<&CFBundle>,
        ref_num: *mut CFBundleRefNum,
        localized_ref_num: *mut CFBundleRefNum,
    ) -> i32;
}

extern "C-unwind" {
    #[deprecated = "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles."]
    pub fn CFBundleCloseBundleResourceMap(bundle: Option<&CFBundle>, ref_num: CFBundleRefNum);
}
