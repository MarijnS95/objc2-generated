//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbooleanref?language=objc)
#[repr(C)]
pub struct CFBooleanRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFBoolean"]
    unsafe impl CFBooleanRef {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbooleantrue?language=objc)
    pub static kCFBooleanTrue: Option<&'static CFBooleanRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbooleanfalse?language=objc)
    pub static kCFBooleanFalse: Option<&'static CFBooleanRef>;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFBooleanGetValue(boolean: Option<&CFBooleanRef>) -> Boolean;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumbertype?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberType(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNumberType {
    #[doc(alias = "kCFNumberSInt8Type")]
    pub const SInt8Type: Self = Self(1);
    #[doc(alias = "kCFNumberSInt16Type")]
    pub const SInt16Type: Self = Self(2);
    #[doc(alias = "kCFNumberSInt32Type")]
    pub const SInt32Type: Self = Self(3);
    #[doc(alias = "kCFNumberSInt64Type")]
    pub const SInt64Type: Self = Self(4);
    #[doc(alias = "kCFNumberFloat32Type")]
    pub const Float32Type: Self = Self(5);
    #[doc(alias = "kCFNumberFloat64Type")]
    pub const Float64Type: Self = Self(6);
    #[doc(alias = "kCFNumberCharType")]
    pub const CharType: Self = Self(7);
    #[doc(alias = "kCFNumberShortType")]
    pub const ShortType: Self = Self(8);
    #[doc(alias = "kCFNumberIntType")]
    pub const IntType: Self = Self(9);
    #[doc(alias = "kCFNumberLongType")]
    pub const LongType: Self = Self(10);
    #[doc(alias = "kCFNumberLongLongType")]
    pub const LongLongType: Self = Self(11);
    #[doc(alias = "kCFNumberFloatType")]
    pub const FloatType: Self = Self(12);
    #[doc(alias = "kCFNumberDoubleType")]
    pub const DoubleType: Self = Self(13);
    #[doc(alias = "kCFNumberCFIndexType")]
    pub const CFIndexType: Self = Self(14);
    #[doc(alias = "kCFNumberNSIntegerType")]
    pub const NSIntegerType: Self = Self(15);
    #[doc(alias = "kCFNumberCGFloatType")]
    pub const CGFloatType: Self = Self(16);
    #[doc(alias = "kCFNumberMaxType")]
    pub const MaxType: Self = Self(16);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNumberType {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNumberType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberref?language=objc)
#[repr(C)]
pub struct CFNumberRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFNumber"]
    unsafe impl CFNumberRef {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberpositiveinfinity?language=objc)
    pub static kCFNumberPositiveInfinity: Option<&'static CFNumberRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumbernegativeinfinity?language=objc)
    pub static kCFNumberNegativeInfinity: Option<&'static CFNumberRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumbernan?language=objc)
    pub static kCFNumberNaN: Option<&'static CFNumberRef>;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberCreate(
        allocator: Option<&CFAllocatorRef>,
        the_type: CFNumberType,
        value_ptr: *const c_void,
    ) -> *mut CFNumberRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetType(number: Option<&CFNumberRef>) -> CFNumberType;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetByteSize(number: Option<&CFNumberRef>) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFNumberIsFloatType(number: Option<&CFNumberRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetValue(
        number: Option<&CFNumberRef>,
        the_type: CFNumberType,
        value_ptr: *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberCompare(
        number: Option<&CFNumberRef>,
        other_number: Option<&CFNumberRef>,
        context: *mut c_void,
    ) -> CFComparisonResult;
}
