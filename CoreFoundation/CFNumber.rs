//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbooleanref?language=objc)
pub type CFBooleanRef = *mut c_void;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbooleantrue?language=objc)
    pub static kCFBooleanTrue: CFBooleanRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfbooleanfalse?language=objc)
    pub static kCFBooleanFalse: CFBooleanRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumbertype?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberType(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNumberType {
    pub const kCFNumberSInt8Type: Self = Self(1);
    pub const kCFNumberSInt16Type: Self = Self(2);
    pub const kCFNumberSInt32Type: Self = Self(3);
    pub const kCFNumberSInt64Type: Self = Self(4);
    pub const kCFNumberFloat32Type: Self = Self(5);
    pub const kCFNumberFloat64Type: Self = Self(6);
    pub const kCFNumberCharType: Self = Self(7);
    pub const kCFNumberShortType: Self = Self(8);
    pub const kCFNumberIntType: Self = Self(9);
    pub const kCFNumberLongType: Self = Self(10);
    pub const kCFNumberLongLongType: Self = Self(11);
    pub const kCFNumberFloatType: Self = Self(12);
    pub const kCFNumberDoubleType: Self = Self(13);
    pub const kCFNumberCFIndexType: Self = Self(14);
    pub const kCFNumberNSIntegerType: Self = Self(15);
    pub const kCFNumberCGFloatType: Self = Self(16);
    pub const kCFNumberMaxType: Self = Self(16);
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFNumberType {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFNumberType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberref?language=objc)
pub type CFNumberRef = *mut c_void;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberpositiveinfinity?language=objc)
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumbernegativeinfinity?language=objc)
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumbernan?language=objc)
    pub static kCFNumberNaN: CFNumberRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        the_type: CFNumberType,
        value_ptr: *mut c_void,
    ) -> CFNumberRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        the_type: CFNumberType,
        value_ptr: *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberCompare(
        number: CFNumberRef,
        other_number: CFNumberRef,
        context: *mut c_void,
    ) -> CFComparisonResult;
}
