//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarrayretaincallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFArrayRetainCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *const c_void) -> *const c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarrayreleasecallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFArrayReleaseCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *const c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarraycopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFArrayCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*const c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarrayequalcallback?language=objc)
pub type CFArrayEqualCallBack =
    Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarraycallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFArrayCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFArrayRetainCallBack>::ENCODING,
            <CFArrayReleaseCallBack>::ENCODING,
            <CFArrayCopyDescriptionCallBack>::ENCODING,
            <CFArrayEqualCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFArrayCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftypearraycallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarrayapplierfunction?language=objc)
pub type CFArrayApplierFunction = Option<unsafe extern "C-unwind" fn(*const c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfarrayref?language=objc)
pub type CFArrayRef = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablearrayref?language=objc)
pub type CFMutableArrayRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const c_void,
        num_values: CFIndex,
        call_backs: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, the_array: CFArrayRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_array: CFArrayRef,
    ) -> CFMutableArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetCount(the_array: CFArrayRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetCountOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *const c_void,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayContainsValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *const c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetValueAtIndex(the_array: CFArrayRef, idx: CFIndex) -> *const c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetValues(the_array: CFArrayRef, range: CFRange, values: *mut *const c_void);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayApplyFunction(
        the_array: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetFirstIndexOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *const c_void,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayGetLastIndexOfValue(
        the_array: CFArrayRef,
        range: CFRange,
        value: *const c_void,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayBSearchValues(
        the_array: CFArrayRef,
        range: CFRange,
        value: *const c_void,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    ) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFArrayAppendValue(the_array: CFMutableArrayRef, value: *const c_void);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayInsertValueAtIndex(
        the_array: CFMutableArrayRef,
        idx: CFIndex,
        value: *const c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArraySetValueAtIndex(the_array: CFMutableArrayRef, idx: CFIndex, value: *const c_void);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayRemoveValueAtIndex(the_array: CFMutableArrayRef, idx: CFIndex);
}

extern "C-unwind" {
    pub fn CFArrayRemoveAllValues(the_array: CFMutableArrayRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayReplaceValues(
        the_array: CFMutableArrayRef,
        range: CFRange,
        new_values: *mut *const c_void,
        new_count: CFIndex,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayExchangeValuesAtIndices(
        the_array: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArraySortValues(
        the_array: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFArrayAppendArray(
        the_array: CFMutableArrayRef,
        other_array: CFArrayRef,
        other_range: CFRange,
    );
}
