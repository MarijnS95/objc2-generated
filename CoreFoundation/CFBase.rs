//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatortypeid?language=objc)
pub type CFAllocatorTypeID = c_ulonglong;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfcorefoundationversionnumber?language=objc)
    pub static kCFCoreFoundationVersionNumber: c_double;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftypeid?language=objc)
pub type CFTypeID = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfoptionflags?language=objc)
pub type CFOptionFlags = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfhashcode?language=objc)
pub type CFHashCode = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfindex?language=objc)
pub type CFIndex = c_long;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftyperef?language=objc)
pub type CFTypeRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfstringref?language=objc)
pub type CFStringRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablestringref?language=objc)
pub type CFMutableStringRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpropertylistref?language=objc)
pub type CFPropertyListRef = CFTypeRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfcomparisonresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFComparisonResult(pub CFIndex);
impl CFComparisonResult {
    pub const kCFCompareLessThan: Self = Self(-1);
    pub const kCFCompareEqualTo: Self = Self(0);
    pub const kCFCompareGreaterThan: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFComparisonResult {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFComparisonResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfcomparatorfunction?language=objc)
pub type CFComparatorFunction = Option<
    unsafe extern "C-unwind" fn(*mut c_void, *mut c_void, *mut c_void) -> CFComparisonResult,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnotfound?language=objc)
pub static kCFNotFound: CFIndex = -1;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrange?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFRange {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFIndex>::ENCODING, <CFIndex>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFRange {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn CFRangeMake(loc: CFIndex,len: CFIndex,) -> CFRange;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnullref?language=objc)
pub type CFNullRef = *mut c_void;

extern "C-unwind" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnull?language=objc)
    pub static kCFNull: CFNullRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorref?language=objc)
pub type CFAllocatorRef = *mut c_void;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatordefault?language=objc)
    pub static kCFAllocatorDefault: CFAllocatorRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatorsystemdefault?language=objc)
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatormalloc?language=objc)
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatormalloczone?language=objc)
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatornull?language=objc)
    pub static kCFAllocatorNull: CFAllocatorRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfallocatorusecontext?language=objc)
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorretaincallback?language=objc)
pub type CFAllocatorRetainCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorreleasecallback?language=objc)
pub type CFAllocatorReleaseCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorcopydescriptioncallback?language=objc)
pub type CFAllocatorCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorallocatecallback?language=objc)
pub type CFAllocatorAllocateCallBack =
    Option<unsafe extern "C-unwind" fn(CFIndex, CFOptionFlags, *mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorreallocatecallback?language=objc)
pub type CFAllocatorReallocateCallBack = Option<
    unsafe extern "C-unwind" fn(*mut c_void, CFIndex, CFOptionFlags, *mut c_void) -> *mut c_void,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatordeallocatecallback?language=objc)
pub type CFAllocatorDeallocateCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorpreferredsizecallback?language=objc)
pub type CFAllocatorPreferredSizeCallBack =
    Option<unsafe extern "C-unwind" fn(CFIndex, CFOptionFlags, *mut c_void) -> CFIndex>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfallocatorcontext?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFAllocatorContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <CFAllocatorRetainCallBack>::ENCODING,
            <CFAllocatorReleaseCallBack>::ENCODING,
            <CFAllocatorCopyDescriptionCallBack>::ENCODING,
            <CFAllocatorAllocateCallBack>::ENCODING,
            <CFAllocatorReallocateCallBack>::ENCODING,
            <CFAllocatorDeallocateCallBack>::ENCODING,
            <CFAllocatorPreferredSizeCallBack>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFAllocatorContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}

extern "C-unwind" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}

extern "C-unwind" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}

extern "C-unwind" {
    pub fn CFAllocatorAllocateTyped(
        allocator: CFAllocatorRef,
        size: CFIndex,
        descriptor: CFAllocatorTypeID,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorReallocateTyped(
        allocator: CFAllocatorRef,
        ptr: *mut c_void,
        newsize: CFIndex,
        descriptor: CFAllocatorTypeID,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorAllocateBytes(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorReallocateBytes(
        allocator: CFAllocatorRef,
        ptr: *mut c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut c_void);
}

extern "C-unwind" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}

extern "C-unwind" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}

extern "C-unwind" {
    pub fn CFRelease(cf: CFTypeRef);
}

extern "C-unwind" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}

extern "C-unwind" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}

extern "C-unwind" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
