//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnotificationname?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "CFBase")]
pub type CFNotificationName = CFString;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnotificationcenter?language=objc)
#[repr(C)]
pub struct CFNotificationCenter {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFNotificationCenter"]
    unsafe impl CFNotificationCenter {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnotificationcallback?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
pub type CFNotificationCallback = Option<
    unsafe extern "C-unwind" fn(
        *mut CFNotificationCenter,
        *mut c_void,
        *mut CFNotificationName,
        *const c_void,
        *mut CFDictionary,
    ),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnotificationsuspensionbehavior?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNotificationSuspensionBehavior(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNotificationSuspensionBehavior {
    #[doc(alias = "CFNotificationSuspensionBehaviorDrop")]
    pub const Drop: Self = Self(1);
    #[doc(alias = "CFNotificationSuspensionBehaviorCoalesce")]
    pub const Coalesce: Self = Self(2);
    #[doc(alias = "CFNotificationSuspensionBehaviorHold")]
    pub const Hold: Self = Self(3);
    #[doc(alias = "CFNotificationSuspensionBehaviorDeliverImmediately")]
    pub const DeliverImmediately: Self = Self(4);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNotificationSuspensionBehavior {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNotificationSuspensionBehavior {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[cfg(feature = "CFBase")]
unsafe impl ConcreteType for CFNotificationCenter {
    #[doc(alias = "CFNotificationCenterGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CFNotificationCenterGetTypeID() -> CFTypeID;
        }
        unsafe { CFNotificationCenterGetTypeID() }
    }
}

#[inline]
pub unsafe extern "C-unwind" fn CFNotificationCenterGetLocalCenter(
) -> Option<CFRetained<CFNotificationCenter>> {
    extern "C-unwind" {
        fn CFNotificationCenterGetLocalCenter() -> *mut CFNotificationCenter;
    }
    let ret = unsafe { CFNotificationCenterGetLocalCenter() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CFNotificationCenterGetDistributedCenter(
) -> Option<CFRetained<CFNotificationCenter>> {
    extern "C-unwind" {
        fn CFNotificationCenterGetDistributedCenter() -> *mut CFNotificationCenter;
    }
    let ret = unsafe { CFNotificationCenterGetDistributedCenter() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CFNotificationCenterGetDarwinNotifyCenter(
) -> Option<CFRetained<CFNotificationCenter>> {
    extern "C-unwind" {
        fn CFNotificationCenterGetDarwinNotifyCenter() -> *mut CFNotificationCenter;
    }
    let ret = unsafe { CFNotificationCenterGetDarwinNotifyCenter() };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFNotificationCenterAddObserver(
        center: &CFNotificationCenter,
        observer: *const c_void,
        call_back: CFNotificationCallback,
        name: Option<&CFString>,
        object: *const c_void,
        suspension_behavior: CFNotificationSuspensionBehavior,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNotificationCenterRemoveObserver(
        center: &CFNotificationCenter,
        observer: *const c_void,
        name: Option<&CFNotificationName>,
        object: *const c_void,
    );
}

extern "C-unwind" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: &CFNotificationCenter,
        observer: *const c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFNotificationCenterPostNotification(
        center: &CFNotificationCenter,
        name: Option<&CFNotificationName>,
        object: *const c_void,
        user_info: Option<&CFDictionary>,
        deliver_immediately: Boolean,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnotificationdeliverimmediately?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFNotificationDeliverImmediately: CFOptionFlags = 1 << 0;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnotificationposttoallsessions?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFNotificationPostToAllSessions: CFOptionFlags = 1 << 1;

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: &CFNotificationCenter,
        name: Option<&CFNotificationName>,
        object: *const c_void,
        user_info: Option<&CFDictionary>,
        options: CFOptionFlags,
    );
}
