//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffilesecurityref?language=objc)
pub type CFFileSecurityRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        file_sec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecurityCopyOwnerUUID(
        file_sec: CFFileSecurityRef,
        owner_uuid: *mut CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecuritySetOwnerUUID(
        file_sec: CFFileSecurityRef,
        owner_uuid: CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecurityCopyGroupUUID(
        file_sec: CFFileSecurityRef,
        group_uuid: *mut CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecuritySetGroupUUID(
        file_sec: CFFileSecurityRef,
        group_uuid: CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetOwner(file_sec: CFFileSecurityRef, owner: *mut libc::uid_t) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetOwner(file_sec: CFFileSecurityRef, owner: libc::uid_t) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetGroup(file_sec: CFFileSecurityRef, group: *mut libc::gid_t) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetGroup(file_sec: CFFileSecurityRef, group: libc::gid_t) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetMode(file_sec: CFFileSecurityRef, mode: *mut libc::mode_t) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetMode(file_sec: CFFileSecurityRef, mode: libc::mode_t) -> Boolean;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffilesecurityclearoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFFileSecurityClearOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFFileSecurityClearOptions: CFOptionFlags {
        const kCFFileSecurityClearOwner = 1<<0;
        const kCFFileSecurityClearGroup = 1<<1;
        const kCFFileSecurityClearMode = 1<<2;
        const kCFFileSecurityClearOwnerUUID = 1<<3;
        const kCFFileSecurityClearGroupUUID = 1<<4;
        const kCFFileSecurityClearAccessControlList = 1<<5;
    }
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFFileSecurityClearOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFFileSecurityClearOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityClearProperties(
        file_sec: CFFileSecurityRef,
        clear_property_mask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
