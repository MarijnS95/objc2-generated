//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffilesecurityref?language=objc)
#[repr(C)]
pub struct CFFileSecurityRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFFileSecurity"]
    unsafe impl CFFileSecurityRef {}
);

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityCreate(allocator: Option<&CFAllocatorRef>) -> *mut CFFileSecurityRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityCreateCopy(
        allocator: Option<&CFAllocatorRef>,
        file_sec: Option<&CFFileSecurityRef>,
    ) -> *mut CFFileSecurityRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecurityCopyOwnerUUID(
        file_sec: Option<&CFFileSecurityRef>,
        owner_uuid: *mut CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecuritySetOwnerUUID(
        file_sec: Option<&CFFileSecurityRef>,
        owner_uuid: Option<&CFUUIDRef>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecurityCopyGroupUUID(
        file_sec: Option<&CFFileSecurityRef>,
        group_uuid: *mut CFUUIDRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFFileSecuritySetGroupUUID(
        file_sec: Option<&CFFileSecurityRef>,
        group_uuid: Option<&CFUUIDRef>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetOwner(
        file_sec: Option<&CFFileSecurityRef>,
        owner: *mut libc::uid_t,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetOwner(
        file_sec: Option<&CFFileSecurityRef>,
        owner: libc::uid_t,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetGroup(
        file_sec: Option<&CFFileSecurityRef>,
        group: *mut libc::gid_t,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetGroup(
        file_sec: Option<&CFFileSecurityRef>,
        group: libc::gid_t,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecurityGetMode(
        file_sec: Option<&CFFileSecurityRef>,
        mode: *mut libc::mode_t,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "libc")]
    pub fn CFFileSecuritySetMode(
        file_sec: Option<&CFFileSecurityRef>,
        mode: libc::mode_t,
    ) -> Boolean;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cffilesecurityclearoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFFileSecurityClearOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFFileSecurityClearOptions: CFOptionFlags {
        #[doc(alias = "kCFFileSecurityClearOwner")]
        const Owner = 1<<0;
        #[doc(alias = "kCFFileSecurityClearGroup")]
        const Group = 1<<1;
        #[doc(alias = "kCFFileSecurityClearMode")]
        const Mode = 1<<2;
        #[doc(alias = "kCFFileSecurityClearOwnerUUID")]
        const OwnerUUID = 1<<3;
        #[doc(alias = "kCFFileSecurityClearGroupUUID")]
        const GroupUUID = 1<<4;
        #[doc(alias = "kCFFileSecurityClearAccessControlList")]
        const AccessControlList = 1<<5;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFFileSecurityClearOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFFileSecurityClearOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFFileSecurityClearProperties(
        file_sec: Option<&CFFileSecurityRef>,
        clear_property_mask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
