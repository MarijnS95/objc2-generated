//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbinaryheapcomparecontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFBinaryHeapCompareContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void)>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFBinaryHeapCompareContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbinaryheapcallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>,
    pub compare: Option<
        unsafe extern "C-unwind" fn(*mut c_void, *mut c_void, *mut c_void) -> CFComparisonResult,
    >,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFBinaryHeapCallBacks {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFIndex>::ENCODING,<Option<unsafe extern "C-unwind" fn(CFAllocatorRef,*mut c_void,) -> *mut c_void>>::ENCODING,<Option<unsafe extern "C-unwind" fn(CFAllocatorRef,*mut c_void,)>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,) -> CFStringRef>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,*mut c_void,*mut c_void,) -> CFComparisonResult>>::ENCODING,]);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFBinaryHeapCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringbinaryheapcallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbinaryheapapplierfunction?language=objc)
pub type CFBinaryHeapApplierFunction =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbinaryheapref?language=objc)
pub type CFBinaryHeapRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFBinaryHeapCallBacks,
        compare_context: *mut CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: *mut c_void) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: *mut c_void) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *mut c_void);
}

extern "C-unwind" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *mut c_void);
}

extern "C-unwind" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}

extern "C-unwind" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
