//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatterkey?language=objc)
// NS_TYPED_ENUM
#[cfg(feature = "CFBase")]
pub type CFNumberFormatterKey = CFStringRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatterref?language=objc)
pub type CFNumberFormatterRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatterstyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberFormatterStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNumberFormatterStyle {
    pub const kCFNumberFormatterNoStyle: Self = Self(0);
    pub const kCFNumberFormatterDecimalStyle: Self = Self(1);
    pub const kCFNumberFormatterCurrencyStyle: Self = Self(2);
    pub const kCFNumberFormatterPercentStyle: Self = Self(3);
    pub const kCFNumberFormatterScientificStyle: Self = Self(4);
    pub const kCFNumberFormatterSpellOutStyle: Self = Self(5);
    pub const kCFNumberFormatterOrdinalStyle: Self = Self(6);
    pub const kCFNumberFormatterCurrencyISOCodeStyle: Self = Self(8);
    pub const kCFNumberFormatterCurrencyPluralStyle: Self = Self(9);
    pub const kCFNumberFormatterCurrencyAccountingStyle: Self = Self(10);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNumberFormatterStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNumberFormatterStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFLocale")]
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, format_string: CFStringRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFNumber"))]
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFNumber"))]
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number_type: CFNumberType,
        value_ptr: *mut c_void,
    ) -> CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatteroptionflags?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberFormatterOptionFlags(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFNumberFormatterOptionFlags: CFOptionFlags {
        const kCFNumberFormatterParseIntegersOnly = 1;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNumberFormatterOptionFlags {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNumberFormatterOptionFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFNumber"))]
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFNumber"))]
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        number_type: CFNumberType,
        value_ptr: *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattercurrencycode?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterdecimalseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattercurrencydecimalseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatteralwaysshowdecimalseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattergroupingseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterusegroupingseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpercentsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterzerosymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatternansymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterinfinitysymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterminussign?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterplussign?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattercurrencysymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterexponentsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterminintegerdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattermaxintegerdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterminfractiondigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattermaxfractiondigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattergroupingsize?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattersecondarygroupingsize?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterroundingmode?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterroundingincrement?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterformatwidth?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpaddingposition?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpaddingcharacter?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterdefaultformat?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattermultiplier?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpositiveprefix?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpositivesuffix?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatternegativeprefix?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatternegativesuffix?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterpermillsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterinternationalcurrencysymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattercurrencygroupingseparator?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterislenient?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterusesignificantdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformatterminsignificantdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattermaxsignificantdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfnumberformattermingroupingdigits?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFNumberFormatterMinGroupingDigits: CFNumberFormatterKey;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatterroundingmode?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberFormatterRoundingMode(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNumberFormatterRoundingMode {
    pub const kCFNumberFormatterRoundCeiling: Self = Self(0);
    pub const kCFNumberFormatterRoundFloor: Self = Self(1);
    pub const kCFNumberFormatterRoundDown: Self = Self(2);
    pub const kCFNumberFormatterRoundUp: Self = Self(3);
    pub const kCFNumberFormatterRoundHalfEven: Self = Self(4);
    pub const kCFNumberFormatterRoundHalfDown: Self = Self(5);
    pub const kCFNumberFormatterRoundHalfUp: Self = Self(6);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNumberFormatterRoundingMode {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNumberFormatterRoundingMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfnumberformatterpadposition?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFNumberFormatterPadPosition(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFNumberFormatterPadPosition {
    pub const kCFNumberFormatterPadBeforePrefix: Self = Self(0);
    pub const kCFNumberFormatterPadAfterPrefix: Self = Self(1);
    pub const kCFNumberFormatterPadBeforeSuffix: Self = Self(2);
    pub const kCFNumberFormatterPadAfterSuffix: Self = Self(3);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFNumberFormatterPadPosition {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFNumberFormatterPadPosition {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currency_code: CFStringRef,
        default_fraction_digits: *mut i32,
        rounding_increment: *mut c_double,
    ) -> Boolean;
}
