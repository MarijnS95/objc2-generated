//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlpathstyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLPathStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFURLPathStyle {
    pub const kCFURLPOSIXPathStyle: Self = Self(0);
    #[deprecated = "Carbon File Manager is deprecated, use kCFURLPOSIXPathStyle where possible"]
    pub const kCFURLHFSPathStyle: Self = Self(1);
    pub const kCFURLWindowsPathStyle: Self = Self(2);
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFURLPathStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFURLPathStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlref?language=objc)
pub type CFURLRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        url_bytes: *mut u8,
        length: CFIndex,
        encoding: CFStringEncoding,
        base_url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFString"))]
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escape_whitespace: Boolean,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        url_string: CFStringRef,
        base_url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relative_url_bytes: *mut u8,
        length: CFIndex,
        encoding: CFStringEncoding,
        base_url: CFURLRef,
        use_compatibility_mode: Boolean,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        file_path: CFStringRef,
        path_style: CFURLPathStyle,
        is_directory: Boolean,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *mut u8,
        buf_len: CFIndex,
        is_directory: Boolean,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        file_path: CFStringRef,
        path_style: CFURLPathStyle,
        is_directory: Boolean,
        base_url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *mut u8,
        buf_len: CFIndex,
        is_directory: Boolean,
        base_url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolve_against_base: Boolean,
        buffer: *mut u8,
        max_buf_len: CFIndex,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFURLCopyAbsoluteURL(relative_url: CFURLRef) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetString(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLGetBaseURL(an_url: CFURLRef) -> CFURLRef;
}

extern "C-unwind" {
    pub fn CFURLCanBeDecomposed(an_url: CFURLRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyScheme(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyNetLocation(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPath(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyStrictPath(an_url: CFURLRef, is_absolute: *mut Boolean) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyFileSystemPath(an_url: CFURLRef, path_style: CFURLPathStyle) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLHasDirectoryPath(an_url: CFURLRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyResourceSpecifier(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyHostName(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLGetPortNumber(an_url: CFURLRef) -> i32;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyUserName(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPassword(an_url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them."]
    pub fn CFURLCopyParameterString(
        an_url: CFURLRef,
        characters_to_leave_escaped: CFStringRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyQueryString(
        an_url: CFURLRef,
        characters_to_leave_escaped: CFStringRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyFragment(
        an_url: CFURLRef,
        characters_to_leave_escaped: CFStringRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        path_component: CFStringRef,
        is_directory: Boolean,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut u8, buffer_length: CFIndex) -> CFIndex;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlcomponenttype?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLComponentType(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFURLComponentType {
    pub const kCFURLComponentScheme: Self = Self(1);
    pub const kCFURLComponentNetLocation: Self = Self(2);
    pub const kCFURLComponentPath: Self = Self(3);
    pub const kCFURLComponentResourceSpecifier: Self = Self(4);
    pub const kCFURLComponentUser: Self = Self(5);
    pub const kCFURLComponentPassword: Self = Self(6);
    pub const kCFURLComponentUserInfo: Self = Self(7);
    pub const kCFURLComponentHost: Self = Self(8);
    pub const kCFURLComponentPort: Self = Self(9);
    pub const kCFURLComponentParameterString: Self = Self(10);
    pub const kCFURLComponentQuery: Self = Self(11);
    pub const kCFURLComponentFragment: Self = Self(12);
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFURLComponentType {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFURLComponentType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        range_including_separators: *mut CFRange,
    ) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        original_string: CFStringRef,
        characters_to_leave_escaped: CFStringRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    #[deprecated = "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding."]
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        orig_string: CFStringRef,
        chars_to_leave_escaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    #[deprecated = "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid)."]
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        original_string: CFStringRef,
        characters_to_leave_unescaped: CFStringRef,
        legal_url_characters_to_be_escaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        property_value_type_ref_ptr: *mut c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFDictionary", feature = "CFError"))]
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        property_value: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFError"))]
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyed_property_values: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlkeysofunsetvalueskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}

extern "C-unwind" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        property_value: CFTypeRef,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlnamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizednamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisregularfilekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsRegularFileKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisdirectorykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsDirectoryKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissymboliclinkkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisvolumekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsVolumeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlispackagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsPackageKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisapplicationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsApplicationKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlapplicationisscriptablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissystemimmutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisuserimmutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlishiddenkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsHiddenKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlhashiddenextensionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcreationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCreationDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcontentaccessdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLContentAccessDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcontentmodificationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLContentModificationDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlattributemodificationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilecontentidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlmaysharefilecontentkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlmayhaveextendedattributeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlispurgeablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsPurgeableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissparsekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSparseKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllinkcountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLinkCountKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlparentdirectoryurlkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeurlkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeURLKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltypeidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizedtypedescriptionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllabelnumberkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLabelNumberKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllabelcolorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLabelColorKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizedlabelkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurleffectiveiconkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLEffectiveIconKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcustomiconkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCustomIconKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourceidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlpreferredioblocksizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisreadablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsReadableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurliswritablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsWritableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisexecutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsExecutableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilesecuritykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileSecurityKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisexcludedfrombackupkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltagnameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTagNamesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlpathkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLPathKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcanonicalpathkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCanonicalPathKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlismounttriggerkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlgenerationidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurldocumentidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurladdedtodirectorydatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlquarantinepropertieskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypenamedpipe?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypecharacterspecial?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypedirectory?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypeblockspecial?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetyperegular?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypesymboliclink?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypesocket?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypeunknown?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileallocatedsizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltotalfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltotalfileallocatedsizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisaliasfilekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsAliasFileKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectionnone?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionNone: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncomplete?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionComplete: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompleteunlessopen?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompleteuntilfirstuserauthentication?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompletewhenuserinactive?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteWhenUserInactive: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurldirectoryentrycountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLDirectoryEntryCountKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumelocalizedformatdescriptionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumetotalcapacitykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacitykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacityforimportantusagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacityforopportunisticusagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeresourcecountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportspersistentidskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportssymboliclinkskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportshardlinkskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsjournalingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisjournalingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportssparsefileskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportszerorunskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscasesensitivenameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscasepreservednameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsrootdirectorydateskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsvolumesizeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsrenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsadvisoryfilelockingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsextendedsecuritykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisbrowsablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumemaximumfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisejectablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisremovablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisinternalkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisautomountedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeislocalkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisreadonlykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumecreationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeurlforremountingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeuuidstringkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumelocalizednamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisencryptedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisrootfilesystemkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscompressionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsfilecloningkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsswaprenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsexclusiverenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsimmutablefileskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsaccesspermissionskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsfileprotectionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumetypenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeTypeNameKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesubtypekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSubtypeKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumemountfromlocationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeMountFromLocationKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisubiquitousitemkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemhasunresolvedconflictskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisdownloadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisdownloadingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisuploadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisuploadingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitempercentdownloadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitempercentuploadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatuskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingerrorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemuploadingerrorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisexcludedfromsynckey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatusnotdownloaded?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatusdownloaded?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatuscurrent?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkcreationoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLBookmarkCreationOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFURLBookmarkCreationOptions: CFOptionFlags {
        const kCFURLBookmarkCreationMinimalBookmarkMask = 1<<9;
        const kCFURLBookmarkCreationSuitableForBookmarkFile = 1<<10;
        const kCFURLBookmarkCreationWithSecurityScope = 1<<11;
        const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 1<<12;
        const kCFURLBookmarkCreationWithoutImplicitSecurityScope = 1<<29;
#[deprecated = "kCFURLBookmarkCreationPreferFileIDResolutionMask does nothing and has no effect on bookmark resolution"]
        const kCFURLBookmarkCreationPreferFileIDResolutionMask = 1<<8;
    }
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFURLBookmarkCreationOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFURLBookmarkCreationOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkresolutionoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLBookmarkResolutionOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFURLBookmarkResolutionOptions: CFOptionFlags {
        const kCFURLBookmarkResolutionWithoutUIMask = 1<<8;
        const kCFURLBookmarkResolutionWithoutMountingMask = 1<<9;
        const kCFURLBookmarkResolutionWithSecurityScope = 1<<10;
        const kCFURLBookmarkResolutionWithoutImplicitStartAccessing = 1<<15;
        const kCFBookmarkResolutionWithoutUIMask = CFURLBookmarkResolutionOptions::kCFURLBookmarkResolutionWithoutUIMask.0;
        const kCFBookmarkResolutionWithoutMountingMask = CFURLBookmarkResolutionOptions::kCFURLBookmarkResolutionWithoutMountingMask.0;
    }
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFURLBookmarkResolutionOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFURLBookmarkResolutionOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkfilecreationoptions?language=objc)
#[cfg(feature = "CFBase")]
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFError"
    ))]
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resource_properties_to_include: CFArrayRef,
        relative_to_url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFError"
    ))]
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relative_to_url: CFURLRef,
        resource_properties_to_include: CFArrayRef,
        is_stale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFDictionary"
    ))]
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resource_properties_to_return: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resource_property_key: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        file_url: CFURLRef,
        error_ref: *mut CFErrorRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFURLWriteBookmarkDataToFile(
        bookmark_ref: CFDataRef,
        file_url: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        error_ref: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "The Carbon Alias Manager is deprecated. This function should only be used to convert Carbon AliasRecords to bookmark data."]
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocator_ref: CFAllocatorRef,
        alias_record_data_ref: CFDataRef,
    ) -> CFDataRef;
}

extern "C-unwind" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}

extern "C-unwind" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
