//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlpathstyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLPathStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFURLPathStyle {
    #[doc(alias = "kCFURLPOSIXPathStyle")]
    pub const CFURLPOSIXPathStyle: Self = Self(0);
    #[deprecated = "Carbon File Manager is deprecated, use kCFURLPOSIXPathStyle where possible"]
    #[doc(alias = "kCFURLHFSPathStyle")]
    pub const CFURLHFSPathStyle: Self = Self(1);
    #[doc(alias = "kCFURLWindowsPathStyle")]
    pub const CFURLWindowsPathStyle: Self = Self(2);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFURLPathStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFURLPathStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlref?language=objc)
#[repr(C)]
pub struct CFURLRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFURL"]
    unsafe impl CFURLRef {}
);

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    pub fn CFURLCreateWithBytes(
        allocator: Option<&CFAllocatorRef>,
        url_bytes: *const u8,
        length: CFIndex,
        encoding: CFStringEncoding,
        base_url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFString"))]
    pub fn CFURLCreateData(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        encoding: CFStringEncoding,
        escape_whitespace: Boolean,
    ) -> *mut CFDataRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithString(
        allocator: Option<&CFAllocatorRef>,
        url_string: Option<&CFStringRef>,
        base_url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: Option<&CFAllocatorRef>,
        relative_url_bytes: *const u8,
        length: CFIndex,
        encoding: CFStringEncoding,
        base_url: Option<&CFURLRef>,
        use_compatibility_mode: Boolean,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithFileSystemPath(
        allocator: Option<&CFAllocatorRef>,
        file_path: Option<&CFStringRef>,
        path_style: CFURLPathStyle,
        is_directory: Boolean,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: Option<&CFAllocatorRef>,
        buffer: *const u8,
        buf_len: CFIndex,
        is_directory: Boolean,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: Option<&CFAllocatorRef>,
        file_path: Option<&CFStringRef>,
        path_style: CFURLPathStyle,
        is_directory: Boolean,
        base_url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: Option<&CFAllocatorRef>,
        buffer: *const u8,
        buf_len: CFIndex,
        is_directory: Boolean,
        base_url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetFileSystemRepresentation(
        url: Option<&CFURLRef>,
        resolve_against_base: Boolean,
        buffer: *mut u8,
        max_buf_len: CFIndex,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFURLCopyAbsoluteURL(relative_url: Option<&CFURLRef>) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetString(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLGetBaseURL(an_url: Option<&CFURLRef>) -> *mut CFURLRef;
}

extern "C-unwind" {
    pub fn CFURLCanBeDecomposed(an_url: Option<&CFURLRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyScheme(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyNetLocation(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPath(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyStrictPath(
        an_url: Option<&CFURLRef>,
        is_absolute: *mut Boolean,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyFileSystemPath(
        an_url: Option<&CFURLRef>,
        path_style: CFURLPathStyle,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLHasDirectoryPath(an_url: Option<&CFURLRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyResourceSpecifier(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyHostName(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLGetPortNumber(an_url: Option<&CFURLRef>) -> i32;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyUserName(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPassword(an_url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    #[deprecated = "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them."]
    pub fn CFURLCopyParameterString(
        an_url: Option<&CFURLRef>,
        characters_to_leave_escaped: Option<&CFStringRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyQueryString(
        an_url: Option<&CFURLRef>,
        characters_to_leave_escaped: Option<&CFStringRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyFragment(
        an_url: Option<&CFURLRef>,
        characters_to_leave_escaped: Option<&CFStringRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyLastPathComponent(url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCopyPathExtension(url: Option<&CFURLRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        path_component: Option<&CFStringRef>,
        is_directory: Boolean,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        extension: Option<&CFStringRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetBytes(
        url: Option<&CFURLRef>,
        buffer: *mut u8,
        buffer_length: CFIndex,
    ) -> CFIndex;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlcomponenttype?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLComponentType(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFURLComponentType {
    #[doc(alias = "kCFURLComponentScheme")]
    pub const Scheme: Self = Self(1);
    #[doc(alias = "kCFURLComponentNetLocation")]
    pub const NetLocation: Self = Self(2);
    #[doc(alias = "kCFURLComponentPath")]
    pub const Path: Self = Self(3);
    #[doc(alias = "kCFURLComponentResourceSpecifier")]
    pub const ResourceSpecifier: Self = Self(4);
    #[doc(alias = "kCFURLComponentUser")]
    pub const User: Self = Self(5);
    #[doc(alias = "kCFURLComponentPassword")]
    pub const Password: Self = Self(6);
    #[doc(alias = "kCFURLComponentUserInfo")]
    pub const UserInfo: Self = Self(7);
    #[doc(alias = "kCFURLComponentHost")]
    pub const Host: Self = Self(8);
    #[doc(alias = "kCFURLComponentPort")]
    pub const Port: Self = Self(9);
    #[doc(alias = "kCFURLComponentParameterString")]
    pub const ParameterString: Self = Self(10);
    #[doc(alias = "kCFURLComponentQuery")]
    pub const Query: Self = Self(11);
    #[doc(alias = "kCFURLComponentFragment")]
    pub const Fragment: Self = Self(12);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFURLComponentType {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFURLComponentType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLGetByteRangeForComponent(
        url: Option<&CFURLRef>,
        component: CFURLComponentType,
        range_including_separators: *mut CFRange,
    ) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: Option<&CFAllocatorRef>,
        original_string: Option<&CFStringRef>,
        characters_to_leave_escaped: Option<&CFStringRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    #[deprecated = "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding."]
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: Option<&CFAllocatorRef>,
        orig_string: Option<&CFStringRef>,
        chars_to_leave_escaped: Option<&CFStringRef>,
        encoding: CFStringEncoding,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFString"))]
    #[deprecated = "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid)."]
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: Option<&CFAllocatorRef>,
        original_string: Option<&CFStringRef>,
        characters_to_leave_unescaped: Option<&CFStringRef>,
        legal_url_characters_to_be_escaped: Option<&CFStringRef>,
        encoding: CFStringEncoding,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    pub fn CFURLIsFileReferenceURL(url: Option<&CFURLRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCreateFileReferenceURL(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        error: *mut CFErrorRef,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCreateFilePathURL(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        error: *mut CFErrorRef,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLCopyResourcePropertyForKey(
        url: Option<&CFURLRef>,
        key: Option<&CFStringRef>,
        property_value_type_ref_ptr: *mut c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFDictionary", feature = "CFError"))]
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: Option<&CFURLRef>,
        keys: Option<&CFArrayRef>,
        error: *mut CFErrorRef,
    ) -> *mut CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFError"))]
    pub fn CFURLSetResourcePropertyForKey(
        url: Option<&CFURLRef>,
        key: Option<&CFStringRef>,
        property_value: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFDictionary", feature = "CFError"))]
    pub fn CFURLSetResourcePropertiesForKeys(
        url: Option<&CFURLRef>,
        keyed_property_values: Option<&CFDictionaryRef>,
        error: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlkeysofunsetvalueskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLKeysOfUnsetValuesKey: Option<&'static CFStringRef>;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLClearResourcePropertyCacheForKey(url: Option<&CFURLRef>, key: Option<&CFStringRef>);
}

extern "C-unwind" {
    pub fn CFURLClearResourcePropertyCache(url: Option<&CFURLRef>);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: Option<&CFURLRef>,
        key: Option<&CFStringRef>,
        property_value: CFTypeRef,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFError")]
    pub fn CFURLResourceIsReachable(url: Option<&CFURLRef>, error: *mut CFErrorRef) -> Boolean;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlnamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLNameKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizednamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedNameKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisregularfilekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsRegularFileKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisdirectorykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsDirectoryKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissymboliclinkkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSymbolicLinkKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisvolumekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsVolumeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlispackagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsPackageKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisapplicationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsApplicationKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlapplicationisscriptablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLApplicationIsScriptableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissystemimmutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSystemImmutableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisuserimmutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsUserImmutableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlishiddenkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsHiddenKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlhashiddenextensionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLHasHiddenExtensionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcreationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCreationDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcontentaccessdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLContentAccessDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcontentmodificationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLContentModificationDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlattributemodificationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLAttributeModificationDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilecontentidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileContentIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlmaysharefilecontentkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLMayShareFileContentKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlmayhaveextendedattributeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLMayHaveExtendedAttributesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlispurgeablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsPurgeableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlissparsekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsSparseKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllinkcountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLinkCountKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlparentdirectoryurlkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLParentDirectoryURLKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeurlkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeURLKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltypeidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTypeIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizedtypedescriptionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedTypeDescriptionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllabelnumberkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLabelNumberKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllabelcolorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLabelColorKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurllocalizedlabelkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLLocalizedLabelKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurleffectiveiconkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLEffectiveIconKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcustomiconkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCustomIconKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourceidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlpreferredioblocksizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLPreferredIOBlockSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisreadablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsReadableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurliswritablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsWritableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisexecutablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsExecutableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilesecuritykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileSecurityKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisexcludedfrombackupkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsExcludedFromBackupKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltagnameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTagNamesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlpathkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLPathKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlcanonicalpathkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLCanonicalPathKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlismounttriggerkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsMountTriggerKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlgenerationidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLGenerationIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurldocumentidentifierkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLDocumentIdentifierKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurladdedtodirectorydatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLAddedToDirectoryDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlquarantinepropertieskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLQuarantinePropertiesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypenamedpipe?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeNamedPipe: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypecharacterspecial?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeCharacterSpecial: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypedirectory?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeDirectory: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypeblockspecial?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeBlockSpecial: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetyperegular?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeRegular: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypesymboliclink?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeSymbolicLink: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypesocket?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeSocket: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileresourcetypeunknown?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileResourceTypeUnknown: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileallocatedsizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileAllocatedSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltotalfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTotalFileSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurltotalfileallocatedsizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLTotalFileAllocatedSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisaliasfilekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsAliasFileKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectionnone?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionNone: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncomplete?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionComplete: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompleteunlessopen?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteUnlessOpen: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompleteuntilfirstuserauthentication?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication:
        Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlfileprotectioncompletewhenuserinactive?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLFileProtectionCompleteWhenUserInactive: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurldirectoryentrycountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLDirectoryEntryCountKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumelocalizedformatdescriptionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumetotalcapacitykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeTotalCapacityKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacitykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacityforimportantusagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeavailablecapacityforopportunisticusagekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeresourcecountkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeResourceCountKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportspersistentidskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsPersistentIDsKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportssymboliclinkskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSymbolicLinksKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportshardlinkskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsHardLinksKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsjournalingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsJournalingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisjournalingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsJournalingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportssparsefileskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSparseFilesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportszerorunskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsZeroRunsKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscasesensitivenameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscasepreservednameskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsrootdirectorydateskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsvolumesizeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsVolumeSizesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsrenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsRenamingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsadvisoryfilelockingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsextendedsecuritykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsExtendedSecurityKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisbrowsablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsBrowsableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumemaximumfilesizekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeMaximumFileSizeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisejectablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsEjectableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisremovablekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsRemovableKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisinternalkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsInternalKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisautomountedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsAutomountedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeislocalkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsLocalKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisreadonlykey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsReadOnlyKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumecreationdatekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeCreationDateKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeurlforremountingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeURLForRemountingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeuuidstringkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeUUIDStringKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeNameKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumelocalizednamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeLocalizedNameKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisencryptedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsEncryptedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumeisrootfilesystemkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeIsRootFileSystemKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportscompressionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsCompressionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsfilecloningkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsFileCloningKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsswaprenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsSwapRenamingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsexclusiverenamingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsimmutablefileskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsImmutableFilesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsaccesspermissionskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsAccessPermissionsKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesupportsfileprotectionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSupportsFileProtectionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumetypenamekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeTypeNameKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumesubtypekey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeSubtypeKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlvolumemountfromlocationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLVolumeMountFromLocationKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlisubiquitousitemkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLIsUbiquitousItemKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemhasunresolvedconflictskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisdownloadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsDownloadedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisdownloadingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsDownloadingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisuploadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsUploadedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisuploadingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsUploadingKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitempercentdownloadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemPercentDownloadedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitempercentuploadedkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemPercentUploadedKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatuskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingerrorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingErrorKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemuploadingerrorkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemUploadingErrorKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemisexcludedfromsynckey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatusnotdownloaded?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatusdownloaded?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfurlubiquitousitemdownloadingstatuscurrent?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: Option<&'static CFStringRef>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkcreationoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLBookmarkCreationOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFURLBookmarkCreationOptions: CFOptionFlags {
        #[doc(alias = "kCFURLBookmarkCreationMinimalBookmarkMask")]
        const MinimalBookmarkMask = 1<<9;
        #[doc(alias = "kCFURLBookmarkCreationSuitableForBookmarkFile")]
        const SuitableForBookmarkFile = 1<<10;
        #[doc(alias = "kCFURLBookmarkCreationWithSecurityScope")]
        const WithSecurityScope = 1<<11;
        #[doc(alias = "kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess")]
        const SecurityScopeAllowOnlyReadAccess = 1<<12;
        #[doc(alias = "kCFURLBookmarkCreationWithoutImplicitSecurityScope")]
        const WithoutImplicitSecurityScope = 1<<29;
#[deprecated = "kCFURLBookmarkCreationPreferFileIDResolutionMask does nothing and has no effect on bookmark resolution"]
        #[doc(alias = "kCFURLBookmarkCreationPreferFileIDResolutionMask")]
        const PreferFileIDResolutionMask = 1<<8;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFURLBookmarkCreationOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFURLBookmarkCreationOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkresolutionoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFURLBookmarkResolutionOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFURLBookmarkResolutionOptions: CFOptionFlags {
        #[doc(alias = "kCFURLBookmarkResolutionWithoutUIMask")]
        const CFURLBookmarkResolutionWithoutUIMask = 1<<8;
        #[doc(alias = "kCFURLBookmarkResolutionWithoutMountingMask")]
        const CFURLBookmarkResolutionWithoutMountingMask = 1<<9;
        #[doc(alias = "kCFURLBookmarkResolutionWithSecurityScope")]
        const CFURLBookmarkResolutionWithSecurityScope = 1<<10;
        #[doc(alias = "kCFURLBookmarkResolutionWithoutImplicitStartAccessing")]
        const CFURLBookmarkResolutionWithoutImplicitStartAccessing = 1<<15;
        #[doc(alias = "kCFBookmarkResolutionWithoutUIMask")]
        const CFBookmarkResolutionWithoutUIMask = CFURLBookmarkResolutionOptions::CFURLBookmarkResolutionWithoutUIMask.0;
        #[doc(alias = "kCFBookmarkResolutionWithoutMountingMask")]
        const CFBookmarkResolutionWithoutMountingMask = CFURLBookmarkResolutionOptions::CFURLBookmarkResolutionWithoutMountingMask.0;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFURLBookmarkResolutionOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFURLBookmarkResolutionOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfurlbookmarkfilecreationoptions?language=objc)
#[cfg(feature = "CFBase")]
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFError"
    ))]
    pub fn CFURLCreateBookmarkData(
        allocator: Option<&CFAllocatorRef>,
        url: Option<&CFURLRef>,
        options: CFURLBookmarkCreationOptions,
        resource_properties_to_include: Option<&CFArrayRef>,
        relative_to_url: Option<&CFURLRef>,
        error: *mut CFErrorRef,
    ) -> *mut CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFError"
    ))]
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: Option<&CFAllocatorRef>,
        bookmark: Option<&CFDataRef>,
        options: CFURLBookmarkResolutionOptions,
        relative_to_url: Option<&CFURLRef>,
        resource_properties_to_include: Option<&CFArrayRef>,
        is_stale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> *mut CFURLRef;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "CFArray",
        feature = "CFBase",
        feature = "CFData",
        feature = "CFDictionary"
    ))]
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: Option<&CFAllocatorRef>,
        resource_properties_to_return: Option<&CFArrayRef>,
        bookmark: Option<&CFDataRef>,
    ) -> *mut CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: Option<&CFAllocatorRef>,
        resource_property_key: Option<&CFStringRef>,
        bookmark: Option<&CFDataRef>,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: Option<&CFAllocatorRef>,
        file_url: Option<&CFURLRef>,
        error_ref: *mut CFErrorRef,
    ) -> *mut CFDataRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData", feature = "CFError"))]
    pub fn CFURLWriteBookmarkDataToFile(
        bookmark_ref: Option<&CFDataRef>,
        file_url: Option<&CFURLRef>,
        options: CFURLBookmarkFileCreationOptions,
        error_ref: *mut CFErrorRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFData"))]
    #[deprecated = "The Carbon Alias Manager is deprecated. This function should only be used to convert Carbon AliasRecords to bookmark data."]
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocator_ref: Option<&CFAllocatorRef>,
        alias_record_data_ref: Option<&CFDataRef>,
    ) -> *mut CFDataRef;
}

extern "C-unwind" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: Option<&CFURLRef>) -> Boolean;
}

extern "C-unwind" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: Option<&CFURLRef>);
}
