//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfstringtokenizerref?language=objc)
pub type CFStringTokenizerRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerunitword?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerUnitWord: CFOptionFlags = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerunitsentence?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerUnitSentence: CFOptionFlags = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerunitparagraph?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerUnitParagraph: CFOptionFlags = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerunitlinebreak?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerUnitLineBreak: CFOptionFlags = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerunitwordboundary?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerUnitWordBoundary: CFOptionFlags = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerattributelatintranscription?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerAttributeLatinTranscription: CFOptionFlags = 1 << 16;
/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfstringtokenizerattributelanguage?language=objc)
#[cfg(feature = "CFBase")]
pub const kCFStringTokenizerAttributeLanguage: CFOptionFlags = 1 << 17;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfstringtokenizertokentype?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFStringTokenizerTokenType(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFStringTokenizerTokenType: CFOptionFlags {
        const kCFStringTokenizerTokenNone = 0;
        const kCFStringTokenizerTokenNormal = 1<<0;
        const kCFStringTokenizerTokenHasSubTokensMask = 1<<1;
        const kCFStringTokenizerTokenHasDerivedSubTokensMask = 1<<2;
        const kCFStringTokenizerTokenHasHasNumbersMask = 1<<3;
        const kCFStringTokenizerTokenHasNonLettersMask = 1<<4;
        const kCFStringTokenizerTokenIsCJWordMask = 1<<5;
    }
}

#[cfg(feature = "CFBase")]
unsafe impl Encode for CFStringTokenizerTokenType {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(feature = "CFBase")]
unsafe impl RefEncode for CFStringTokenizerTokenType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        max_range_length: CFIndex,
        derived_sub_tokens: CFMutableArrayRef,
    ) -> CFIndex;
}
