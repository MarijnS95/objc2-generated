//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagretaincallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFBagRetainCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagreleasecallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFBagReleaseCallBack = Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagcopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFBagCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagequalcallback?language=objc)
pub type CFBagEqualCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbaghashcallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFBagHashCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFHashCode>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagcallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFBagCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFBagRetainCallBack>::ENCODING,
            <CFBagReleaseCallBack>::ENCODING,
            <CFBagCopyDescriptionCallBack>::ENCODING,
            <CFBagEqualCallBack>::ENCODING,
            <CFBagHashCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFBagCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftypebagcallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfcopystringbagcallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagapplierfunction?language=objc)
pub type CFBagApplierFunction = Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbagref?language=objc)
pub type CFBagRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablebagref?language=objc)
pub type CFMutableBagRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *mut c_void,
        num_values: CFIndex,
        call_backs: *mut CFBagCallBacks,
    ) -> CFBagRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, the_bag: CFBagRef) -> CFBagRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *mut CFBagCallBacks,
    ) -> CFMutableBagRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_bag: CFBagRef,
    ) -> CFMutableBagRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagGetCount(the_bag: CFBagRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBagGetCountOfValue(the_bag: CFBagRef, value: *mut c_void) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFBagContainsValue(the_bag: CFBagRef, value: *mut c_void) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBagGetValue(the_bag: CFBagRef, value: *mut c_void) -> *mut c_void;
}

extern "C-unwind" {
    pub fn CFBagGetValueIfPresent(
        the_bag: CFBagRef,
        candidate: *mut c_void,
        value: *mut *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFBagGetValues(the_bag: CFBagRef, values: *mut *mut c_void);
}

extern "C-unwind" {
    pub fn CFBagApplyFunction(
        the_bag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFBagAddValue(the_bag: CFMutableBagRef, value: *mut c_void);
}

extern "C-unwind" {
    pub fn CFBagReplaceValue(the_bag: CFMutableBagRef, value: *mut c_void);
}

extern "C-unwind" {
    pub fn CFBagSetValue(the_bag: CFMutableBagRef, value: *mut c_void);
}

extern "C-unwind" {
    pub fn CFBagRemoveValue(the_bag: CFMutableBagRef, value: *mut c_void);
}

extern "C-unwind" {
    pub fn CFBagRemoveAllValues(the_bag: CFMutableBagRef);
}
