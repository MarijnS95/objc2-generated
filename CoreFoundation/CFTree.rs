//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreeretaincallback?language=objc)
pub type CFTreeRetainCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreereleasecallback?language=objc)
pub type CFTreeReleaseCallBack = Option<unsafe extern "C-unwind" fn(*mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreecopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFTreeCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*mut c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreecontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFTreeContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <CFTreeRetainCallBack>::ENCODING,
            <CFTreeReleaseCallBack>::ENCODING,
            <CFTreeCopyDescriptionCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFTreeContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreeapplierfunction?language=objc)
pub type CFTreeApplierFunction = Option<unsafe extern "C-unwind" fn(*mut c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cftreeref?language=objc)
pub type CFTreeRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *mut CFTreeContext) -> CFTreeRef;
}

extern "C-unwind" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}

extern "C-unwind" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}

extern "C-unwind" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}

extern "C-unwind" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}

extern "C-unwind" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}

extern "C-unwind" {
    pub fn CFTreePrependChild(tree: CFTreeRef, new_child: CFTreeRef);
}

extern "C-unwind" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, new_child: CFTreeRef);
}

extern "C-unwind" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, new_sibling: CFTreeRef);
}

extern "C-unwind" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}

extern "C-unwind" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut c_void,
    );
}
