//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbit?language=objc)
pub type CFBit = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbitvectorref?language=objc)
pub type CFBitVectorRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablebitvectorref?language=objc)
pub type CFMutableBitVectorRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *mut u8,
        num_bits: CFIndex,
    ) -> CFBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut u8);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}

extern "C-unwind" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
