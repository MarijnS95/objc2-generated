//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbit?language=objc)
pub type CFBit = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfbitvectorref?language=objc)
#[repr(C)]
pub struct CFBitVectorRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFBitVector"]
    unsafe impl CFBitVectorRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablebitvectorref?language=objc)
#[repr(C)]
pub struct CFMutableBitVectorRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFBitVector"]
    unsafe impl CFMutableBitVectorRef: CFBitVectorRef {}
);

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreate(
        allocator: Option<&CFAllocatorRef>,
        bytes: *const u8,
        num_bits: CFIndex,
    ) -> *mut CFBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateCopy(
        allocator: Option<&CFAllocatorRef>,
        bv: Option<&CFBitVectorRef>,
    ) -> *mut CFBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateMutable(
        allocator: Option<&CFAllocatorRef>,
        capacity: CFIndex,
    ) -> *mut CFMutableBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorCreateMutableCopy(
        allocator: Option<&CFAllocatorRef>,
        capacity: CFIndex,
        bv: Option<&CFBitVectorRef>,
    ) -> *mut CFMutableBitVectorRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetCount(bv: Option<&CFBitVectorRef>) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetCountOfBit(
        bv: Option<&CFBitVectorRef>,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorContainsBit(
        bv: Option<&CFBitVectorRef>,
        range: CFRange,
        value: CFBit,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetBitAtIndex(bv: Option<&CFBitVectorRef>, idx: CFIndex) -> CFBit;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetBits(bv: Option<&CFBitVectorRef>, range: CFRange, bytes: *mut u8);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: Option<&CFBitVectorRef>,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: Option<&CFBitVectorRef>,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetCount(bv: Option<&CFMutableBitVectorRef>, count: CFIndex);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorFlipBitAtIndex(bv: Option<&CFMutableBitVectorRef>, idx: CFIndex);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorFlipBits(bv: Option<&CFMutableBitVectorRef>, range: CFRange);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetBitAtIndex(bv: Option<&CFMutableBitVectorRef>, idx: CFIndex, value: CFBit);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFBitVectorSetBits(bv: Option<&CFMutableBitVectorRef>, range: CFRange, value: CFBit);
}

extern "C-unwind" {
    pub fn CFBitVectorSetAllBits(bv: Option<&CFMutableBitVectorRef>, value: CFBit);
}
