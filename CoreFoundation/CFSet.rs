//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetretaincallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFSetRetainCallBack =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *const c_void) -> *const c_void>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetreleasecallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFSetReleaseCallBack = Option<unsafe extern "C-unwind" fn(CFAllocatorRef, *const c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetcopydescriptioncallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFSetCopyDescriptionCallBack =
    Option<unsafe extern "C-unwind" fn(*const c_void) -> CFStringRef>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetequalcallback?language=objc)
pub type CFSetEqualCallBack =
    Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> Boolean>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsethashcallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFSetHashCallBack = Option<unsafe extern "C-unwind" fn(*const c_void) -> CFHashCode>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetcallbacks?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFSetCallBacks {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <CFSetRetainCallBack>::ENCODING,
            <CFSetReleaseCallBack>::ENCODING,
            <CFSetCopyDescriptionCallBack>::ENCODING,
            <CFSetEqualCallBack>::ENCODING,
            <CFSetHashCallBack>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFSetCallBacks {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcftypesetcallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfcopystringsetcallbacks?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetapplierfunction?language=objc)
pub type CFSetApplierFunction = Option<unsafe extern "C-unwind" fn(*const c_void, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfsetref?language=objc)
pub type CFSetRef = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfmutablesetref?language=objc)
pub type CFMutableSetRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const c_void,
        num_values: CFIndex,
        call_backs: *const CFSetCallBacks,
    ) -> CFSetRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, the_set: CFSetRef) -> CFSetRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        call_backs: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        the_set: CFSetRef,
    ) -> CFMutableSetRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetGetCount(the_set: CFSetRef) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFSetGetCountOfValue(the_set: CFSetRef, value: *const c_void) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFSetContainsValue(the_set: CFSetRef, value: *const c_void) -> Boolean;
}

extern "C-unwind" {
    pub fn CFSetGetValue(the_set: CFSetRef, value: *const c_void) -> *const c_void;
}

extern "C-unwind" {
    pub fn CFSetGetValueIfPresent(
        the_set: CFSetRef,
        candidate: *const c_void,
        value: *mut *const c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    pub fn CFSetGetValues(the_set: CFSetRef, values: *mut *const c_void);
}

extern "C-unwind" {
    pub fn CFSetApplyFunction(
        the_set: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn CFSetAddValue(the_set: CFMutableSetRef, value: *const c_void);
}

extern "C-unwind" {
    pub fn CFSetReplaceValue(the_set: CFMutableSetRef, value: *const c_void);
}

extern "C-unwind" {
    pub fn CFSetSetValue(the_set: CFMutableSetRef, value: *const c_void);
}

extern "C-unwind" {
    pub fn CFSetRemoveValue(the_set: CFMutableSetRef, value: *const c_void);
}

extern "C-unwind" {
    pub fn CFSetRemoveAllValues(the_set: CFMutableSetRef);
}
