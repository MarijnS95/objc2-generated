//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopmode?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "CFBase")]
pub type CFRunLoopMode = CFStringRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopref?language=objc)
#[repr(C)]
pub struct CFRunLoopRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFRunLoop"]
    unsafe impl CFRunLoopRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopsourceref?language=objc)
#[repr(C)]
pub struct CFRunLoopSourceRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFRunLoopSource"]
    unsafe impl CFRunLoopSourceRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopobserverref?language=objc)
#[repr(C)]
pub struct CFRunLoopObserverRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFRunLoopObserver"]
    unsafe impl CFRunLoopObserverRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunlooptimerref?language=objc)
#[repr(C)]
pub struct CFRunLoopTimerRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFRunLoopTimer"]
    unsafe impl CFRunLoopTimerRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunlooprunresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFRunLoopRunResult(pub i32);
impl CFRunLoopRunResult {
    #[doc(alias = "kCFRunLoopRunFinished")]
    pub const Finished: Self = Self(1);
    #[doc(alias = "kCFRunLoopRunStopped")]
    pub const Stopped: Self = Self(2);
    #[doc(alias = "kCFRunLoopRunTimedOut")]
    pub const TimedOut: Self = Self(3);
    #[doc(alias = "kCFRunLoopRunHandledSource")]
    pub const HandledSource: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CFRunLoopRunResult {
    const ENCODING: Encoding = i32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CFRunLoopRunResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopactivity?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFRunLoopActivity(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFRunLoopActivity: CFOptionFlags {
        #[doc(alias = "kCFRunLoopEntry")]
        const Entry = 1<<0;
        #[doc(alias = "kCFRunLoopBeforeTimers")]
        const BeforeTimers = 1<<1;
        #[doc(alias = "kCFRunLoopBeforeSources")]
        const BeforeSources = 1<<2;
        #[doc(alias = "kCFRunLoopBeforeWaiting")]
        const BeforeWaiting = 1<<5;
        #[doc(alias = "kCFRunLoopAfterWaiting")]
        const AfterWaiting = 1<<6;
        #[doc(alias = "kCFRunLoopExit")]
        const Exit = 1<<7;
        #[doc(alias = "kCFRunLoopAllActivities")]
        const AllActivities = 0x0FFFFFFF;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFRunLoopActivity {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFRunLoopActivity {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfrunloopdefaultmode?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFRunLoopDefaultMode: Option<&'static CFRunLoopMode>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfrunloopcommonmodes?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFRunLoopCommonModes: Option<&'static CFRunLoopMode>;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    pub fn CFRunLoopGetCurrent() -> *mut CFRunLoopRef;
}

extern "C-unwind" {
    pub fn CFRunLoopGetMain() -> *mut CFRunLoopRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopCopyCurrentMode(rl: Option<&CFRunLoopRef>) -> *mut CFRunLoopMode;
}

extern "C-unwind" {
    #[cfg(feature = "CFArray")]
    pub fn CFRunLoopCopyAllModes(rl: Option<&CFRunLoopRef>) -> *mut CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopAddCommonMode(rl: Option<&CFRunLoopRef>, mode: Option<&CFRunLoopMode>);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFRunLoopGetNextTimerFireDate(
        rl: Option<&CFRunLoopRef>,
        mode: Option<&CFRunLoopMode>,
    ) -> CFAbsoluteTime;
}

extern "C-unwind" {
    pub fn CFRunLoopRun();
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFRunLoopRunInMode(
        mode: Option<&CFRunLoopMode>,
        seconds: CFTimeInterval,
        return_after_source_handled: Boolean,
    ) -> CFRunLoopRunResult;
}

extern "C-unwind" {
    pub fn CFRunLoopIsWaiting(rl: Option<&CFRunLoopRef>) -> Boolean;
}

extern "C-unwind" {
    pub fn CFRunLoopWakeUp(rl: Option<&CFRunLoopRef>);
}

extern "C-unwind" {
    pub fn CFRunLoopStop(rl: Option<&CFRunLoopRef>);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "block2"))]
    pub fn CFRunLoopPerformBlock(
        rl: Option<&CFRunLoopRef>,
        mode: CFTypeRef,
        block: Option<&block2::Block<dyn Fn()>>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopContainsSource(
        rl: Option<&CFRunLoopRef>,
        source: Option<&CFRunLoopSourceRef>,
        mode: Option<&CFRunLoopMode>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopAddSource(
        rl: Option<&CFRunLoopRef>,
        source: Option<&CFRunLoopSourceRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopRemoveSource(
        rl: Option<&CFRunLoopRef>,
        source: Option<&CFRunLoopSourceRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopContainsObserver(
        rl: Option<&CFRunLoopRef>,
        observer: Option<&CFRunLoopObserverRef>,
        mode: Option<&CFRunLoopMode>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopAddObserver(
        rl: Option<&CFRunLoopRef>,
        observer: Option<&CFRunLoopObserverRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopRemoveObserver(
        rl: Option<&CFRunLoopRef>,
        observer: Option<&CFRunLoopObserverRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopContainsTimer(
        rl: Option<&CFRunLoopRef>,
        timer: Option<&CFRunLoopTimerRef>,
        mode: Option<&CFRunLoopMode>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopAddTimer(
        rl: Option<&CFRunLoopRef>,
        timer: Option<&CFRunLoopTimerRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopRemoveTimer(
        rl: Option<&CFRunLoopRef>,
        timer: Option<&CFRunLoopTimerRef>,
        mode: Option<&CFRunLoopMode>,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopsourcecontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*const c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>,
    pub equal: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> Boolean>,
    pub hash: Option<unsafe extern "C-unwind" fn(*const c_void) -> CFHashCode>,
    pub schedule:
        Option<unsafe extern "C-unwind" fn(*mut c_void, *mut CFRunLoopRef, *mut CFRunLoopMode)>,
    pub cancel:
        Option<unsafe extern "C-unwind" fn(*mut c_void, *mut CFRunLoopRef, *mut CFRunLoopMode)>,
    pub perform: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFRunLoopSourceContext {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFIndex>::ENCODING,<*mut c_void>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> *const c_void>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,)>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> *mut CFStringRef>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,*const c_void,) -> Boolean>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> CFHashCode>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,*mut CFRunLoopRef,*mut CFRunLoopMode,)>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,*mut CFRunLoopRef,*mut CFRunLoopMode,)>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,)>>::ENCODING,]);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFRunLoopSourceContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopsourcecontext1?language=objc)
#[cfg(all(feature = "CFBase", feature = "libc"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*const c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>,
    pub equal: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> Boolean>,
    pub hash: Option<unsafe extern "C-unwind" fn(*const c_void) -> CFHashCode>,
    pub getPort: Option<unsafe extern "C-unwind" fn(*mut c_void) -> libc::mach_port_t>,
    pub perform: Option<
        unsafe extern "C-unwind" fn(
            *mut c_void,
            CFIndex,
            *mut CFAllocatorRef,
            *mut c_void,
        ) -> *mut c_void,
    >,
}

#[cfg(all(feature = "CFBase", feature = "libc", feature = "objc2"))]
unsafe impl Encode for CFRunLoopSourceContext1 {
    const ENCODING: Encoding = Encoding::Struct("?", &[<CFIndex>::ENCODING,<*mut c_void>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> *const c_void>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,)>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> *mut CFStringRef>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,*const c_void,) -> Boolean>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*const c_void,) -> CFHashCode>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,) -> libc::mach_port_t>>::ENCODING,<Option<unsafe extern "C-unwind" fn(*mut c_void,CFIndex,*mut CFAllocatorRef,*mut c_void,) -> *mut c_void>>::ENCODING,]);
}

#[cfg(all(feature = "CFBase", feature = "libc", feature = "objc2"))]
unsafe impl RefEncode for CFRunLoopSourceContext1 {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopSourceCreate(
        allocator: Option<&CFAllocatorRef>,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> *mut CFRunLoopSourceRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopSourceGetOrder(source: Option<&CFRunLoopSourceRef>) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFRunLoopSourceInvalidate(source: Option<&CFRunLoopSourceRef>);
}

extern "C-unwind" {
    pub fn CFRunLoopSourceIsValid(source: Option<&CFRunLoopSourceRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopSourceGetContext(
        source: Option<&CFRunLoopSourceRef>,
        context: *mut CFRunLoopSourceContext,
    );
}

extern "C-unwind" {
    pub fn CFRunLoopSourceSignal(source: Option<&CFRunLoopSourceRef>);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopobservercontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*const c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFRunLoopObserverContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void)>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFRunLoopObserverContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunloopobservercallback?language=objc)
#[cfg(feature = "CFBase")]
pub type CFRunLoopObserverCallBack =
    Option<unsafe extern "C-unwind" fn(*mut CFRunLoopObserverRef, CFRunLoopActivity, *mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopObserverCreate(
        allocator: Option<&CFAllocatorRef>,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> *mut CFRunLoopObserverRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "block2"))]
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: Option<&CFAllocatorRef>,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: Option<&block2::Block<dyn Fn(*mut CFRunLoopObserverRef, CFRunLoopActivity)>>,
    ) -> *mut CFRunLoopObserverRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopObserverGetActivities(observer: Option<&CFRunLoopObserverRef>)
        -> CFOptionFlags;
}

extern "C-unwind" {
    pub fn CFRunLoopObserverDoesRepeat(observer: Option<&CFRunLoopObserverRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopObserverGetOrder(observer: Option<&CFRunLoopObserverRef>) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFRunLoopObserverInvalidate(observer: Option<&CFRunLoopObserverRef>);
}

extern "C-unwind" {
    pub fn CFRunLoopObserverIsValid(observer: Option<&CFRunLoopObserverRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopObserverGetContext(
        observer: Option<&CFRunLoopObserverRef>,
        context: *mut CFRunLoopObserverContext,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunlooptimercontext?language=objc)
#[cfg(feature = "CFBase")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut c_void,
    pub retain: Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>,
    pub release: Option<unsafe extern "C-unwind" fn(*const c_void)>,
    pub copyDescription: Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>,
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFRunLoopTimerContext {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CFIndex>::ENCODING,
            <*mut c_void>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void) -> *const c_void>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void)>>::ENCODING,
            <Option<unsafe extern "C-unwind" fn(*const c_void) -> *mut CFStringRef>>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFRunLoopTimerContext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfrunlooptimercallback?language=objc)
pub type CFRunLoopTimerCallBack =
    Option<unsafe extern "C-unwind" fn(*mut CFRunLoopTimerRef, *mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFRunLoopTimerCreate(
        allocator: Option<&CFAllocatorRef>,
        fire_date: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> *mut CFRunLoopTimerRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate", feature = "block2"))]
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: Option<&CFAllocatorRef>,
        fire_date: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: Option<&block2::Block<dyn Fn(*mut CFRunLoopTimerRef)>>,
    ) -> *mut CFRunLoopTimerRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFRunLoopTimerGetNextFireDate(timer: Option<&CFRunLoopTimerRef>) -> CFAbsoluteTime;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFRunLoopTimerSetNextFireDate(
        timer: Option<&CFRunLoopTimerRef>,
        fire_date: CFAbsoluteTime,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFRunLoopTimerGetInterval(timer: Option<&CFRunLoopTimerRef>) -> CFTimeInterval;
}

extern "C-unwind" {
    pub fn CFRunLoopTimerDoesRepeat(timer: Option<&CFRunLoopTimerRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopTimerGetOrder(timer: Option<&CFRunLoopTimerRef>) -> CFIndex;
}

extern "C-unwind" {
    pub fn CFRunLoopTimerInvalidate(timer: Option<&CFRunLoopTimerRef>);
}

extern "C-unwind" {
    pub fn CFRunLoopTimerIsValid(timer: Option<&CFRunLoopTimerRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFRunLoopTimerGetContext(
        timer: Option<&CFRunLoopTimerRef>,
        context: *mut CFRunLoopTimerContext,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFRunLoopTimerGetTolerance(timer: Option<&CFRunLoopTimerRef>) -> CFTimeInterval;
}

extern "C-unwind" {
    #[cfg(feature = "CFDate")]
    pub fn CFRunLoopTimerSetTolerance(timer: Option<&CFRunLoopTimerRef>, tolerance: CFTimeInterval);
}
