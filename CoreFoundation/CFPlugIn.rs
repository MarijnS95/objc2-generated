//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregistrationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegistrationKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregisterfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegisterFunctionKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginunloadfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInUnloadFunctionKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginfactorieskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInFactoriesKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugintypeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInTypesKey: Option<&'static CFString>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugindynamicregisterfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInDynamicRegisterFunction = Option<unsafe extern "C-unwind" fn(*mut CFPlugIn)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginunloadfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInUnloadFunction = Option<unsafe extern "C-unwind" fn(*mut CFPlugIn)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginfactoryfunction?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFUUID"))]
pub type CFPlugInFactoryFunction =
    Option<unsafe extern "C-unwind" fn(*mut CFAllocator, *mut CFUUID) -> *mut c_void>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}

#[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFURL"))]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInCreate(
    allocator: Option<&CFAllocator>,
    plug_in_url: Option<&CFURL>,
) -> Option<CFRetained<CFPlugIn>> {
    extern "C-unwind" {
        fn CFPlugInCreate(
            allocator: Option<&CFAllocator>,
            plug_in_url: Option<&CFURL>,
        ) -> *mut CFPlugIn;
    }
    let ret = unsafe { CFPlugInCreate(allocator, plug_in_url) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(feature = "CFBundle")]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInGetBundle(
    plug_in: Option<&CFPlugIn>,
) -> Option<CFRetained<CFBundle>> {
    extern "C-unwind" {
        fn CFPlugInGetBundle(plug_in: Option<&CFPlugIn>) -> *mut CFBundle;
    }
    let ret = unsafe { CFPlugInGetBundle(plug_in) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInSetLoadOnDemand(plug_in: Option<&CFPlugIn>, flag: Boolean);
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInIsLoadOnDemand(plug_in: Option<&CFPlugIn>) -> Boolean;
}

#[cfg(all(feature = "CFArray", feature = "CFUUID"))]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInFindFactoriesForPlugInType(
    type_uuid: Option<&CFUUID>,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn CFPlugInFindFactoriesForPlugInType(type_uuid: Option<&CFUUID>) -> *mut CFArray;
    }
    let ret = unsafe { CFPlugInFindFactoriesForPlugInType(type_uuid) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(all(feature = "CFArray", feature = "CFBundle", feature = "CFUUID"))]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    type_uuid: Option<&CFUUID>,
    plug_in: Option<&CFPlugIn>,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
            type_uuid: Option<&CFUUID>,
            plug_in: Option<&CFPlugIn>,
        ) -> *mut CFArray;
    }
    let ret = unsafe { CFPlugInFindFactoriesForPlugInTypeInPlugIn(type_uuid, plug_in) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInInstanceCreate(
        allocator: Option<&CFAllocator>,
        factory_uuid: Option<&CFUUID>,
        type_uuid: Option<&CFUUID>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunction(
        factory_uuid: Option<&CFUUID>,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factory_uuid: Option<&CFUUID>,
        plug_in: Option<&CFPlugIn>,
        function_name: Option<&CFString>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterFactory(factory_uuid: Option<&CFUUID>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRegisterPlugInType(
        factory_uuid: Option<&CFUUID>,
        type_uuid: Option<&CFUUID>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterPlugInType(
        factory_uuid: Option<&CFUUID>,
        type_uuid: Option<&CFUUID>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInAddInstanceForFactory(factory_id: Option<&CFUUID>);
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRemoveInstanceForFactory(factory_id: Option<&CFUUID>);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstance?language=objc)
#[repr(C)]
pub struct CFPlugInInstance {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFPlugInInstance"]
    unsafe impl CFPlugInInstance {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancegetinterfacefunction?language=objc)
#[cfg(feature = "CFBase")]
pub type CFPlugInInstanceGetInterfaceFunction = Option<
    unsafe extern "C-unwind" fn(*mut CFPlugInInstance, *mut CFString, *mut *mut c_void) -> Boolean,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancedeallocateinstancedatafunction?language=objc)
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    Option<unsafe extern "C-unwind" fn(*mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: Option<&CFPlugInInstance>,
        interface_name: Option<&CFString>,
        ftbl: *mut *mut c_void,
    ) -> Boolean;
}

#[cfg(feature = "CFBase")]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInInstanceGetFactoryName(
    instance: Option<&CFPlugInInstance>,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn CFPlugInInstanceGetFactoryName(instance: Option<&CFPlugInInstance>) -> *mut CFString;
    }
    let ret = unsafe { CFPlugInInstanceGetFactoryName(instance) };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn CFPlugInInstanceGetInstanceData(instance: Option<&CFPlugInInstance>) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}

#[cfg(feature = "CFBase")]
#[inline]
pub unsafe extern "C-unwind" fn CFPlugInInstanceCreateWithInstanceDataSize(
    allocator: Option<&CFAllocator>,
    instance_data_size: CFIndex,
    deallocate_instance_function: CFPlugInInstanceDeallocateInstanceDataFunction,
    factory_name: Option<&CFString>,
    get_interface_function: CFPlugInInstanceGetInterfaceFunction,
) -> Option<CFRetained<CFPlugInInstance>> {
    extern "C-unwind" {
        fn CFPlugInInstanceCreateWithInstanceDataSize(
            allocator: Option<&CFAllocator>,
            instance_data_size: CFIndex,
            deallocate_instance_function: CFPlugInInstanceDeallocateInstanceDataFunction,
            factory_name: Option<&CFString>,
            get_interface_function: CFPlugInInstanceGetInterfaceFunction,
        ) -> *mut CFPlugInInstance;
    }
    let ret = unsafe {
        CFPlugInInstanceCreateWithInstanceDataSize(
            allocator,
            instance_data_size,
            deallocate_instance_function,
            factory_name,
            get_interface_function,
        )
    };
    NonNull::new(ret).map(|ret| unsafe { CFRetained::from_raw(ret) })
}
