//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregistrationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegistrationKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregisterfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegisterFunctionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginunloadfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInUnloadFunctionKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginfactorieskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInFactoriesKey: Option<&'static CFStringRef>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugintypeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInTypesKey: Option<&'static CFStringRef>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugindynamicregisterfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInDynamicRegisterFunction = Option<unsafe extern "C-unwind" fn(*mut CFPlugInRef)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginunloadfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInUnloadFunction = Option<unsafe extern "C-unwind" fn(*mut CFPlugInRef)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginfactoryfunction?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFUUID"))]
pub type CFPlugInFactoryFunction =
    Option<unsafe extern "C-unwind" fn(*mut CFAllocatorRef, *mut CFUUIDRef) -> *mut c_void>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFURL"))]
    pub fn CFPlugInCreate(
        allocator: Option<&CFAllocatorRef>,
        plug_in_url: Option<&CFURLRef>,
    ) -> *mut CFPlugInRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInGetBundle(plug_in: Option<&CFPlugInRef>) -> *mut CFBundleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInSetLoadOnDemand(plug_in: Option<&CFPlugInRef>, flag: Boolean);
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInIsLoadOnDemand(plug_in: Option<&CFPlugInRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFUUID"))]
    pub fn CFPlugInFindFactoriesForPlugInType(type_uuid: Option<&CFUUIDRef>) -> *mut CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBundle", feature = "CFUUID"))]
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        type_uuid: Option<&CFUUIDRef>,
        plug_in: Option<&CFPlugInRef>,
    ) -> *mut CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInInstanceCreate(
        allocator: Option<&CFAllocatorRef>,
        factory_uuid: Option<&CFUUIDRef>,
        type_uuid: Option<&CFUUIDRef>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunction(
        factory_uuid: Option<&CFUUIDRef>,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factory_uuid: Option<&CFUUIDRef>,
        plug_in: Option<&CFPlugInRef>,
        function_name: Option<&CFStringRef>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterFactory(factory_uuid: Option<&CFUUIDRef>) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRegisterPlugInType(
        factory_uuid: Option<&CFUUIDRef>,
        type_uuid: Option<&CFUUIDRef>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterPlugInType(
        factory_uuid: Option<&CFUUIDRef>,
        type_uuid: Option<&CFUUIDRef>,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInAddInstanceForFactory(factory_id: Option<&CFUUIDRef>);
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRemoveInstanceForFactory(factory_id: Option<&CFUUIDRef>);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstanceref?language=objc)
#[repr(C)]
pub struct CFPlugInInstanceRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFPlugInInstance"]
    unsafe impl CFPlugInInstanceRef {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancegetinterfacefunction?language=objc)
#[cfg(feature = "CFBase")]
pub type CFPlugInInstanceGetInterfaceFunction = Option<
    unsafe extern "C-unwind" fn(
        *mut CFPlugInInstanceRef,
        *mut CFStringRef,
        *mut *mut c_void,
    ) -> Boolean,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancedeallocateinstancedatafunction?language=objc)
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    Option<unsafe extern "C-unwind" fn(*mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: Option<&CFPlugInInstanceRef>,
        interface_name: Option<&CFStringRef>,
        ftbl: *mut *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetFactoryName(
        instance: Option<&CFPlugInInstanceRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    pub fn CFPlugInInstanceGetInstanceData(instance: Option<&CFPlugInInstanceRef>) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: Option<&CFAllocatorRef>,
        instance_data_size: CFIndex,
        deallocate_instance_function: CFPlugInInstanceDeallocateInstanceDataFunction,
        factory_name: Option<&CFStringRef>,
        get_interface_function: CFPlugInInstanceGetInterfaceFunction,
    ) -> *mut CFPlugInInstanceRef;
}
