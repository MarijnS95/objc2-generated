//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregistrationkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugindynamicregisterfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginunloadfunctionkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpluginfactorieskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInFactoriesKey: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfplugintypeskey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPlugInTypesKey: CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugindynamicregisterfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInDynamicRegisterFunction = Option<unsafe extern "C-unwind" fn(CFPlugInRef)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginunloadfunction?language=objc)
#[cfg(feature = "CFBundle")]
pub type CFPlugInUnloadFunction = Option<unsafe extern "C-unwind" fn(CFPlugInRef)>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfpluginfactoryfunction?language=objc)
#[cfg(all(feature = "CFBase", feature = "CFUUID"))]
pub type CFPlugInFactoryFunction =
    Option<unsafe extern "C-unwind" fn(CFAllocatorRef, CFUUIDRef) -> *mut c_void>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFURL"))]
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plug_in_url: CFURLRef) -> CFPlugInRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInGetBundle(plug_in: CFPlugInRef) -> CFBundleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInSetLoadOnDemand(plug_in: CFPlugInRef, flag: Boolean);
}

extern "C-unwind" {
    #[cfg(feature = "CFBundle")]
    pub fn CFPlugInIsLoadOnDemand(plug_in: CFPlugInRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFUUID"))]
    pub fn CFPlugInFindFactoriesForPlugInType(type_uuid: CFUUIDRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBundle", feature = "CFUUID"))]
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        type_uuid: CFUUIDRef,
        plug_in: CFPlugInRef,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factory_uuid: CFUUIDRef,
        type_uuid: CFUUIDRef,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunction(
        factory_uuid: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFBundle", feature = "CFUUID"))]
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factory_uuid: CFUUIDRef,
        plug_in: CFPlugInRef,
        function_name: CFStringRef,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterFactory(factory_uuid: CFUUIDRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRegisterPlugInType(factory_uuid: CFUUIDRef, type_uuid: CFUUIDRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInUnregisterPlugInType(factory_uuid: CFUUIDRef, type_uuid: CFUUIDRef) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInAddInstanceForFactory(factory_id: CFUUIDRef);
}

extern "C-unwind" {
    #[cfg(feature = "CFUUID")]
    pub fn CFPlugInRemoveInstanceForFactory(factory_id: CFUUIDRef);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstanceref?language=objc)
pub type CFPlugInInstanceRef = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancegetinterfacefunction?language=objc)
#[cfg(feature = "CFBase")]
pub type CFPlugInInstanceGetInterfaceFunction = Option<
    unsafe extern "C-unwind" fn(CFPlugInInstanceRef, CFStringRef, *mut *mut c_void) -> Boolean,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfplugininstancedeallocateinstancedatafunction?language=objc)
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    Option<unsafe extern "C-unwind" fn(*mut c_void)>;

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interface_name: CFStringRef,
        ftbl: *mut *mut c_void,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}

extern "C-unwind" {
    pub fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instance_data_size: CFIndex,
        deallocate_instance_function: CFPlugInInstanceDeallocateInstanceDataFunction,
        factory_name: CFStringRef,
        get_interface_function: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
