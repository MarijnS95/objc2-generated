//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencesanyapplication?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesAnyApplication: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencescurrentapplication?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesCurrentApplication: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencesanyhost?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesAnyHost: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencescurrenthost?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesCurrentHost: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencesanyuser?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesAnyUser: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfpreferencescurrentuser?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFPreferencesCurrentUser: &'static CFString;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesCopyAppValue(
        key: &CFString,
        application_id: &CFString,
    ) -> CFPropertyListRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesGetAppBooleanValue(
        key: &CFString,
        application_id: &CFString,
        key_exists_and_has_valid_format: *mut Boolean,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesGetAppIntegerValue(
        key: &CFString,
        application_id: &CFString,
        key_exists_and_has_valid_format: *mut Boolean,
    ) -> CFIndex;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesSetAppValue(
        key: &CFString,
        value: CFPropertyListRef,
        application_id: &CFString,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesAddSuitePreferencesToApp(application_id: &CFString, suite_id: &CFString);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        application_id: &CFString,
        suite_id: &CFString,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesAppSynchronize(application_id: &CFString) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesCopyValue(
        key: &CFString,
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    ) -> CFPropertyListRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFPreferencesCopyMultiple(
        keys_to_fetch: Option<&CFArray>,
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    ) -> NonNull<CFDictionary>;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesSetValue(
        key: &CFString,
        value: CFPropertyListRef,
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase", feature = "CFDictionary"))]
    pub fn CFPreferencesSetMultiple(
        keys_to_set: Option<&CFDictionary>,
        keys_to_remove: Option<&CFArray>,
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesSynchronize(
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    #[deprecated = "Unsupported API"]
    pub fn CFPreferencesCopyApplicationList(
        user_name: &CFString,
        host_name: &CFString,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFArray", feature = "CFBase"))]
    pub fn CFPreferencesCopyKeyList(
        application_id: &CFString,
        user_name: &CFString,
        host_name: &CFString,
    ) -> *mut CFArray;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFPreferencesAppValueIsForced(key: &CFString, application_id: &CFString) -> Boolean;
}
