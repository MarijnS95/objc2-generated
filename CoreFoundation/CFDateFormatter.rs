//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterkey?language=objc)
// NS_TYPED_ENUM
#[cfg(feature = "CFBase")]
pub type CFDateFormatterKey = CFStringRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterref?language=objc)
#[repr(C)]
pub struct CFDateFormatterRef {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__CFDateFormatter"]
    unsafe impl CFDateFormatterRef {}
);

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: Option<&CFAllocatorRef>,
        tmplate: Option<&CFStringRef>,
        options: CFOptionFlags,
        locale: Option<&CFLocaleRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterstyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFDateFormatterStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFDateFormatterStyle {
    #[doc(alias = "kCFDateFormatterNoStyle")]
    pub const NoStyle: Self = Self(0);
    #[doc(alias = "kCFDateFormatterShortStyle")]
    pub const ShortStyle: Self = Self(1);
    #[doc(alias = "kCFDateFormatterMediumStyle")]
    pub const MediumStyle: Self = Self(2);
    #[doc(alias = "kCFDateFormatterLongStyle")]
    pub const LongStyle: Self = Self(3);
    #[doc(alias = "kCFDateFormatterFullStyle")]
    pub const FullStyle: Self = Self(4);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFDateFormatterStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFDateFormatterStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfiso8601dateformatoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFISO8601DateFormatOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFISO8601DateFormatOptions: CFOptionFlags {
        #[doc(alias = "kCFISO8601DateFormatWithYear")]
        const WithYear = 1<<0;
        #[doc(alias = "kCFISO8601DateFormatWithMonth")]
        const WithMonth = 1<<1;
        #[doc(alias = "kCFISO8601DateFormatWithWeekOfYear")]
        const WithWeekOfYear = 1<<2;
        #[doc(alias = "kCFISO8601DateFormatWithDay")]
        const WithDay = 1<<4;
        #[doc(alias = "kCFISO8601DateFormatWithTime")]
        const WithTime = 1<<5;
        #[doc(alias = "kCFISO8601DateFormatWithTimeZone")]
        const WithTimeZone = 1<<6;
        #[doc(alias = "kCFISO8601DateFormatWithSpaceBetweenDateAndTime")]
        const WithSpaceBetweenDateAndTime = 1<<7;
        #[doc(alias = "kCFISO8601DateFormatWithDashSeparatorInDate")]
        const WithDashSeparatorInDate = 1<<8;
        #[doc(alias = "kCFISO8601DateFormatWithColonSeparatorInTime")]
        const WithColonSeparatorInTime = 1<<9;
        #[doc(alias = "kCFISO8601DateFormatWithColonSeparatorInTimeZone")]
        const WithColonSeparatorInTimeZone = 1<<10;
        #[doc(alias = "kCFISO8601DateFormatWithFractionalSeconds")]
        const WithFractionalSeconds = 1<<11;
        #[doc(alias = "kCFISO8601DateFormatWithFullDate")]
        const WithFullDate = CFISO8601DateFormatOptions::WithYear.0|CFISO8601DateFormatOptions::WithMonth.0|CFISO8601DateFormatOptions::WithDay.0|CFISO8601DateFormatOptions::WithDashSeparatorInDate.0;
        #[doc(alias = "kCFISO8601DateFormatWithFullTime")]
        const WithFullTime = CFISO8601DateFormatOptions::WithTime.0|CFISO8601DateFormatOptions::WithColonSeparatorInTime.0|CFISO8601DateFormatOptions::WithTimeZone.0|CFISO8601DateFormatOptions::WithColonSeparatorInTimeZone.0;
        #[doc(alias = "kCFISO8601DateFormatWithInternetDateTime")]
        const WithInternetDateTime = CFISO8601DateFormatOptions::WithFullDate.0|CFISO8601DateFormatOptions::WithFullTime.0;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFISO8601DateFormatOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFISO8601DateFormatOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: Option<&CFAllocatorRef>,
        format_options: CFISO8601DateFormatOptions,
    ) -> *mut CFDateFormatterRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFDateFormatterCreate(
        allocator: Option<&CFAllocatorRef>,
        locale: Option<&CFLocaleRef>,
        date_style: CFDateFormatterStyle,
        time_style: CFDateFormatterStyle,
    ) -> *mut CFDateFormatterRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFLocale")]
    pub fn CFDateFormatterGetLocale(formatter: Option<&CFDateFormatterRef>) -> *mut CFLocaleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetDateStyle(
        formatter: Option<&CFDateFormatterRef>,
    ) -> CFDateFormatterStyle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetTimeStyle(
        formatter: Option<&CFDateFormatterRef>,
    ) -> CFDateFormatterStyle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetFormat(formatter: Option<&CFDateFormatterRef>) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterSetFormat(
        formatter: Option<&CFDateFormatterRef>,
        format_string: Option<&CFStringRef>,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: Option<&CFAllocatorRef>,
        formatter: Option<&CFDateFormatterRef>,
        date: Option<&CFDateRef>,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: Option<&CFAllocatorRef>,
        formatter: Option<&CFDateFormatterRef>,
        at: CFAbsoluteTime,
    ) -> *mut CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateDateFromString(
        allocator: Option<&CFAllocatorRef>,
        formatter: Option<&CFDateFormatterRef>,
        string: Option<&CFStringRef>,
        rangep: *mut CFRange,
    ) -> *mut CFDateRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: Option<&CFDateFormatterRef>,
        string: Option<&CFStringRef>,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterSetProperty(
        formatter: Option<&CFDateFormatterRef>,
        key: Option<&CFStringRef>,
        value: CFTypeRef,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterCopyProperty(
        formatter: Option<&CFDateFormatterRef>,
        key: Option<&CFDateFormatterKey>,
    ) -> CFTypeRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterislenient?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterIsLenient: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattertimezone?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterTimeZone: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattercalendarname?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterCalendarName: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdefaultformat?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDefaultFormat: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattertwodigitstartdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterTwoDigitStartDate: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdefaultdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDefaultDate: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattercalendar?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterCalendar: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattererasymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterEraSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattermonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortmonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterWeekdaySymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortWeekdaySymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatteramsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterAMSymbol: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterpmsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterPMSymbol: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterlongerasymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterLongEraSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortmonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortWeekdaySymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneWeekdaySymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols:
        Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterquartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterQuarterSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortquartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortQuarterSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandalonequartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneQuarterSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandalonequartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattergregorianstartdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterGregorianStartDate: Option<&'static CFDateFormatterKey>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdoesrelativedateformattingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: Option<&'static CFDateFormatterKey>;
}
