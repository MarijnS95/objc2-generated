//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterkey?language=objc)
// NS_TYPED_ENUM
#[cfg(feature = "CFBase")]
pub type CFDateFormatterKey = CFStringRef;

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterref?language=objc)
pub type CFDateFormatterRef = *mut c_void;

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfdateformatterstyle?language=objc)
// NS_ENUM
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFDateFormatterStyle(pub CFIndex);
#[cfg(feature = "CFBase")]
impl CFDateFormatterStyle {
    pub const kCFDateFormatterNoStyle: Self = Self(0);
    pub const kCFDateFormatterShortStyle: Self = Self(1);
    pub const kCFDateFormatterMediumStyle: Self = Self(2);
    pub const kCFDateFormatterLongStyle: Self = Self(3);
    pub const kCFDateFormatterFullStyle: Self = Self(4);
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFDateFormatterStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFDateFormatterStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/cfiso8601dateformatoptions?language=objc)
// NS_OPTIONS
#[cfg(feature = "CFBase")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CFISO8601DateFormatOptions(pub CFOptionFlags);
#[cfg(feature = "CFBase")]
bitflags::bitflags! {
    impl CFISO8601DateFormatOptions: CFOptionFlags {
        const kCFISO8601DateFormatWithYear = 1<<0;
        const kCFISO8601DateFormatWithMonth = 1<<1;
        const kCFISO8601DateFormatWithWeekOfYear = 1<<2;
        const kCFISO8601DateFormatWithDay = 1<<4;
        const kCFISO8601DateFormatWithTime = 1<<5;
        const kCFISO8601DateFormatWithTimeZone = 1<<6;
        const kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 1<<7;
        const kCFISO8601DateFormatWithDashSeparatorInDate = 1<<8;
        const kCFISO8601DateFormatWithColonSeparatorInTime = 1<<9;
        const kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1<<10;
        const kCFISO8601DateFormatWithFractionalSeconds = 1<<11;
        const kCFISO8601DateFormatWithFullDate = CFISO8601DateFormatOptions::kCFISO8601DateFormatWithYear.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithMonth.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithDay.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithDashSeparatorInDate.0;
        const kCFISO8601DateFormatWithFullTime = CFISO8601DateFormatOptions::kCFISO8601DateFormatWithTime.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithColonSeparatorInTime.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithTimeZone.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithColonSeparatorInTimeZone.0;
        const kCFISO8601DateFormatWithInternetDateTime = CFISO8601DateFormatOptions::kCFISO8601DateFormatWithFullDate.0|CFISO8601DateFormatOptions::kCFISO8601DateFormatWithFullTime.0;
    }
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl Encode for CFISO8601DateFormatOptions {
    const ENCODING: Encoding = CFOptionFlags::ENCODING;
}

#[cfg(all(feature = "CFBase", feature = "objc2"))]
unsafe impl RefEncode for CFISO8601DateFormatOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        format_options: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFLocale"))]
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        date_style: CFDateFormatterStyle,
        time_style: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFLocale")]
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, format_string: CFStringRef);
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CFBase", feature = "CFDate"))]
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}

extern "C-unwind" {
    #[cfg(feature = "CFBase")]
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterislenient?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattertimezone?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattercalendarname?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdefaultformat?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattertwodigitstartdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdefaultdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattercalendar?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattererasymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattermonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortmonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatteramsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterpmsymbol?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterlongerasymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortmonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortstandalonemonthsymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterveryshortstandaloneweekdaysymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterquartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortquartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterstandalonequartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattershortstandalonequartersymbols?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformattergregorianstartdate?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/corefoundation/kcfdateformatterdoesrelativedateformattingkey?language=objc)
    #[cfg(feature = "CFBase")]
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
