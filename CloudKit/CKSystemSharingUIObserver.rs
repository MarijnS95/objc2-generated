//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksystemsharinguiobserver?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSystemSharingUIObserver;
);

unsafe impl NSObjectProtocol for CKSystemSharingUIObserver {}

extern_methods!(
    unsafe impl CKSystemSharingUIObserver {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CKContainer")]
        #[method_id(@__retain_semantics Init initWithContainer:)]
        pub unsafe fn initWithContainer(
            this: Allocated<Self>,
            container: &CKContainer,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "CKRecord",
            feature = "CKRecordID",
            feature = "CKShare",
            feature = "block2"
        ))]
        /// Called on success or failure of a
        /// `CKShare`save after user modifications via the system sharing UI
        ///
        ///
        /// Following a successful share save by the system sharing UI in the provided
        /// `CKContainer,`this callback will be invoked with a nonnull
        /// `recordID,`a nonnull
        /// `share,`and a nil
        /// `error.`Following a save failure due to a per-item error (
        /// `CKErrorServerRecordChanged,`for example), this callback will be invoked with a nonnull
        /// `recordID,`a nil
        /// `share,`and a nonnull
        /// `error`Each
        /// `CKSystemSharingUIObserver`instance has a private serial queue. This queue is used for all callback block invocations.
        #[method(systemSharingUIDidSaveShareBlock)]
        pub unsafe fn systemSharingUIDidSaveShareBlock(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<CKRecordID>, *mut CKShare, *mut NSError)>;

        #[cfg(all(
            feature = "CKRecord",
            feature = "CKRecordID",
            feature = "CKShare",
            feature = "block2"
        ))]
        /// Setter for [`systemSharingUIDidSaveShareBlock`][Self::systemSharingUIDidSaveShareBlock].
        #[method(setSystemSharingUIDidSaveShareBlock:)]
        pub unsafe fn setSystemSharingUIDidSaveShareBlock(
            &self,
            system_sharing_ui_did_save_share_block: Option<
                &block2::Block<dyn Fn(NonNull<CKRecordID>, *mut CKShare, *mut NSError)>,
            >,
        );

        #[cfg(all(feature = "CKRecordID", feature = "block2"))]
        /// Called on success or failure of a
        /// `CKShare`delete when the user decides to stop sharing via the system sharing UI
        ///
        ///
        /// Each
        /// `CKSystemSharingUIObserver`instance has a private serial queue. This queue is used for all callback block invocations.
        #[method(systemSharingUIDidStopSharingBlock)]
        pub unsafe fn systemSharingUIDidStopSharingBlock(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<CKRecordID>, *mut NSError)>;

        #[cfg(all(feature = "CKRecordID", feature = "block2"))]
        /// Setter for [`systemSharingUIDidStopSharingBlock`][Self::systemSharingUIDidStopSharingBlock].
        #[method(setSystemSharingUIDidStopSharingBlock:)]
        pub unsafe fn setSystemSharingUIDidStopSharingBlock(
            &self,
            system_sharing_ui_did_stop_sharing_block: Option<
                &block2::Block<dyn Fn(NonNull<CKRecordID>, *mut NSError)>,
            >,
        );
    }
);
