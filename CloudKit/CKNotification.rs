//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cknotificationid?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKNotificationID;
);

unsafe impl NSCoding for CKNotificationID {}

unsafe impl NSCopying for CKNotificationID {}

unsafe impl CopyingHelper for CKNotificationID {
    type Result = Self;
}

unsafe impl NSObjectProtocol for CKNotificationID {}

unsafe impl NSSecureCoding for CKNotificationID {}

extern_methods!(
    unsafe impl CKNotificationID {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CKNotificationID {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cknotificationtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CKNotificationType(pub NSInteger);
impl CKNotificationType {
    /// Generated by `CKQuerySubscription`s
    #[doc(alias = "CKNotificationTypeQuery")]
    pub const Query: Self = Self(1);
    /// Generated by `CKRecordZoneSubscription`s
    #[doc(alias = "CKNotificationTypeRecordZone")]
    pub const RecordZone: Self = Self(2);
    /// Indicates a notification that a client had previously marked as read
    #[doc(alias = "CKNotificationTypeReadNotification")]
    pub const ReadNotification: Self = Self(3);
    /// Generated by `CKDatabaseSubscription`s
    #[doc(alias = "CKNotificationTypeDatabase")]
    pub const Database: Self = Self(4);
}

unsafe impl Encode for CKNotificationType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CKNotificationType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Pushes from CloudKit servers contain both CloudKit-specific and APS-specific information.
    /// APS-specific information includes elements like alerts, badges, sounds, categories, etc.
    /// When receiving a push from CloudKit servers, the push may be delivered via multiple API flows.
    /// The flow(s) chosen will depend on the type of push requested (e.g. via the `CKSubscription`
    /// that triggered it and its configured `notificationInfo`).
    ///
    /// Pushes with UI elements (alerts, badges, sounds):
    /// These pushes are delivered via the `UserNotifications` framework, in the form of a `UNNotification`
    /// Applications should use the `UserNotifications` framework to interact with the UI elements of this push.
    /// Applications may create a `CKNotification` from a `UNNotification` in their `UNUserNotificationCenterDelegate`:
    ///
    /// func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification) async -> UNNotificationPresentationOptions {
    /// let ckNotification = CKNotification(fromRemoteNotificationDictionary: notification.request.content.userInfo)
    /// }
    ///
    /// Pushes with `content-available`:
    /// These pushes are delivered via an application delegate, in the form of a remote notification.
    /// For example: `UIApplicationDelegate.application(_:didReceiveRemoteNotification:) async`
    /// Applications do not need to interact with any UI element in the push payload argument, that's intended to be handled via the `UserNotifications` flow
    /// (a push with both UI elements and `content-available` will be delivered via both API flows)
    /// Applications may create a `CKNotification` from the remote notification in their `UIApplicationDelegate`:
    ///
    /// func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) async -> UIBackgroundFetchResult {
    /// let ckNotification = CKNotification(fromRemoteNotificationDictionary: userInfo)
    /// }
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cknotification?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKNotification;
);

unsafe impl Send for CKNotification {}

unsafe impl Sync for CKNotification {}

unsafe impl NSObjectProtocol for CKNotification {}

extern_methods!(
    unsafe impl CKNotification {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(notificationFromRemoteNotificationDictionary:)]
        #[unsafe(method_family = none)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Retained<Self>>;

        /// When you instantiate a `CKNotification` from a remote notification dictionary, you will get back a concrete
        /// subclass defined below.  Use `notificationType` to avoid `as?` or `-isKindOfClass:` checks.
        #[method(notificationType)]
        pub unsafe fn notificationType(&self) -> CKNotificationType;

        #[method_id(notificationID)]
        #[unsafe(method_family = none)]
        pub unsafe fn notificationID(&self) -> Option<Retained<CKNotificationID>>;

        #[method_id(containerIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn containerIdentifier(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "CKRecordID")]
        /// The user `recordID` of the owner of the subscription for which this notification was generated
        #[method_id(subscriptionOwnerUserRecordID)]
        #[unsafe(method_family = none)]
        pub unsafe fn subscriptionOwnerUserRecordID(&self) -> Option<Retained<CKRecordID>>;

        /// Whether or not the notification fully represents what the server wanted to send.
        ///
        /// Push notifications have a limited size.  In some cases, CloudKit servers may not be able to send you a full `CKNotification`'s worth of info in one push.
        /// In those cases, `isPruned` returns `true`.
        /// The order in which properties are dropped from a push notification is defined in each `CKNotification` subclass below.
        #[method(isPruned)]
        pub unsafe fn isPruned(&self) -> bool;

        #[cfg(feature = "CKSubscription")]
        /// The ID of the subscription that caused this notification to fire.
        #[method_id(subscriptionID)]
        #[unsafe(method_family = none)]
        pub unsafe fn subscriptionID(&self) -> Option<Retained<CKSubscriptionID>>;
    }
);

extern_methods!(
    /// DeprecatedAPSProperties
    unsafe impl CKNotification {
        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(alertBody)]
        #[unsafe(method_family = none)]
        pub unsafe fn alertBody(&self) -> Option<Retained<NSString>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(alertLocalizationKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn alertLocalizationKey(&self) -> Option<Retained<NSString>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(alertLocalizationArgs)]
        #[unsafe(method_family = none)]
        pub unsafe fn alertLocalizationArgs(&self) -> Option<Retained<NSArray<NSString>>>;

        #[method_id(title)]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        #[method_id(titleLocalizationKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleLocalizationKey(&self) -> Option<Retained<NSString>>;

        #[method_id(titleLocalizationArgs)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleLocalizationArgs(&self) -> Option<Retained<NSArray<NSString>>>;

        #[method_id(subtitle)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        #[method_id(subtitleLocalizationKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitleLocalizationKey(&self) -> Option<Retained<NSString>>;

        #[method_id(subtitleLocalizationArgs)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitleLocalizationArgs(&self) -> Option<Retained<NSArray<NSString>>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(alertActionLocalizationKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn alertActionLocalizationKey(&self) -> Option<Retained<NSString>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(alertLaunchImage)]
        #[unsafe(method_family = none)]
        pub unsafe fn alertLaunchImage(&self) -> Option<Retained<NSString>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(badge)]
        #[unsafe(method_family = none)]
        pub unsafe fn badge(&self) -> Option<Retained<NSNumber>>;

        #[deprecated = "Interact with UI elements of a CloudKit-server-generated push message via UserNotifications.framework"]
        #[method_id(soundName)]
        #[unsafe(method_family = none)]
        pub unsafe fn soundName(&self) -> Option<Retained<NSString>>;

        #[method_id(category)]
        #[unsafe(method_family = none)]
        pub unsafe fn category(&self) -> Option<Retained<NSString>>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/ckquerynotificationreason?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CKQueryNotificationReason(pub NSInteger);
impl CKQueryNotificationReason {
    #[doc(alias = "CKQueryNotificationReasonRecordCreated")]
    pub const RecordCreated: Self = Self(1);
    #[doc(alias = "CKQueryNotificationReasonRecordUpdated")]
    pub const RecordUpdated: Self = Self(2);
    #[doc(alias = "CKQueryNotificationReasonRecordDeleted")]
    pub const RecordDeleted: Self = Self(3);
}

unsafe impl Encode for CKQueryNotificationReason {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CKQueryNotificationReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A notification generated by a `CKQuerySubscription`
    ///
    /// `notificationType` == `.query`
    /// When properties must be dropped (see
    /// `isPruned),`here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
    /// - notificationID
    /// - badge
    /// - alertLocalizationKey
    /// - alertLocalizationArgs
    /// - alertBody
    /// - alertActionLocalizationKey
    /// - alertLaunchImage
    /// - soundName
    /// - content-available
    /// - desiredKeys
    /// - queryNotificationReason
    /// - recordID
    /// - containerIdentifier
    /// - subscriptionOwnerUserRecordID
    /// - titleLocalizationKey
    /// - titleLocalizationArgs
    /// - title
    /// - subtitleLocalizationKey
    /// - subtitleLocalizationArgs
    /// - subtitle
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/ckquerynotification?language=objc)
    #[unsafe(super(CKNotification, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKQueryNotification;
);

unsafe impl Send for CKQueryNotification {}

unsafe impl Sync for CKQueryNotification {}

unsafe impl NSObjectProtocol for CKQueryNotification {}

extern_methods!(
    unsafe impl CKQueryNotification {
        #[method(queryNotificationReason)]
        pub unsafe fn queryNotificationReason(&self) -> CKQueryNotificationReason;

        /// A set of key->value pairs for creates and updates.
        ///
        /// You request the server fill out this property via the `desiredKeys` property of `CKSubscription.NotificationInfo`
        #[method_id(recordFields)]
        #[unsafe(method_family = none)]
        pub unsafe fn recordFields(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[cfg(feature = "CKRecordID")]
        #[method_id(recordID)]
        #[unsafe(method_family = none)]
        pub unsafe fn recordID(&self) -> Option<Retained<CKRecordID>>;

        #[cfg(feature = "CKDatabase")]
        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    unsafe impl CKQueryNotification {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(notificationFromRemoteNotificationDictionary:)]
        #[unsafe(method_family = none)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Retained<Self>>;
    }
);

extern_class!(
    /// A notification generated by a `CKRecordZoneSubscription`
    ///
    /// `notificationType` == `.recordZone`
    /// When properties must be dropped (see
    /// `isPruned),`here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
    /// - notificationID
    /// - badge
    /// - alertLocalizationKey
    /// - alertLocalizationArgs
    /// - alertBody
    /// - alertActionLocalizationKey
    /// - alertLaunchImage
    /// - soundName
    /// - content-available
    /// - recordZoneID
    /// - containerIdentifier
    /// - subscriptionOwnerUserRecordID
    /// - titleLocalizationKey
    /// - titleLocalizationArgs
    /// - title
    /// - subtitleLocalizationKey
    /// - subtitleLocalizationArgs
    /// - subtitle
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/ckrecordzonenotification?language=objc)
    #[unsafe(super(CKNotification, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKRecordZoneNotification;
);

unsafe impl Send for CKRecordZoneNotification {}

unsafe impl Sync for CKRecordZoneNotification {}

unsafe impl NSObjectProtocol for CKRecordZoneNotification {}

extern_methods!(
    unsafe impl CKRecordZoneNotification {
        #[cfg(feature = "CKRecordZoneID")]
        #[method_id(recordZoneID)]
        #[unsafe(method_family = none)]
        pub unsafe fn recordZoneID(&self) -> Option<Retained<CKRecordZoneID>>;

        #[cfg(feature = "CKDatabase")]
        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    unsafe impl CKRecordZoneNotification {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(notificationFromRemoteNotificationDictionary:)]
        #[unsafe(method_family = none)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Retained<Self>>;
    }
);

extern_class!(
    /// A notification generated by a `CKDatabaseSubscription`
    ///
    /// `notificationType` == `.database`
    /// When properties must be dropped (see
    /// `isPruned),`here's the order of importance.  The most important properties are first, they'll be the last ones to be dropped.
    /// - notificationID
    /// - badge
    /// - alertLocalizationKey
    /// - alertLocalizationArgs
    /// - alertBody
    /// - alertActionLocalizationKey
    /// - alertLaunchImage
    /// - soundName
    /// - content-available
    /// - containerIdentifier
    /// - subscriptionOwnerUserRecordID
    /// - titleLocalizationKey
    /// - titleLocalizationArgs
    /// - title
    /// - subtitleLocalizationKey
    /// - subtitleLocalizationArgs
    /// - subtitle
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/ckdatabasenotification?language=objc)
    #[unsafe(super(CKNotification, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKDatabaseNotification;
);

unsafe impl Send for CKDatabaseNotification {}

unsafe impl Sync for CKDatabaseNotification {}

unsafe impl NSObjectProtocol for CKDatabaseNotification {}

extern_methods!(
    unsafe impl CKDatabaseNotification {
        #[cfg(feature = "CKDatabase")]
        #[method(databaseScope)]
        pub unsafe fn databaseScope(&self) -> CKDatabaseScope;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKNotification`
    unsafe impl CKDatabaseNotification {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(notificationFromRemoteNotificationDictionary:)]
        #[unsafe(method_family = none)]
        pub unsafe fn notificationFromRemoteNotificationDictionary(
            notification_dictionary: &NSDictionary,
        ) -> Option<Retained<Self>>;
    }
);
