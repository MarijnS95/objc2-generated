//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/ckmodifysubscriptionsoperation?language=objc)
    #[unsafe(super(CKDatabaseOperation, CKOperation, NSOperation, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "CKDatabaseOperation", feature = "CKOperation"))]
    pub struct CKModifySubscriptionsOperation;
);

#[cfg(all(feature = "CKDatabaseOperation", feature = "CKOperation"))]
unsafe impl NSObjectProtocol for CKModifySubscriptionsOperation {}

extern_methods!(
    #[cfg(all(feature = "CKDatabaseOperation", feature = "CKOperation"))]
    unsafe impl CKModifySubscriptionsOperation {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "CKSubscription")]
        #[method_id(@__retain_semantics Init initWithSubscriptionsToSave:subscriptionIDsToDelete:)]
        pub unsafe fn initWithSubscriptionsToSave_subscriptionIDsToDelete(
            this: Allocated<Self>,
            subscriptions_to_save: Option<&NSArray<CKSubscription>>,
            subscription_i_ds_to_delete: Option<&NSArray<CKSubscriptionID>>,
        ) -> Retained<Self>;

        #[cfg(feature = "CKSubscription")]
        #[method_id(@__retain_semantics Other subscriptionsToSave)]
        pub unsafe fn subscriptionsToSave(&self) -> Option<Retained<NSArray<CKSubscription>>>;

        #[cfg(feature = "CKSubscription")]
        /// Setter for [`subscriptionsToSave`][Self::subscriptionsToSave].
        #[method(setSubscriptionsToSave:)]
        pub unsafe fn setSubscriptionsToSave(
            &self,
            subscriptions_to_save: Option<&NSArray<CKSubscription>>,
        );

        #[cfg(feature = "CKSubscription")]
        #[method_id(@__retain_semantics Other subscriptionIDsToDelete)]
        pub unsafe fn subscriptionIDsToDelete(&self)
            -> Option<Retained<NSArray<CKSubscriptionID>>>;

        #[cfg(feature = "CKSubscription")]
        /// Setter for [`subscriptionIDsToDelete`][Self::subscriptionIDsToDelete].
        #[method(setSubscriptionIDsToDelete:)]
        pub unsafe fn setSubscriptionIDsToDelete(
            &self,
            subscription_i_ds_to_delete: Option<&NSArray<CKSubscriptionID>>,
        );

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// Called on success or failure of a subscription save
        ///
        ///
        /// Each
        /// `CKOperation`instance has a private serial queue. This queue is used for all callback block invocations.
        /// This block may share mutable state with other blocks assigned to this operation, but any such mutable state
        /// should not be concurrently used outside of blocks assigned to this operation.
        #[method(perSubscriptionSaveBlock)]
        pub unsafe fn perSubscriptionSaveBlock(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<CKSubscriptionID>, *mut CKSubscription, *mut NSError)>;

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// Setter for [`perSubscriptionSaveBlock`][Self::perSubscriptionSaveBlock].
        #[method(setPerSubscriptionSaveBlock:)]
        pub unsafe fn setPerSubscriptionSaveBlock(
            &self,
            per_subscription_save_block: Option<
                &block2::Block<
                    dyn Fn(NonNull<CKSubscriptionID>, *mut CKSubscription, *mut NSError),
                >,
            >,
        );

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// Called on success or failure of a subscription deletion
        ///
        ///
        /// Each
        /// `CKOperation`instance has a private serial queue. This queue is used for all callback block invocations.
        /// This block may share mutable state with other blocks assigned to this operation, but any such mutable state
        /// should not be concurrently used outside of blocks assigned to this operation.
        #[method(perSubscriptionDeleteBlock)]
        pub unsafe fn perSubscriptionDeleteBlock(
            &self,
        ) -> *mut block2::Block<dyn Fn(NonNull<CKSubscriptionID>, *mut NSError)>;

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// Setter for [`perSubscriptionDeleteBlock`][Self::perSubscriptionDeleteBlock].
        #[method(setPerSubscriptionDeleteBlock:)]
        pub unsafe fn setPerSubscriptionDeleteBlock(
            &self,
            per_subscription_delete_block: Option<
                &block2::Block<dyn Fn(NonNull<CKSubscriptionID>, *mut NSError)>,
            >,
        );

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// This block is called when the operation completes.
        ///
        ///
        /// The
        ///
        /// ```text
        ///  -[NSOperation completionBlock]
        /// ```
        ///
        /// will also be called if both are set.
        /// If the error is
        /// `CKErrorPartialFailure,`the error's userInfo dictionary contains a dictionary of subscriptionIDs to errors keyed off of
        /// `CKPartialErrorsByItemIDKey.``savedSubscriptions,``deletedSubscriptionIDs`and any
        /// `CKPartialErrorsByItemIDKey`errors are repeats of the data sent back in previous
        /// `perSubscriptionSaveBlock`and
        /// `perSubscriptionDeleteBlock`invocations
        /// Each
        /// `CKOperation`instance has a private serial queue. This queue is used for all callback block invocations.
        /// This block may share mutable state with other blocks assigned to this operation, but any such mutable state
        /// should not be concurrently used outside of blocks assigned to this operation.
        #[method(modifySubscriptionsCompletionBlock)]
        pub unsafe fn modifySubscriptionsCompletionBlock(
            &self,
        ) -> *mut block2::Block<
            dyn Fn(*mut NSArray<CKSubscription>, *mut NSArray<CKSubscriptionID>, *mut NSError),
        >;

        #[cfg(all(feature = "CKSubscription", feature = "block2"))]
        /// Setter for [`modifySubscriptionsCompletionBlock`][Self::modifySubscriptionsCompletionBlock].
        #[method(setModifySubscriptionsCompletionBlock:)]
        pub unsafe fn setModifySubscriptionsCompletionBlock(
            &self,
            modify_subscriptions_completion_block: Option<
                &block2::Block<
                    dyn Fn(
                        *mut NSArray<CKSubscription>,
                        *mut NSArray<CKSubscriptionID>,
                        *mut NSError,
                    ),
                >,
            >,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "CKDatabaseOperation", feature = "CKOperation"))]
    unsafe impl CKModifySubscriptionsOperation {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
