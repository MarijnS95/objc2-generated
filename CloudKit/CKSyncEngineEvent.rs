//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// An event that occurs during the operation of a `CKSyncEngine`.
/// See ``CKSyncEngineEvent`` for more details.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncengineeventtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CKSyncEngineEventType(pub NSInteger);
impl CKSyncEngineEventType {
    /// The sync engine state was updated. You should persist it locally.
    #[doc(alias = "CKSyncEngineEventTypeStateUpdate")]
    pub const StateUpdate: Self = Self(0);
    /// The user signed in or out of their account.
    #[doc(alias = "CKSyncEngineEventTypeAccountChange")]
    pub const AccountChange: Self = Self(1);
    /// The sync engine fetched new database changes from the server.
    #[doc(alias = "CKSyncEngineEventTypeFetchedDatabaseChanges")]
    pub const FetchedDatabaseChanges: Self = Self(2);
    /// The sync engine fetched new record zone changes from the server.
    #[doc(alias = "CKSyncEngineEventTypeFetchedRecordZoneChanges")]
    pub const FetchedRecordZoneChanges: Self = Self(3);
    /// The sync engine sent a batch of database changes to the server.
    #[doc(alias = "CKSyncEngineEventTypeSentDatabaseChanges")]
    pub const SentDatabaseChanges: Self = Self(4);
    /// The sync engine sent a batch of record zone changes to the server.
    #[doc(alias = "CKSyncEngineEventTypeSentRecordZoneChanges")]
    pub const SentRecordZoneChanges: Self = Self(5);
    /// The sync engine is about to fetch changes from the server.
    #[doc(alias = "CKSyncEngineEventTypeWillFetchChanges")]
    pub const WillFetchChanges: Self = Self(6);
    /// The sync engine is about to fetch record zone changes from the server for a specific zone.
    #[doc(alias = "CKSyncEngineEventTypeWillFetchRecordZoneChanges")]
    pub const WillFetchRecordZoneChanges: Self = Self(7);
    /// The sync engine finished fetching record zone changes from the server for a specific zone.
    #[doc(alias = "CKSyncEngineEventTypeDidFetchRecordZoneChanges")]
    pub const DidFetchRecordZoneChanges: Self = Self(8);
    /// The sync engine finished fetching changes from the server.
    #[doc(alias = "CKSyncEngineEventTypeDidFetchChanges")]
    pub const DidFetchChanges: Self = Self(9);
    /// The sync engine is about to send changes to the server.
    #[doc(alias = "CKSyncEngineEventTypeWillSendChanges")]
    pub const WillSendChanges: Self = Self(10);
    /// The sync engine finished sending changes to the server.
    #[doc(alias = "CKSyncEngineEventTypeDidSendChanges")]
    pub const DidSendChanges: Self = Self(11);
}

unsafe impl Encode for CKSyncEngineEventType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CKSyncEngineEventType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// An event that occurs during the operation of a `CKSyncEngine`.
    ///
    /// While syncing, `CKSyncEngine` posts several different types of events.
    /// Each event has an associated struct value with details describing the nature of the event.
    ///
    /// At a high level, the sync engine events can be grouped into a few different categories:
    ///
    /// ## Local state changes
    ///
    /// - ``CKSyncEngineStateUpdateEvent``
    /// - ``CKSyncEngineAccountChangeEvent``
    ///
    /// ## Fetched changes
    ///
    /// - ``CKSyncEngineFetchedDatabaseChangesEvent``
    /// - ``CKSyncEngineFetchedRecordZoneChangesEvent``
    ///
    /// ## Sent changes
    ///
    /// - ``CKSyncEngineSentDatabaseChangesEvent``
    /// - ``CKSyncEngineSentRecordZoneChangesEvent``
    ///
    /// ## Fetch changes lifecycle
    ///
    /// - ``CKSyncEngineWillFetchChangesEvent``
    /// - ``CKSyncEngineWillFetchRecordZoneChangesEvent``
    /// - ``CKSyncEngineDidFetchRecordZoneChangesEvent``
    /// - ``CKSyncEngineDidFetchChangesEvent``
    ///
    /// ## Send changes lifecycle
    ///
    /// - ``CKSyncEngineWillSendChangesEvent``
    /// - ``CKSyncEngineDidSendChangesEvent``
    ///
    /// See the documentation for each event struct for more details about when and why an event might be posted.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncengineevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineEvent;
);

unsafe impl Send for CKSyncEngineEvent {}

unsafe impl Sync for CKSyncEngineEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineEvent {}

extern_methods!(
    unsafe impl CKSyncEngineEvent {
        #[method(type)]
        pub unsafe fn r#type(&self) -> CKSyncEngineEventType;

        #[unsafe(method_family(none))]
        #[method_id(stateUpdateEvent)]
        pub unsafe fn stateUpdateEvent(&self) -> Retained<CKSyncEngineStateUpdateEvent>;

        #[unsafe(method_family(none))]
        #[method_id(accountChangeEvent)]
        pub unsafe fn accountChangeEvent(&self) -> Retained<CKSyncEngineAccountChangeEvent>;

        #[unsafe(method_family(none))]
        #[method_id(fetchedDatabaseChangesEvent)]
        pub unsafe fn fetchedDatabaseChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineFetchedDatabaseChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(fetchedRecordZoneChangesEvent)]
        pub unsafe fn fetchedRecordZoneChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineFetchedRecordZoneChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(sentDatabaseChangesEvent)]
        pub unsafe fn sentDatabaseChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineSentDatabaseChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(sentRecordZoneChangesEvent)]
        pub unsafe fn sentRecordZoneChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineSentRecordZoneChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(willFetchChangesEvent)]
        pub unsafe fn willFetchChangesEvent(&self) -> Retained<CKSyncEngineWillFetchChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(willFetchRecordZoneChangesEvent)]
        pub unsafe fn willFetchRecordZoneChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineWillFetchRecordZoneChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(didFetchRecordZoneChangesEvent)]
        pub unsafe fn didFetchRecordZoneChangesEvent(
            &self,
        ) -> Retained<CKSyncEngineDidFetchRecordZoneChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(didFetchChangesEvent)]
        pub unsafe fn didFetchChangesEvent(&self) -> Retained<CKSyncEngineDidFetchChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(willSendChangesEvent)]
        pub unsafe fn willSendChangesEvent(&self) -> Retained<CKSyncEngineWillSendChangesEvent>;

        #[unsafe(method_family(none))]
        #[method_id(didSendChangesEvent)]
        pub unsafe fn didSendChangesEvent(&self) -> Retained<CKSyncEngineDidSendChangesEvent>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine state was updated, and you should persist it locally.
    ///
    /// In order to function properly and efficiently, `CKSyncEngine` tracks some state internally.
    /// When the sync engine state changes, it will give you the latest serialized version in a `CKSyncEngineStateUpdateEvent`.
    /// This event will happen occasionally when the sync engine modifies the state internally during normal sync operation.
    /// This event will also happen when you change the state yourself.
    ///
    /// The sync engine does not persist this state to disk, so you need to persist it in alongside your own local data.
    /// The next time your process launches, use this latest state serialization in ``CKSyncEngineConfiguration/stateSerialization`` to initialize your sync engine.
    ///
    /// This state is directly tied to the changes you fetch and send with the sync engine.
    /// You should ensure that any changes fetched prior to receiving this state are also persisted alongside this state.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginestateupdateevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineStateUpdateEvent;
);

unsafe impl Send for CKSyncEngineStateUpdateEvent {}

unsafe impl Sync for CKSyncEngineStateUpdateEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineStateUpdateEvent {}

extern_methods!(
    unsafe impl CKSyncEngineStateUpdateEvent {
        #[cfg(feature = "CKSyncEngineState")]
        #[unsafe(method_family(none))]
        #[method_id(stateSerialization)]
        pub unsafe fn stateSerialization(&self) -> Retained<CKSyncEngineStateSerialization>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineStateUpdateEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangetype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CKSyncEngineAccountChangeType(pub NSInteger);
impl CKSyncEngineAccountChangeType {
    /// The user signed in to an account.
    ///
    /// If you already have data stored locally, you have a few options:
    ///
    /// - Merge the local data with the newly-signed-in account's data.
    /// - Keep the local data separate from cloud-synced data (e.g. a separate "local account").
    /// - Delete the local data.
    /// - Prompt the user to make the decision.
    #[doc(alias = "CKSyncEngineAccountChangeTypeSignIn")]
    pub const SignIn: Self = Self(0);
    /// The user signed out of their account.
    ///
    /// You should delete any locally-stored data for the previous account.
    #[doc(alias = "CKSyncEngineAccountChangeTypeSignOut")]
    pub const SignOut: Self = Self(1);
    /// The user switched from one account to another.
    /// This might happen if the user signs out and in to a new account while your application is quit.
    ///
    /// You should delete any locally-stored data for the previous account.
    #[doc(alias = "CKSyncEngineAccountChangeTypeSwitchAccounts")]
    pub const SwitchAccounts: Self = Self(2);
}

unsafe impl Encode for CKSyncEngineAccountChangeType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CKSyncEngineAccountChangeType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// The user signed in or out of their account.
    ///
    /// The sync engine automatically listens for account changes, and it will send this event when the user signs in or out.
    /// It's your responsibility to react appropriately to this change and update your local persistence.
    ///
    /// When the logged-in account changes, the sync engine will reset its internal state under the hood.
    /// This means that it will clear any pending database or record zone changes that you may have added.
    ///
    /// Note that it's possible the account changes multiple times while your app is quit.
    /// If this happens, you will only receive one account change event representing the transition between the last known state and the current state.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncengineaccountchangeevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineAccountChangeEvent;
);

unsafe impl Send for CKSyncEngineAccountChangeEvent {}

unsafe impl Sync for CKSyncEngineAccountChangeEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineAccountChangeEvent {}

extern_methods!(
    unsafe impl CKSyncEngineAccountChangeEvent {
        /// The type of account change that occurred.
        #[method(changeType)]
        pub unsafe fn changeType(&self) -> CKSyncEngineAccountChangeType;

        #[cfg(feature = "CKRecordID")]
        /// The user record ID for the previous user.
        ///
        /// If the user just signed in, this will be `nil`.
        /// If the user signed out or switched accounts, this will be the old account.
        #[unsafe(method_family(none))]
        #[method_id(previousUser)]
        pub unsafe fn previousUser(&self) -> Option<Retained<CKRecordID>>;

        #[cfg(feature = "CKRecordID")]
        /// The user record ID for the current user.
        ///
        /// If the user just signed in or switched accounts, this will be the new user record ID.
        /// If the user signed out, this will be `nil`.
        #[unsafe(method_family(none))]
        #[method_id(currentUser)]
        pub unsafe fn currentUser(&self) -> Option<Retained<CKRecordID>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineAccountChangeEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A batch of database changes was fetched from the server.
    ///
    /// If there are a lot of new changes on the server, then you might receive many of these events in a row.
    ///
    /// The ordering of fetched changes is not guaranteed, but changes will typically be fetched from oldest to newest.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefetcheddatabasechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFetchedDatabaseChangesEvent;
);

unsafe impl Send for CKSyncEngineFetchedDatabaseChangesEvent {}

unsafe impl Sync for CKSyncEngineFetchedDatabaseChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineFetchedDatabaseChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineFetchedDatabaseChangesEvent {
        #[cfg(feature = "CKRecordZone")]
        #[unsafe(method_family(none))]
        #[method_id(modifications)]
        pub unsafe fn modifications(&self) -> Retained<NSArray<CKRecordZone>>;

        #[unsafe(method_family(none))]
        #[method_id(deletions)]
        pub unsafe fn deletions(&self) -> Retained<NSArray<CKSyncEngineFetchedZoneDeletion>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineFetchedDatabaseChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A batch of record zone changes was fetched from the server.
    ///
    /// If there are a lot of new changes on the server, then you might receive many of these events in a row.
    ///
    /// The ordering of fetched changes is not guaranteed, but changes will typically be fetched from oldest to newest.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecordzonechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFetchedRecordZoneChangesEvent;
);

unsafe impl Send for CKSyncEngineFetchedRecordZoneChangesEvent {}

unsafe impl Sync for CKSyncEngineFetchedRecordZoneChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineFetchedRecordZoneChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineFetchedRecordZoneChangesEvent {
        #[cfg(feature = "CKRecord")]
        #[unsafe(method_family(none))]
        #[method_id(modifications)]
        pub unsafe fn modifications(&self) -> Retained<NSArray<CKRecord>>;

        #[unsafe(method_family(none))]
        #[method_id(deletions)]
        pub unsafe fn deletions(&self) -> Retained<NSArray<CKSyncEngineFetchedRecordDeletion>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineFetchedRecordZoneChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine finished sending a batch of database changes to the server.
    ///
    /// If a change failed, try to resolve the issue causing the error and make the change again if necessary.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginesentdatabasechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineSentDatabaseChangesEvent;
);

unsafe impl Send for CKSyncEngineSentDatabaseChangesEvent {}

unsafe impl Sync for CKSyncEngineSentDatabaseChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineSentDatabaseChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineSentDatabaseChangesEvent {
        #[cfg(feature = "CKRecordZone")]
        #[unsafe(method_family(none))]
        #[method_id(savedZones)]
        pub unsafe fn savedZones(&self) -> Retained<NSArray<CKRecordZone>>;

        #[unsafe(method_family(none))]
        #[method_id(failedZoneSaves)]
        pub unsafe fn failedZoneSaves(&self) -> Retained<NSArray<CKSyncEngineFailedZoneSave>>;

        #[cfg(feature = "CKRecordZoneID")]
        #[unsafe(method_family(none))]
        #[method_id(deletedZoneIDs)]
        pub unsafe fn deletedZoneIDs(&self) -> Retained<NSArray<CKRecordZoneID>>;

        #[cfg(feature = "CKRecordZoneID")]
        #[unsafe(method_family(none))]
        #[method_id(failedZoneDeletes)]
        pub unsafe fn failedZoneDeletes(&self) -> Retained<NSDictionary<CKRecordZoneID, NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineSentDatabaseChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine finished sending a batch of record zone changes to the server.
    ///
    /// If a record save succeeded, you should encode the system fields of this record to use the next time you save. See `encodeSystemFields` on `CKRecord`.
    ///
    /// If a record deletion succeeded, you should remove any local system fields for that record.
    ///
    /// If the record change failed, try to resolve the issue causing the error and save the record again if necessary.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginesentrecordzonechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineSentRecordZoneChangesEvent;
);

unsafe impl Send for CKSyncEngineSentRecordZoneChangesEvent {}

unsafe impl Sync for CKSyncEngineSentRecordZoneChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineSentRecordZoneChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineSentRecordZoneChangesEvent {
        #[cfg(feature = "CKRecord")]
        #[unsafe(method_family(none))]
        #[method_id(savedRecords)]
        pub unsafe fn savedRecords(&self) -> Retained<NSArray<CKRecord>>;

        #[unsafe(method_family(none))]
        #[method_id(failedRecordSaves)]
        pub unsafe fn failedRecordSaves(&self) -> Retained<NSArray<CKSyncEngineFailedRecordSave>>;

        #[cfg(feature = "CKRecordID")]
        #[unsafe(method_family(none))]
        #[method_id(deletedRecordIDs)]
        pub unsafe fn deletedRecordIDs(&self) -> Retained<NSArray<CKRecordID>>;

        #[cfg(feature = "CKRecordID")]
        #[unsafe(method_family(none))]
        #[method_id(failedRecordDeletes)]
        pub unsafe fn failedRecordDeletes(&self) -> Retained<NSDictionary<CKRecordID, NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineSentRecordZoneChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine is about to fetch changes from the server.
    ///
    /// This might be a good signal to prepare your local data store for incoming changes if necessary.
    /// The changes themselves will be delivered via `CKSyncEngineFetchedDatabaseChanges` and `CKSyncEngineFetchedRecordZoneChangesEvent`.
    ///
    /// Note that this event might not always occur every time you call `fetchChanges`.
    /// For example, if you call `fetchChanges` concurrently while the engine is already fetching changes, this event might not be sent.
    /// Similarly, if there's no logged-in account, the engine might short-circuit the call to `fetchChanges`, and this event won't be sent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginewillfetchchangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineWillFetchChangesEvent;
);

unsafe impl Send for CKSyncEngineWillFetchChangesEvent {}

unsafe impl Sync for CKSyncEngineWillFetchChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineWillFetchChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineWillFetchChangesEvent {
        #[cfg(feature = "CKSyncEngine")]
        #[unsafe(method_family(none))]
        #[method_id(context)]
        pub unsafe fn context(&self) -> Retained<CKSyncEngineFetchChangesContext>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineWillFetchChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine is about to fetch record zone changes from the server for a specific zone.
    ///
    /// This might be a good signal to prepare your local data store for incoming changes if necessary.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginewillfetchrecordzonechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineWillFetchRecordZoneChangesEvent;
);

unsafe impl Send for CKSyncEngineWillFetchRecordZoneChangesEvent {}

unsafe impl Sync for CKSyncEngineWillFetchRecordZoneChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineWillFetchRecordZoneChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineWillFetchRecordZoneChangesEvent {
        #[cfg(feature = "CKRecordZoneID")]
        #[unsafe(method_family(none))]
        #[method_id(zoneID)]
        pub unsafe fn zoneID(&self) -> Retained<CKRecordZoneID>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineWillFetchRecordZoneChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine finished fetching record zone changes from the server for a specific zone.
    ///
    /// This might be a good signal to perform any post-processing tasks on a per-zone basis if necessary.
    ///
    /// You should receive one `CKSyncEngineDidFetchRecordZoneChangesEvent` for each `CKSyncEngineWillFetchRecordZoneChangesEvent`.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginedidfetchrecordzonechangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineDidFetchRecordZoneChangesEvent;
);

unsafe impl Send for CKSyncEngineDidFetchRecordZoneChangesEvent {}

unsafe impl Sync for CKSyncEngineDidFetchRecordZoneChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineDidFetchRecordZoneChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineDidFetchRecordZoneChangesEvent {
        #[cfg(feature = "CKRecordZoneID")]
        #[unsafe(method_family(none))]
        #[method_id(zoneID)]
        pub unsafe fn zoneID(&self) -> Retained<CKRecordZoneID>;

        #[unsafe(method_family(none))]
        #[method_id(error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineDidFetchRecordZoneChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine finished fetching changes from the server.
    ///
    /// This might be a good signal to perform any post-processing tasks required after persisting fetched changes to disk.
    ///
    /// You should receive one `CKSyncEngineDidFetchChangesEvent` for each `CKSyncEngineWillFetchChangesEvent`.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginedidfetchchangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineDidFetchChangesEvent;
);

unsafe impl Send for CKSyncEngineDidFetchChangesEvent {}

unsafe impl Sync for CKSyncEngineDidFetchChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineDidFetchChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineDidFetchChangesEvent {
        #[cfg(feature = "CKSyncEngine")]
        #[unsafe(method_family(none))]
        #[method_id(context)]
        pub unsafe fn context(&self) -> Retained<CKSyncEngineFetchChangesContext>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineDidFetchChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine is about to send changes to the server.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginewillsendchangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineWillSendChangesEvent;
);

unsafe impl Send for CKSyncEngineWillSendChangesEvent {}

unsafe impl Sync for CKSyncEngineWillSendChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineWillSendChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineWillSendChangesEvent {
        #[cfg(feature = "CKSyncEngine")]
        #[unsafe(method_family(none))]
        #[method_id(context)]
        pub unsafe fn context(&self) -> Retained<CKSyncEngineSendChangesContext>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineWillSendChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The sync engine finished sending changes to the server.
    ///
    /// You should receive one `CKSyncEngineDidSendChangesEvent` for every `CKSyncEngineWillSendChangesEvent`.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginedidsendchangesevent?language=objc)
    #[unsafe(super(CKSyncEngineEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineDidSendChangesEvent;
);

unsafe impl Send for CKSyncEngineDidSendChangesEvent {}

unsafe impl Sync for CKSyncEngineDidSendChangesEvent {}

unsafe impl NSObjectProtocol for CKSyncEngineDidSendChangesEvent {}

extern_methods!(
    unsafe impl CKSyncEngineDidSendChangesEvent {
        #[cfg(feature = "CKSyncEngine")]
        #[unsafe(method_family(none))]
        #[method_id(context)]
        pub unsafe fn context(&self) -> Retained<CKSyncEngineSendChangesContext>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CKSyncEngineEvent`
    unsafe impl CKSyncEngineDidSendChangesEvent {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedrecorddeletion?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFetchedRecordDeletion;
);

unsafe impl Send for CKSyncEngineFetchedRecordDeletion {}

unsafe impl Sync for CKSyncEngineFetchedRecordDeletion {}

unsafe impl NSObjectProtocol for CKSyncEngineFetchedRecordDeletion {}

extern_methods!(
    unsafe impl CKSyncEngineFetchedRecordDeletion {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CKRecordID")]
        #[unsafe(method_family(none))]
        #[method_id(recordID)]
        pub unsafe fn recordID(&self) -> Retained<CKRecordID>;

        #[cfg(feature = "CKRecord")]
        #[unsafe(method_family(none))]
        #[method_id(recordType)]
        pub unsafe fn recordType(&self) -> Retained<CKRecordType>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginezonedeletionreason?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CKSyncEngineZoneDeletionReason(pub NSInteger);
impl CKSyncEngineZoneDeletionReason {
    /// A deletion from your software.
    #[doc(alias = "CKSyncEngineZoneDeletionReasonDeleted")]
    pub const Deleted: Self = Self(0);
    /// A deletion from the user via the iCloud storage UI.
    /// This is an indication that the user wanted all data deleted, so local cached data should be wiped and not re-uploaded to the server.
    #[doc(alias = "CKSyncEngineZoneDeletionReasonPurged")]
    pub const Purged: Self = Self(1);
    /// The user chose to reset all encrypted data for their account.
    /// This is an indication that the user had to reset encrypted data during account recovery, so local cached data should be re-uploaded to the server to minimize data loss.
    #[doc(alias = "CKSyncEngineZoneDeletionReasonEncryptedDataReset")]
    pub const EncryptedDataReset: Self = Self(2);
}

unsafe impl Encode for CKSyncEngineZoneDeletionReason {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CKSyncEngineZoneDeletionReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefetchedzonedeletion?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFetchedZoneDeletion;
);

unsafe impl Send for CKSyncEngineFetchedZoneDeletion {}

unsafe impl Sync for CKSyncEngineFetchedZoneDeletion {}

unsafe impl NSObjectProtocol for CKSyncEngineFetchedZoneDeletion {}

extern_methods!(
    unsafe impl CKSyncEngineFetchedZoneDeletion {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CKRecordZoneID")]
        #[unsafe(method_family(none))]
        #[method_id(zoneID)]
        pub unsafe fn zoneID(&self) -> Retained<CKRecordZoneID>;

        #[method(reason)]
        pub unsafe fn reason(&self) -> CKSyncEngineZoneDeletionReason;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefailedrecordsave?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFailedRecordSave;
);

unsafe impl Send for CKSyncEngineFailedRecordSave {}

unsafe impl Sync for CKSyncEngineFailedRecordSave {}

unsafe impl NSObjectProtocol for CKSyncEngineFailedRecordSave {}

extern_methods!(
    unsafe impl CKSyncEngineFailedRecordSave {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CKRecord")]
        #[unsafe(method_family(none))]
        #[method_id(record)]
        pub unsafe fn record(&self) -> Retained<CKRecord>;

        #[unsafe(method_family(none))]
        #[method_id(error)]
        pub unsafe fn error(&self) -> Retained<NSError>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksyncenginefailedzonesave?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CKSyncEngineFailedZoneSave;
);

unsafe impl Send for CKSyncEngineFailedZoneSave {}

unsafe impl Sync for CKSyncEngineFailedZoneSave {}

unsafe impl NSObjectProtocol for CKSyncEngineFailedZoneSave {}

extern_methods!(
    unsafe impl CKSyncEngineFailedZoneSave {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CKRecordZone")]
        #[unsafe(method_family(none))]
        #[method_id(recordZone)]
        pub unsafe fn recordZone(&self) -> Retained<CKRecordZone>;

        #[unsafe(method_family(none))]
        #[method_id(error)]
        pub unsafe fn error(&self) -> Retained<NSError>;
    }
);
