//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CloudKit::*;
use crate::CoreLocation::*;
use crate::Foundation::*;

#[cfg(all(feature = "CloudKit_CKShare", feature = "Foundation_NSError"))]
pub type CKSharePreparationCompletionHandler = *mut Block<dyn Fn(*mut CKShare, *mut NSError)>;

#[cfg(all(feature = "CloudKit_CKShare", feature = "Foundation_NSError"))]
pub type CKSharePreparationHandler = *mut Block<dyn Fn(CKSharePreparationCompletionHandler)>;

extern_category!(
    /// Category "CKSharingSupport" on [`NSItemProvider`].
    #[doc(alias = "CKSharingSupport")]
    #[cfg(feature = "Foundation_NSItemProvider")]
    pub unsafe trait NSItemProviderCKSharingSupport {
        #[cfg(all(
            feature = "CloudKit_CKAllowedSharingOptions",
            feature = "CloudKit_CKContainer",
            feature = "CloudKit_CKShare",
            feature = "Foundation_NSError"
        ))]
        #[method(registerCKShareWithContainer:allowedSharingOptions:preparationHandler:)]
        unsafe fn registerCKShareWithContainer_allowedSharingOptions_preparationHandler(
            &self,
            container: &CKContainer,
            allowed_options: &CKAllowedSharingOptions,
            preparation_handler: CKSharePreparationHandler,
        );

        #[cfg(all(
            feature = "CloudKit_CKAllowedSharingOptions",
            feature = "CloudKit_CKContainer",
            feature = "CloudKit_CKShare"
        ))]
        #[method(registerCKShare:container:allowedSharingOptions:)]
        unsafe fn registerCKShare_container_allowedSharingOptions(
            &self,
            share: &CKShare,
            container: &CKContainer,
            allowed_options: &CKAllowedSharingOptions,
        );
    }

    #[cfg(feature = "Foundation_NSItemProvider")]
    unsafe impl NSItemProviderCKSharingSupport for NSItemProvider {}
);
