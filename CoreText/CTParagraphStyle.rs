//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctparagraphstyleref?language=objc)
pub type CTParagraphStyleRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTParagraphStyleGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/cttextalignment?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTTextAlignment(pub u8);
impl CTTextAlignment {
    pub const kCTTextAlignmentLeft: Self = Self(0);
    pub const kCTTextAlignmentRight: Self = Self(1);
    pub const kCTTextAlignmentCenter: Self = Self(2);
    pub const kCTTextAlignmentJustified: Self = Self(3);
    pub const kCTTextAlignmentNatural: Self = Self(4);
    #[deprecated = "Deprecated"]
    pub const kCTLeftTextAlignment: Self = Self(CTTextAlignment::kCTTextAlignmentLeft.0);
    #[deprecated = "Deprecated"]
    pub const kCTRightTextAlignment: Self = Self(CTTextAlignment::kCTTextAlignmentRight.0);
    #[deprecated = "Deprecated"]
    pub const kCTCenterTextAlignment: Self = Self(CTTextAlignment::kCTTextAlignmentCenter.0);
    #[deprecated = "Deprecated"]
    pub const kCTJustifiedTextAlignment: Self = Self(CTTextAlignment::kCTTextAlignmentJustified.0);
    #[deprecated = "Deprecated"]
    pub const kCTNaturalTextAlignment: Self = Self(CTTextAlignment::kCTTextAlignmentNatural.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CTTextAlignment {
    const ENCODING: Encoding = u8::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CTTextAlignment {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctlinebreakmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTLineBreakMode(pub u8);
impl CTLineBreakMode {
    pub const kCTLineBreakByWordWrapping: Self = Self(0);
    pub const kCTLineBreakByCharWrapping: Self = Self(1);
    pub const kCTLineBreakByClipping: Self = Self(2);
    pub const kCTLineBreakByTruncatingHead: Self = Self(3);
    pub const kCTLineBreakByTruncatingTail: Self = Self(4);
    pub const kCTLineBreakByTruncatingMiddle: Self = Self(5);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CTLineBreakMode {
    const ENCODING: Encoding = u8::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CTLineBreakMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctwritingdirection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTWritingDirection(pub i8);
impl CTWritingDirection {
    pub const kCTWritingDirectionNatural: Self = Self(-1);
    pub const kCTWritingDirectionLeftToRight: Self = Self(0);
    pub const kCTWritingDirectionRightToLeft: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CTWritingDirection {
    const ENCODING: Encoding = i8::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CTWritingDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctparagraphstylespecifier?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTParagraphStyleSpecifier(pub u32);
impl CTParagraphStyleSpecifier {
    pub const kCTParagraphStyleSpecifierAlignment: Self = Self(0);
    pub const kCTParagraphStyleSpecifierFirstLineHeadIndent: Self = Self(1);
    pub const kCTParagraphStyleSpecifierHeadIndent: Self = Self(2);
    pub const kCTParagraphStyleSpecifierTailIndent: Self = Self(3);
    pub const kCTParagraphStyleSpecifierTabStops: Self = Self(4);
    pub const kCTParagraphStyleSpecifierDefaultTabInterval: Self = Self(5);
    pub const kCTParagraphStyleSpecifierLineBreakMode: Self = Self(6);
    pub const kCTParagraphStyleSpecifierLineHeightMultiple: Self = Self(7);
    pub const kCTParagraphStyleSpecifierMaximumLineHeight: Self = Self(8);
    pub const kCTParagraphStyleSpecifierMinimumLineHeight: Self = Self(9);
    #[deprecated = "See documentation for replacements"]
    pub const kCTParagraphStyleSpecifierLineSpacing: Self = Self(10);
    pub const kCTParagraphStyleSpecifierParagraphSpacing: Self = Self(11);
    pub const kCTParagraphStyleSpecifierParagraphSpacingBefore: Self = Self(12);
    pub const kCTParagraphStyleSpecifierBaseWritingDirection: Self = Self(13);
    pub const kCTParagraphStyleSpecifierMaximumLineSpacing: Self = Self(14);
    pub const kCTParagraphStyleSpecifierMinimumLineSpacing: Self = Self(15);
    pub const kCTParagraphStyleSpecifierLineSpacingAdjustment: Self = Self(16);
    pub const kCTParagraphStyleSpecifierLineBoundsOptions: Self = Self(17);
    pub const kCTParagraphStyleSpecifierCount: Self = Self(18);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CTParagraphStyleSpecifier {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CTParagraphStyleSpecifier {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctparagraphstylesetting?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CTParagraphStyleSetting {
    pub spec: CTParagraphStyleSpecifier,
    pub valueSize: usize,
    pub value: NonNull<c_void>,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CTParagraphStyleSetting {
    const ENCODING: Encoding = Encoding::Struct(
        "CTParagraphStyleSetting",
        &[
            <CTParagraphStyleSpecifier>::ENCODING,
            <usize>::ENCODING,
            <NonNull<c_void>>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CTParagraphStyleSetting {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn CTParagraphStyleCreate(
        settings: *mut CTParagraphStyleSetting,
        setting_count: usize,
    ) -> CTParagraphStyleRef;
}

extern "C-unwind" {
    pub fn CTParagraphStyleCreateCopy(paragraph_style: CTParagraphStyleRef) -> CTParagraphStyleRef;
}

extern "C-unwind" {
    pub fn CTParagraphStyleGetValueForSpecifier(
        paragraph_style: CTParagraphStyleRef,
        spec: CTParagraphStyleSpecifier,
        value_buffer_size: usize,
        value_buffer: NonNull<c_void>,
    ) -> bool;
}
