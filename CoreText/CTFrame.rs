//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctframeref?language=objc)
pub type CTFrameRef = *mut c_void;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetTypeID() -> CFTypeID;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctframeprogression?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTFrameProgression(pub u32);
impl CTFrameProgression {
    pub const kCTFrameProgressionTopToBottom: Self = Self(0);
    pub const kCTFrameProgressionRightToLeft: Self = Self(1);
    pub const kCTFrameProgressionLeftToRight: Self = Self(2);
}

unsafe impl Encode for CTFrameProgression {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CTFrameProgression {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctframeprogressionattributename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFrameProgressionAttributeName: CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctframepathfillrule?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTFramePathFillRule(pub u32);
impl CTFramePathFillRule {
    pub const kCTFramePathFillEvenOdd: Self = Self(0);
    pub const kCTFramePathFillWindingNumber: Self = Self(1);
}

unsafe impl Encode for CTFramePathFillRule {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CTFramePathFillRule {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctframepathfillruleattributename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFramePathFillRuleAttributeName: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctframepathwidthattributename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFramePathWidthAttributeName: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctframeclippingpathsattributename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFrameClippingPathsAttributeName: CFStringRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctframepathclippingpathattributename?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFramePathClippingPathAttributeName: CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetStringRange(frame: CTFrameRef) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetVisibleStringRange(frame: CTFrameRef) -> CFRange;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    pub fn CTFrameGetPath(frame: CTFrameRef) -> CGPathRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetFrameAttributes(frame: CTFrameRef) -> CFDictionaryRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetLines(frame: CTFrameRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFrameGetLineOrigins(frame: CTFrameRef, range: CFRange, origins: NonNull<CGPoint>);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    pub fn CTFrameDraw(frame: CTFrameRef, context: CGContextRef);
}
