//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCopyAvailablePostScriptNames() -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCopyAvailableFontFamilyNames() -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCopyAvailableFontURLs() -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCompareFontFamilyNames(
        family1: NonNull<c_void>,
        family2: NonNull<c_void>,
        context: *mut c_void,
    ) -> CFComparisonResult;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCreateFontDescriptorsFromURL(file_url: CFURLRef) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "CTFontDescriptor", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerCreateFontDescriptorFromData(data: CFDataRef) -> CTFontDescriptorRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCreateFontDescriptorsFromData(data: CFDataRef) -> CFArrayRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctfontmanagerscope?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTFontManagerScope(pub u32);
impl CTFontManagerScope {
    pub const kCTFontManagerScopeNone: Self = Self(0);
    pub const kCTFontManagerScopeProcess: Self = Self(1);
    pub const kCTFontManagerScopePersistent: Self = Self(2);
    pub const kCTFontManagerScopeSession: Self = Self(3);
    pub const kCTFontManagerScopeUser: Self = Self(2);
}

unsafe impl Encode for CTFontManagerScope {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CTFontManagerScope {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctfontregistrationuserinfoattribute?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFontRegistrationUserInfoAttribute: CFStringRef;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerRegisterFontsForURL(
        font_url: CFURLRef,
        scope: CTFontManagerScope,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerUnregisterFontsForURL(
        font_url: CFURLRef,
        scope: CTFontManagerScope,
        error: *mut CFErrorRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
    #[deprecated = "Use CTFontManagerCreateFontDescriptorsFromData or CTFontManagerRegisterFontsForURL"]
    pub fn CTFontManagerRegisterGraphicsFont(font: CGFontRef, error: *mut CFErrorRef) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
    #[deprecated = "Use the API corresponding to the one used to register the font"]
    pub fn CTFontManagerUnregisterGraphicsFont(font: CGFontRef, error: *mut CFErrorRef) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CTFontManagerRegisterFontsForURLs(
        font_ur_ls: CFArrayRef,
        scope: CTFontManagerScope,
        errors: *mut CFArrayRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated]
    pub fn CTFontManagerUnregisterFontsForURLs(
        font_ur_ls: CFArrayRef,
        scope: CTFontManagerScope,
        errors: *mut CFArrayRef,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerRegisterFontURLs(
        font_ur_ls: CFArrayRef,
        scope: CTFontManagerScope,
        enabled: bool,
        registration_handler: Option<&block2::Block<dyn Fn(CFArrayRef, bool) -> bool>>,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerUnregisterFontURLs(
        font_ur_ls: CFArrayRef,
        scope: CTFontManagerScope,
        registration_handler: Option<&block2::Block<dyn Fn(CFArrayRef, bool) -> bool>>,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerRegisterFontDescriptors(
        font_descriptors: CFArrayRef,
        scope: CTFontManagerScope,
        enabled: bool,
        registration_handler: Option<&block2::Block<dyn Fn(CFArrayRef, bool) -> bool>>,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerUnregisterFontDescriptors(
        font_descriptors: CFArrayRef,
        scope: CTFontManagerScope,
        registration_handler: Option<&block2::Block<dyn Fn(CFArrayRef, bool) -> bool>>,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerRegisterFontsWithAssetNames(
        font_asset_names: CFArrayRef,
        bundle: CFBundleRef,
        scope: CTFontManagerScope,
        enabled: bool,
        registration_handler: Option<&block2::Block<dyn Fn(CFArrayRef, bool) -> bool>>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerEnableFontDescriptors(descriptors: CFArrayRef, enable: bool);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerGetScopeForURL(font_url: CFURLRef) -> CTFontManagerScope;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerCopyRegisteredFontDescriptors(
        scope: CTFontManagerScope,
        enabled: bool,
    ) -> CFArrayRef;
}

extern "C-unwind" {
    #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
    pub fn CTFontManagerRequestFonts(
        font_descriptors: CFArrayRef,
        completion_handler: &block2::Block<dyn Fn(CFArrayRef)>,
    );
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerIsSupportedFont(font_url: CFURLRef) -> bool;
}

extern "C-unwind" {
    #[cfg(all(
        feature = "block2",
        feature = "libc",
        feature = "objc2-core-foundation"
    ))]
    #[deprecated = "This functionality will be removed in a future release"]
    pub fn CTFontManagerCreateFontRequestRunLoopSource(
        source_order: CFIndex,
        create_matches_callback: &block2::Block<dyn Fn(CFDictionaryRef, libc::pid_t) -> CFArrayRef>,
    ) -> CFRunLoopSourceRef;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctfontmanagerbundleidentifier?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFontManagerBundleIdentifier: CFStringRef;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/ctfontmanagerautoactivationsetting?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CTFontManagerAutoActivationSetting(pub u32);
impl CTFontManagerAutoActivationSetting {
    pub const kCTFontManagerAutoActivationDefault: Self = Self(0);
    pub const kCTFontManagerAutoActivationDisabled: Self = Self(1);
    pub const kCTFontManagerAutoActivationEnabled: Self = Self(2);
    #[deprecated = "Deprecated"]
    pub const kCTFontManagerAutoActivationPromptUser: Self = Self(3);
}

unsafe impl Encode for CTFontManagerAutoActivationSetting {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CTFontManagerAutoActivationSetting {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerSetAutoActivationSetting(
        bundle_identifier: CFStringRef,
        setting: CTFontManagerAutoActivationSetting,
    );
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CTFontManagerGetAutoActivationSetting(
        bundle_identifier: CFStringRef,
    ) -> CTFontManagerAutoActivationSetting;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctfontmanagerregisteredfontschangednotification?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static kCTFontManagerRegisteredFontsChangedNotification: CFStringRef;
}
