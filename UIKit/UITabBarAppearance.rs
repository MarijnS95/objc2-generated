//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitabbaritemstateappearance?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITabBarItemStateAppearance;
);

unsafe impl NSObjectProtocol for UITabBarItemStateAppearance {}

extern_methods!(
    unsafe impl UITabBarItemStateAppearance {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        /// Text attributes to be used for rendering title text. If the font or color are unspecified, appropriate defaults are supplied.
        #[unsafe(method_family(none))]
        #[method_id(titleTextAttributes)]
        pub unsafe fn titleTextAttributes(
            &self,
        ) -> Retained<NSDictionary<NSAttributedStringKey, AnyObject>>;

        /// Setter for [`titleTextAttributes`][Self::titleTextAttributes].
        #[method(setTitleTextAttributes:)]
        pub unsafe fn setTitleTextAttributes(
            &self,
            title_text_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// An offset to apply to the UITabBarItem's title position
        #[method(titlePositionAdjustment)]
        pub unsafe fn titlePositionAdjustment(&self) -> UIOffset;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`titlePositionAdjustment`][Self::titlePositionAdjustment].
        #[method(setTitlePositionAdjustment:)]
        pub unsafe fn setTitlePositionAdjustment(&self, title_position_adjustment: UIOffset);

        #[cfg(feature = "UIColor")]
        /// The color to use for item icons. If not specified, a suitable color will be derived.
        #[unsafe(method_family(none))]
        #[method_id(iconColor)]
        pub unsafe fn iconColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`iconColor`][Self::iconColor].
        #[method(setIconColor:)]
        pub unsafe fn setIconColor(&self, icon_color: Option<&UIColor>);

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// An offset to apply to the badge's position
        #[method(badgePositionAdjustment)]
        pub unsafe fn badgePositionAdjustment(&self) -> UIOffset;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`badgePositionAdjustment`][Self::badgePositionAdjustment].
        #[method(setBadgePositionAdjustment:)]
        pub unsafe fn setBadgePositionAdjustment(&self, badge_position_adjustment: UIOffset);

        #[cfg(feature = "UIColor")]
        /// The color to use for the badge background
        #[unsafe(method_family(none))]
        #[method_id(badgeBackgroundColor)]
        pub unsafe fn badgeBackgroundColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`badgeBackgroundColor`][Self::badgeBackgroundColor].
        #[method(setBadgeBackgroundColor:)]
        pub unsafe fn setBadgeBackgroundColor(&self, badge_background_color: Option<&UIColor>);

        /// Text attributes to be used for rendering badge text. If the font and color are unspecified, appropriate defaults are supplied.
        #[unsafe(method_family(none))]
        #[method_id(badgeTextAttributes)]
        pub unsafe fn badgeTextAttributes(
            &self,
        ) -> Retained<NSDictionary<NSAttributedStringKey, AnyObject>>;

        /// Setter for [`badgeTextAttributes`][Self::badgeTextAttributes].
        #[method(setBadgeTextAttributes:)]
        pub unsafe fn setBadgeTextAttributes(
            &self,
            badge_text_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// An offset to apply to the badge's title position
        #[method(badgeTitlePositionAdjustment)]
        pub unsafe fn badgeTitlePositionAdjustment(&self) -> UIOffset;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`badgeTitlePositionAdjustment`][Self::badgeTitlePositionAdjustment].
        #[method(setBadgeTitlePositionAdjustment:)]
        pub unsafe fn setBadgeTitlePositionAdjustment(
            &self,
            badge_title_position_adjustment: UIOffset,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitabbaritemappearancestyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UITabBarItemAppearanceStyle(pub NSInteger);
impl UITabBarItemAppearanceStyle {
    #[doc(alias = "UITabBarItemAppearanceStyleStacked")]
    pub const Stacked: Self = Self(0);
    #[doc(alias = "UITabBarItemAppearanceStyleInline")]
    pub const Inline: Self = Self(1);
    #[doc(alias = "UITabBarItemAppearanceStyleCompactInline")]
    pub const CompactInline: Self = Self(2);
}

unsafe impl Encode for UITabBarItemAppearanceStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UITabBarItemAppearanceStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitabbaritemappearance?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITabBarItemAppearance;
);

unsafe impl NSCoding for UITabBarItemAppearance {}

unsafe impl NSCopying for UITabBarItemAppearance {}

unsafe impl CopyingHelper for UITabBarItemAppearance {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UITabBarItemAppearance {}

unsafe impl NSSecureCoding for UITabBarItemAppearance {}

extern_methods!(
    unsafe impl UITabBarItemAppearance {
        /// Construct an appearance with default values for the stacked layout.
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Construct an appearance with default values for the given layout.
        #[unsafe(method_family(init))]
        #[method_id(initWithStyle:)]
        pub unsafe fn initWithStyle(
            this: Allocated<Self>,
            style: UITabBarItemAppearanceStyle,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;

        #[unsafe(method_family(copy))]
        #[method_id(copy)]
        pub unsafe fn copy(&self) -> Retained<Self>;

        /// Reset this appearance to that of the given layout.
        #[method(configureWithDefaultForStyle:)]
        pub unsafe fn configureWithDefaultForStyle(&self, style: UITabBarItemAppearanceStyle);

        /// The appearance when the tab bar item is in the normal state
        #[unsafe(method_family(none))]
        #[method_id(normal)]
        pub unsafe fn normal(&self) -> Retained<UITabBarItemStateAppearance>;

        /// The appearance when the tab bar item is in the selected state
        #[unsafe(method_family(none))]
        #[method_id(selected)]
        pub unsafe fn selected(&self) -> Retained<UITabBarItemStateAppearance>;

        /// The appearance when the tab bar item is in the disabled state
        #[unsafe(method_family(none))]
        #[method_id(disabled)]
        pub unsafe fn disabled(&self) -> Retained<UITabBarItemStateAppearance>;

        /// The appearance when the tab bar item is in the focused state
        #[unsafe(method_family(none))]
        #[method_id(focused)]
        pub unsafe fn focused(&self) -> Retained<UITabBarItemStateAppearance>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UITabBarItemAppearance {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitabbarappearance?language=objc)
    #[unsafe(super(UIBarAppearance, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "UIBarAppearance")]
    pub struct UITabBarAppearance;
);

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSCoding for UITabBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSCopying for UITabBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl CopyingHelper for UITabBarAppearance {
    type Result = Self;
}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSObjectProtocol for UITabBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSSecureCoding for UITabBarAppearance {}

extern_methods!(
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UITabBarAppearance {
        /// The appearance for the stacked tab bar item layout
        #[unsafe(method_family(none))]
        #[method_id(stackedLayoutAppearance)]
        pub unsafe fn stackedLayoutAppearance(&self) -> Retained<UITabBarItemAppearance>;

        /// Setter for [`stackedLayoutAppearance`][Self::stackedLayoutAppearance].
        #[method(setStackedLayoutAppearance:)]
        pub unsafe fn setStackedLayoutAppearance(
            &self,
            stacked_layout_appearance: &UITabBarItemAppearance,
        );

        /// The appearance for the inline tab bar item layout
        #[unsafe(method_family(none))]
        #[method_id(inlineLayoutAppearance)]
        pub unsafe fn inlineLayoutAppearance(&self) -> Retained<UITabBarItemAppearance>;

        /// Setter for [`inlineLayoutAppearance`][Self::inlineLayoutAppearance].
        #[method(setInlineLayoutAppearance:)]
        pub unsafe fn setInlineLayoutAppearance(
            &self,
            inline_layout_appearance: &UITabBarItemAppearance,
        );

        /// The appearance for the compact inline tab bar item layout
        #[unsafe(method_family(none))]
        #[method_id(compactInlineLayoutAppearance)]
        pub unsafe fn compactInlineLayoutAppearance(&self) -> Retained<UITabBarItemAppearance>;

        /// Setter for [`compactInlineLayoutAppearance`][Self::compactInlineLayoutAppearance].
        #[method(setCompactInlineLayoutAppearance:)]
        pub unsafe fn setCompactInlineLayoutAppearance(
            &self,
            compact_inline_layout_appearance: &UITabBarItemAppearance,
        );

        #[cfg(feature = "UIColor")]
        /// A color to use for the selectionIndicator, its specific behavior depends on the value of selectionIndicatorImage. If selectionIndicatorImage is nil, then the selectionIndicatorTintColor is used to color the UITabBar's default selection indicator; a nil or clearColor selectionIndicatorTintColor will result in no indicator. If selectionIndicatorImage is a template image, then the selectionIndicatorTintColor is used to tint the image; a nil or clearColor selectionIndicatorTintColor will also result in no indicator. If the selectionIndicatorImage is not a template image, then it will be rendered without respect to the value of selectionIndicatorTintColor.
        #[unsafe(method_family(none))]
        #[method_id(selectionIndicatorTintColor)]
        pub unsafe fn selectionIndicatorTintColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`selectionIndicatorTintColor`][Self::selectionIndicatorTintColor].
        #[method(setSelectionIndicatorTintColor:)]
        pub unsafe fn setSelectionIndicatorTintColor(
            &self,
            selection_indicator_tint_color: Option<&UIColor>,
        );

        #[cfg(feature = "UIImage")]
        /// An image that is rendered behind the selected UITabBarItem and above the tab bar's background. Modified by selectionIndicatorTintColor when appropriate.
        #[unsafe(method_family(none))]
        #[method_id(selectionIndicatorImage)]
        pub unsafe fn selectionIndicatorImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`selectionIndicatorImage`][Self::selectionIndicatorImage].
        #[method(setSelectionIndicatorImage:)]
        pub unsafe fn setSelectionIndicatorImage(
            &self,
            selection_indicator_image: Option<&UIImage>,
        );

        #[cfg(feature = "UITabBar")]
        /// Determines how items in the tab bar lay out in the stacked item layout
        #[method(stackedItemPositioning)]
        pub unsafe fn stackedItemPositioning(&self) -> UITabBarItemPositioning;

        #[cfg(feature = "UITabBar")]
        /// Setter for [`stackedItemPositioning`][Self::stackedItemPositioning].
        #[method(setStackedItemPositioning:)]
        pub unsafe fn setStackedItemPositioning(
            &self,
            stacked_item_positioning: UITabBarItemPositioning,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(stackedItemWidth)]
        pub unsafe fn stackedItemWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`stackedItemWidth`][Self::stackedItemWidth].
        #[method(setStackedItemWidth:)]
        pub unsafe fn setStackedItemWidth(&self, stacked_item_width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(stackedItemSpacing)]
        pub unsafe fn stackedItemSpacing(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`stackedItemSpacing`][Self::stackedItemSpacing].
        #[method(setStackedItemSpacing:)]
        pub unsafe fn setStackedItemSpacing(&self, stacked_item_spacing: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `UIBarAppearance`
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UITabBarAppearance {
        /// Constructs a new bar appearance, configured with default values and targeting the device idiom.
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "UIDevice")]
        /// Constructs a new bar appearance, targeting the passed-in idiom as a hint. Not all platforms support all available idioms. See the idiom property to determine the resolved idiom.
        #[unsafe(method_family(init))]
        #[method_id(initWithIdiom:)]
        pub unsafe fn initWithIdiom(
            this: Allocated<Self>,
            idiom: UIUserInterfaceIdiom,
        ) -> Retained<Self>;

        /// Constructs a new bar appearance, copying all relevant properties from the given appearance object. This initializer is useful for migrating configuration between UIBarAppearance subclasses. For example, you can initialize a UINavigationBarAppearance with a UIToolbarAppearance instance, and shared attributes will be identical between the two.
        #[unsafe(method_family(init))]
        #[method_id(initWithBarAppearance:)]
        pub unsafe fn initWithBarAppearance(
            this: Allocated<Self>,
            bar_appearance: &UIBarAppearance,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UITabBarAppearance {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
