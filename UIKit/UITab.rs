//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitabplacement?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UITabPlacement(pub NSInteger);
impl UITabPlacement {
    /// Resolves to `.default` for root-level tabs, and `.optional` for all others.
    #[doc(alias = "UITabPlacementAutomatic")]
    pub const Automatic: Self = Self(0);
    /// The tab can be added or removed from the tab bar, and appears by default.
    #[doc(alias = "UITabPlacementDefault")]
    pub const Default: Self = Self(1);
    /// The tab can be added or removed from the tab bar, but does NOT appear by default.
    #[doc(alias = "UITabPlacementOptional")]
    pub const Optional: Self = Self(2);
    /// The tab cannot be removed from the tab bar, but can be moved within.
    #[doc(alias = "UITabPlacementMovable")]
    pub const Movable: Self = Self(3);
    /// The tab is always available and visible in the tab bar.
    /// Pinned items are placed at the trailing side of the bar.
    #[doc(alias = "UITabPlacementPinned")]
    pub const Pinned: Self = Self(4);
    /// The tab cannot be moved or removed from the tab bar, and is displayed before
    /// all customizable tabs.
    #[doc(alias = "UITabPlacementFixed")]
    pub const Fixed: Self = Self(5);
    /// The tab cannot be added to the tab bar.
    #[doc(alias = "UITabPlacementSidebarOnly")]
    pub const SidebarOnly: Self = Self(6);
}

unsafe impl Encode for UITabPlacement {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UITabPlacement {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitab?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITab;
);

unsafe impl NSObjectProtocol for UITab {}

extern_methods!(
    unsafe impl UITab {
        /// The identifier associated with the tab, must be unique across the tab bar controller.
        #[unsafe(method_family(none))]
        #[method_id(identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// The title of the tab.
        #[unsafe(method_family(none))]
        #[method_id(title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[cfg(feature = "UIImage")]
        /// The image of the tab. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(image)]
        pub unsafe fn image(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`image`][Self::image].
        #[method(setImage:)]
        pub unsafe fn setImage(&self, image: Option<&UIImage>);

        /// The subtitle of the tab. This is displayed only in certain contexts, like the sidebar. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(subtitle)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`subtitle`][Self::subtitle].
        #[method(setSubtitle:)]
        pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);

        /// The badge value of the tab. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(badgeValue)]
        pub unsafe fn badgeValue(&self) -> Option<Retained<NSString>>;

        /// Setter for [`badgeValue`][Self::badgeValue].
        #[method(setBadgeValue:)]
        pub unsafe fn setBadgeValue(&self, badge_value: Option<&NSString>);

        /// The preferred placement for the tab in the contexts that allow for different tab placements.
        /// Default is `UITabPlacementAutomatic` which resolves its placement based on context.
        #[method(preferredPlacement)]
        pub unsafe fn preferredPlacement(&self) -> UITabPlacement;

        /// Setter for [`preferredPlacement`][Self::preferredPlacement].
        #[method(setPreferredPlacement:)]
        pub unsafe fn setPreferredPlacement(&self, preferred_placement: UITabPlacement);

        /// A custom object associated with the tab. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`userInfo`][Self::userInfo].
        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, user_info: Option<&AnyObject>);

        #[cfg(feature = "UITabGroup")]
        /// The parent group of the tab. This is only non-nil if the tab is part of a parent group, and returns nil otherwise.
        #[unsafe(method_family(none))]
        #[method_id(parent)]
        pub unsafe fn parent(&self) -> Option<Retained<UITabGroup>>;

        #[cfg(all(
            feature = "UIResponder",
            feature = "UITabBarController",
            feature = "UIViewController"
        ))]
        /// The tab bar controller managing the tab. This is non-nil when the tab
        /// or any of its ancestors is added to a UITabBarController; and is nil
        /// otherwise.
        #[unsafe(method_family(none))]
        #[method_id(tabBarController)]
        pub unsafe fn tabBarController(&self) -> Option<Retained<UITabBarController>>;

        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        /// The view controller owned by the tab. The view controller provider is used to resolve the view controller
        /// if it is currently nil. For root level tabs, the view controller for the tab must be non-nil.
        #[unsafe(method_family(none))]
        #[method_id(viewController)]
        pub unsafe fn viewController(&self) -> Option<Retained<UIViewController>>;

        #[cfg(feature = "UITabGroup")]
        /// The managing tab group for the tab. This returns the rootmost `UITabGroup` in the tab's parent hierarchy with an
        /// active `managingNavigationController`. This can be different to `parent` if the tab is nested in multiple
        /// levels of tab groups. If the tab does not belong to a hierarchy with a managing navigation controller, then this
        /// will return nil. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(managingTabGroup)]
        pub unsafe fn managingTabGroup(&self) -> Option<Retained<UITabGroup>>;

        /// Determines if the tab is currently hidden. Default is NO.
        /// Hidden tabs cannot be accessed from the sidebar.
        #[method(isHidden)]
        pub unsafe fn isHidden(&self) -> bool;

        /// Setter for [`isHidden`][Self::isHidden].
        #[method(setHidden:)]
        pub unsafe fn setHidden(&self, hidden: bool);

        /// The default hidden state. When the user resets their customization, `UITab.hidden` will be set to the value
        /// of this property. Default is NO.
        #[method(isHiddenByDefault)]
        pub unsafe fn isHiddenByDefault(&self) -> bool;

        /// Setter for [`isHiddenByDefault`][Self::isHiddenByDefault].
        #[method(setHiddenByDefault:)]
        pub unsafe fn setHiddenByDefault(&self, hidden_by_default: bool);

        /// Determines if the tab's visibility can be changed by the user while editing. Default is NO.
        #[method(allowsHiding)]
        pub unsafe fn allowsHiding(&self) -> bool;

        /// Setter for [`allowsHiding`][Self::allowsHiding].
        #[method(setAllowsHiding:)]
        pub unsafe fn setAllowsHiding(&self, allows_hiding: bool);

        #[cfg(all(
            feature = "UIImage",
            feature = "UIResponder",
            feature = "UIViewController",
            feature = "block2"
        ))]
        /// Creates a tab with the specified identifier, title, image, and view controller provider.
        /// The view controller provider is called when a view controller is requested and is currently nil.
        /// For root level tabs on `UITabBarController`, the resolved view controller must be non-nil.
        #[unsafe(method_family(init))]
        #[method_id(initWithTitle:image:identifier:viewControllerProvider:)]
        pub unsafe fn initWithTitle_image_identifier_viewControllerProvider(
            this: Allocated<Self>,
            title: &NSString,
            image: Option<&UIImage>,
            identifier: &NSString,
            view_controller_provider: Option<
                &block2::Block<dyn Fn(NonNull<UITab>) -> NonNull<UIViewController>>,
            >,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// UIPopoverPresentationControllerSourceItem
    unsafe impl UITab {}
);

#[cfg(feature = "UIPopoverPresentationControllerSourceItem")]
unsafe impl UIPopoverPresentationControllerSourceItem for UITab {}

extern_methods!(
    /// UISpringLoadedInteractionSupporting
    unsafe impl UITab {}
);

#[cfg(feature = "UISpringLoadedInteractionSupporting")]
unsafe impl UISpringLoadedInteractionSupporting for UITab {}

extern_methods!(
    /// UIAccessibility
    unsafe impl UITab {}
);

#[cfg(feature = "UIAccessibilityIdentification")]
unsafe impl UIAccessibilityIdentification for UITab {}

extern_methods!(
    /// UITab
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIViewController {
        /// The `UITab` instance that was used to create the receiver, and represents the view controller. Default is nil.
        #[unsafe(method_family(none))]
        #[method_id(tab)]
        pub unsafe fn tab(&self) -> Option<Retained<UITab>>;
    }
);
