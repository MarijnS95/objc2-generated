//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicitemcollisionboundstype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIDynamicItemCollisionBoundsType(pub NSUInteger);
impl UIDynamicItemCollisionBoundsType {
    #[doc(alias = "UIDynamicItemCollisionBoundsTypeRectangle")]
    pub const Rectangle: Self = Self(0);
    #[doc(alias = "UIDynamicItemCollisionBoundsTypeEllipse")]
    pub const Ellipse: Self = Self(1);
    #[doc(alias = "UIDynamicItemCollisionBoundsTypePath")]
    pub const Path: Self = Self(2);
}

unsafe impl Encode for UIDynamicItemCollisionBoundsType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for UIDynamicItemCollisionBoundsType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicitem?language=objc)
    pub unsafe trait UIDynamicItem: NSObjectProtocol + MainThreadOnly {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(center)]
        #[unsafe(method_family = none)]
        unsafe fn center(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`center`][Self::center].
        #[method(setCenter:)]
        #[unsafe(method_family = none)]
        unsafe fn setCenter(&self, center: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bounds)]
        #[unsafe(method_family = none)]
        unsafe fn bounds(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(transform)]
        #[unsafe(method_family = none)]
        unsafe fn transform(&self) -> CGAffineTransform;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`transform`][Self::transform].
        #[method(setTransform:)]
        #[unsafe(method_family = none)]
        unsafe fn setTransform(&self, transform: CGAffineTransform);

        /// The collision type represents how the dynamics system will evaluate collisions with
        /// respect to the dynamic item. defaults to UIDynamicItemCollisionBoundsTypeRectangle
        #[optional]
        #[method(collisionBoundsType)]
        #[unsafe(method_family = none)]
        unsafe fn collisionBoundsType(&self) -> UIDynamicItemCollisionBoundsType;

        #[cfg(feature = "UIBezierPath")]
        /// The path must represent a convex polygon with counter clockwise winding and no self intersection.
        /// The point (0,0) in the path corresponds to the dynamic item's center.
        #[optional]
        #[method(collisionBoundingPath)]
        #[unsafe(method_family = none)]
        unsafe fn collisionBoundingPath(&self) -> Retained<UIBezierPath>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicitemgroup?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIDynamicItemGroup;
);

unsafe impl NSObjectProtocol for UIDynamicItemGroup {}

unsafe impl UIDynamicItem for UIDynamicItemGroup {}

extern_methods!(
    unsafe impl UIDynamicItemGroup {
        #[method(initWithItems:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithItems(
            this: Allocated<Self>,
            items: &NSArray<ProtocolObject<dyn UIDynamicItem>>,
        ) -> Retained<Self>;

        #[method(items)]
        #[unsafe(method_family = none)]
        pub unsafe fn items(&self) -> Retained<NSArray<ProtocolObject<dyn UIDynamicItem>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIDynamicItemGroup {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicbehavior?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIDynamicBehavior;
);

unsafe impl NSObjectProtocol for UIDynamicBehavior {}

extern_methods!(
    unsafe impl UIDynamicBehavior {
        #[method(addChildBehavior:)]
        #[unsafe(method_family = none)]
        pub unsafe fn addChildBehavior(&self, behavior: &UIDynamicBehavior);

        #[method(removeChildBehavior:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeChildBehavior(&self, behavior: &UIDynamicBehavior);

        #[method(childBehaviors)]
        #[unsafe(method_family = none)]
        pub unsafe fn childBehaviors(&self) -> Retained<NSArray<UIDynamicBehavior>>;

        #[cfg(feature = "block2")]
        #[method(action)]
        #[unsafe(method_family = none)]
        pub unsafe fn action(&self) -> *mut block2::Block<dyn Fn()>;

        #[cfg(feature = "block2")]
        /// Setter for [`action`][Self::action].
        #[method(setAction:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAction(&self, action: Option<&block2::Block<dyn Fn()>>);

        #[cfg(feature = "UIDynamicAnimator")]
        #[method(willMoveToAnimator:)]
        #[unsafe(method_family = none)]
        pub unsafe fn willMoveToAnimator(&self, dynamic_animator: Option<&UIDynamicAnimator>);

        #[cfg(feature = "UIDynamicAnimator")]
        #[method(dynamicAnimator)]
        #[unsafe(method_family = none)]
        pub unsafe fn dynamicAnimator(&self) -> Option<Retained<UIDynamicAnimator>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIDynamicBehavior {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
