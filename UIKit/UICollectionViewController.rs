//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uicollectionviewcontroller?language=objc)
    #[unsafe(super(UIViewController, UIResponder, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    pub struct UICollectionViewController;
);

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSCoding for UICollectionViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSObjectProtocol for UICollectionViewController {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIAppearanceContainer for UICollectionViewController {}

#[cfg(all(
    feature = "UICollectionView",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UICollectionViewDataSource for UICollectionViewController {}

#[cfg(all(
    feature = "UICollectionView",
    feature = "UIResponder",
    feature = "UIScrollView",
    feature = "UIViewController"
))]
unsafe impl UICollectionViewDelegate for UICollectionViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIContentContainer for UICollectionViewController {}

#[cfg(all(
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIFocusEnvironment for UICollectionViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIResponderStandardEditActions for UICollectionViewController {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UIScrollView",
    feature = "UIViewController"
))]
unsafe impl UIScrollViewDelegate for UICollectionViewController {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIViewController"
))]
unsafe impl UITraitEnvironment for UICollectionViewController {}

extern_methods!(
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UICollectionViewController {
        #[cfg(feature = "UICollectionViewLayout")]
        #[unsafe(method_family(init))]
        #[method_id(initWithCollectionViewLayout:)]
        pub unsafe fn initWithCollectionViewLayout(
            this: Allocated<Self>,
            layout: &UICollectionViewLayout,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithNibName:bundle:)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(all(
            feature = "UICollectionView",
            feature = "UIScrollView",
            feature = "UIView"
        ))]
        #[unsafe(method_family(none))]
        #[method_id(collectionView)]
        pub unsafe fn collectionView(&self) -> Option<Retained<UICollectionView>>;

        #[cfg(all(
            feature = "UICollectionView",
            feature = "UIScrollView",
            feature = "UIView"
        ))]
        /// Setter for [`collectionView`][Self::collectionView].
        #[method(setCollectionView:)]
        pub unsafe fn setCollectionView(&self, collection_view: Option<&UICollectionView>);

        #[method(clearsSelectionOnViewWillAppear)]
        pub unsafe fn clearsSelectionOnViewWillAppear(&self) -> bool;

        /// Setter for [`clearsSelectionOnViewWillAppear`][Self::clearsSelectionOnViewWillAppear].
        #[method(setClearsSelectionOnViewWillAppear:)]
        pub unsafe fn setClearsSelectionOnViewWillAppear(
            &self,
            clears_selection_on_view_will_appear: bool,
        );

        #[method(useLayoutToLayoutNavigationTransitions)]
        pub unsafe fn useLayoutToLayoutNavigationTransitions(&self) -> bool;

        /// Setter for [`useLayoutToLayoutNavigationTransitions`][Self::useLayoutToLayoutNavigationTransitions].
        #[method(setUseLayoutToLayoutNavigationTransitions:)]
        pub unsafe fn setUseLayoutToLayoutNavigationTransitions(
            &self,
            use_layout_to_layout_navigation_transitions: bool,
        );

        #[cfg(feature = "UICollectionViewLayout")]
        #[unsafe(method_family(none))]
        #[method_id(collectionViewLayout)]
        pub unsafe fn collectionViewLayout(&self) -> Retained<UICollectionViewLayout>;

        #[method(installsStandardGestureForInteractiveMovement)]
        pub unsafe fn installsStandardGestureForInteractiveMovement(&self) -> bool;

        /// Setter for [`installsStandardGestureForInteractiveMovement`][Self::installsStandardGestureForInteractiveMovement].
        #[method(setInstallsStandardGestureForInteractiveMovement:)]
        pub unsafe fn setInstallsStandardGestureForInteractiveMovement(
            &self,
            installs_standard_gesture_for_interactive_movement: bool,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UICollectionViewController {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
