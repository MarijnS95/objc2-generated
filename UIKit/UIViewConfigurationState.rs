//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiviewconfigurationstate?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIViewConfigurationState;
);

unsafe impl NSCoding for UIViewConfigurationState {}

unsafe impl NSCopying for UIViewConfigurationState {}

unsafe impl CopyingHelper for UIViewConfigurationState {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UIViewConfigurationState {}

unsafe impl NSSecureCoding for UIViewConfigurationState {}

#[cfg(feature = "UIConfigurationState")]
unsafe impl UIConfigurationState for UIViewConfigurationState {}

extern_methods!(
    unsafe impl UIViewConfigurationState {
        #[cfg(feature = "UITraitCollection")]
        /// Returns a new instance with the specified trait collection.
        #[method(initWithTraitCollection:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTraitCollection(
            this: Allocated<Self>,
            trait_collection: &UITraitCollection,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[cfg(feature = "UITraitCollection")]
        #[method(traitCollection)]
        #[unsafe(method_family = none)]
        pub unsafe fn traitCollection(&self) -> Retained<UITraitCollection>;

        #[cfg(feature = "UITraitCollection")]
        /// Setter for [`traitCollection`][Self::traitCollection].
        #[method(setTraitCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setTraitCollection(&self, trait_collection: &UITraitCollection);

        #[method(isDisabled)]
        #[unsafe(method_family = none)]
        pub unsafe fn isDisabled(&self) -> bool;

        /// Setter for [`isDisabled`][Self::isDisabled].
        #[method(setDisabled:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisabled(&self, disabled: bool);

        #[method(isHighlighted)]
        #[unsafe(method_family = none)]
        pub unsafe fn isHighlighted(&self) -> bool;

        /// Setter for [`isHighlighted`][Self::isHighlighted].
        #[method(setHighlighted:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setHighlighted(&self, highlighted: bool);

        #[method(isSelected)]
        #[unsafe(method_family = none)]
        pub unsafe fn isSelected(&self) -> bool;

        /// Setter for [`isSelected`][Self::isSelected].
        #[method(setSelected:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelected(&self, selected: bool);

        #[method(isFocused)]
        #[unsafe(method_family = none)]
        pub unsafe fn isFocused(&self) -> bool;

        /// Setter for [`isFocused`][Self::isFocused].
        #[method(setFocused:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocused(&self, focused: bool);

        #[method(isPinned)]
        #[unsafe(method_family = none)]
        pub unsafe fn isPinned(&self) -> bool;

        /// Setter for [`isPinned`][Self::isPinned].
        #[method(setPinned:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setPinned(&self, pinned: bool);
    }
);
