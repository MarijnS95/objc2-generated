//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicanimatordelegate?language=objc)
    pub unsafe trait UIDynamicAnimatorDelegate: NSObjectProtocol + MainThreadOnly {
        #[optional]
        #[method(dynamicAnimatorWillResume:)]
        #[unsafe(method_family = none)]
        unsafe fn dynamicAnimatorWillResume(&self, animator: &UIDynamicAnimator);

        #[optional]
        #[method(dynamicAnimatorDidPause:)]
        #[unsafe(method_family = none)]
        unsafe fn dynamicAnimatorDidPause(&self, animator: &UIDynamicAnimator);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidynamicanimator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIDynamicAnimator;
);

unsafe impl NSObjectProtocol for UIDynamicAnimator {}

extern_methods!(
    unsafe impl UIDynamicAnimator {
        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method(initWithReferenceView:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithReferenceView(this: Allocated<Self>, view: &UIView)
            -> Retained<Self>;

        #[cfg(feature = "UIDynamicBehavior")]
        #[method(addBehavior:)]
        #[unsafe(method_family = none)]
        pub unsafe fn addBehavior(&self, behavior: &UIDynamicBehavior);

        #[cfg(feature = "UIDynamicBehavior")]
        #[method(removeBehavior:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeBehavior(&self, behavior: &UIDynamicBehavior);

        #[method(removeAllBehaviors)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAllBehaviors(&self);

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method(referenceView)]
        #[unsafe(method_family = none)]
        pub unsafe fn referenceView(&self, mtm: MainThreadMarker) -> Option<Retained<UIView>>;

        #[cfg(feature = "UIDynamicBehavior")]
        #[method(behaviors)]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviors(
            &self,
            mtm: MainThreadMarker,
        ) -> Retained<NSArray<UIDynamicBehavior>>;

        #[cfg(all(feature = "UIDynamicBehavior", feature = "objc2-core-foundation"))]
        #[method(itemsInRect:)]
        #[unsafe(method_family = none)]
        pub unsafe fn itemsInRect(
            &self,
            rect: CGRect,
            mtm: MainThreadMarker,
        ) -> Retained<NSArray<ProtocolObject<dyn UIDynamicItem>>>;

        #[cfg(feature = "UIDynamicBehavior")]
        #[method(updateItemUsingCurrentState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn updateItemUsingCurrentState(&self, item: &ProtocolObject<dyn UIDynamicItem>);

        #[method(isRunning)]
        #[unsafe(method_family = none)]
        pub unsafe fn isRunning(&self) -> bool;

        #[method(elapsedTime)]
        #[unsafe(method_family = none)]
        pub unsafe fn elapsedTime(&self) -> NSTimeInterval;

        #[method(delegate)]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<ProtocolObject<dyn UIDynamicAnimatorDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn UIDynamicAnimatorDelegate>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIDynamicAnimator {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// UICollectionViewAdditions
    unsafe impl UIDynamicAnimator {
        #[cfg(feature = "UICollectionViewLayout")]
        #[method(initWithCollectionViewLayout:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCollectionViewLayout(
            this: Allocated<Self>,
            layout: &UICollectionViewLayout,
        ) -> Retained<Self>;

        #[cfg(feature = "UICollectionViewLayout")]
        #[method(layoutAttributesForCellAtIndexPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layoutAttributesForCellAtIndexPath(
            &self,
            index_path: &NSIndexPath,
            mtm: MainThreadMarker,
        ) -> Option<Retained<UICollectionViewLayoutAttributes>>;

        #[cfg(feature = "UICollectionViewLayout")]
        #[method(layoutAttributesForSupplementaryViewOfKind:atIndexPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layoutAttributesForSupplementaryViewOfKind_atIndexPath(
            &self,
            kind: &NSString,
            index_path: &NSIndexPath,
            mtm: MainThreadMarker,
        ) -> Option<Retained<UICollectionViewLayoutAttributes>>;

        #[cfg(feature = "UICollectionViewLayout")]
        #[method(layoutAttributesForDecorationViewOfKind:atIndexPath:)]
        #[unsafe(method_family = none)]
        pub unsafe fn layoutAttributesForDecorationViewOfKind_atIndexPath(
            &self,
            decoration_view_kind: &NSString,
            index_path: &NSIndexPath,
            mtm: MainThreadMarker,
        ) -> Option<Retained<UICollectionViewLayoutAttributes>>;
    }
);
