//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextdocumentproxy?language=objc)
    #[cfg(all(feature = "UITextInput", feature = "UITextInputTraits"))]
    pub unsafe trait UITextDocumentProxy: UIKeyInput + MainThreadOnly {
        #[method(documentContextBeforeInput)]
        #[unsafe(method_family = none)]
        unsafe fn documentContextBeforeInput(&self) -> Option<Retained<NSString>>;

        #[method(documentContextAfterInput)]
        #[unsafe(method_family = none)]
        unsafe fn documentContextAfterInput(&self) -> Option<Retained<NSString>>;

        #[method(selectedText)]
        #[unsafe(method_family = none)]
        unsafe fn selectedText(&self) -> Option<Retained<NSString>>;

        #[method(documentInputMode)]
        #[unsafe(method_family = none)]
        unsafe fn documentInputMode(&self) -> Option<Retained<UITextInputMode>>;

        #[method(documentIdentifier)]
        #[unsafe(method_family = none)]
        unsafe fn documentIdentifier(&self) -> Retained<NSUUID>;

        #[method(adjustTextPositionByCharacterOffset:)]
        #[unsafe(method_family = none)]
        unsafe fn adjustTextPositionByCharacterOffset(&self, offset: NSInteger);

        #[method(setMarkedText:selectedRange:)]
        #[unsafe(method_family = none)]
        unsafe fn setMarkedText_selectedRange(
            &self,
            marked_text: &NSString,
            selected_range: NSRange,
        );

        #[method(unmarkText)]
        #[unsafe(method_family = none)]
        unsafe fn unmarkText(&self);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiinputviewcontroller?language=objc)
    #[unsafe(super(UIViewController, UIResponder, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    pub struct UIInputViewController;
);

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSCoding for UIInputViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSObjectProtocol for UIInputViewController {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIAppearanceContainer for UIInputViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIContentContainer for UIInputViewController {}

#[cfg(all(
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIFocusEnvironment for UIInputViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIResponderStandardEditActions for UIInputViewController {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UITextInput",
    feature = "UIViewController"
))]
unsafe impl UITextInputDelegate for UIInputViewController {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIViewController"
))]
unsafe impl UITraitEnvironment for UIInputViewController {}

extern_methods!(
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIInputViewController {
        #[cfg(all(feature = "UIInputView", feature = "UIView"))]
        #[method(inputView)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputView(&self) -> Option<Retained<UIInputView>>;

        #[cfg(all(feature = "UIInputView", feature = "UIView"))]
        /// Setter for [`inputView`][Self::inputView].
        #[method(setInputView:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputView(&self, input_view: Option<&UIInputView>);

        #[cfg(all(feature = "UITextInput", feature = "UITextInputTraits"))]
        #[method(textDocumentProxy)]
        #[unsafe(method_family = none)]
        pub unsafe fn textDocumentProxy(&self)
            -> Retained<ProtocolObject<dyn UITextDocumentProxy>>;

        #[method(primaryLanguage)]
        #[unsafe(method_family = none)]
        pub unsafe fn primaryLanguage(&self) -> Option<Retained<NSString>>;

        /// Setter for [`primaryLanguage`][Self::primaryLanguage].
        #[method(setPrimaryLanguage:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setPrimaryLanguage(&self, primary_language: Option<&NSString>);

        #[method(hasDictationKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasDictationKey(&self) -> bool;

        /// Setter for [`hasDictationKey`][Self::hasDictationKey].
        #[method(setHasDictationKey:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setHasDictationKey(&self, has_dictation_key: bool);

        #[method(hasFullAccess)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasFullAccess(&self) -> bool;

        #[method(needsInputModeSwitchKey)]
        #[unsafe(method_family = none)]
        pub unsafe fn needsInputModeSwitchKey(&self) -> bool;

        #[method(dismissKeyboard)]
        #[unsafe(method_family = none)]
        pub unsafe fn dismissKeyboard(&self);

        #[method(advanceToNextInputMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn advanceToNextInputMode(&self);

        #[cfg(all(feature = "UIEvent", feature = "UIView"))]
        #[method(handleInputModeListFromView:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn handleInputModeListFromView_withEvent(&self, view: &UIView, event: &UIEvent);

        #[cfg(all(feature = "UILexicon", feature = "block2"))]
        #[method(requestSupplementaryLexiconWithCompletion:)]
        #[unsafe(method_family = none)]
        pub unsafe fn requestSupplementaryLexiconWithCompletion(
            &self,
            completion_handler: &block2::Block<dyn Fn(NonNull<UILexicon>)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `UIViewController`
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIInputViewController {
        #[method(initWithNibName:bundle:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[method(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIInputViewController {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
