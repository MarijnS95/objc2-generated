//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextpastedelegate?language=objc)
    pub unsafe trait UITextPasteDelegate: NSObjectProtocol + MainThreadOnly {
        #[cfg(all(
            feature = "UIPasteConfigurationSupporting",
            feature = "UITextPasteConfigurationSupporting"
        ))]
        #[optional]
        #[method(textPasteConfigurationSupporting:transformPasteItem:)]
        unsafe fn textPasteConfigurationSupporting_transformPasteItem(
            &self,
            text_paste_configuration_supporting: &ProtocolObject<
                dyn UITextPasteConfigurationSupporting,
            >,
            item: &ProtocolObject<dyn UITextPasteItem>,
        );

        #[cfg(all(
            feature = "UIPasteConfigurationSupporting",
            feature = "UITextInput",
            feature = "UITextPasteConfigurationSupporting"
        ))]
        #[optional]
        #[method_id(@__method_family Other textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:)]
        unsafe fn textPasteConfigurationSupporting_combineItemAttributedStrings_forRange(
            &self,
            text_paste_configuration_supporting: &ProtocolObject<
                dyn UITextPasteConfigurationSupporting,
            >,
            item_strings: &NSArray<NSAttributedString>,
            text_range: &UITextRange,
        ) -> Retained<NSAttributedString>;

        #[cfg(all(
            feature = "UIPasteConfigurationSupporting",
            feature = "UITextInput",
            feature = "UITextPasteConfigurationSupporting"
        ))]
        #[optional]
        #[method_id(@__method_family Other textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:)]
        unsafe fn textPasteConfigurationSupporting_performPasteOfAttributedString_toRange(
            &self,
            text_paste_configuration_supporting: &ProtocolObject<
                dyn UITextPasteConfigurationSupporting,
            >,
            attributed_string: &NSAttributedString,
            text_range: &UITextRange,
        ) -> Retained<UITextRange>;

        #[cfg(all(
            feature = "UIPasteConfigurationSupporting",
            feature = "UITextInput",
            feature = "UITextPasteConfigurationSupporting"
        ))]
        #[optional]
        #[method(textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:)]
        unsafe fn textPasteConfigurationSupporting_shouldAnimatePasteOfAttributedString_toRange(
            &self,
            text_paste_configuration_supporting: &ProtocolObject<
                dyn UITextPasteConfigurationSupporting,
            >,
            attributed_string: &NSAttributedString,
            text_range: &UITextRange,
        ) -> bool;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextpasteitem?language=objc)
    pub unsafe trait UITextPasteItem: NSObjectProtocol + MainThreadOnly {
        #[method_id(@__method_family Other itemProvider)]
        unsafe fn itemProvider(&self) -> Retained<NSItemProvider>;

        #[method_id(@__method_family Other localObject)]
        unsafe fn localObject(&self) -> Option<Retained<AnyObject>>;

        #[method_id(@__method_family Other defaultAttributes)]
        unsafe fn defaultAttributes(
            &self,
        ) -> Retained<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[method(setStringResult:)]
        unsafe fn setStringResult(&self, string: &NSString);

        #[method(setAttributedStringResult:)]
        unsafe fn setAttributedStringResult(&self, string: &NSAttributedString);

        #[cfg(feature = "NSTextAttachment")]
        #[method(setAttachmentResult:)]
        unsafe fn setAttachmentResult(&self, text_attachment: &NSTextAttachment);

        #[method(setNoResult)]
        unsafe fn setNoResult(&self);

        #[method(setDefaultResult)]
        unsafe fn setDefaultResult(&self);
    }
);
