//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiprogressviewstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIProgressViewStyle(pub NSInteger);
impl UIProgressViewStyle {
    #[doc(alias = "UIProgressViewStyleDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "UIProgressViewStyleBar")]
    pub const Bar: Self = Self(1);
}

unsafe impl Encode for UIProgressViewStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIProgressViewStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiprogressview?language=objc)
    #[unsafe(super(UIView, UIResponder, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "UIResponder", feature = "UIView"))]
    pub struct UIProgressView;
);

#[cfg(all(
    feature = "UIResponder",
    feature = "UIView",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
unsafe impl CALayerDelegate for UIProgressView {}

#[cfg(all(feature = "UIResponder", feature = "UIView"))]
unsafe impl NSCoding for UIProgressView {}

#[cfg(all(feature = "UIResponder", feature = "UIView"))]
unsafe impl NSObjectProtocol for UIProgressView {}

#[cfg(all(feature = "UIAppearance", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIAppearance for UIProgressView {}

#[cfg(all(feature = "UIAppearance", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIAppearanceContainer for UIProgressView {}

#[cfg(all(feature = "UIResponder", feature = "UIView"))]
unsafe impl UICoordinateSpace for UIProgressView {}

#[cfg(all(
    feature = "UIDynamicBehavior",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIDynamicItem for UIProgressView {}

#[cfg(all(feature = "UIFocus", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIFocusEnvironment for UIProgressView {}

#[cfg(all(feature = "UIFocus", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIFocusItem for UIProgressView {}

#[cfg(all(feature = "UIFocus", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIFocusItemContainer for UIProgressView {}

#[cfg(all(feature = "UIResponder", feature = "UIView"))]
unsafe impl UIResponderStandardEditActions for UIProgressView {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIView"
))]
unsafe impl UITraitEnvironment for UIProgressView {}

extern_methods!(
    #[cfg(all(feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIProgressView {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithFrame:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[method_id(initWithProgressViewStyle:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithProgressViewStyle(
            this: Allocated<Self>,
            style: UIProgressViewStyle,
        ) -> Retained<Self>;

        #[method(progressViewStyle)]
        pub unsafe fn progressViewStyle(&self) -> UIProgressViewStyle;

        /// Setter for [`progressViewStyle`][Self::progressViewStyle].
        #[method(setProgressViewStyle:)]
        pub unsafe fn setProgressViewStyle(&self, progress_view_style: UIProgressViewStyle);

        #[method(progress)]
        pub unsafe fn progress(&self) -> c_float;

        /// Setter for [`progress`][Self::progress].
        #[method(setProgress:)]
        pub unsafe fn setProgress(&self, progress: c_float);

        #[cfg(feature = "UIColor")]
        #[method_id(progressTintColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn progressTintColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`progressTintColor`][Self::progressTintColor].
        #[method(setProgressTintColor:)]
        pub unsafe fn setProgressTintColor(&self, progress_tint_color: Option<&UIColor>);

        #[cfg(feature = "UIColor")]
        #[method_id(trackTintColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn trackTintColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`trackTintColor`][Self::trackTintColor].
        #[method(setTrackTintColor:)]
        pub unsafe fn setTrackTintColor(&self, track_tint_color: Option<&UIColor>);

        #[cfg(feature = "UIImage")]
        #[method_id(progressImage)]
        #[unsafe(method_family = none)]
        pub unsafe fn progressImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`progressImage`][Self::progressImage].
        #[method(setProgressImage:)]
        pub unsafe fn setProgressImage(&self, progress_image: Option<&UIImage>);

        #[cfg(feature = "UIImage")]
        #[method_id(trackImage)]
        #[unsafe(method_family = none)]
        pub unsafe fn trackImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`trackImage`][Self::trackImage].
        #[method(setTrackImage:)]
        pub unsafe fn setTrackImage(&self, track_image: Option<&UIImage>);

        #[method(setProgress:animated:)]
        pub unsafe fn setProgress_animated(&self, progress: c_float, animated: bool);

        #[method_id(observedProgress)]
        #[unsafe(method_family = none)]
        pub unsafe fn observedProgress(&self) -> Option<Retained<NSProgress>>;

        /// Setter for [`observedProgress`][Self::observedProgress].
        #[method(setObservedProgress:)]
        pub unsafe fn setObservedProgress(&self, observed_progress: Option<&NSProgress>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIProgressView {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
