//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uidocumentviewcontroller?language=objc)
    #[unsafe(super(UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    pub struct UIDocumentViewController;
);

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSCoding for UIDocumentViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl NSObjectProtocol for UIDocumentViewController {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIAppearanceContainer for UIDocumentViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIContentContainer for UIDocumentViewController {}

#[cfg(all(
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIViewController"
))]
unsafe impl UIFocusEnvironment for UIDocumentViewController {}

#[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
unsafe impl UIResponderStandardEditActions for UIDocumentViewController {}

#[cfg(all(
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIViewController"
))]
unsafe impl UITraitEnvironment for UIDocumentViewController {}

extern_methods!(
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIDocumentViewController {
        #[cfg(feature = "UIDocument")]
        #[unsafe(method_family(init))]
        #[method_id(initWithDocument:)]
        pub unsafe fn initWithDocument(
            this: Allocated<Self>,
            document: Option<&UIDocument>,
        ) -> Retained<Self>;

        #[cfg(feature = "UIDocument")]
        #[unsafe(method_family(none))]
        #[method_id(document)]
        pub unsafe fn document(&self) -> Option<Retained<UIDocument>>;

        #[cfg(feature = "UIDocument")]
        /// Setter for [`document`][Self::document].
        #[method(setDocument:)]
        pub unsafe fn setDocument(&self, document: Option<&UIDocument>);

        #[cfg(feature = "UIDocumentViewControllerLaunchOptions")]
        /// Properties to configure the view controller when no document is open.
        #[unsafe(method_family(none))]
        #[method_id(launchOptions)]
        pub unsafe fn launchOptions(&self) -> Retained<UIDocumentViewControllerLaunchOptions>;

        #[cfg(feature = "UIDocumentViewControllerLaunchOptions")]
        /// Setter for [`launchOptions`][Self::launchOptions].
        #[method(setLaunchOptions:)]
        pub unsafe fn setLaunchOptions(
            &self,
            launch_options: &UIDocumentViewControllerLaunchOptions,
        );

        /// When this view controller updates its navigation item, this method will be called, allowing subclasses to apply any kind of customization you might want.
        #[method(navigationItemDidUpdate)]
        pub unsafe fn navigationItemDidUpdate(&self);

        #[cfg(feature = "block2")]
        /// Opens the current document.
        /// This method is optional. If the document is not opened by the time the view controller becomes visible, the view controller will take care of opening the document.
        /// If the document is already opened, the completion handler will be called as if opening the document succeeded.
        #[method(openDocumentWithCompletionHandler:)]
        pub unsafe fn openDocumentWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );

        /// Notifies subclasses that the specified document was opened. This method will be called by the system after
        /// opening the document initially or after the presented document was changed.
        #[method(documentDidOpen)]
        pub unsafe fn documentDidOpen(&self);

        #[cfg(feature = "UIBarButtonItemGroup")]
        /// MARK: Custom Navigation Items
        #[unsafe(method_family(none))]
        #[method_id(undoRedoItemGroup)]
        pub unsafe fn undoRedoItemGroup(&self) -> Retained<UIBarButtonItemGroup>;
    }
);

extern_methods!(
    /// Methods declared on superclass `UIViewController`
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIDocumentViewController {
        #[unsafe(method_family(init))]
        #[method_id(initWithNibName:bundle:)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIDocumentViewController {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
