//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uinavigationbarappearance?language=objc)
    #[unsafe(super(UIBarAppearance, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "UIBarAppearance")]
    pub struct UINavigationBarAppearance;
);

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSCoding for UINavigationBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSCopying for UINavigationBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl CopyingHelper for UINavigationBarAppearance {
    type Result = Self;
}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSObjectProtocol for UINavigationBarAppearance {}

#[cfg(feature = "UIBarAppearance")]
unsafe impl NSSecureCoding for UINavigationBarAppearance {}

extern_methods!(
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UINavigationBarAppearance {
        /// Inline Title text attributes. If the font or color are unspecified, appropriate defaults are supplied.
        #[unsafe(method_family(none))]
        #[method_id(titleTextAttributes)]
        pub unsafe fn titleTextAttributes(
            &self,
        ) -> Retained<NSDictionary<NSAttributedStringKey, AnyObject>>;

        /// Setter for [`titleTextAttributes`][Self::titleTextAttributes].
        #[method(setTitleTextAttributes:)]
        pub unsafe fn setTitleTextAttributes(
            &self,
            title_text_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// An additional adjustment to the inline title's position.
        #[method(titlePositionAdjustment)]
        pub unsafe fn titlePositionAdjustment(&self) -> UIOffset;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`titlePositionAdjustment`][Self::titlePositionAdjustment].
        #[method(setTitlePositionAdjustment:)]
        pub unsafe fn setTitlePositionAdjustment(&self, title_position_adjustment: UIOffset);

        /// Large Title text attributes. If the font or color are unspecified, appropriate defaults are supplied.
        #[unsafe(method_family(none))]
        #[method_id(largeTitleTextAttributes)]
        pub unsafe fn largeTitleTextAttributes(
            &self,
        ) -> Retained<NSDictionary<NSAttributedStringKey, AnyObject>>;

        /// Setter for [`largeTitleTextAttributes`][Self::largeTitleTextAttributes].
        #[method(setLargeTitleTextAttributes:)]
        pub unsafe fn setLargeTitleTextAttributes(
            &self,
            large_title_text_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// The appearance for plain-style bar button items
        #[unsafe(method_family(none))]
        #[method_id(buttonAppearance)]
        pub unsafe fn buttonAppearance(&self) -> Retained<UIBarButtonItemAppearance>;

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// Setter for [`buttonAppearance`][Self::buttonAppearance].
        #[method(setButtonAppearance:)]
        pub unsafe fn setButtonAppearance(&self, button_appearance: &UIBarButtonItemAppearance);

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// The appearance for done-style bar button items
        #[unsafe(method_family(none))]
        #[method_id(doneButtonAppearance)]
        pub unsafe fn doneButtonAppearance(&self) -> Retained<UIBarButtonItemAppearance>;

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// Setter for [`doneButtonAppearance`][Self::doneButtonAppearance].
        #[method(setDoneButtonAppearance:)]
        pub unsafe fn setDoneButtonAppearance(
            &self,
            done_button_appearance: &UIBarButtonItemAppearance,
        );

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// The appearance for back buttons. Defaults are drawn from buttonAppearance when appropriate.
        #[unsafe(method_family(none))]
        #[method_id(backButtonAppearance)]
        pub unsafe fn backButtonAppearance(&self) -> Retained<UIBarButtonItemAppearance>;

        #[cfg(feature = "UIBarButtonItemAppearance")]
        /// Setter for [`backButtonAppearance`][Self::backButtonAppearance].
        #[method(setBackButtonAppearance:)]
        pub unsafe fn setBackButtonAppearance(
            &self,
            back_button_appearance: &UIBarButtonItemAppearance,
        );

        #[cfg(feature = "UIImage")]
        /// The image shown on the leading edge of the back button.
        #[unsafe(method_family(none))]
        #[method_id(backIndicatorImage)]
        pub unsafe fn backIndicatorImage(&self) -> Retained<UIImage>;

        #[cfg(feature = "UIImage")]
        /// This image is used to mask content flowing underneath the backIndicatorImage during push
        /// &
        /// pop transitions
        #[unsafe(method_family(none))]
        #[method_id(backIndicatorTransitionMaskImage)]
        pub unsafe fn backIndicatorTransitionMaskImage(&self) -> Retained<UIImage>;

        #[cfg(feature = "UIImage")]
        /// Set the backIndicatorImage
        /// &
        /// backIndicatorTransitionMaskImage images. If either image is nil, then both images will be reset to their default.
        #[method(setBackIndicatorImage:transitionMaskImage:)]
        pub unsafe fn setBackIndicatorImage_transitionMaskImage(
            &self,
            back_indicator_image: Option<&UIImage>,
            back_indicator_transition_mask_image: Option<&UIImage>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `UIBarAppearance`
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UINavigationBarAppearance {
        /// Constructs a new bar appearance, configured with default values and targeting the device idiom.
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "UIDevice")]
        /// Constructs a new bar appearance, targeting the passed-in idiom as a hint. Not all platforms support all available idioms. See the idiom property to determine the resolved idiom.
        #[unsafe(method_family(init))]
        #[method_id(initWithIdiom:)]
        pub unsafe fn initWithIdiom(
            this: Allocated<Self>,
            idiom: UIUserInterfaceIdiom,
        ) -> Retained<Self>;

        /// Constructs a new bar appearance, copying all relevant properties from the given appearance object. This initializer is useful for migrating configuration between UIBarAppearance subclasses. For example, you can initialize a UINavigationBarAppearance with a UIToolbarAppearance instance, and shared attributes will be identical between the two.
        #[unsafe(method_family(init))]
        #[method_id(initWithBarAppearance:)]
        pub unsafe fn initWithBarAppearance(
            this: Allocated<Self>,
            bar_appearance: &UIBarAppearance,
        ) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "UIBarAppearance")]
    unsafe impl UINavigationBarAppearance {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
