//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibezierpath?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIBezierPath;
);

unsafe impl NSCoding for UIBezierPath {}

unsafe impl NSCopying for UIBezierPath {}

unsafe impl CopyingHelper for UIBezierPath {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UIBezierPath {}

unsafe impl NSSecureCoding for UIBezierPath {}

extern_methods!(
    unsafe impl UIBezierPath {
        #[method_id(@__retain_semantics Other bezierPath)]
        pub unsafe fn bezierPath() -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Other bezierPathWithRect:)]
        pub unsafe fn bezierPathWithRect(rect: CGRect) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Other bezierPathWithOvalInRect:)]
        pub unsafe fn bezierPathWithOvalInRect(rect: CGRect) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Other bezierPathWithRoundedRect:cornerRadius:)]
        pub unsafe fn bezierPathWithRoundedRect_cornerRadius(
            rect: CGRect,
            corner_radius: CGFloat,
        ) -> Retained<Self>;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        #[method_id(@__retain_semantics Other bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:)]
        pub unsafe fn bezierPathWithRoundedRect_byRoundingCorners_cornerRadii(
            rect: CGRect,
            corners: UIRectCorner,
            corner_radii: CGSize,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Other bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:)]
        pub unsafe fn bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise(
            center: CGPoint,
            radius: CGFloat,
            start_angle: CGFloat,
            end_angle: CGFloat,
            clockwise: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(@__retain_semantics Other bezierPathWithCGPath:)]
        pub unsafe fn bezierPathWithCGPath(cg_path: CGPathRef) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(CGPath)]
        pub unsafe fn CGPath(&self) -> CGPathRef;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(setCGPath:)]
        pub unsafe fn setCGPath(&self, cg_path: CGPathRef);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(moveToPoint:)]
        pub unsafe fn moveToPoint(&self, point: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(addLineToPoint:)]
        pub unsafe fn addLineToPoint(&self, point: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(addCurveToPoint:controlPoint1:controlPoint2:)]
        pub unsafe fn addCurveToPoint_controlPoint1_controlPoint2(
            &self,
            end_point: CGPoint,
            control_point1: CGPoint,
            control_point2: CGPoint,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(addQuadCurveToPoint:controlPoint:)]
        pub unsafe fn addQuadCurveToPoint_controlPoint(
            &self,
            end_point: CGPoint,
            control_point: CGPoint,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(addArcWithCenter:radius:startAngle:endAngle:clockwise:)]
        pub unsafe fn addArcWithCenter_radius_startAngle_endAngle_clockwise(
            &self,
            center: CGPoint,
            radius: CGFloat,
            start_angle: CGFloat,
            end_angle: CGFloat,
            clockwise: bool,
        );

        #[method(closePath)]
        pub unsafe fn closePath(&self);

        #[method(removeAllPoints)]
        pub unsafe fn removeAllPoints(&self);

        #[method(appendPath:)]
        pub unsafe fn appendPath(&self, bezier_path: &UIBezierPath);

        #[method_id(@__retain_semantics Other bezierPathByReversingPath)]
        pub unsafe fn bezierPathByReversingPath(&self) -> Retained<UIBezierPath>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(applyTransform:)]
        pub unsafe fn applyTransform(&self, transform: CGAffineTransform);

        #[method(isEmpty)]
        pub unsafe fn isEmpty(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(bounds)]
        pub unsafe fn bounds(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(currentPoint)]
        pub unsafe fn currentPoint(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(containsPoint:)]
        pub unsafe fn containsPoint(&self, point: CGPoint) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(lineWidth)]
        pub unsafe fn lineWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setLineWidth:)]
        pub unsafe fn setLineWidth(&self, line_width: CGFloat);

        #[cfg(feature = "objc2-core-graphics")]
        #[method(lineCapStyle)]
        pub unsafe fn lineCapStyle(&self) -> CGLineCap;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(setLineCapStyle:)]
        pub unsafe fn setLineCapStyle(&self, line_cap_style: CGLineCap);

        #[cfg(feature = "objc2-core-graphics")]
        #[method(lineJoinStyle)]
        pub unsafe fn lineJoinStyle(&self) -> CGLineJoin;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(setLineJoinStyle:)]
        pub unsafe fn setLineJoinStyle(&self, line_join_style: CGLineJoin);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(miterLimit)]
        pub unsafe fn miterLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setMiterLimit:)]
        pub unsafe fn setMiterLimit(&self, miter_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(flatness)]
        pub unsafe fn flatness(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setFlatness:)]
        pub unsafe fn setFlatness(&self, flatness: CGFloat);

        #[method(usesEvenOddFillRule)]
        pub unsafe fn usesEvenOddFillRule(&self) -> bool;

        #[method(setUsesEvenOddFillRule:)]
        pub unsafe fn setUsesEvenOddFillRule(&self, uses_even_odd_fill_rule: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setLineDash:count:phase:)]
        pub unsafe fn setLineDash_count_phase(
            &self,
            pattern: *mut CGFloat,
            count: NSInteger,
            phase: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(getLineDash:count:phase:)]
        pub unsafe fn getLineDash_count_phase(
            &self,
            pattern: *mut CGFloat,
            count: *mut NSInteger,
            phase: *mut CGFloat,
        );

        #[method(fill)]
        pub unsafe fn fill(&self);

        #[method(stroke)]
        pub unsafe fn stroke(&self);

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[method(fillWithBlendMode:alpha:)]
        pub unsafe fn fillWithBlendMode_alpha(&self, blend_mode: CGBlendMode, alpha: CGFloat);

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[method(strokeWithBlendMode:alpha:)]
        pub unsafe fn strokeWithBlendMode_alpha(&self, blend_mode: CGBlendMode, alpha: CGFloat);

        #[method(addClip)]
        pub unsafe fn addClip(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIBezierPath {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
