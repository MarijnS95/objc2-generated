//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uicollectionviewlistcell?language=objc)
    #[unsafe(super(
        UICollectionViewCell,
        UICollectionReusableView,
        UIView,
        UIResponder,
        NSObject
    ))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "UICollectionViewCell",
        feature = "UIResponder",
        feature = "UIView"
    ))]
    pub struct UICollectionViewListCell;
);

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
unsafe impl CALayerDelegate for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl NSCoding for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl NSObjectProtocol for UICollectionViewListCell {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIAppearance for UICollectionViewListCell {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIAppearanceContainer for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UICoordinateSpace for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIDynamicBehavior",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIDynamicItem for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusEnvironment for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusItem for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusItemContainer for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIResponderStandardEditActions for UICollectionViewListCell {}

#[cfg(all(
    feature = "UICollectionViewCell",
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIView"
))]
unsafe impl UITraitEnvironment for UICollectionViewListCell {}

extern_methods!(
    #[cfg(all(
        feature = "UICollectionViewCell",
        feature = "UIResponder",
        feature = "UIView"
    ))]
    unsafe impl UICollectionViewListCell {
        #[cfg(feature = "UIListContentConfiguration")]
        /// Returns a default list content configuration for the cell's style.
        #[method_id(@__method_family Other defaultContentConfiguration)]
        pub unsafe fn defaultContentConfiguration(&self) -> Retained<UIListContentConfiguration>;

        /// Defines the level of indentation for this cell. This is set automatically when using a hierarchical data source.
        #[method(indentationLevel)]
        pub unsafe fn indentationLevel(&self) -> NSInteger;

        /// Setter for [`indentationLevel`][Self::indentationLevel].
        #[method(setIndentationLevel:)]
        pub unsafe fn setIndentationLevel(&self, indentation_level: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// The width of an indentation level. The overall indentation will be indentationWidth * indentationLevel.
        #[method(indentationWidth)]
        pub unsafe fn indentationWidth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`indentationWidth`][Self::indentationWidth].
        #[method(setIndentationWidth:)]
        pub unsafe fn setIndentationWidth(&self, indentation_width: CGFloat);

        /// Defines whether accessories on the leading side are indented as well. If NO, only the content view will be indented.
        /// Defaults to YES.
        #[method(indentsAccessories)]
        pub unsafe fn indentsAccessories(&self) -> bool;

        /// Setter for [`indentsAccessories`][Self::indentsAccessories].
        #[method(setIndentsAccessories:)]
        pub unsafe fn setIndentsAccessories(&self, indents_accessories: bool);

        #[cfg(feature = "UICellAccessory")]
        /// All the accessories that should be decorating the cell. The order and whether an accessory is
        /// rendered on the leading or trailing side of the cell is defined by the system.
        #[method_id(@__method_family Other accessories)]
        pub unsafe fn accessories(&self) -> Retained<NSArray<UICellAccessory>>;

        #[cfg(feature = "UICellAccessory")]
        /// Setter for [`accessories`][Self::accessories].
        #[method(setAccessories:)]
        pub unsafe fn setAccessories(&self, accessories: &NSArray<UICellAccessory>);

        #[cfg(feature = "UILayoutGuide")]
        /// When used in a section that supports separators, this guide can be used to adjust the preferred
        /// insets of the separators. To align the separators to your content, add constraints to the leading
        /// or trailing anchors of this layout guide. When a system-provided content configuration is applied
        /// to the cell, the separator will be automatically aligned to the primary text in the content view.
        ///
        /// See: UICollectionLayoutListConfiguration
        #[method_id(@__method_family Other separatorLayoutGuide)]
        pub unsafe fn separatorLayoutGuide(&self) -> Retained<UILayoutGuide>;
    }
);

extern_methods!(
    /// Methods declared on superclass `UIView`
    #[cfg(all(
        feature = "UICollectionViewCell",
        feature = "UIResponder",
        feature = "UIView"
    ))]
    unsafe impl UICollectionViewListCell {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__method_family Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[method_id(@__method_family Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "UICollectionViewCell",
        feature = "UIResponder",
        feature = "UIView"
    ))]
    unsafe impl UICollectionViewListCell {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
