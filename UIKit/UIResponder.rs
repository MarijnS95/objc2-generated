//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextattributesconversionhandler?language=objc)
#[cfg(feature = "block2")]
pub type UITextAttributesConversionHandler = *mut block2::Block<
    dyn Fn(
        NonNull<NSDictionary<NSAttributedStringKey, AnyObject>>,
    ) -> NonNull<NSDictionary<NSAttributedStringKey, AnyObject>>,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uieditinginteractionconfiguration?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIEditingInteractionConfiguration(pub NSInteger);
impl UIEditingInteractionConfiguration {
    #[doc(alias = "UIEditingInteractionConfigurationNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "UIEditingInteractionConfigurationDefault")]
    pub const Default: Self = Self(1);
}

unsafe impl Encode for UIEditingInteractionConfiguration {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIEditingInteractionConfiguration {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiresponderstandardeditactions?language=objc)
    pub unsafe trait UIResponderStandardEditActions:
        NSObjectProtocol + MainThreadOnly
    {
        #[optional]
        #[method(cut:)]
        #[unsafe(method_family = none)]
        unsafe fn cut(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(copy:)]
        #[unsafe(method_family = none)]
        unsafe fn copy(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(paste:)]
        #[unsafe(method_family = none)]
        unsafe fn paste(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(pasteAndMatchStyle:)]
        #[unsafe(method_family = none)]
        unsafe fn pasteAndMatchStyle(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(pasteAndGo:)]
        #[unsafe(method_family = none)]
        unsafe fn pasteAndGo(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(pasteAndSearch:)]
        #[unsafe(method_family = none)]
        unsafe fn pasteAndSearch(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(select:)]
        #[unsafe(method_family = none)]
        unsafe fn select(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(selectAll:)]
        #[unsafe(method_family = none)]
        unsafe fn selectAll(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(delete:)]
        #[unsafe(method_family = none)]
        unsafe fn delete(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(makeTextWritingDirectionLeftToRight:)]
        #[unsafe(method_family = none)]
        unsafe fn makeTextWritingDirectionLeftToRight(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(makeTextWritingDirectionRightToLeft:)]
        #[unsafe(method_family = none)]
        unsafe fn makeTextWritingDirectionRightToLeft(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(toggleBoldface:)]
        #[unsafe(method_family = none)]
        unsafe fn toggleBoldface(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(toggleItalics:)]
        #[unsafe(method_family = none)]
        unsafe fn toggleItalics(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(toggleUnderline:)]
        #[unsafe(method_family = none)]
        unsafe fn toggleUnderline(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(increaseSize:)]
        #[unsafe(method_family = none)]
        unsafe fn increaseSize(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(decreaseSize:)]
        #[unsafe(method_family = none)]
        unsafe fn decreaseSize(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(find:)]
        #[unsafe(method_family = none)]
        unsafe fn find(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(findAndReplace:)]
        #[unsafe(method_family = none)]
        unsafe fn findAndReplace(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(findNext:)]
        #[unsafe(method_family = none)]
        unsafe fn findNext(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(findPrevious:)]
        #[unsafe(method_family = none)]
        unsafe fn findPrevious(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(useSelectionForFind:)]
        #[unsafe(method_family = none)]
        unsafe fn useSelectionForFind(&self, sender: Option<&AnyObject>);

        #[cfg(feature = "block2")]
        #[optional]
        #[method(updateTextAttributesWithConversionHandler:)]
        #[unsafe(method_family = none)]
        unsafe fn updateTextAttributesWithConversionHandler(
            &self,
            conversion_handler: UITextAttributesConversionHandler,
        );

        #[optional]
        #[method(print:)]
        #[unsafe(method_family = none)]
        unsafe fn print(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(rename:)]
        #[unsafe(method_family = none)]
        unsafe fn rename(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(duplicate:)]
        #[unsafe(method_family = none)]
        unsafe fn duplicate(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(move:)]
        #[unsafe(method_family = none)]
        unsafe fn r#move(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(export:)]
        #[unsafe(method_family = none)]
        unsafe fn export(&self, sender: Option<&AnyObject>);

        #[optional]
        #[method(showWritingTools:)]
        #[unsafe(method_family = none)]
        unsafe fn showWritingTools(&self, sender: &AnyObject);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiresponder?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIResponder;
);

unsafe impl NSObjectProtocol for UIResponder {}

unsafe impl UIResponderStandardEditActions for UIResponder {}

extern_methods!(
    unsafe impl UIResponder {
        #[method(nextResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn nextResponder(&self) -> Option<Retained<UIResponder>>;

        #[method(canBecomeFirstResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn canBecomeFirstResponder(&self) -> bool;

        #[method(becomeFirstResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn becomeFirstResponder(&self) -> bool;

        #[method(canResignFirstResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn canResignFirstResponder(&self) -> bool;

        #[method(resignFirstResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn resignFirstResponder(&self) -> bool;

        #[method(isFirstResponder)]
        #[unsafe(method_family = none)]
        pub unsafe fn isFirstResponder(&self) -> bool;

        #[cfg(all(feature = "UIEvent", feature = "UITouch"))]
        #[method(touchesBegan:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn touchesBegan_withEvent(
            &self,
            touches: &NSSet<UITouch>,
            event: Option<&UIEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UITouch"))]
        #[method(touchesMoved:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn touchesMoved_withEvent(
            &self,
            touches: &NSSet<UITouch>,
            event: Option<&UIEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UITouch"))]
        #[method(touchesEnded:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn touchesEnded_withEvent(
            &self,
            touches: &NSSet<UITouch>,
            event: Option<&UIEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UITouch"))]
        #[method(touchesCancelled:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn touchesCancelled_withEvent(
            &self,
            touches: &NSSet<UITouch>,
            event: Option<&UIEvent>,
        );

        #[cfg(feature = "UITouch")]
        #[method(touchesEstimatedPropertiesUpdated:)]
        #[unsafe(method_family = none)]
        pub unsafe fn touchesEstimatedPropertiesUpdated(&self, touches: &NSSet<UITouch>);

        #[cfg(all(feature = "UIEvent", feature = "UIPress", feature = "UIPressesEvent"))]
        #[method(pressesBegan:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn pressesBegan_withEvent(
            &self,
            presses: &NSSet<UIPress>,
            event: Option<&UIPressesEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UIPress", feature = "UIPressesEvent"))]
        #[method(pressesChanged:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn pressesChanged_withEvent(
            &self,
            presses: &NSSet<UIPress>,
            event: Option<&UIPressesEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UIPress", feature = "UIPressesEvent"))]
        #[method(pressesEnded:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn pressesEnded_withEvent(
            &self,
            presses: &NSSet<UIPress>,
            event: Option<&UIPressesEvent>,
        );

        #[cfg(all(feature = "UIEvent", feature = "UIPress", feature = "UIPressesEvent"))]
        #[method(pressesCancelled:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn pressesCancelled_withEvent(
            &self,
            presses: &NSSet<UIPress>,
            event: Option<&UIPressesEvent>,
        );

        #[cfg(feature = "UIEvent")]
        #[method(motionBegan:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn motionBegan_withEvent(&self, motion: UIEventSubtype, event: Option<&UIEvent>);

        #[cfg(feature = "UIEvent")]
        #[method(motionEnded:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn motionEnded_withEvent(&self, motion: UIEventSubtype, event: Option<&UIEvent>);

        #[cfg(feature = "UIEvent")]
        #[method(motionCancelled:withEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn motionCancelled_withEvent(
            &self,
            motion: UIEventSubtype,
            event: Option<&UIEvent>,
        );

        #[cfg(feature = "UIEvent")]
        #[method(remoteControlReceivedWithEvent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn remoteControlReceivedWithEvent(&self, event: Option<&UIEvent>);

        #[method(canPerformAction:withSender:)]
        #[unsafe(method_family = none)]
        pub unsafe fn canPerformAction_withSender(
            &self,
            action: Sel,
            sender: Option<&AnyObject>,
        ) -> bool;

        #[method(targetForAction:withSender:)]
        #[unsafe(method_family = none)]
        pub unsafe fn targetForAction_withSender(
            &self,
            action: Sel,
            sender: Option<&AnyObject>,
        ) -> Option<Retained<AnyObject>>;

        #[cfg(feature = "UIMenuBuilder")]
        #[method(buildMenuWithBuilder:)]
        #[unsafe(method_family = none)]
        pub unsafe fn buildMenuWithBuilder(&self, builder: &ProtocolObject<dyn UIMenuBuilder>);

        #[cfg(all(feature = "UICommand", feature = "UIMenuElement"))]
        #[method(validateCommand:)]
        #[unsafe(method_family = none)]
        pub unsafe fn validateCommand(&self, command: &UICommand);

        #[method(undoManager)]
        #[unsafe(method_family = none)]
        pub unsafe fn undoManager(&self) -> Option<Retained<NSUndoManager>>;

        #[method(editingInteractionConfiguration)]
        #[unsafe(method_family = none)]
        pub unsafe fn editingInteractionConfiguration(&self) -> UIEditingInteractionConfiguration;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIResponder {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// UIResponderKeyCommands
    unsafe impl UIResponder {
        #[cfg(all(
            feature = "UICommand",
            feature = "UIKeyCommand",
            feature = "UIMenuElement"
        ))]
        #[method(keyCommands)]
        #[unsafe(method_family = none)]
        pub unsafe fn keyCommands(&self) -> Option<Retained<NSArray<UIKeyCommand>>>;
    }
);

extern_methods!(
    /// UIResponderInputViewAdditions
    unsafe impl UIResponder {
        #[cfg(feature = "UIView")]
        #[method(inputView)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputView(&self) -> Option<Retained<UIView>>;

        #[cfg(feature = "UIView")]
        #[method(inputAccessoryView)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputAccessoryView(&self) -> Option<Retained<UIView>>;

        #[cfg(feature = "UITextInput")]
        /// This method is for clients that wish to put buttons on the Shortcuts Bar, shown on top of the keyboard.
        /// You may modify the returned inputAssistantItem to add to or replace the existing items on the bar.
        /// Modifications made to the returned UITextInputAssistantItem are reflected automatically.
        /// This method should not be overridden. Goes up the responder chain.
        #[method(inputAssistantItem)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputAssistantItem(&self) -> Retained<UITextInputAssistantItem>;

        #[cfg(all(feature = "UIInputViewController", feature = "UIViewController"))]
        #[method(inputViewController)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputViewController(&self) -> Option<Retained<UIInputViewController>>;

        #[cfg(all(feature = "UIInputViewController", feature = "UIViewController"))]
        #[method(inputAccessoryViewController)]
        #[unsafe(method_family = none)]
        pub unsafe fn inputAccessoryViewController(
            &self,
        ) -> Option<Retained<UIInputViewController>>;

        #[cfg(feature = "UITextInput")]
        #[method(textInputMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn textInputMode(&self) -> Option<Retained<UITextInputMode>>;

        #[method(textInputContextIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn textInputContextIdentifier(&self) -> Option<Retained<NSString>>;

        #[method(clearTextInputContextIdentifier:)]
        #[unsafe(method_family = none)]
        pub unsafe fn clearTextInputContextIdentifier(identifier: &NSString, mtm: MainThreadMarker);

        #[method(reloadInputViews)]
        #[unsafe(method_family = none)]
        pub unsafe fn reloadInputViews(&self);
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputuparrow?language=objc)
    pub static UIKeyInputUpArrow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputdownarrow?language=objc)
    pub static UIKeyInputDownArrow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputleftarrow?language=objc)
    pub static UIKeyInputLeftArrow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputrightarrow?language=objc)
    pub static UIKeyInputRightArrow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputescape?language=objc)
    pub static UIKeyInputEscape: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputpageup?language=objc)
    pub static UIKeyInputPageUp: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputpagedown?language=objc)
    pub static UIKeyInputPageDown: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputhome?language=objc)
    pub static UIKeyInputHome: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputend?language=objc)
    pub static UIKeyInputEnd: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf2?language=objc)
    pub static UIKeyInputF2: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf3?language=objc)
    pub static UIKeyInputF3: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf4?language=objc)
    pub static UIKeyInputF4: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf5?language=objc)
    pub static UIKeyInputF5: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf6?language=objc)
    pub static UIKeyInputF6: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf7?language=objc)
    pub static UIKeyInputF7: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf8?language=objc)
    pub static UIKeyInputF8: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf9?language=objc)
    pub static UIKeyInputF9: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf10?language=objc)
    pub static UIKeyInputF10: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf11?language=objc)
    pub static UIKeyInputF11: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputf12?language=objc)
    pub static UIKeyInputF12: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uikeyinputdelete?language=objc)
    pub static UIKeyInputDelete: &'static NSString;
}

extern_methods!(
    /// ActivityContinuation
    unsafe impl UIResponder {
        #[method(userActivity)]
        #[unsafe(method_family = none)]
        pub unsafe fn userActivity(&self) -> Option<Retained<NSUserActivity>>;

        /// Setter for [`userActivity`][Self::userActivity].
        #[method(setUserActivity:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setUserActivity(&self, user_activity: Option<&NSUserActivity>);

        #[method(updateUserActivityState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn updateUserActivityState(&self, activity: &NSUserActivity);

        #[method(restoreUserActivityState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn restoreUserActivityState(&self, activity: &NSUserActivity);
    }
);

#[cfg(feature = "UIUserActivity")]
unsafe impl UIUserActivityRestoring for UIResponder {}

extern_methods!(
    /// UIPasteConfigurationSupporting
    unsafe impl UIResponder {}
);

#[cfg(feature = "UIPasteConfigurationSupporting")]
unsafe impl UIPasteConfigurationSupporting for UIResponder {}

extern_methods!(
    /// UICaptureTextFromCameraSupporting
    unsafe impl UIResponder {
        #[method(captureTextFromCamera:)]
        #[unsafe(method_family = none)]
        pub unsafe fn captureTextFromCamera(&self, sender: Option<&AnyObject>);
    }
);
