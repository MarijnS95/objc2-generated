//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibuttontype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIButtonType(pub NSInteger);
impl UIButtonType {
    #[doc(alias = "UIButtonTypeCustom")]
    pub const Custom: Self = Self(0);
    #[doc(alias = "UIButtonTypeSystem")]
    pub const System: Self = Self(1);
    #[doc(alias = "UIButtonTypeDetailDisclosure")]
    pub const DetailDisclosure: Self = Self(2);
    #[doc(alias = "UIButtonTypeInfoLight")]
    pub const InfoLight: Self = Self(3);
    #[doc(alias = "UIButtonTypeInfoDark")]
    pub const InfoDark: Self = Self(4);
    #[doc(alias = "UIButtonTypeContactAdd")]
    pub const ContactAdd: Self = Self(5);
    #[doc(alias = "UIButtonTypePlain")]
    pub const Plain: Self = Self(6);
    #[doc(alias = "UIButtonTypeClose")]
    pub const Close: Self = Self(7);
    #[doc(alias = "UIButtonTypeRoundedRect")]
    pub const RoundedRect: Self = Self(UIButtonType::System.0);
}

unsafe impl Encode for UIButtonType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIButtonType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibuttonrole?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIButtonRole(pub NSInteger);
impl UIButtonRole {
    #[doc(alias = "UIButtonRoleNormal")]
    pub const Normal: Self = Self(0);
    #[doc(alias = "UIButtonRolePrimary")]
    pub const Primary: Self = Self(1);
    #[doc(alias = "UIButtonRoleCancel")]
    pub const Cancel: Self = Self(2);
    #[doc(alias = "UIButtonRoleDestructive")]
    pub const Destructive: Self = Self(3);
}

unsafe impl Encode for UIButtonRole {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIButtonRole {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibuttonpointerstyleprovider?language=objc)
#[cfg(all(
    feature = "UIControl",
    feature = "UIHoverStyle",
    feature = "UIPointerStyle",
    feature = "UIResponder",
    feature = "UIView",
    feature = "block2"
))]
pub type UIButtonPointerStyleProvider = *mut block2::Block<
    dyn Fn(
        NonNull<UIButton>,
        NonNull<UIPointerEffect>,
        NonNull<UIPointerShape>,
    ) -> *mut UIPointerStyle,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibuttonconfigurationupdatehandler?language=objc)
#[cfg(all(
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UIView",
    feature = "block2"
))]
pub type UIButtonConfigurationUpdateHandler = *mut block2::Block<dyn Fn(NonNull<UIButton>)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uibutton?language=objc)
    #[unsafe(super(UIControl, UIView, UIResponder, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
    pub struct UIButton;
);

#[cfg(all(
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UIView",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
unsafe impl CALayerDelegate for UIButton {}

#[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
unsafe impl NSCoding for UIButton {}

#[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
unsafe impl NSObjectProtocol for UIButton {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIAppearance for UIButton {}

#[cfg(all(
    feature = "UIAppearance",
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIAppearanceContainer for UIButton {}

#[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
unsafe impl UICoordinateSpace for UIButton {}

#[cfg(all(
    feature = "UIControl",
    feature = "UIDynamicBehavior",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIDynamicItem for UIButton {}

#[cfg(all(
    feature = "UIControl",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusEnvironment for UIButton {}

#[cfg(all(
    feature = "UIControl",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusItem for UIButton {}

#[cfg(all(
    feature = "UIControl",
    feature = "UIFocus",
    feature = "UIResponder",
    feature = "UIView"
))]
unsafe impl UIFocusItemContainer for UIButton {}

#[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
unsafe impl UIResponderStandardEditActions for UIButton {}

#[cfg(all(
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UITraitCollection",
    feature = "UIView"
))]
unsafe impl UITraitEnvironment for UIButton {}

extern_methods!(
    #[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIButton {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithFrame:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[method_id(initWithCoder:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(all(
            feature = "UIAction",
            feature = "UIMenuElement",
            feature = "objc2-core-foundation"
        ))]
        /// Initializes a custom button, registers primaryAction for the UIControlEventPrimaryActionTriggered control event, and uses primaryAction's title
        /// &
        /// image as the button's title
        /// &
        /// image.
        #[method_id(initWithFrame:primaryAction:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame_primaryAction(
            this: Allocated<Self>,
            frame: CGRect,
            primary_action: Option<&UIAction>,
        ) -> Retained<Self>;

        #[method_id(buttonWithType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithType(
            button_type: UIButtonType,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "UIImage")]
        #[method_id(systemButtonWithImage:target:action:)]
        #[unsafe(method_family = none)]
        pub unsafe fn systemButtonWithImage_target_action(
            image: &UIImage,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(all(feature = "UIAction", feature = "UIMenuElement"))]
        /// Creates a system button, registers primaryAction for the UIControlEventPrimaryActionTriggered control event, and uses primaryAction's title
        /// &
        /// image as the button's title
        /// &
        /// image.
        #[method_id(systemButtonWithPrimaryAction:)]
        #[unsafe(method_family = none)]
        pub unsafe fn systemButtonWithPrimaryAction(
            primary_action: Option<&UIAction>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(all(feature = "UIAction", feature = "UIMenuElement"))]
        /// Creates a button of the given type, registers primaryAction for the UIControlEventPrimaryActionTriggered control event, and if appropriate uses primaryAction's title
        /// &
        /// image as the button's title
        /// &
        /// image.
        #[method_id(buttonWithType:primaryAction:)]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithType_primaryAction(
            button_type: UIButtonType,
            primary_action: Option<&UIAction>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "UIAction",
            feature = "UIButtonConfiguration",
            feature = "UIMenuElement"
        ))]
        /// Construct a new UIButton. `configuration` will be installed on the created button, and `primaryAction` added to handle the .primaryActionTriggered control event. If `primaryAction` has a title or image, they will be copied to `configuration`
        #[method_id(buttonWithConfiguration:primaryAction:)]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithConfiguration_primaryAction(
            configuration: &UIButtonConfiguration,
            primary_action: Option<&UIAction>,
        ) -> Retained<Self>;

        #[cfg(feature = "UIButtonConfiguration")]
        /// Setting a non-nil value for `configuration` will opt into configuration-based behavior on UIButton, update the button in a platform specific manner, and enable/disable some API.
        #[method_id(configuration)]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration(&self) -> Option<Retained<UIButtonConfiguration>>;

        #[cfg(feature = "UIButtonConfiguration")]
        /// Setter for [`configuration`][Self::configuration].
        #[method(setConfiguration:)]
        pub unsafe fn setConfiguration(&self, configuration: Option<&UIButtonConfiguration>);

        /// Requests the view update its configuration for its current state. This method is called automatically when the button's state may have changed, as well as in other circumstances where an update may be required. Multiple requests may be coalesced into a single update at the appropriate time.
        #[method(setNeedsUpdateConfiguration)]
        pub unsafe fn setNeedsUpdateConfiguration(&self);

        /// Subclasses should override this method and update the button's `configuration`. This method should not be called directly, use `setNeedsUpdateConfiguration` to request an update.
        #[method(updateConfiguration)]
        pub unsafe fn updateConfiguration(&self);

        #[cfg(feature = "block2")]
        /// Block-based equivalent to overriding -updateConfiguration in a subclass. Setting this handler will force the button into configuration-based behavior (see the `configuration` property). This block is called after `-updateConfiguration`
        #[method(configurationUpdateHandler)]
        pub unsafe fn configurationUpdateHandler(&self) -> UIButtonConfigurationUpdateHandler;

        #[cfg(feature = "block2")]
        /// Setter for [`configurationUpdateHandler`][Self::configurationUpdateHandler].
        #[method(setConfigurationUpdateHandler:)]
        pub unsafe fn setConfigurationUpdateHandler(
            &self,
            configuration_update_handler: UIButtonConfigurationUpdateHandler,
        );

        /// When YES, the button will automatically call -updatedConfigurationForButton: on its `configuration ` when the button's state changes, and apply the updated configuration to the button. The default value is YES.
        #[method(automaticallyUpdatesConfiguration)]
        pub unsafe fn automaticallyUpdatesConfiguration(&self) -> bool;

        /// Setter for [`automaticallyUpdatesConfiguration`][Self::automaticallyUpdatesConfiguration].
        #[method(setAutomaticallyUpdatesConfiguration:)]
        pub unsafe fn setAutomaticallyUpdatesConfiguration(
            &self,
            automatically_updates_configuration: bool,
        );

        #[cfg(feature = "UIColor")]
        #[method_id(tintColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn tintColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`tintColor`][Self::tintColor].
        #[method(setTintColor:)]
        pub unsafe fn setTintColor(&self, tint_color: Option<&UIColor>);

        #[method(buttonType)]
        pub unsafe fn buttonType(&self) -> UIButtonType;

        /// If pointer effects are enabled for the button, this will return true when an effect is active.
        #[method(isHovered)]
        pub unsafe fn isHovered(&self) -> bool;

        /// Returns true while the button is presenting a menu.
        #[method(isHeld)]
        pub unsafe fn isHeld(&self) -> bool;

        #[method(role)]
        pub unsafe fn role(&self) -> UIButtonRole;

        /// Setter for [`role`][Self::role].
        #[method(setRole:)]
        pub unsafe fn setRole(&self, role: UIButtonRole);

        /// Enables this button's built-in pointer interaction.
        #[method(isPointerInteractionEnabled)]
        pub unsafe fn isPointerInteractionEnabled(&self) -> bool;

        /// Setter for [`isPointerInteractionEnabled`][Self::isPointerInteractionEnabled].
        #[method(setPointerInteractionEnabled:)]
        pub unsafe fn setPointerInteractionEnabled(&self, pointer_interaction_enabled: bool);

        #[cfg(all(
            feature = "UIHoverStyle",
            feature = "UIPointerStyle",
            feature = "block2"
        ))]
        /// Called when the system pointer hovers over this button if its pointer interaction is enabled. The
        /// system calls this block with a proposed UIPointerEffect and UIPointerShape. You may use them to construct
        /// a customized version of the system provided style or return an entirely custom one.
        /// Setting this property automatically enables the button's pointer interaction and sets
        /// `pointerInteractionEnabled`to true.
        #[method(pointerStyleProvider)]
        pub unsafe fn pointerStyleProvider(&self) -> UIButtonPointerStyleProvider;

        #[cfg(all(
            feature = "UIHoverStyle",
            feature = "UIPointerStyle",
            feature = "block2"
        ))]
        /// Setter for [`pointerStyleProvider`][Self::pointerStyleProvider].
        #[method(setPointerStyleProvider:)]
        pub unsafe fn setPointerStyleProvider(
            &self,
            pointer_style_provider: UIButtonPointerStyleProvider,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// An optional menu for the button to display. The button will automatically enable or disable its contextMenuInteraction when a non-nil or nil menu is set. Defaults to nil.
        #[method_id(menu)]
        #[unsafe(method_family = none)]
        pub unsafe fn menu(&self) -> Option<Retained<UIMenu>>;

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Setter for [`menu`][Self::menu].
        #[method(setMenu:)]
        pub unsafe fn setMenu(&self, menu: Option<&UIMenu>);

        #[cfg(feature = "UIContextMenuConfiguration")]
        /// Preferred menu element ordering strategy for menus displayed by this button.
        #[method(preferredMenuElementOrder)]
        pub unsafe fn preferredMenuElementOrder(&self) -> UIContextMenuConfigurationElementOrder;

        #[cfg(feature = "UIContextMenuConfiguration")]
        /// Setter for [`preferredMenuElementOrder`][Self::preferredMenuElementOrder].
        #[method(setPreferredMenuElementOrder:)]
        pub unsafe fn setPreferredMenuElementOrder(
            &self,
            preferred_menu_element_order: UIContextMenuConfigurationElementOrder,
        );

        /// Indicates if the button changes selection as its primary action.
        /// This shows the menu as options for selection if a menu is populated and showsMenuAsPrimaryAction is enabled.
        /// If no menu is provided or it is not the primary action, UIControlStateSelected is toggled on and off for the primary action.
        #[method(changesSelectionAsPrimaryAction)]
        pub unsafe fn changesSelectionAsPrimaryAction(&self) -> bool;

        /// Setter for [`changesSelectionAsPrimaryAction`][Self::changesSelectionAsPrimaryAction].
        #[method(setChangesSelectionAsPrimaryAction:)]
        pub unsafe fn setChangesSelectionAsPrimaryAction(
            &self,
            changes_selection_as_primary_action: bool,
        );

        #[method(setTitle:forState:)]
        pub unsafe fn setTitle_forState(&self, title: Option<&NSString>, state: UIControlState);

        #[cfg(feature = "UIColor")]
        #[method(setTitleColor:forState:)]
        pub unsafe fn setTitleColor_forState(&self, color: Option<&UIColor>, state: UIControlState);

        #[cfg(feature = "UIColor")]
        #[method(setTitleShadowColor:forState:)]
        pub unsafe fn setTitleShadowColor_forState(
            &self,
            color: Option<&UIColor>,
            state: UIControlState,
        );

        #[cfg(feature = "UIImage")]
        #[method(setImage:forState:)]
        pub unsafe fn setImage_forState(&self, image: Option<&UIImage>, state: UIControlState);

        #[cfg(feature = "UIImage")]
        #[method(setBackgroundImage:forState:)]
        pub unsafe fn setBackgroundImage_forState(
            &self,
            image: Option<&UIImage>,
            state: UIControlState,
        );

        #[cfg(all(
            feature = "UIImageConfiguration",
            feature = "UIImageSymbolConfiguration"
        ))]
        #[method(setPreferredSymbolConfiguration:forImageInState:)]
        pub unsafe fn setPreferredSymbolConfiguration_forImageInState(
            &self,
            configuration: Option<&UIImageSymbolConfiguration>,
            state: UIControlState,
        );

        #[method(setAttributedTitle:forState:)]
        pub unsafe fn setAttributedTitle_forState(
            &self,
            title: Option<&NSAttributedString>,
            state: UIControlState,
        );

        #[method_id(titleForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleForState(&self, state: UIControlState) -> Option<Retained<NSString>>;

        #[cfg(feature = "UIColor")]
        #[method_id(titleColorForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleColorForState(&self, state: UIControlState)
            -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIColor")]
        #[method_id(titleShadowColorForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleShadowColorForState(
            &self,
            state: UIControlState,
        ) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIImage")]
        #[method_id(imageForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn imageForState(&self, state: UIControlState) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        #[method_id(backgroundImageForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundImageForState(
            &self,
            state: UIControlState,
        ) -> Option<Retained<UIImage>>;

        #[cfg(all(
            feature = "UIImageConfiguration",
            feature = "UIImageSymbolConfiguration"
        ))]
        #[method_id(preferredSymbolConfigurationForImageInState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn preferredSymbolConfigurationForImageInState(
            &self,
            state: UIControlState,
        ) -> Option<Retained<UIImageSymbolConfiguration>>;

        #[method_id(attributedTitleForState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn attributedTitleForState(
            &self,
            state: UIControlState,
        ) -> Option<Retained<NSAttributedString>>;

        #[method_id(currentTitle)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentTitle(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "UIColor")]
        #[method_id(currentTitleColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentTitleColor(&self) -> Retained<UIColor>;

        #[cfg(feature = "UIColor")]
        #[method_id(currentTitleShadowColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentTitleShadowColor(&self) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UIImage")]
        #[method_id(currentImage)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        #[method_id(currentBackgroundImage)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentBackgroundImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(all(
            feature = "UIImageConfiguration",
            feature = "UIImageSymbolConfiguration"
        ))]
        #[method_id(currentPreferredSymbolConfiguration)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentPreferredSymbolConfiguration(
            &self,
        ) -> Option<Retained<UIImageSymbolConfiguration>>;

        #[method_id(currentAttributedTitle)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentAttributedTitle(&self) -> Option<Retained<NSAttributedString>>;

        #[cfg(feature = "UILabel")]
        #[method_id(titleLabel)]
        #[unsafe(method_family = none)]
        pub unsafe fn titleLabel(&self) -> Option<Retained<UILabel>>;

        #[cfg(feature = "UIImageView")]
        #[method_id(imageView)]
        #[unsafe(method_family = none)]
        pub unsafe fn imageView(&self) -> Option<Retained<UIImageView>>;

        #[cfg(feature = "UILabel")]
        /// The label used to display the subtitle, when present.
        #[method_id(subtitleLabel)]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitleLabel(&self) -> Option<Retained<UILabel>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIButton {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    #[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIButton {
        #[cfg(feature = "UIFont")]
        #[deprecated = "Specify an attributed title with a custom font"]
        #[method_id(font)]
        #[unsafe(method_family = none)]
        pub unsafe fn font(&self) -> Retained<UIFont>;

        #[cfg(feature = "UIFont")]
        /// Setter for [`font`][Self::font].
        #[deprecated = "Specify an attributed title with a custom font"]
        #[method(setFont:)]
        pub unsafe fn setFont(&self, font: &UIFont);

        #[cfg(feature = "NSParagraphStyle")]
        #[deprecated = "Specify an attributed title with a customized paragraph style"]
        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> NSLineBreakMode;

        #[cfg(feature = "NSParagraphStyle")]
        /// Setter for [`lineBreakMode`][Self::lineBreakMode].
        #[deprecated = "Specify an attributed title with a customized paragraph style"]
        #[method(setLineBreakMode:)]
        pub unsafe fn setLineBreakMode(&self, line_break_mode: NSLineBreakMode);

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Specify an attributed title with a customized shadow style"]
        #[method(titleShadowOffset)]
        pub unsafe fn titleShadowOffset(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`titleShadowOffset`][Self::titleShadowOffset].
        #[deprecated = "Specify an attributed title with a customized shadow style"]
        #[method(setTitleShadowOffset:)]
        pub unsafe fn setTitleShadowOffset(&self, title_shadow_offset: CGSize);

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(contentEdgeInsets)]
        pub unsafe fn contentEdgeInsets(&self) -> UIEdgeInsets;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`contentEdgeInsets`][Self::contentEdgeInsets].
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(setContentEdgeInsets:)]
        pub unsafe fn setContentEdgeInsets(&self, content_edge_insets: UIEdgeInsets);

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(titleEdgeInsets)]
        pub unsafe fn titleEdgeInsets(&self) -> UIEdgeInsets;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`titleEdgeInsets`][Self::titleEdgeInsets].
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(setTitleEdgeInsets:)]
        pub unsafe fn setTitleEdgeInsets(&self, title_edge_insets: UIEdgeInsets);

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(imageEdgeInsets)]
        pub unsafe fn imageEdgeInsets(&self) -> UIEdgeInsets;

        #[cfg(all(feature = "UIGeometry", feature = "objc2-core-foundation"))]
        /// Setter for [`imageEdgeInsets`][Self::imageEdgeInsets].
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(setImageEdgeInsets:)]
        pub unsafe fn setImageEdgeInsets(&self, image_edge_insets: UIEdgeInsets);

        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(reversesTitleShadowWhenHighlighted)]
        pub unsafe fn reversesTitleShadowWhenHighlighted(&self) -> bool;

        /// Setter for [`reversesTitleShadowWhenHighlighted`][Self::reversesTitleShadowWhenHighlighted].
        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(setReversesTitleShadowWhenHighlighted:)]
        pub unsafe fn setReversesTitleShadowWhenHighlighted(
            &self,
            reverses_title_shadow_when_highlighted: bool,
        );

        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(adjustsImageWhenHighlighted)]
        pub unsafe fn adjustsImageWhenHighlighted(&self) -> bool;

        /// Setter for [`adjustsImageWhenHighlighted`][Self::adjustsImageWhenHighlighted].
        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(setAdjustsImageWhenHighlighted:)]
        pub unsafe fn setAdjustsImageWhenHighlighted(&self, adjusts_image_when_highlighted: bool);

        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(adjustsImageWhenDisabled)]
        pub unsafe fn adjustsImageWhenDisabled(&self) -> bool;

        /// Setter for [`adjustsImageWhenDisabled`][Self::adjustsImageWhenDisabled].
        #[deprecated = "This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler"]
        #[method(setAdjustsImageWhenDisabled:)]
        pub unsafe fn setAdjustsImageWhenDisabled(&self, adjusts_image_when_disabled: bool);

        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(showsTouchWhenHighlighted)]
        pub unsafe fn showsTouchWhenHighlighted(&self) -> bool;

        /// Setter for [`showsTouchWhenHighlighted`][Self::showsTouchWhenHighlighted].
        #[deprecated = "This property is ignored when using UIButtonConfiguration"]
        #[method(setShowsTouchWhenHighlighted:)]
        pub unsafe fn setShowsTouchWhenHighlighted(&self, shows_touch_when_highlighted: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Override layoutSubviews, call super, and position views as you desire."]
        #[method(backgroundRectForBounds:)]
        pub unsafe fn backgroundRectForBounds(&self, bounds: CGRect) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Override layoutSubviews, call super, and position views as you desire."]
        #[method(contentRectForBounds:)]
        pub unsafe fn contentRectForBounds(&self, bounds: CGRect) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Override layoutSubviews, call super, and position views as you desire."]
        #[method(titleRectForContentRect:)]
        pub unsafe fn titleRectForContentRect(&self, content_rect: CGRect) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Override layoutSubviews, call super, and position views as you desire."]
        #[method(imageRectForContentRect:)]
        pub unsafe fn imageRectForContentRect(&self, content_rect: CGRect) -> CGRect;
    }
);

extern_methods!(
    /// SpringLoading
    #[cfg(all(feature = "UIControl", feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIButton {}
);

#[cfg(all(
    feature = "UIControl",
    feature = "UIResponder",
    feature = "UISpringLoadedInteractionSupporting",
    feature = "UIView"
))]
unsafe impl UISpringLoadedInteractionSupporting for UIButton {}
