//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiadaptivepresentationcontrollerdelegate?language=objc)
    pub unsafe trait UIAdaptivePresentationControllerDelegate:
        NSObjectProtocol + MainThreadOnly
    {
        #[cfg(feature = "UIViewController")]
        #[optional]
        #[method(adaptivePresentationStyleForPresentationController:)]
        #[unsafe(method_family = none)]
        unsafe fn adaptivePresentationStyleForPresentationController(
            &self,
            controller: &UIPresentationController,
        ) -> UIModalPresentationStyle;

        #[cfg(all(feature = "UITraitCollection", feature = "UIViewController"))]
        #[optional]
        #[method(adaptivePresentationStyleForPresentationController:traitCollection:)]
        #[unsafe(method_family = none)]
        unsafe fn adaptivePresentationStyleForPresentationController_traitCollection(
            &self,
            controller: &UIPresentationController,
            trait_collection: &UITraitCollection,
        ) -> UIModalPresentationStyle;

        #[optional]
        #[method(presentationController:prepareAdaptivePresentationController:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationController_prepareAdaptivePresentationController(
            &self,
            presentation_controller: &UIPresentationController,
            adaptive_presentation_controller: &UIPresentationController,
        );

        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        #[optional]
        #[method(presentationController:viewControllerForAdaptivePresentationStyle:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationController_viewControllerForAdaptivePresentationStyle(
            &self,
            controller: &UIPresentationController,
            style: UIModalPresentationStyle,
        ) -> Option<Retained<UIViewController>>;

        #[cfg(all(
            feature = "UIViewController",
            feature = "UIViewControllerTransitionCoordinator"
        ))]
        #[optional]
        #[method(presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationController_willPresentWithAdaptiveStyle_transitionCoordinator(
            &self,
            presentation_controller: &UIPresentationController,
            style: UIModalPresentationStyle,
            transition_coordinator: Option<
                &ProtocolObject<dyn UIViewControllerTransitionCoordinator>,
            >,
        );

        #[optional]
        #[method(presentationControllerShouldDismiss:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationControllerShouldDismiss(
            &self,
            presentation_controller: &UIPresentationController,
        ) -> bool;

        #[optional]
        #[method(presentationControllerWillDismiss:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationControllerWillDismiss(
            &self,
            presentation_controller: &UIPresentationController,
        );

        #[optional]
        #[method(presentationControllerDidDismiss:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationControllerDidDismiss(
            &self,
            presentation_controller: &UIPresentationController,
        );

        #[optional]
        #[method(presentationControllerDidAttemptToDismiss:)]
        #[unsafe(method_family = none)]
        unsafe fn presentationControllerDidAttemptToDismiss(
            &self,
            presentation_controller: &UIPresentationController,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uipresentationcontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIPresentationController;
);

unsafe impl NSObjectProtocol for UIPresentationController {}

#[cfg(feature = "UIAppearance")]
unsafe impl UIAppearanceContainer for UIPresentationController {}

#[cfg(feature = "UIViewController")]
unsafe impl UIContentContainer for UIPresentationController {}

#[cfg(feature = "UIFocus")]
unsafe impl UIFocusEnvironment for UIPresentationController {}

#[cfg(feature = "UITraitCollection")]
unsafe impl UITraitEnvironment for UIPresentationController {}

extern_methods!(
    unsafe impl UIPresentationController {
        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        #[method(presentingViewController)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentingViewController(&self) -> Retained<UIViewController>;

        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        #[method(presentedViewController)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentedViewController(&self) -> Retained<UIViewController>;

        #[cfg(feature = "UIViewController")]
        #[method(presentationStyle)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentationStyle(&self) -> UIModalPresentationStyle;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method(containerView)]
        #[unsafe(method_family = none)]
        pub unsafe fn containerView(&self) -> Option<Retained<UIView>>;

        #[method(delegate)]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn UIAdaptivePresentationControllerDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn UIAdaptivePresentationControllerDelegate>>,
        );

        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        #[method(initWithPresentedViewController:presentingViewController:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithPresentedViewController_presentingViewController(
            this: Allocated<Self>,
            presented_view_controller: &UIViewController,
            presenting_view_controller: Option<&UIViewController>,
        ) -> Retained<Self>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "UIViewController")]
        #[method(adaptivePresentationStyle)]
        #[unsafe(method_family = none)]
        pub unsafe fn adaptivePresentationStyle(&self) -> UIModalPresentationStyle;

        #[cfg(all(feature = "UITraitCollection", feature = "UIViewController"))]
        #[method(adaptivePresentationStyleForTraitCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn adaptivePresentationStyleForTraitCollection(
            &self,
            trait_collection: &UITraitCollection,
        ) -> UIModalPresentationStyle;

        #[method(containerViewWillLayoutSubviews)]
        #[unsafe(method_family = none)]
        pub unsafe fn containerViewWillLayoutSubviews(&self);

        #[method(containerViewDidLayoutSubviews)]
        #[unsafe(method_family = none)]
        pub unsafe fn containerViewDidLayoutSubviews(&self);

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method(presentedView)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentedView(&self) -> Option<Retained<UIView>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(frameOfPresentedViewInContainerView)]
        #[unsafe(method_family = none)]
        pub unsafe fn frameOfPresentedViewInContainerView(&self) -> CGRect;

        #[method(shouldPresentInFullscreen)]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldPresentInFullscreen(&self) -> bool;

        #[method(shouldRemovePresentersView)]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldRemovePresentersView(&self) -> bool;

        #[method(presentationTransitionWillBegin)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentationTransitionWillBegin(&self);

        #[method(presentationTransitionDidEnd:)]
        #[unsafe(method_family = none)]
        pub unsafe fn presentationTransitionDidEnd(&self, completed: bool);

        #[method(dismissalTransitionWillBegin)]
        #[unsafe(method_family = none)]
        pub unsafe fn dismissalTransitionWillBegin(&self);

        #[method(dismissalTransitionDidEnd:)]
        #[unsafe(method_family = none)]
        pub unsafe fn dismissalTransitionDidEnd(&self, completed: bool);

        #[cfg(feature = "UITraitCollection")]
        #[deprecated = "Use the traitOverrides property instead"]
        #[method(overrideTraitCollection)]
        #[unsafe(method_family = none)]
        pub unsafe fn overrideTraitCollection(&self) -> Option<Retained<UITraitCollection>>;

        #[cfg(feature = "UITraitCollection")]
        /// Setter for [`overrideTraitCollection`][Self::overrideTraitCollection].
        #[deprecated = "Use the traitOverrides property instead"]
        #[method(setOverrideTraitCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setOverrideTraitCollection(
            &self,
            override_trait_collection: Option<&UITraitCollection>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIPresentationController {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    unsafe impl UIPresentationController {
        #[cfg(feature = "UITraitCollection")]
        #[method(traitOverrides)]
        #[unsafe(method_family = none)]
        pub unsafe fn traitOverrides(&self) -> Retained<ProtocolObject<dyn UITraitOverrides>>;
    }
);

#[cfg(feature = "UITraitCollection")]
unsafe impl UITraitChangeObservable for UIPresentationController {}
