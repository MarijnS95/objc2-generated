//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C-unwind" {
    #[cfg(all(feature = "UIResponder", feature = "UIView"))]
    pub fn UIAccessibilityConvertFrameToScreenCoordinates(rect: CGRect, view: &UIView) -> CGRect;
}

extern "C-unwind" {
    #[cfg(all(feature = "UIBezierPath", feature = "UIResponder", feature = "UIView"))]
    pub fn UIAccessibilityConvertPathToScreenCoordinates(
        path: &UIBezierPath,
        view: &UIView,
    ) -> NonNull<UIBezierPath>;
}

#[cfg(feature = "block2")]
pub type AXBoolReturnBlock = *mut block2::Block<dyn Fn() -> Bool>;

#[cfg(feature = "block2")]
pub type AXStringReturnBlock = *mut block2::Block<dyn Fn() -> *mut NSString>;

#[cfg(feature = "block2")]
pub type AXStringArrayReturnBlock = *mut block2::Block<dyn Fn() -> *mut NSArray<NSString>>;

#[cfg(feature = "block2")]
pub type AXAttributedStringReturnBlock = *mut block2::Block<dyn Fn() -> *mut NSAttributedString>;

#[cfg(feature = "block2")]
pub type AXAttributedStringArrayReturnBlock =
    *mut block2::Block<dyn Fn() -> *mut NSArray<NSAttributedString>>;

#[cfg(feature = "block2")]
pub type AXRectReturnBlock = *mut block2::Block<dyn Fn() -> CGRect>;

#[cfg(all(feature = "UIBezierPath", feature = "block2"))]
pub type AXPathReturnBlock = *mut block2::Block<dyn Fn() -> *mut UIBezierPath>;

#[cfg(feature = "block2")]
pub type AXPointReturnBlock = *mut block2::Block<dyn Fn() -> CGPoint>;

#[cfg(feature = "block2")]
pub type AXObjectReturnBlock = *mut block2::Block<dyn Fn() -> *mut AnyObject>;

#[cfg(feature = "block2")]
pub type AXArrayReturnBlock = *mut block2::Block<dyn Fn() -> *mut NSArray>;

#[cfg(feature = "block2")]
pub type AXVoidReturnBlock = *mut block2::Block<dyn Fn()>;

#[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
pub type AXTraitsReturnBlock = *mut block2::Block<dyn Fn() -> UIAccessibilityTraits>;

#[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
pub type AXNavigationStyleReturnBlock =
    *mut block2::Block<dyn Fn() -> UIAccessibilityNavigationStyle>;

#[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
pub type AXContainerTypeReturnBlock = *mut block2::Block<dyn Fn() -> UIAccessibilityContainerType>;

#[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
pub type AXTextualContextReturnBlock =
    *mut block2::Block<dyn Fn() -> *mut UIAccessibilityTextualContext>;

#[cfg(all(feature = "UIAccessibilityCustomAction", feature = "block2"))]
pub type AXCustomActionsReturnBlock =
    *mut block2::Block<dyn Fn() -> *mut NSArray<UIAccessibilityCustomAction>>;

extern_category!(
    /// Category "UIAccessibility" on [`NSObject`].
    #[doc(alias = "UIAccessibility")]
    pub unsafe trait NSObjectUIAccessibility {
        #[method(isAccessibilityElement)]
        unsafe fn isAccessibilityElement(&self, mtm: MainThreadMarker) -> bool;

        #[method(setIsAccessibilityElement:)]
        unsafe fn setIsAccessibilityElement(
            &self,
            is_accessibility_element: bool,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityLabel)]
        unsafe fn accessibilityLabel(&self, mtm: MainThreadMarker) -> Option<Retained<NSString>>;

        #[method(setAccessibilityLabel:)]
        unsafe fn setAccessibilityLabel(
            &self,
            accessibility_label: Option<&NSString>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityAttributedLabel)]
        unsafe fn accessibilityAttributedLabel(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSAttributedString>>;

        #[method(setAccessibilityAttributedLabel:)]
        unsafe fn setAccessibilityAttributedLabel(
            &self,
            accessibility_attributed_label: Option<&NSAttributedString>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityHint)]
        unsafe fn accessibilityHint(&self, mtm: MainThreadMarker) -> Option<Retained<NSString>>;

        #[method(setAccessibilityHint:)]
        unsafe fn setAccessibilityHint(
            &self,
            accessibility_hint: Option<&NSString>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityAttributedHint)]
        unsafe fn accessibilityAttributedHint(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSAttributedString>>;

        #[method(setAccessibilityAttributedHint:)]
        unsafe fn setAccessibilityAttributedHint(
            &self,
            accessibility_attributed_hint: Option<&NSAttributedString>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityValue)]
        unsafe fn accessibilityValue(&self, mtm: MainThreadMarker) -> Option<Retained<NSString>>;

        #[method(setAccessibilityValue:)]
        unsafe fn setAccessibilityValue(
            &self,
            accessibility_value: Option<&NSString>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityAttributedValue)]
        unsafe fn accessibilityAttributedValue(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSAttributedString>>;

        #[method(setAccessibilityAttributedValue:)]
        unsafe fn setAccessibilityAttributedValue(
            &self,
            accessibility_attributed_value: Option<&NSAttributedString>,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(accessibilityTraits)]
        unsafe fn accessibilityTraits(&self, mtm: MainThreadMarker) -> UIAccessibilityTraits;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(setAccessibilityTraits:)]
        unsafe fn setAccessibilityTraits(
            &self,
            accessibility_traits: UIAccessibilityTraits,
            mtm: MainThreadMarker,
        );

        #[method(accessibilityFrame)]
        unsafe fn accessibilityFrame(&self, mtm: MainThreadMarker) -> CGRect;

        #[method(setAccessibilityFrame:)]
        unsafe fn setAccessibilityFrame(&self, accessibility_frame: CGRect, mtm: MainThreadMarker);

        #[cfg(feature = "UIBezierPath")]
        #[method_id(@__retain_semantics Other accessibilityPath)]
        unsafe fn accessibilityPath(&self, mtm: MainThreadMarker)
            -> Option<Retained<UIBezierPath>>;

        #[cfg(feature = "UIBezierPath")]
        #[method(setAccessibilityPath:)]
        unsafe fn setAccessibilityPath(
            &self,
            accessibility_path: Option<&UIBezierPath>,
            mtm: MainThreadMarker,
        );

        #[method(accessibilityActivationPoint)]
        unsafe fn accessibilityActivationPoint(&self, mtm: MainThreadMarker) -> CGPoint;

        #[method(setAccessibilityActivationPoint:)]
        unsafe fn setAccessibilityActivationPoint(
            &self,
            accessibility_activation_point: CGPoint,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityLanguage)]
        unsafe fn accessibilityLanguage(&self, mtm: MainThreadMarker)
            -> Option<Retained<NSString>>;

        #[method(setAccessibilityLanguage:)]
        unsafe fn setAccessibilityLanguage(
            &self,
            accessibility_language: Option<&NSString>,
            mtm: MainThreadMarker,
        );

        #[method(accessibilityElementsHidden)]
        unsafe fn accessibilityElementsHidden(&self, mtm: MainThreadMarker) -> bool;

        #[method(setAccessibilityElementsHidden:)]
        unsafe fn setAccessibilityElementsHidden(
            &self,
            accessibility_elements_hidden: bool,
            mtm: MainThreadMarker,
        );

        #[method(accessibilityViewIsModal)]
        unsafe fn accessibilityViewIsModal(&self, mtm: MainThreadMarker) -> bool;

        #[method(setAccessibilityViewIsModal:)]
        unsafe fn setAccessibilityViewIsModal(
            &self,
            accessibility_view_is_modal: bool,
            mtm: MainThreadMarker,
        );

        #[method(shouldGroupAccessibilityChildren)]
        unsafe fn shouldGroupAccessibilityChildren(&self, mtm: MainThreadMarker) -> bool;

        #[method(setShouldGroupAccessibilityChildren:)]
        unsafe fn setShouldGroupAccessibilityChildren(
            &self,
            should_group_accessibility_children: bool,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(accessibilityNavigationStyle)]
        unsafe fn accessibilityNavigationStyle(
            &self,
            mtm: MainThreadMarker,
        ) -> UIAccessibilityNavigationStyle;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(setAccessibilityNavigationStyle:)]
        unsafe fn setAccessibilityNavigationStyle(
            &self,
            accessibility_navigation_style: UIAccessibilityNavigationStyle,
            mtm: MainThreadMarker,
        );

        #[method(accessibilityRespondsToUserInteraction)]
        unsafe fn accessibilityRespondsToUserInteraction(&self, mtm: MainThreadMarker) -> bool;

        #[method(setAccessibilityRespondsToUserInteraction:)]
        unsafe fn setAccessibilityRespondsToUserInteraction(
            &self,
            accessibility_responds_to_user_interaction: bool,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityUserInputLabels)]
        unsafe fn accessibilityUserInputLabels(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSArray<NSString>>>;

        #[method(setAccessibilityUserInputLabels:)]
        unsafe fn setAccessibilityUserInputLabels(
            &self,
            accessibility_user_input_labels: Option<&NSArray<NSString>>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityAttributedUserInputLabels)]
        unsafe fn accessibilityAttributedUserInputLabels(
            &self,
            mtm: MainThreadMarker,
        ) -> Retained<NSArray<NSAttributedString>>;

        #[method(setAccessibilityAttributedUserInputLabels:)]
        unsafe fn setAccessibilityAttributedUserInputLabels(
            &self,
            accessibility_attributed_user_input_labels: Option<&NSArray<NSAttributedString>>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityHeaderElements)]
        unsafe fn accessibilityHeaderElements(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSArray>>;

        #[method(setAccessibilityHeaderElements:)]
        unsafe fn setAccessibilityHeaderElements(
            &self,
            accessibility_header_elements: Option<&NSArray>,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method_id(@__retain_semantics Other accessibilityTextualContext)]
        unsafe fn accessibilityTextualContext(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<UIAccessibilityTextualContext>>;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(setAccessibilityTextualContext:)]
        unsafe fn setAccessibilityTextualContext(
            &self,
            accessibility_textual_context: Option<&UIAccessibilityTextualContext>,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(accessibilityDirectTouchOptions)]
        unsafe fn accessibilityDirectTouchOptions(
            &self,
            mtm: MainThreadMarker,
        ) -> UIAccessibilityDirectTouchOptions;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(setAccessibilityDirectTouchOptions:)]
        unsafe fn setAccessibilityDirectTouchOptions(
            &self,
            accessibility_direct_touch_options: UIAccessibilityDirectTouchOptions,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(accessibilityExpandedStatus)]
        unsafe fn accessibilityExpandedStatus(
            &self,
            mtm: MainThreadMarker,
        ) -> UIAccessibilityExpandedStatus;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method(setAccessibilityExpandedStatus:)]
        unsafe fn setAccessibilityExpandedStatus(
            &self,
            accessibility_expanded_status: UIAccessibilityExpandedStatus,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(isAccessibilityElementBlock)]
        unsafe fn isAccessibilityElementBlock(&self, mtm: MainThreadMarker) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setIsAccessibilityElementBlock:)]
        unsafe fn setIsAccessibilityElementBlock(
            &self,
            is_accessibility_element_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityLabelBlock)]
        unsafe fn accessibilityLabelBlock(&self, mtm: MainThreadMarker) -> AXStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityLabelBlock:)]
        unsafe fn setAccessibilityLabelBlock(
            &self,
            accessibility_label_block: AXStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityValueBlock)]
        unsafe fn accessibilityValueBlock(&self, mtm: MainThreadMarker) -> AXStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityValueBlock:)]
        unsafe fn setAccessibilityValueBlock(
            &self,
            accessibility_value_block: AXStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityHintBlock)]
        unsafe fn accessibilityHintBlock(&self, mtm: MainThreadMarker) -> AXStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityHintBlock:)]
        unsafe fn setAccessibilityHintBlock(
            &self,
            accessibility_hint_block: AXStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(accessibilityTraitsBlock)]
        unsafe fn accessibilityTraitsBlock(&self, mtm: MainThreadMarker) -> AXTraitsReturnBlock;

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(setAccessibilityTraitsBlock:)]
        unsafe fn setAccessibilityTraitsBlock(
            &self,
            accessibility_traits_block: AXTraitsReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityIdentifierBlock)]
        unsafe fn accessibilityIdentifierBlock(&self, mtm: MainThreadMarker)
            -> AXStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityIdentifierBlock:)]
        unsafe fn setAccessibilityIdentifierBlock(
            &self,
            accessibility_identifier_block: AXStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityHeaderElementsBlock)]
        unsafe fn accessibilityHeaderElementsBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXArrayReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityHeaderElementsBlock:)]
        unsafe fn setAccessibilityHeaderElementsBlock(
            &self,
            accessibility_header_elements_block: AXArrayReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityAttributedLabelBlock)]
        unsafe fn accessibilityAttributedLabelBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXAttributedStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityAttributedLabelBlock:)]
        unsafe fn setAccessibilityAttributedLabelBlock(
            &self,
            accessibility_attributed_label_block: AXAttributedStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityAttributedHintBlock)]
        unsafe fn accessibilityAttributedHintBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXAttributedStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityAttributedHintBlock:)]
        unsafe fn setAccessibilityAttributedHintBlock(
            &self,
            accessibility_attributed_hint_block: AXAttributedStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityLanguageBlock)]
        unsafe fn accessibilityLanguageBlock(&self, mtm: MainThreadMarker) -> AXStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityLanguageBlock:)]
        unsafe fn setAccessibilityLanguageBlock(
            &self,
            accessibility_language_block: AXStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(accessibilityTextualContextBlock)]
        unsafe fn accessibilityTextualContextBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXTextualContextReturnBlock;

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(setAccessibilityTextualContextBlock:)]
        unsafe fn setAccessibilityTextualContextBlock(
            &self,
            accessibility_textual_context_block: AXTextualContextReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityUserInputLabelsBlock)]
        unsafe fn accessibilityUserInputLabelsBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXStringArrayReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityUserInputLabelsBlock:)]
        unsafe fn setAccessibilityUserInputLabelsBlock(
            &self,
            accessibility_user_input_labels_block: AXStringArrayReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityAttributedUserInputLabelsBlock)]
        unsafe fn accessibilityAttributedUserInputLabelsBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXAttributedStringArrayReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityAttributedUserInputLabelsBlock:)]
        unsafe fn setAccessibilityAttributedUserInputLabelsBlock(
            &self,
            accessibility_attributed_user_input_labels_block: AXAttributedStringArrayReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityAttributedValueBlock)]
        unsafe fn accessibilityAttributedValueBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXAttributedStringReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityAttributedValueBlock:)]
        unsafe fn setAccessibilityAttributedValueBlock(
            &self,
            accessibility_attributed_value_block: AXAttributedStringReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityElementsHiddenBlock)]
        unsafe fn accessibilityElementsHiddenBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityElementsHiddenBlock:)]
        unsafe fn setAccessibilityElementsHiddenBlock(
            &self,
            accessibility_elements_hidden_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityRespondsToUserInteractionBlock)]
        unsafe fn accessibilityRespondsToUserInteractionBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityRespondsToUserInteractionBlock:)]
        unsafe fn setAccessibilityRespondsToUserInteractionBlock(
            &self,
            accessibility_responds_to_user_interaction_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityViewIsModalBlock)]
        unsafe fn accessibilityViewIsModalBlock(&self, mtm: MainThreadMarker) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityViewIsModalBlock:)]
        unsafe fn setAccessibilityViewIsModalBlock(
            &self,
            accessibility_view_is_modal_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityShouldGroupAccessibilityChildrenBlock)]
        unsafe fn accessibilityShouldGroupAccessibilityChildrenBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityShouldGroupAccessibilityChildrenBlock:)]
        unsafe fn setAccessibilityShouldGroupAccessibilityChildrenBlock(
            &self,
            accessibility_should_group_accessibility_children_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(accessibilityExpandedStatusBlock)]
        unsafe fn accessibilityExpandedStatusBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> *mut block2::Block<dyn Fn() -> UIAccessibilityExpandedStatus>;

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(setAccessibilityExpandedStatusBlock:)]
        unsafe fn setAccessibilityExpandedStatusBlock(
            &self,
            accessibility_expanded_status_block: Option<
                &block2::Block<dyn Fn() -> UIAccessibilityExpandedStatus>,
            >,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityElementsBlock)]
        unsafe fn accessibilityElementsBlock(&self, mtm: MainThreadMarker) -> AXArrayReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityElementsBlock:)]
        unsafe fn setAccessibilityElementsBlock(
            &self,
            accessibility_elements_block: AXArrayReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(automationElementsBlock)]
        unsafe fn automationElementsBlock(&self, mtm: MainThreadMarker) -> AXArrayReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAutomationElementsBlock:)]
        unsafe fn setAutomationElementsBlock(
            &self,
            automation_elements_block: AXArrayReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(accessibilityContainerTypeBlock)]
        unsafe fn accessibilityContainerTypeBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXContainerTypeReturnBlock;

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(setAccessibilityContainerTypeBlock:)]
        unsafe fn setAccessibilityContainerTypeBlock(
            &self,
            accessibility_container_type_block: AXContainerTypeReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityActivationPointBlock)]
        unsafe fn accessibilityActivationPointBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXPointReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityActivationPointBlock:)]
        unsafe fn setAccessibilityActivationPointBlock(
            &self,
            accessibility_activation_point_block: AXPointReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityFrameBlock)]
        unsafe fn accessibilityFrameBlock(&self, mtm: MainThreadMarker) -> AXRectReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityFrameBlock:)]
        unsafe fn setAccessibilityFrameBlock(
            &self,
            accessibility_frame_block: AXRectReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(accessibilityNavigationStyleBlock)]
        unsafe fn accessibilityNavigationStyleBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXNavigationStyleReturnBlock;

        #[cfg(all(feature = "UIAccessibilityConstants", feature = "block2"))]
        #[method(setAccessibilityNavigationStyleBlock:)]
        unsafe fn setAccessibilityNavigationStyleBlock(
            &self,
            accessibility_navigation_style_block: AXNavigationStyleReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIBezierPath", feature = "block2"))]
        #[method(accessibilityPathBlock)]
        unsafe fn accessibilityPathBlock(&self, mtm: MainThreadMarker) -> AXPathReturnBlock;

        #[cfg(all(feature = "UIBezierPath", feature = "block2"))]
        #[method(setAccessibilityPathBlock:)]
        unsafe fn setAccessibilityPathBlock(
            &self,
            accessibility_path_block: AXPathReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityActivateBlock)]
        unsafe fn accessibilityActivateBlock(&self, mtm: MainThreadMarker) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityActivateBlock:)]
        unsafe fn setAccessibilityActivateBlock(
            &self,
            accessibility_activate_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityIncrementBlock)]
        unsafe fn accessibilityIncrementBlock(&self, mtm: MainThreadMarker) -> AXVoidReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityIncrementBlock:)]
        unsafe fn setAccessibilityIncrementBlock(
            &self,
            accessibility_increment_block: AXVoidReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityDecrementBlock)]
        unsafe fn accessibilityDecrementBlock(&self, mtm: MainThreadMarker) -> AXVoidReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityDecrementBlock:)]
        unsafe fn setAccessibilityDecrementBlock(
            &self,
            accessibility_decrement_block: AXVoidReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityPerformEscapeBlock)]
        unsafe fn accessibilityPerformEscapeBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityPerformEscapeBlock:)]
        unsafe fn setAccessibilityPerformEscapeBlock(
            &self,
            accessibility_perform_escape_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityMagicTapBlock)]
        unsafe fn accessibilityMagicTapBlock(&self, mtm: MainThreadMarker) -> AXBoolReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityMagicTapBlock:)]
        unsafe fn setAccessibilityMagicTapBlock(
            &self,
            accessibility_magic_tap_block: AXBoolReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(all(feature = "UIAccessibilityCustomAction", feature = "block2"))]
        #[method(accessibilityCustomActionsBlock)]
        unsafe fn accessibilityCustomActionsBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXCustomActionsReturnBlock;

        #[cfg(all(feature = "UIAccessibilityCustomAction", feature = "block2"))]
        #[method(setAccessibilityCustomActionsBlock:)]
        unsafe fn setAccessibilityCustomActionsBlock(
            &self,
            accessibility_custom_actions_block: AXCustomActionsReturnBlock,
            mtm: MainThreadMarker,
        );
    }

    unsafe impl NSObjectUIAccessibility for NSObject {}
);

extern "C-unwind" {
    #[cfg(feature = "UIAccessibilityConstants")]
    pub fn UIAccessibilityFocusedElement(
        assistive_technology_identifier: Option<&UIAccessibilityAssistiveTechnologyIdentifier>,
    ) -> *mut AnyObject;
}

extern_category!(
    /// Category "UIAccessibilityFocus" on [`NSObject`].
    #[doc(alias = "UIAccessibilityFocus")]
    pub unsafe trait NSObjectUIAccessibilityFocus {
        #[method(accessibilityElementDidBecomeFocused)]
        unsafe fn accessibilityElementDidBecomeFocused(&self, mtm: MainThreadMarker);

        #[method(accessibilityElementDidLoseFocus)]
        unsafe fn accessibilityElementDidLoseFocus(&self, mtm: MainThreadMarker);

        #[method(accessibilityElementIsFocused)]
        unsafe fn accessibilityElementIsFocused(&self, mtm: MainThreadMarker) -> bool;

        #[cfg(feature = "UIAccessibilityConstants")]
        #[method_id(@__retain_semantics Other accessibilityAssistiveTechnologyFocusedIdentifiers)]
        unsafe fn accessibilityAssistiveTechnologyFocusedIdentifiers(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSSet<UIAccessibilityAssistiveTechnologyIdentifier>>>;
    }

    unsafe impl NSObjectUIAccessibilityFocus for NSObject {}
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIAccessibilityScrollDirection(pub NSInteger);
impl UIAccessibilityScrollDirection {
    #[doc(alias = "UIAccessibilityScrollDirectionRight")]
    pub const Right: Self = Self(1);
    #[doc(alias = "UIAccessibilityScrollDirectionLeft")]
    pub const Left: Self = Self(2);
    #[doc(alias = "UIAccessibilityScrollDirectionUp")]
    pub const Up: Self = Self(3);
    #[doc(alias = "UIAccessibilityScrollDirectionDown")]
    pub const Down: Self = Self(4);
    #[doc(alias = "UIAccessibilityScrollDirectionNext")]
    pub const Next: Self = Self(5);
    #[doc(alias = "UIAccessibilityScrollDirectionPrevious")]
    pub const Previous: Self = Self(6);
}

unsafe impl Encode for UIAccessibilityScrollDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIAccessibilityScrollDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_category!(
    /// Category "UIAccessibilityAction" on [`NSObject`].
    #[doc(alias = "UIAccessibilityAction")]
    pub unsafe trait NSObjectUIAccessibilityAction {
        #[method(accessibilityActivate)]
        unsafe fn accessibilityActivate(&self, mtm: MainThreadMarker) -> bool;

        #[method(accessibilityIncrement)]
        unsafe fn accessibilityIncrement(&self, mtm: MainThreadMarker);

        #[method(accessibilityDecrement)]
        unsafe fn accessibilityDecrement(&self, mtm: MainThreadMarker);

        #[method(accessibilityZoomInAtPoint:)]
        unsafe fn accessibilityZoomInAtPoint(&self, point: CGPoint, mtm: MainThreadMarker) -> bool;

        #[method(accessibilityZoomOutAtPoint:)]
        unsafe fn accessibilityZoomOutAtPoint(&self, point: CGPoint, mtm: MainThreadMarker)
            -> bool;

        #[method(accessibilityScroll:)]
        unsafe fn accessibilityScroll(
            &self,
            direction: UIAccessibilityScrollDirection,
            mtm: MainThreadMarker,
        ) -> bool;

        #[method(accessibilityPerformEscape)]
        unsafe fn accessibilityPerformEscape(&self, mtm: MainThreadMarker) -> bool;

        #[method(accessibilityPerformMagicTap)]
        unsafe fn accessibilityPerformMagicTap(&self, mtm: MainThreadMarker) -> bool;

        #[cfg(feature = "UIAccessibilityCustomAction")]
        #[method_id(@__retain_semantics Other accessibilityCustomActions)]
        unsafe fn accessibilityCustomActions(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSArray<UIAccessibilityCustomAction>>>;

        #[cfg(feature = "UIAccessibilityCustomAction")]
        #[method(setAccessibilityCustomActions:)]
        unsafe fn setAccessibilityCustomActions(
            &self,
            accessibility_custom_actions: Option<&NSArray<UIAccessibilityCustomAction>>,
            mtm: MainThreadMarker,
        );
    }

    unsafe impl NSObjectUIAccessibilityAction for NSObject {}
);

extern_protocol!(
    pub unsafe trait UIAccessibilityReadingContent: MainThreadOnly {
        #[method(accessibilityLineNumberForPoint:)]
        unsafe fn accessibilityLineNumberForPoint(&self, point: CGPoint) -> NSInteger;

        #[method_id(@__retain_semantics Other accessibilityContentForLineNumber:)]
        unsafe fn accessibilityContentForLineNumber(
            &self,
            line_number: NSInteger,
        ) -> Option<Retained<NSString>>;

        #[method(accessibilityFrameForLineNumber:)]
        unsafe fn accessibilityFrameForLineNumber(&self, line_number: NSInteger) -> CGRect;

        #[method_id(@__retain_semantics Other accessibilityPageContent)]
        unsafe fn accessibilityPageContent(&self) -> Option<Retained<NSString>>;

        #[optional]
        #[method_id(@__retain_semantics Other accessibilityAttributedContentForLineNumber:)]
        unsafe fn accessibilityAttributedContentForLineNumber(
            &self,
            line_number: NSInteger,
        ) -> Option<Retained<NSAttributedString>>;

        #[optional]
        #[method_id(@__retain_semantics Other accessibilityAttributedPageContent)]
        unsafe fn accessibilityAttributedPageContent(&self)
            -> Option<Retained<NSAttributedString>>;
    }

    unsafe impl ProtocolType for dyn UIAccessibilityReadingContent {}
);

extern_category!(
    /// Category "UIAccessibilityDragging" on [`NSObject`].
    #[doc(alias = "UIAccessibilityDragging")]
    pub unsafe trait NSObjectUIAccessibilityDragging {
        #[cfg(feature = "UIAccessibilityLocationDescriptor")]
        #[method_id(@__retain_semantics Other accessibilityDragSourceDescriptors)]
        unsafe fn accessibilityDragSourceDescriptors(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSArray<UIAccessibilityLocationDescriptor>>>;

        #[cfg(feature = "UIAccessibilityLocationDescriptor")]
        #[method(setAccessibilityDragSourceDescriptors:)]
        unsafe fn setAccessibilityDragSourceDescriptors(
            &self,
            accessibility_drag_source_descriptors: Option<
                &NSArray<UIAccessibilityLocationDescriptor>,
            >,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "UIAccessibilityLocationDescriptor")]
        #[method_id(@__retain_semantics Other accessibilityDropPointDescriptors)]
        unsafe fn accessibilityDropPointDescriptors(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSArray<UIAccessibilityLocationDescriptor>>>;

        #[cfg(feature = "UIAccessibilityLocationDescriptor")]
        #[method(setAccessibilityDropPointDescriptors:)]
        unsafe fn setAccessibilityDropPointDescriptors(
            &self,
            accessibility_drop_point_descriptors: Option<
                &NSArray<UIAccessibilityLocationDescriptor>,
            >,
            mtm: MainThreadMarker,
        );
    }

    unsafe impl NSObjectUIAccessibilityDragging for NSObject {}
);

extern_category!(
    /// Category "UIAccessibilityHitTest" on [`NSObject`].
    #[doc(alias = "UIAccessibilityHitTest")]
    pub unsafe trait NSObjectUIAccessibilityHitTest {
        #[cfg(feature = "UIEvent")]
        #[method_id(@__retain_semantics Other accessibilityHitTest:withEvent:)]
        unsafe fn accessibilityHitTest_withEvent(
            &self,
            point: CGPoint,
            event: Option<&UIEvent>,
            mtm: MainThreadMarker,
        ) -> Option<Retained<AnyObject>>;
    }

    unsafe impl NSObjectUIAccessibilityHitTest for NSObject {}
);

extern_category!(
    /// Category "UIAccessibilityTextNavigation" on [`NSObject`].
    #[doc(alias = "UIAccessibilityTextNavigation")]
    pub unsafe trait NSObjectUIAccessibilityTextNavigation {
        #[method_id(@__retain_semantics Other accessibilityPreviousTextNavigationElement)]
        unsafe fn accessibilityPreviousTextNavigationElement(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<AnyObject>>;

        #[method(setAccessibilityPreviousTextNavigationElement:)]
        unsafe fn setAccessibilityPreviousTextNavigationElement(
            &self,
            accessibility_previous_text_navigation_element: Option<&AnyObject>,
            mtm: MainThreadMarker,
        );

        #[method_id(@__retain_semantics Other accessibilityNextTextNavigationElement)]
        unsafe fn accessibilityNextTextNavigationElement(
            &self,
            mtm: MainThreadMarker,
        ) -> Option<Retained<AnyObject>>;

        #[method(setAccessibilityNextTextNavigationElement:)]
        unsafe fn setAccessibilityNextTextNavigationElement(
            &self,
            accessibility_next_text_navigation_element: Option<&AnyObject>,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityPreviousTextNavigationElementBlock)]
        unsafe fn accessibilityPreviousTextNavigationElementBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXObjectReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityPreviousTextNavigationElementBlock:)]
        unsafe fn setAccessibilityPreviousTextNavigationElementBlock(
            &self,
            accessibility_previous_text_navigation_element_block: AXObjectReturnBlock,
            mtm: MainThreadMarker,
        );

        #[cfg(feature = "block2")]
        #[method(accessibilityNextTextNavigationElementBlock)]
        unsafe fn accessibilityNextTextNavigationElementBlock(
            &self,
            mtm: MainThreadMarker,
        ) -> AXObjectReturnBlock;

        #[cfg(feature = "block2")]
        #[method(setAccessibilityNextTextNavigationElementBlock:)]
        unsafe fn setAccessibilityNextTextNavigationElementBlock(
            &self,
            accessibility_next_text_navigation_element_block: AXObjectReturnBlock,
            mtm: MainThreadMarker,
        );
    }

    unsafe impl NSObjectUIAccessibilityTextNavigation for NSObject {}
);

extern "C-unwind" {
    #[cfg(feature = "UIAccessibilityConstants")]
    pub fn UIAccessibilityPostNotification(
        notification: UIAccessibilityNotifications,
        argument: Option<&AnyObject>,
    );
}

extern "C-unwind" {
    pub fn UIAccessibilityIsVoiceOverRunning() -> Bool;
}

extern "C" {
    pub static UIAccessibilityVoiceOverStatusChanged: &'static NSString;
}

extern "C" {
    pub static UIAccessibilityVoiceOverStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsMonoAudioEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityMonoAudioStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsClosedCaptioningEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityClosedCaptioningStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsInvertColorsEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityInvertColorsStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsGuidedAccessEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityGuidedAccessStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsBoldTextEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityBoldTextStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityButtonShapesEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityButtonShapesEnabledStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsGrayscaleEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityGrayscaleStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsReduceTransparencyEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityReduceTransparencyStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsReduceMotionEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityReduceMotionStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityPrefersCrossFadeTransitions() -> Bool;
}

extern "C" {
    pub static UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsVideoAutoplayEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityVideoAutoplayStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityDarkerSystemColorsEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityDarkerSystemColorsStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsSwitchControlRunning() -> Bool;
}

extern "C" {
    pub static UIAccessibilitySwitchControlStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsSpeakSelectionEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilitySpeakSelectionStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsSpeakScreenEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilitySpeakScreenStatusDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsShakeToUndoEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityShakeToUndoDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsAssistiveTouchRunning() -> Bool;
}

extern "C" {
    pub static UIAccessibilityAssistiveTouchStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityShouldDifferentiateWithoutColor() -> Bool;
}

extern "C" {
    pub static UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification:
        &'static NSNotificationName;
}

extern "C-unwind" {
    pub fn UIAccessibilityIsOnOffSwitchLabelsEnabled() -> Bool;
}

extern "C" {
    pub static UIAccessibilityOnOffSwitchLabelsDidChangeNotification: &'static NSNotificationName;
}

extern "C-unwind" {
    #[cfg(feature = "block2")]
    pub fn UIAccessibilityRequestGuidedAccessSession(
        enable: Bool,
        completion_handler: &block2::Block<dyn Fn(Bool)>,
    );
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIAccessibilityHearingDeviceEar(pub NSUInteger);
bitflags::bitflags! {
    impl UIAccessibilityHearingDeviceEar: NSUInteger {
        #[doc(alias = "UIAccessibilityHearingDeviceEarNone")]
        const None = 0;
        #[doc(alias = "UIAccessibilityHearingDeviceEarLeft")]
        const Left = 1<<1;
        #[doc(alias = "UIAccessibilityHearingDeviceEarRight")]
        const Right = 1<<2;
        #[doc(alias = "UIAccessibilityHearingDeviceEarBoth")]
        const Both = UIAccessibilityHearingDeviceEar::Left.0|UIAccessibilityHearingDeviceEar::Right.0;
    }
}

unsafe impl Encode for UIAccessibilityHearingDeviceEar {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for UIAccessibilityHearingDeviceEar {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn UIAccessibilityHearingDevicePairedEar() -> UIAccessibilityHearingDeviceEar;
}

extern "C" {
    pub static UIAccessibilityHearingDevicePairedEarDidChangeNotification:
        &'static NSNotificationName;
}
