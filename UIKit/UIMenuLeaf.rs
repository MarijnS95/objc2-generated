//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uimenuleaf?language=objc)
    pub unsafe trait UIMenuLeaf: NSObjectProtocol + MainThreadOnly {
        /// Short display title.
        #[unsafe(method_family(none))]
        #[method_id(title)]
        unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        #[method(setTitle:)]
        unsafe fn setTitle(&self, title: &NSString);

        #[cfg(feature = "UIImage")]
        /// Image that can appear next to this element.
        #[unsafe(method_family(none))]
        #[method_id(image)]
        unsafe fn image(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`image`][Self::image].
        #[method(setImage:)]
        unsafe fn setImage(&self, image: Option<&UIImage>);

        #[cfg(feature = "UIImage")]
        /// Image that can appear next to this action when the `state` is `UIMenuElementStateOn`
        #[unsafe(method_family(none))]
        #[method_id(selectedImage)]
        unsafe fn selectedImage(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        /// Setter for [`selectedImage`][Self::selectedImage].
        #[method(setSelectedImage:)]
        unsafe fn setSelectedImage(&self, selected_image: Option<&UIImage>);

        /// Elaborated title used in keyboard shortcut overlay.
        #[unsafe(method_family(none))]
        #[method_id(discoverabilityTitle)]
        unsafe fn discoverabilityTitle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`discoverabilityTitle`][Self::discoverabilityTitle].
        #[method(setDiscoverabilityTitle:)]
        unsafe fn setDiscoverabilityTitle(&self, discoverability_title: Option<&NSString>);

        #[cfg(feature = "UIMenuElement")]
        /// The element's attributes.
        #[method(attributes)]
        unsafe fn attributes(&self) -> UIMenuElementAttributes;

        #[cfg(feature = "UIMenuElement")]
        /// Setter for [`attributes`][Self::attributes].
        #[method(setAttributes:)]
        unsafe fn setAttributes(&self, attributes: UIMenuElementAttributes);

        #[cfg(feature = "UIMenuElement")]
        /// The element's selection state.
        #[method(state)]
        unsafe fn state(&self) -> UIMenuElementState;

        #[cfg(feature = "UIMenuElement")]
        /// Setter for [`state`][Self::state].
        #[method(setState:)]
        unsafe fn setState(&self, state: UIMenuElementState);

        /// The object on behalf of which the element's primary action is being performed.
        /// This property is only populated during the execution of the element's
        /// primary action (i.e. its handler or selector) if available.
        #[unsafe(method_family(none))]
        #[method_id(sender)]
        unsafe fn sender(&self) -> Option<Retained<AnyObject>>;

        #[cfg(feature = "UIPopoverPresentationControllerSourceItem")]
        /// Source item for subsequent presentations. For example, an element displayed in a menu attached to a
        /// `UIButton`may return the button so that a popover may be presented from it when the element is tapped.
        /// If available, this property is only populated during the execution of the element's action (i.e. its handler or selector).
        #[unsafe(method_family(none))]
        #[method_id(presentationSourceItem)]
        unsafe fn presentationSourceItem(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn UIPopoverPresentationControllerSourceItem>>>;

        /// Performs the elementâ€™s primary action (i.e. it's handler or selector).
        #[method(performWithSender:target:)]
        unsafe fn performWithSender_target(
            &self,
            sender: Option<&AnyObject>,
            target: Option<&AnyObject>,
        );
    }
);
