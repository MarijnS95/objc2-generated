//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// Encapsulates access and mutation for a menu hierarchy.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/uikit/uimenubuilder?language=objc)
    pub unsafe trait UIMenuBuilder: MainThreadOnly {
        #[cfg(feature = "UIMenuSystem")]
        /// Which system we are building for.
        #[method_id(@__retain_semantics Other system)]
        unsafe fn system(&self) -> Retained<UIMenuSystem>;

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Fetch the identified menu.
        ///
        ///
        /// Parameter `identifier`: The identifier of the menu to fetch.
        ///
        /// Returns: The menu with the given identifier, or `nil` if no such menu.
        #[method_id(@__retain_semantics Other menuForIdentifier:)]
        unsafe fn menuForIdentifier(
            &self,
            identifier: &UIMenuIdentifier,
        ) -> Option<Retained<UIMenu>>;

        #[cfg(all(feature = "UIAction", feature = "UIMenuElement"))]
        /// Fetch the identified action.
        ///
        ///
        /// Parameter `identifier`: The identifier of the action to fetch.
        ///
        /// Returns: The action with the given identifier, or `nil` if no such action.
        #[method_id(@__retain_semantics Other actionForIdentifier:)]
        unsafe fn actionForIdentifier(
            &self,
            identifier: &UIActionIdentifier,
        ) -> Option<Retained<UIAction>>;

        #[cfg(all(feature = "UICommand", feature = "UIMenuElement"))]
        /// Fetch the identified command.
        ///
        ///
        /// Parameter `action`: The action of the command to fetch.
        ///
        /// Parameter `propertyList`: Property list object to distinguish commands, if needed.
        ///
        /// Returns: The command with the given action and property list, or `nil` if no such command.
        #[method_id(@__retain_semantics Other commandForAction:propertyList:)]
        unsafe fn commandForAction_propertyList(
            &self,
            action: Sel,
            property_list: Option<&AnyObject>,
        ) -> Option<Retained<UICommand>>;

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Replace an identified menu with a menu.
        ///
        ///
        /// Parameter `replacedIdentifier`: The identifier of the menu to be replaced.
        ///
        /// Parameter `replacementGroup`: The replacement menu.
        #[method(replaceMenuForIdentifier:withMenu:)]
        unsafe fn replaceMenuForIdentifier_withMenu(
            &self,
            replaced_identifier: &UIMenuIdentifier,
            replacement_menu: &UIMenu,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement", feature = "block2"))]
        /// Replace the children of an identified parent menu.
        ///
        ///
        /// Parameter `parentIdentifier`: The identifier of the parent menu.
        ///
        /// Parameter `childrenBlock`: A block that returns the new children, given the old children.
        #[method(replaceChildrenOfMenuForIdentifier:fromChildrenBlock:)]
        unsafe fn replaceChildrenOfMenuForIdentifier_fromChildrenBlock(
            &self,
            parent_identifier: &UIMenuIdentifier,
            children_block: &block2::Block<
                dyn Fn(NonNull<NSArray<UIMenuElement>>) -> NonNull<NSArray<UIMenuElement>> + '_,
            >,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Insert a sibling menu before an identified sibling menu.
        ///
        ///
        /// Parameter `siblingGroup`: The sibling menu to insert.
        ///
        /// Parameter `siblingIdentifier`: The identifier of the sibling menu to insert before.
        #[method(insertSiblingMenu:beforeMenuForIdentifier:)]
        unsafe fn insertSiblingMenu_beforeMenuForIdentifier(
            &self,
            sibling_menu: &UIMenu,
            sibling_identifier: &UIMenuIdentifier,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Insert a sibling menu after an identified sibling menu.
        ///
        ///
        /// Parameter `siblingGroup`: The sibling menu to insert.
        ///
        /// Parameter `siblingIdentifier`: The identifier of the sibling menu to insert after.
        #[method(insertSiblingMenu:afterMenuForIdentifier:)]
        unsafe fn insertSiblingMenu_afterMenuForIdentifier(
            &self,
            sibling_menu: &UIMenu,
            sibling_identifier: &UIMenuIdentifier,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Insert a child menu at the start of an identified parent menu.
        ///
        ///
        /// Parameter `childGroup`: The child menu to insert.
        ///
        /// Parameter `parentIdentifier`: The identifier of the parent menu to insert at the start of.
        #[method(insertChildMenu:atStartOfMenuForIdentifier:)]
        unsafe fn insertChildMenu_atStartOfMenuForIdentifier(
            &self,
            child_menu: &UIMenu,
            parent_identifier: &UIMenuIdentifier,
        );

        #[cfg(all(feature = "UIMenu", feature = "UIMenuElement"))]
        /// Insert a child menu at the end of an identified parent menu.
        ///
        ///
        /// Parameter `childGroup`: The child menu to insert.
        ///
        /// Parameter `parentIdentifier`: The identifier of the parent menu to insert at the end of.
        #[method(insertChildMenu:atEndOfMenuForIdentifier:)]
        unsafe fn insertChildMenu_atEndOfMenuForIdentifier(
            &self,
            child_menu: &UIMenu,
            parent_identifier: &UIMenuIdentifier,
        );

        #[cfg(feature = "UIMenu")]
        /// Remove an identified menu.
        ///
        ///
        /// Parameter `removedIdentifier`: The menu to remove.
        #[method(removeMenuForIdentifier:)]
        unsafe fn removeMenuForIdentifier(&self, removed_identifier: &UIMenuIdentifier);
    }

    unsafe impl ProtocolType for dyn UIMenuBuilder {}
);
