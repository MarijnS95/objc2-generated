//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-image")]
#[cfg(not(target_os = "watchos"))]
use objc2_core_image::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/uikit/uicolorprominence?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIColorProminence(pub NSInteger);
impl UIColorProminence {
    #[doc(alias = "UIColorProminencePrimary")]
    pub const Primary: Self = Self(0);
    #[doc(alias = "UIColorProminenceSecondary")]
    pub const Secondary: Self = Self(1);
    #[doc(alias = "UIColorProminenceTertiary")]
    pub const Tertiary: Self = Self(2);
    #[doc(alias = "UIColorProminenceQuaternary")]
    pub const Quaternary: Self = Self(3);
}

unsafe impl Encode for UIColorProminence {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIColorProminence {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uicolor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIColor;
);

unsafe impl Send for UIColor {}

unsafe impl Sync for UIColor {}

unsafe impl NSCoding for UIColor {}

unsafe impl NSCopying for UIColor {}

unsafe impl CopyingHelper for UIColor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UIColor {}

unsafe impl NSSecureCoding for UIColor {}

extern_methods!(
    unsafe impl UIColor {
        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(colorWithWhite:alpha:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithWhite_alpha(white: CGFloat, alpha: CGFloat) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(colorWithHue:saturation:brightness:alpha:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithHue_saturation_brightness_alpha(
            hue: CGFloat,
            saturation: CGFloat,
            brightness: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(colorWithRed:green:blue:alpha:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithRed_green_blue_alpha(
            red: CGFloat,
            green: CGFloat,
            blue: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(colorWithDisplayP3Red:green:blue:alpha:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithDisplayP3Red_green_blue_alpha(
            display_p3_red: CGFloat,
            green: CGFloat,
            blue: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(colorWithCGColor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithCGColor(cg_color: &CGColor) -> Retained<UIColor>;

        #[cfg(feature = "UIImage")]
        #[method_id(colorWithPatternImage:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithPatternImage(image: &UIImage) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-image")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(colorWithCIColor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithCIColor(ci_color: &CIColor) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithWhite:alpha:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWhite_alpha(
            this: Allocated<Self>,
            white: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithHue:saturation:brightness:alpha:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithHue_saturation_brightness_alpha(
            this: Allocated<Self>,
            hue: CGFloat,
            saturation: CGFloat,
            brightness: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithRed:green:blue:alpha:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRed_green_blue_alpha(
            this: Allocated<Self>,
            red: CGFloat,
            green: CGFloat,
            blue: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(initWithDisplayP3Red:green:blue:alpha:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDisplayP3Red_green_blue_alpha(
            this: Allocated<Self>,
            display_p3_red: CGFloat,
            green: CGFloat,
            blue: CGFloat,
            alpha: CGFloat,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(initWithCGColor:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCGColor(
            this: Allocated<Self>,
            cg_color: &CGColor,
        ) -> Retained<UIColor>;

        #[cfg(feature = "UIImage")]
        #[method_id(initWithPatternImage:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithPatternImage(
            this: Allocated<Self>,
            image: &UIImage,
        ) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-image")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(initWithCIColor:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCIColor(
            this: Allocated<Self>,
            ci_color: &CIColor,
        ) -> Retained<UIColor>;

        #[method_id(blackColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn blackColor() -> Retained<UIColor>;

        #[method_id(darkGrayColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn darkGrayColor() -> Retained<UIColor>;

        #[method_id(lightGrayColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn lightGrayColor() -> Retained<UIColor>;

        #[method_id(whiteColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn whiteColor() -> Retained<UIColor>;

        #[method_id(grayColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn grayColor() -> Retained<UIColor>;

        #[method_id(redColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn redColor() -> Retained<UIColor>;

        #[method_id(greenColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn greenColor() -> Retained<UIColor>;

        #[method_id(blueColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn blueColor() -> Retained<UIColor>;

        #[method_id(cyanColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn cyanColor() -> Retained<UIColor>;

        #[method_id(yellowColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn yellowColor() -> Retained<UIColor>;

        #[method_id(magentaColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn magentaColor() -> Retained<UIColor>;

        #[method_id(orangeColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn orangeColor() -> Retained<UIColor>;

        #[method_id(purpleColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn purpleColor() -> Retained<UIColor>;

        #[method_id(brownColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn brownColor() -> Retained<UIColor>;

        #[method_id(clearColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn clearColor() -> Retained<UIColor>;

        #[method(set)]
        pub unsafe fn set(&self);

        #[method(setFill)]
        pub unsafe fn setFill(&self);

        #[method(setStroke)]
        pub unsafe fn setStroke(&self);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(getWhite:alpha:)]
        pub unsafe fn getWhite_alpha(&self, white: *mut CGFloat, alpha: *mut CGFloat) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(getHue:saturation:brightness:alpha:)]
        pub unsafe fn getHue_saturation_brightness_alpha(
            &self,
            hue: *mut CGFloat,
            saturation: *mut CGFloat,
            brightness: *mut CGFloat,
            alpha: *mut CGFloat,
        ) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(getRed:green:blue:alpha:)]
        pub unsafe fn getRed_green_blue_alpha(
            &self,
            red: *mut CGFloat,
            green: *mut CGFloat,
            blue: *mut CGFloat,
            alpha: *mut CGFloat,
        ) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(colorWithAlphaComponent:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithAlphaComponent(&self, alpha: CGFloat) -> Retained<UIColor>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method_id(CGColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn CGColor(&self) -> Retained<CGColor>;

        #[cfg(feature = "objc2-core-image")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(CIColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn CIColor(&self) -> Retained<CIColor>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIColor {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// UINSItemProvider
    unsafe impl UIColor {}
);

unsafe impl NSItemProviderReading for UIColor {}

unsafe impl NSItemProviderWriting for UIColor {}

extern_category!(
    /// Category "UIKitAdditions" on [`CIColor`].
    #[doc(alias = "UIKitAdditions")]
    pub unsafe trait CIColorUIKitAdditions {
        #[method_id(initWithColor:)]
        #[unsafe(method_family = init)]
        unsafe fn initWithColor(this: Allocated<Self>, color: &UIColor) -> Retained<Self>;
    }

    #[cfg(feature = "objc2-core-image")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl CIColorUIKitAdditions for CIColor {}
);

extern_methods!(
    /// UIColorNamedColors
    unsafe impl UIColor {
        #[method_id(colorNamed:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorNamed(name: &NSString) -> Option<Retained<UIColor>>;

        #[cfg(feature = "UITraitCollection")]
        #[method_id(colorNamed:inBundle:compatibleWithTraitCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorNamed_inBundle_compatibleWithTraitCollection(
            name: &NSString,
            bundle: Option<&NSBundle>,
            trait_collection: Option<&UITraitCollection>,
        ) -> Option<Retained<UIColor>>;
    }
);

extern_methods!(
    /// DynamicColors
    unsafe impl UIColor {
        #[cfg(all(feature = "UITraitCollection", feature = "block2"))]
        #[method_id(colorWithDynamicProvider:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithDynamicProvider(
            dynamic_provider: &block2::Block<
                dyn Fn(NonNull<UITraitCollection>) -> NonNull<UIColor>,
            >,
        ) -> Retained<UIColor>;

        #[cfg(all(feature = "UITraitCollection", feature = "block2"))]
        #[method_id(initWithDynamicProvider:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDynamicProvider(
            this: Allocated<Self>,
            dynamic_provider: &block2::Block<
                dyn Fn(NonNull<UITraitCollection>) -> NonNull<UIColor>,
            >,
        ) -> Retained<UIColor>;

        #[cfg(feature = "UITraitCollection")]
        #[method_id(resolvedColorWithTraitCollection:)]
        #[unsafe(method_family = none)]
        pub unsafe fn resolvedColorWithTraitCollection(
            &self,
            trait_collection: &UITraitCollection,
        ) -> Retained<UIColor>;
    }
);

extern_methods!(
    /// ProminenceSupport
    unsafe impl UIColor {
        #[method_id(colorWithProminence:)]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithProminence(
            &self,
            prominence: UIColorProminence,
        ) -> Retained<UIColor>;

        #[method(prominence)]
        pub unsafe fn prominence(&self) -> UIColorProminence;
    }
);
