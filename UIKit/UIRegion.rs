//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uiregion?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIRegion;
);

unsafe impl NSCoding for UIRegion {}

unsafe impl NSCopying for UIRegion {}

unsafe impl CopyingHelper for UIRegion {
    type Result = Self;
}

unsafe impl NSObjectProtocol for UIRegion {}

extern_methods!(
    unsafe impl UIRegion {
        /// A shared infinite region
        #[method_id(@__retain_semantics Other infiniteRegion)]
        pub unsafe fn infiniteRegion(mtm: MainThreadMarker) -> Retained<UIRegion>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Create a circular region with radius
        #[method_id(@__retain_semantics Init initWithRadius:)]
        pub unsafe fn initWithRadius(this: Allocated<Self>, radius: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Create a rectangular region of size.
        #[method_id(@__retain_semantics Init initWithSize:)]
        pub unsafe fn initWithSize(this: Allocated<Self>, size: CGSize) -> Retained<Self>;

        /// Create a new region that is the inverse of the current region.
        /// The inverse of the infiniteRegion is an empty region.
        /// Subclasses of UIRegion need to provide an implementation of inverseRegion.
        #[method_id(@__retain_semantics Other inverseRegion)]
        pub unsafe fn inverseRegion(&self) -> Retained<Self>;

        /// Create a new region that is the original region plus the supplied region
        #[method_id(@__retain_semantics Other regionByUnionWithRegion:)]
        pub unsafe fn regionByUnionWithRegion(&self, region: &UIRegion) -> Retained<Self>;

        /// Create a new region that is the original region minus the supplied region
        #[method_id(@__retain_semantics Other regionByDifferenceFromRegion:)]
        pub unsafe fn regionByDifferenceFromRegion(&self, region: &UIRegion) -> Retained<Self>;

        /// Create a new region that is the region covered by the original region and the supplied region
        #[method_id(@__retain_semantics Other regionByIntersectionWithRegion:)]
        pub unsafe fn regionByIntersectionWithRegion(&self, region: &UIRegion) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Test for containment
        #[method(containsPoint:)]
        pub unsafe fn containsPoint(&self, point: CGPoint) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl UIRegion {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
