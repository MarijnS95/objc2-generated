//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/hishape?language=objc)
#[repr(C)]
pub struct HIShape {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl HIShape {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__HIShape"> for HIShape {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/himutableshape?language=objc)
#[repr(C)]
pub struct HIMutableShape {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl HIMutableShape: HIShape {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__HIShape"> for HIMutableShape {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeenumerateinit?language=objc)
pub const kHIShapeEnumerateInit: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeenumeraterect?language=objc)
pub const kHIShapeEnumerateRect: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeenumerateterminate?language=objc)
pub const kHIShapeEnumerateTerminate: c_uint = 3;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefromtop?language=objc)
pub const kHIShapeParseFromTop: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefrombottom?language=objc)
pub const kHIShapeParseFromBottom: c_uint = 1 << 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefromleft?language=objc)
pub const kHIShapeParseFromLeft: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefromright?language=objc)
pub const kHIShapeParseFromRight: c_uint = 1 << 1;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefromtopleft?language=objc)
pub const kHIShapeParseFromTopLeft: c_uint = kHIShapeParseFromTop | kHIShapeParseFromLeft;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/khishapeparsefrombottomright?language=objc)
pub const kHIShapeParseFromBottomRight: c_uint = kHIShapeParseFromBottom | kHIShapeParseFromRight;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/hishapeenumerateprocptr?language=objc)
pub type HIShapeEnumerateProcPtr = Option<
    unsafe extern "C-unwind" fn(c_int, *const HIShape, *const CGRect, *mut c_void) -> OSStatus,
>;

unsafe impl ConcreteType for HIShape {
    #[doc(alias = "HIShapeGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn HIShapeGetTypeID() -> CFTypeID;
        }
        unsafe { HIShapeGetTypeID() }
    }
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateEmpty() -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateEmpty() -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateEmpty() };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateWithRect(
    in_rect: *const CGRect,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateWithRect(in_rect: *const CGRect) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateWithRect(in_rect) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateCopy(
    in_shape: &HIShape,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateCopy(in_shape: &HIShape) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateCopy(in_shape) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateIntersection(
    in_shape1: &HIShape,
    in_shape2: Option<&HIShape>,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateIntersection(
            in_shape1: &HIShape,
            in_shape2: Option<&HIShape>,
        ) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateIntersection(in_shape1, in_shape2) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateDifference(
    in_shape1: &HIShape,
    in_shape2: Option<&HIShape>,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateDifference(
            in_shape1: &HIShape,
            in_shape2: Option<&HIShape>,
        ) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateDifference(in_shape1, in_shape2) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateUnion(
    in_shape1: &HIShape,
    in_shape2: Option<&HIShape>,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateUnion(
            in_shape1: &HIShape,
            in_shape2: Option<&HIShape>,
        ) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateUnion(in_shape1, in_shape2) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateXor(
    in_shape1: &HIShape,
    in_shape2: Option<&HIShape>,
) -> Option<CFRetained<HIShape>> {
    extern "C-unwind" {
        fn HIShapeCreateXor(
            in_shape1: &HIShape,
            in_shape2: Option<&HIShape>,
        ) -> Option<NonNull<HIShape>>;
    }
    let ret = unsafe { HIShapeCreateXor(in_shape1, in_shape2) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeIsEmpty(in_shape: &HIShape) -> bool {
    extern "C-unwind" {
        fn HIShapeIsEmpty(in_shape: &HIShape) -> Boolean;
    }
    let ret = unsafe { HIShapeIsEmpty(in_shape) };
    ret != 0
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeIsRectangular(in_shape: &HIShape) -> bool {
    extern "C-unwind" {
        fn HIShapeIsRectangular(in_shape: &HIShape) -> Boolean;
    }
    let ret = unsafe { HIShapeIsRectangular(in_shape) };
    ret != 0
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeContainsPoint(
    in_shape: &HIShape,
    in_point: *const CGPoint,
) -> bool {
    extern "C-unwind" {
        fn HIShapeContainsPoint(in_shape: &HIShape, in_point: *const CGPoint) -> Boolean;
    }
    let ret = unsafe { HIShapeContainsPoint(in_shape, in_point) };
    ret != 0
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeIntersectsRect(
    in_shape: &HIShape,
    in_rect: *const CGRect,
) -> bool {
    extern "C-unwind" {
        fn HIShapeIntersectsRect(in_shape: &HIShape, in_rect: *const CGRect) -> Boolean;
    }
    let ret = unsafe { HIShapeIntersectsRect(in_shape, in_rect) };
    ret != 0
}

extern "C-unwind" {
    pub fn HIShapeGetBounds(in_shape: &HIShape, out_rect: *mut CGRect) -> *mut CGRect;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    pub fn HIShapeReplacePathInCGContext(
        in_shape: &HIShape,
        in_context: Option<&CGContext>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeEnumerate(
        in_shape: &HIShape,
        in_options: OptionBits,
        in_proc: HIShapeEnumerateProcPtr,
        in_refcon: *mut c_void,
    ) -> OSStatus;
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateMutable() -> Option<CFRetained<HIMutableShape>> {
    extern "C-unwind" {
        fn HIShapeCreateMutable() -> Option<NonNull<HIMutableShape>>;
    }
    let ret = unsafe { HIShapeCreateMutable() };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateMutableCopy(
    in_orig: &HIShape,
) -> Option<CFRetained<HIMutableShape>> {
    extern "C-unwind" {
        fn HIShapeCreateMutableCopy(in_orig: &HIShape) -> Option<NonNull<HIMutableShape>>;
    }
    let ret = unsafe { HIShapeCreateMutableCopy(in_orig) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn HIShapeCreateMutableWithRect(
    in_rect: *const CGRect,
) -> Option<CFRetained<HIMutableShape>> {
    extern "C-unwind" {
        fn HIShapeCreateMutableWithRect(in_rect: *const CGRect) -> Option<NonNull<HIMutableShape>>;
    }
    let ret = unsafe { HIShapeCreateMutableWithRect(in_rect) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn HIShapeSetEmpty(in_shape: Option<&HIMutableShape>) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeSetWithShape(
        in_dest_shape: Option<&HIMutableShape>,
        in_src_shape: Option<&HIShape>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeIntersect(
        in_shape1: &HIShape,
        in_shape2: Option<&HIShape>,
        out_result: Option<&HIMutableShape>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeDifference(
        in_shape1: &HIShape,
        in_shape2: Option<&HIShape>,
        out_result: Option<&HIMutableShape>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeUnion(
        in_shape1: &HIShape,
        in_shape2: Option<&HIShape>,
        out_result: Option<&HIMutableShape>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeXor(
        in_shape1: &HIShape,
        in_shape2: Option<&HIShape>,
        out_result: Option<&HIMutableShape>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeOffset(
        in_shape: Option<&HIMutableShape>,
        in_dx: CGFloat,
        in_dy: CGFloat,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeInset(
        in_shape: Option<&HIMutableShape>,
        in_dx: CGFloat,
        in_dy: CGFloat,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn HIShapeUnionWithRect(
        in_shape: Option<&HIMutableShape>,
        in_rect: *const CGRect,
    ) -> OSStatus;
}
