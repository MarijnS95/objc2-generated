//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboard?language=objc)
#[repr(C)]
pub struct Pasteboard {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl Pasteboard {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"OpaquePasteboardRef"> for Pasteboard {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboarditemid?language=objc)
pub type PasteboardItemID = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/badpasteboardsyncerr?language=objc)
pub const badPasteboardSyncErr: c_int = -25130;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/badpasteboardindexerr?language=objc)
pub const badPasteboardIndexErr: c_int = -25131;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/badpasteboarditemerr?language=objc)
pub const badPasteboardItemErr: c_int = -25132;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/badpasteboardflavorerr?language=objc)
pub const badPasteboardFlavorErr: c_int = -25133;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/duplicatepasteboardflavorerr?language=objc)
pub const duplicatePasteboardFlavorErr: c_int = -25134;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/notpasteboardownererr?language=objc)
pub const notPasteboardOwnerErr: c_int = -25135;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/nopasteboardpromisekeepererr?language=objc)
pub const noPasteboardPromiseKeeperErr: c_int = -25136;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboardsyncflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PasteboardSyncFlags(pub OptionBits);
bitflags::bitflags! {
    impl PasteboardSyncFlags: OptionBits {
        #[doc(alias = "kPasteboardModified")]
        const Modified = 1<<0;
        #[doc(alias = "kPasteboardClientIsOwner")]
        const ClientIsOwner = 1<<1;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for PasteboardSyncFlags {
    const ENCODING: Encoding = OptionBits::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for PasteboardSyncFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboardflavorflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PasteboardFlavorFlags(pub OptionBits);
bitflags::bitflags! {
    impl PasteboardFlavorFlags: OptionBits {
        #[doc(alias = "kPasteboardFlavorNoFlags")]
        const NoFlags = 0;
        #[doc(alias = "kPasteboardFlavorSenderOnly")]
        const SenderOnly = 1<<0;
        #[doc(alias = "kPasteboardFlavorSenderTranslated")]
        const SenderTranslated = 1<<1;
        #[doc(alias = "kPasteboardFlavorNotSaved")]
        const NotSaved = 1<<2;
        #[doc(alias = "kPasteboardFlavorRequestOnly")]
        const RequestOnly = 1<<3;
        #[doc(alias = "kPasteboardFlavorSystemTranslated")]
        const SystemTranslated = 1<<8;
        #[doc(alias = "kPasteboardFlavorPromised")]
        const Promised = 1<<9;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for PasteboardFlavorFlags {
    const ENCODING: Encoding = OptionBits::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for PasteboardFlavorFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboardstandardlocation?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PasteboardStandardLocation(pub OSType);
impl PasteboardStandardLocation {
    #[doc(alias = "kPasteboardStandardLocationTrash")]
    pub const Trash: Self = Self(0x74727368);
    #[doc(alias = "kPasteboardStandardLocationUnknown")]
    pub const Unknown: Self = Self(0x756e6b6e);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for PasteboardStandardLocation {
    const ENCODING: Encoding = OSType::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for PasteboardStandardLocation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

unsafe impl ConcreteType for Pasteboard {
    #[doc(alias = "PasteboardGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn PasteboardGetTypeID() -> CFTypeID;
        }
        unsafe { PasteboardGetTypeID() }
    }
}

extern "C-unwind" {
    pub fn PasteboardCreate(
        in_name: Option<&CFString>,
        out_pasteboard: NonNull<*mut Pasteboard>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardSynchronize(in_pasteboard: &Pasteboard) -> PasteboardSyncFlags;
}

extern "C-unwind" {
    pub fn PasteboardClear(in_pasteboard: &Pasteboard) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardCopyName(
        in_pasteboard: &Pasteboard,
        out_name: NonNull<*const CFString>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardGetItemCount(
        in_pasteboard: &Pasteboard,
        out_item_count: NonNull<ItemCount>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardGetItemIdentifier(
        in_pasteboard: &Pasteboard,
        in_index: CFIndex,
        out_item: NonNull<PasteboardItemID>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardCopyItemFlavors(
        in_pasteboard: &Pasteboard,
        in_item: PasteboardItemID,
        out_flavor_types: NonNull<*const CFArray>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardGetItemFlavorFlags(
        in_pasteboard: &Pasteboard,
        in_item: PasteboardItemID,
        in_flavor_type: &CFString,
        out_flags: NonNull<PasteboardFlavorFlags>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardCopyItemFlavorData(
        in_pasteboard: &Pasteboard,
        in_item: PasteboardItemID,
        in_flavor_type: &CFString,
        out_data: NonNull<*const CFData>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardPutItemFlavor(
        in_pasteboard: &Pasteboard,
        in_item: PasteboardItemID,
        in_flavor_type: &CFString,
        in_data: Option<&CFData>,
        in_flags: PasteboardFlavorFlags,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardCopyPasteLocation(
        in_pasteboard: &Pasteboard,
        out_paste_location: NonNull<*const CFURL>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardSetPasteLocation(
        in_pasteboard: &Pasteboard,
        in_paste_location: &CFURL,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/pasteboardpromisekeeperprocptr?language=objc)
pub type PasteboardPromiseKeeperProcPtr = Option<
    unsafe extern "C-unwind" fn(
        NonNull<Pasteboard>,
        PasteboardItemID,
        NonNull<CFString>,
        *mut c_void,
    ) -> OSStatus,
>;

extern "C-unwind" {
    pub fn PasteboardSetPromiseKeeper(
        in_pasteboard: &Pasteboard,
        in_promise_keeper: PasteboardPromiseKeeperProcPtr,
        in_context: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn PasteboardResolvePromises(in_pasteboard: &Pasteboard) -> OSStatus;
}
