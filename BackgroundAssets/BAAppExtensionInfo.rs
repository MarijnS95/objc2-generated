//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/backgroundassets/baappextensioninfo?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BAAppExtensionInfo;
);

unsafe impl Send for BAAppExtensionInfo {}

unsafe impl Sync for BAAppExtensionInfo {}

extern_conformance!(
    unsafe impl NSCoding for BAAppExtensionInfo {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for BAAppExtensionInfo {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for BAAppExtensionInfo {}
);

impl BAAppExtensionInfo {
    extern_methods!(
        /// The number of bytes remaining that can be scheduled if the total download size is restricted.
        ///
        /// When a download is restricted, your extension can only schedule up to its `BADownloadAllowance`
        /// defined in your app's `Info.plist`. This result tells you the number of bytes remaining that can be scheduled
        /// before the application is launched. Once the application is launched, this restriction is removed.
        ///
        /// Returns: The result is `nil` if downloads are not restricted. It returns a valid number with the remaining available download size otherwise.
        #[unsafe(method(restrictedDownloadSizeRemaining))]
        #[unsafe(method_family = none)]
        pub unsafe fn restrictedDownloadSizeRemaining(&self) -> Option<Retained<NSNumber>>;

        /// The number of bytes remaining that can be scheduled if the total download size of optional assets is restricted.
        ///
        /// When a download is restricted, your extension can only schedule up to its `BAEssentialDownloadAllowance`
        /// defined in your app's `Info.plist`. This result tells you the number of bytes remaining that can be scheduled
        /// before the application is launched. Once the application is launched, this restriction is removed.
        ///
        /// Returns: The result is `nil` if downloads are not restricted. It returns a valid number with the remaining available download size otherwise.
        #[unsafe(method(restrictedEssentialDownloadSizeRemaining))]
        #[unsafe(method_family = none)]
        pub unsafe fn restrictedEssentialDownloadSizeRemaining(&self)
            -> Option<Retained<NSNumber>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
