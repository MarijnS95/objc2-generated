//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsprotocolhandler?language=objc)
#[repr(C)]
pub struct WSProtocolHandler {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl WSProtocolHandler {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"OpaqueWSProtocolHandlerRef"> for WSProtocolHandler {}
);

unsafe impl ConcreteType for WSProtocolHandler {
    #[doc(alias = "WSProtocolHandlerGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn WSProtocolHandlerGetTypeID() -> CFTypeID;
        }
        unsafe { WSProtocolHandlerGetTypeID() }
    }
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCreate(
    allocator: Option<&CFAllocator>,
    protocol: Option<&CFString>,
) -> Option<CFRetained<WSProtocolHandler>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCreate(
            allocator: Option<&CFAllocator>,
            protocol: Option<&CFString>,
        ) -> Option<NonNull<WSProtocolHandler>>;
    }
    let ret = unsafe { WSProtocolHandlerCreate(allocator, protocol) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyRequestDictionary(
    r#ref: &WSProtocolHandler,
    data: Option<&CFData>,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyRequestDictionary(
            r#ref: &WSProtocolHandler,
            data: Option<&CFData>,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { WSProtocolHandlerCopyRequestDictionary(r#ref, data) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyReplyDictionary(
    r#ref: &WSProtocolHandler,
    method_name: Option<&CFString>,
    data: Option<&CFData>,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyReplyDictionary(
            r#ref: &WSProtocolHandler,
            method_name: Option<&CFString>,
            data: Option<&CFData>,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { WSProtocolHandlerCopyReplyDictionary(r#ref, method_name, data) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyReplyDocument(
    r#ref: &WSProtocolHandler,
    method_context: Option<&CFDictionary>,
    result_value: Option<&CFType>,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyReplyDocument(
            r#ref: &WSProtocolHandler,
            method_context: Option<&CFDictionary>,
            result_value: Option<&CFType>,
        ) -> Option<NonNull<CFData>>;
    }
    let ret = unsafe { WSProtocolHandlerCopyReplyDocument(r#ref, method_context, result_value) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyFaultDocument(
    r#ref: &WSProtocolHandler,
    method_context: Option<&CFDictionary>,
    fault_dict: Option<&CFDictionary>,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyFaultDocument(
            r#ref: &WSProtocolHandler,
            method_context: Option<&CFDictionary>,
            fault_dict: Option<&CFDictionary>,
        ) -> Option<NonNull<CFData>>;
    }
    let ret = unsafe { WSProtocolHandlerCopyFaultDocument(r#ref, method_context, fault_dict) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyRequestDocument(
    r#ref: &WSProtocolHandler,
    method_name: Option<&CFString>,
    method_params: Option<&CFDictionary>,
    method_param_order: Option<&CFArray>,
    method_extras: Option<&CFDictionary>,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyRequestDocument(
            r#ref: &WSProtocolHandler,
            method_name: Option<&CFString>,
            method_params: Option<&CFDictionary>,
            method_param_order: Option<&CFArray>,
            method_extras: Option<&CFDictionary>,
        ) -> Option<NonNull<CFData>>;
    }
    let ret = unsafe {
        WSProtocolHandlerCopyRequestDocument(
            r#ref,
            method_name,
            method_params,
            method_param_order,
            method_extras,
        )
    };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSProtocolHandlerCopyProperty(
    r#ref: &WSProtocolHandler,
    property_name: Option<&CFString>,
) -> Option<CFRetained<CFType>> {
    extern "C-unwind" {
        fn WSProtocolHandlerCopyProperty(
            r#ref: &WSProtocolHandler,
            property_name: Option<&CFString>,
        ) -> Option<NonNull<CFType>>;
    }
    let ret = unsafe { WSProtocolHandlerCopyProperty(r#ref, property_name) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn WSProtocolHandlerSetProperty(
        r#ref: &WSProtocolHandler,
        property_name: Option<&CFString>,
        property_value: Option<&CFType>,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsprotocolhandlerserializationprocptr?language=objc)
pub type WSProtocolHandlerSerializationProcPtr = Option<
    unsafe extern "C-unwind" fn(
        *mut WSProtocolHandler,
        *const CFType,
        *mut c_void,
    ) -> *const CFString,
>;

extern "C-unwind" {
    #[cfg(feature = "WSTypes")]
    #[deprecated = "No longer supported"]
    pub fn WSProtocolHandlerSetSerializationOverride(
        protocol: &WSProtocolHandler,
        obj_type: CFTypeID,
        serialization_proc: WSProtocolHandlerSerializationProcPtr,
        context: *mut WSClientContext,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsprotocolhandlerdeserializationprocptr?language=objc)
pub type WSProtocolHandlerDeserializationProcPtr = Option<
    unsafe extern "C-unwind" fn(
        *mut WSProtocolHandler,
        *mut CFXMLTree,
        *mut CFXMLTree,
        *mut c_void,
    ) -> *const CFType,
>;

extern "C-unwind" {
    #[cfg(feature = "WSTypes")]
    #[deprecated = "No longer supported"]
    pub fn WSProtocolHandlerSetDeserializationOverride(
        protocol: &WSProtocolHandler,
        type_namespace: Option<&CFString>,
        type_name: Option<&CFString>,
        deserialization_proc: WSProtocolHandlerDeserializationProcPtr,
        context: *mut WSClientContext,
    );
}
