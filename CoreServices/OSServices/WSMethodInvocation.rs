//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsmethodinvocationresult?language=objc)
    pub static kWSMethodInvocationResult: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsfaultstring?language=objc)
    pub static kWSFaultString: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsfaultcode?language=objc)
    pub static kWSFaultCode: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsfaultextra?language=objc)
    pub static kWSFaultExtra: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsnetworkstreamfaultstring?language=objc)
    pub static kWSNetworkStreamFaultString: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsstreamerrormessage?language=objc)
    pub static kWSStreamErrorMessage: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsstreamerrordomain?language=objc)
    pub static kWSStreamErrorDomain: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsstreamerrorerror?language=objc)
    pub static kWSStreamErrorError: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpmessage?language=objc)
    pub static kWSHTTPMessage: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpresponsemessage?language=objc)
    pub static kWSHTTPResponseMessage: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpextraheaders?language=objc)
    pub static kWSHTTPExtraHeaders: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpversion?language=objc)
    pub static kWSHTTPVersion: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpproxy?language=objc)
    pub static kWSHTTPProxy: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwshttpfollowsredirects?language=objc)
    pub static kWSHTTPFollowsRedirects: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsdebugoutgoingheaders?language=objc)
    pub static kWSDebugOutgoingHeaders: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsdebugoutgoingbody?language=objc)
    pub static kWSDebugOutgoingBody: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsdebugincomingheaders?language=objc)
    pub static kWSDebugIncomingHeaders: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsdebugincomingbody?language=objc)
    pub static kWSDebugIncomingBody: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwssoapbodyencodingstyle?language=objc)
    pub static kWSSOAPBodyEncodingStyle: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwssoapmethodnamespaceuri?language=objc)
    pub static kWSSOAPMethodNamespaceURI: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwssoapstyledoc?language=objc)
    pub static kWSSOAPStyleDoc: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwssoapstylerpc?language=objc)
    pub static kWSSOAPStyleRPC: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwssoapmessageheaders?language=objc)
    pub static kWSSOAPMessageHeaders: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsrecordparameterorder?language=objc)
    pub static kWSRecordParameterOrder: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsrecordnamespaceuri?language=objc)
    pub static kWSRecordNamespaceURI: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsrecordtype?language=objc)
    pub static kWSRecordType: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsmethodinvocationresultparametername?language=objc)
    pub static kWSMethodInvocationResultParameterName: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kwsmethodinvocationtimeoutvalue?language=objc)
    pub static kWSMethodInvocationTimeoutValue: Option<&'static CFString>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsmethodinvocation?language=objc)
#[repr(C)]
pub struct WSMethodInvocation {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "OpaqueWSMethodInvocationRef"]
    unsafe impl WSMethodInvocation {}
);

unsafe impl ConcreteType for WSMethodInvocation {
    #[doc(alias = "WSMethodInvocationGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn WSMethodInvocationGetTypeID() -> CFTypeID;
        }
        unsafe { WSMethodInvocationGetTypeID() }
    }
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationCreate(
    url: Option<&CFURL>,
    method_name: Option<&CFString>,
    protocol: Option<&CFString>,
) -> Option<CFRetained<WSMethodInvocation>> {
    extern "C-unwind" {
        fn WSMethodInvocationCreate(
            url: Option<&CFURL>,
            method_name: Option<&CFString>,
            protocol: Option<&CFString>,
        ) -> Option<NonNull<WSMethodInvocation>>;
    }
    let ret = unsafe { WSMethodInvocationCreate(url, method_name, protocol) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationCreateFromSerialization(
    contract: Option<&CFData>,
) -> Option<CFRetained<WSMethodInvocation>> {
    extern "C-unwind" {
        fn WSMethodInvocationCreateFromSerialization(
            contract: Option<&CFData>,
        ) -> Option<NonNull<WSMethodInvocation>>;
    }
    let ret = unsafe { WSMethodInvocationCreateFromSerialization(contract) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationCopySerialization(
    invocation: &WSMethodInvocation,
) -> Option<CFRetained<CFData>> {
    extern "C-unwind" {
        fn WSMethodInvocationCopySerialization(
            invocation: &WSMethodInvocation,
        ) -> Option<NonNull<CFData>>;
    }
    let ret = unsafe { WSMethodInvocationCopySerialization(invocation) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationSetParameters(
        invocation: &WSMethodInvocation,
        parameters: Option<&CFDictionary>,
        parameter_order: Option<&CFArray>,
    );
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationCopyParameters(
    invocation: &WSMethodInvocation,
    parameter_order: *mut *const CFArray,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn WSMethodInvocationCopyParameters(
            invocation: &WSMethodInvocation,
            parameter_order: *mut *const CFArray,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { WSMethodInvocationCopyParameters(invocation, parameter_order) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationSetProperty(
        invocation: &WSMethodInvocation,
        property_name: Option<&CFString>,
        property_value: Option<&CFType>,
    );
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationCopyProperty(
    invocation: &WSMethodInvocation,
    property_name: Option<&CFString>,
) -> Option<CFRetained<CFType>> {
    extern "C-unwind" {
        fn WSMethodInvocationCopyProperty(
            invocation: &WSMethodInvocation,
            property_name: Option<&CFString>,
        ) -> Option<NonNull<CFType>>;
    }
    let ret = unsafe { WSMethodInvocationCopyProperty(invocation, property_name) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodInvocationInvoke(
    invocation: &WSMethodInvocation,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn WSMethodInvocationInvoke(
            invocation: &WSMethodInvocation,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { WSMethodInvocationInvoke(invocation) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsmethodinvocationcallbackprocptr?language=objc)
pub type WSMethodInvocationCallBackProcPtr =
    Option<unsafe extern "C-unwind" fn(*mut WSMethodInvocation, *mut c_void, *const CFDictionary)>;

extern "C-unwind" {
    #[cfg(feature = "WSTypes")]
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationSetCallBack(
        invocation: &WSMethodInvocation,
        client_cb: WSMethodInvocationCallBackProcPtr,
        context: *mut WSClientContext,
    );
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationScheduleWithRunLoop(
        invocation: &WSMethodInvocation,
        run_loop: Option<&CFRunLoop>,
        run_loop_mode: Option<&CFString>,
    );
}

extern "C-unwind" {
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationUnscheduleFromRunLoop(
        invocation: &WSMethodInvocation,
        run_loop: Option<&CFRunLoop>,
        run_loop_mode: Option<&CFString>,
    );
}

#[deprecated = "No longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn WSMethodResultIsFault(
    method_result: Option<&CFDictionary>,
) -> bool {
    extern "C-unwind" {
        fn WSMethodResultIsFault(method_result: Option<&CFDictionary>) -> Boolean;
    }
    let ret = unsafe { WSMethodResultIsFault(method_result) };
    ret != 0
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsmethodinvocationserializationprocptr?language=objc)
pub type WSMethodInvocationSerializationProcPtr = Option<
    unsafe extern "C-unwind" fn(
        *mut WSMethodInvocation,
        *const CFType,
        *mut c_void,
    ) -> *const CFString,
>;

extern "C-unwind" {
    #[cfg(feature = "WSTypes")]
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationAddSerializationOverride(
        invocation: &WSMethodInvocation,
        obj_type: CFTypeID,
        serialization_proc: WSMethodInvocationSerializationProcPtr,
        context: *mut WSClientContext,
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/wsmethodinvocationdeserializationprocptr?language=objc)
pub type WSMethodInvocationDeserializationProcPtr = Option<
    unsafe extern "C-unwind" fn(
        *mut WSMethodInvocation,
        *mut CFXMLTree,
        *mut CFXMLTree,
        *mut c_void,
    ) -> *const CFType,
>;

extern "C-unwind" {
    #[cfg(feature = "WSTypes")]
    #[deprecated = "No longer supported"]
    pub fn WSMethodInvocationAddDeserializationOverride(
        invocation: &WSMethodInvocation,
        type_namespace: Option<&CFString>,
        type_name: Option<&CFString>,
        deserialization_proc: WSMethodInvocationDeserializationProcPtr,
        context: *mut WSClientContext,
    );
}
