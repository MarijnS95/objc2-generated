//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "CSIdentity")]
#[path = "CSIdentity.rs"]
mod __CSIdentity;
#[cfg(feature = "CSIdentityAuthority")]
#[path = "CSIdentityAuthority.rs"]
mod __CSIdentityAuthority;
#[cfg(feature = "CSIdentityBase")]
#[path = "CSIdentityBase.rs"]
mod __CSIdentityBase;
#[cfg(feature = "CSIdentityQuery")]
#[path = "CSIdentityQuery.rs"]
mod __CSIdentityQuery;
#[cfg(feature = "IconStorage")]
#[path = "IconStorage.rs"]
mod __IconStorage;
#[cfg(feature = "SecurityCore")]
#[path = "SecurityCore.rs"]
mod __SecurityCore;
#[cfg(feature = "WSMethodInvocation")]
#[path = "WSMethodInvocation.rs"]
mod __WSMethodInvocation;
#[cfg(feature = "WSProtocolHandler")]
#[path = "WSProtocolHandler.rs"]
mod __WSProtocolHandler;
#[cfg(feature = "WSTypes")]
#[path = "WSTypes.rs"]
mod __WSTypes;

#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityClassGroup;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityClassUser;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityCommitCompleted;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityFlagHidden;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityFlagNone;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::kCSIdentityGeneratePosixName;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentity;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityAddAlias;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityAddMember;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityAuthenticateUsingPassword;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityClass;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityClientContext;
#[cfg(all(feature = "CSIdentity", feature = "objc2-security"))]
pub use self::__CSIdentity::CSIdentityCommit;
#[cfg(all(feature = "CSIdentity", feature = "objc2-security"))]
pub use self::__CSIdentity::CSIdentityCommitAsynchronously;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityAuthority"))]
pub use self::__CSIdentity::CSIdentityCreate;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityCreateCopy;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityCreateGroupMembershipQuery;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityCreatePersistentReference;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityDelete;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityFlags;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetAliases;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityAuthority"))]
pub use self::__CSIdentity::CSIdentityGetAuthority;
#[cfg(all(feature = "CSIdentity", feature = "objc2-security"))]
pub use self::__CSIdentity::CSIdentityGetCertificate;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetClass;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetEmailAddress;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetFullName;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetImageData;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetImageDataType;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetImageURL;
#[cfg(all(feature = "CSIdentity", feature = "libc"))]
pub use self::__CSIdentity::CSIdentityGetPosixID;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetPosixName;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityGetUUID;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityIsCommitting;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityIsEnabled;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityIsHidden;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityIsMemberOfGroup;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityQuery;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityRemoveAlias;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityRemoveClient;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityRemoveMember;
#[cfg(all(feature = "CSIdentity", feature = "objc2-security"))]
pub use self::__CSIdentity::CSIdentitySetCertificate;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetEmailAddress;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetFullName;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetImageData;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetImageURL;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetIsEnabled;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentitySetPassword;
#[cfg(feature = "CSIdentity")]
pub use self::__CSIdentity::CSIdentityStatusUpdatedCallback;
#[cfg(feature = "CSIdentityAuthority")]
pub use self::__CSIdentityAuthority::CSGetDefaultIdentityAuthority;
#[cfg(feature = "CSIdentityAuthority")]
pub use self::__CSIdentityAuthority::CSGetLocalIdentityAuthority;
#[cfg(feature = "CSIdentityAuthority")]
pub use self::__CSIdentityAuthority::CSGetManagedIdentityAuthority;
#[cfg(feature = "CSIdentityAuthority")]
pub use self::__CSIdentityAuthority::CSIdentityAuthority;
#[cfg(feature = "CSIdentityAuthority")]
pub use self::__CSIdentityAuthority::CSIdentityAuthorityCopyLocalizedName;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityAuthorityNotAccessibleErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityDeletedErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityDuplicateFullNameErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityDuplicatePosixNameErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityErrorDomain;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityInvalidFullNameErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityInvalidPosixNameErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityPermissionErr;
#[cfg(feature = "CSIdentityBase")]
pub use self::__CSIdentityBase::kCSIdentityUnknownAuthorityErr;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryEventErrorOccurred;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryEventResultsAdded;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryEventResultsChanged;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryEventResultsRemoved;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryEventSearchPhaseFinished;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryGenerateUpdateEvents;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryIncludeHiddenIdentities;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryStringBeginsWith;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::kCSIdentityQueryStringEquals;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryClientContext;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryCopyResults;
#[cfg(all(
    feature = "CSIdentity",
    feature = "CSIdentityAuthority",
    feature = "CSIdentityQuery"
))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreate;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreateForCurrentUser;
#[cfg(all(
    feature = "CSIdentity",
    feature = "CSIdentityAuthority",
    feature = "CSIdentityQuery"
))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreateForName;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreateForPersistentReference;
#[cfg(all(
    feature = "CSIdentity",
    feature = "CSIdentityAuthority",
    feature = "CSIdentityQuery",
    feature = "libc"
))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreateForPosixID;
#[cfg(all(
    feature = "CSIdentity",
    feature = "CSIdentityAuthority",
    feature = "CSIdentityQuery"
))]
pub use self::__CSIdentityQuery::CSIdentityQueryCreateForUUID;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::CSIdentityQueryEvent;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryExecute;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryExecuteAsynchronously;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::CSIdentityQueryFlags;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryReceiveEventCallback;
#[cfg(all(feature = "CSIdentity", feature = "CSIdentityQuery"))]
pub use self::__CSIdentityQuery::CSIdentityQueryStop;
#[cfg(feature = "CSIdentityQuery")]
pub use self::__CSIdentityQuery::CSIdentityQueryStringComparisonMethod;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kDropIconVariant;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kHuge1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kHuge32BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kHuge4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kHuge8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kHuge8BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconFamilyType;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices1024PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices128PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices16PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices256PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices32PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices48PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kIconServices512PixelDataARGB;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kLarge1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kLarge32BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kLarge4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kLarge8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kLarge8BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kMini1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kMini4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kMini8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kOpenDropIconVariant;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kOpenIconVariant;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kRolloverIconVariant;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kSmall1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kSmall32BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kSmall4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kSmall8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kSmall8BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kThumbnail32BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kThumbnail8BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::kTileIconVariant;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::large1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::large4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::large8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::mini1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::mini4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::mini8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::small1BitMask;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::small4BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::small8BitData;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::IconFamilyElement;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::IconFamilyHandle;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::IconFamilyPtr;
#[cfg(feature = "IconStorage")]
pub use self::__IconStorage::IconFamilyResource;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSDebugIncomingBody;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSDebugIncomingHeaders;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSDebugOutgoingBody;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSDebugOutgoingHeaders;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSFaultCode;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSFaultExtra;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSFaultString;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPExtraHeaders;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPFollowsRedirects;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPMessage;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPProxy;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPResponseMessage;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSHTTPVersion;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSMethodInvocationResult;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSMethodInvocationResultParameterName;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSMethodInvocationTimeoutValue;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSNetworkStreamFaultString;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSRecordNamespaceURI;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSRecordParameterOrder;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSRecordType;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSSOAPBodyEncodingStyle;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSSOAPMessageHeaders;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSSOAPMethodNamespaceURI;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSSOAPStyleDoc;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSSOAPStyleRPC;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSStreamErrorDomain;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSStreamErrorError;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::kWSStreamErrorMessage;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocation;
#[cfg(all(feature = "WSMethodInvocation", feature = "WSTypes"))]
pub use self::__WSMethodInvocation::WSMethodInvocationAddDeserializationOverride;
#[cfg(all(feature = "WSMethodInvocation", feature = "WSTypes"))]
pub use self::__WSMethodInvocation::WSMethodInvocationAddSerializationOverride;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCallBackProcPtr;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCopyParameters;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCopyProperty;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCopySerialization;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCreate;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationCreateFromSerialization;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationDeserializationProcPtr;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationInvoke;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationScheduleWithRunLoop;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationSerializationProcPtr;
#[cfg(all(feature = "WSMethodInvocation", feature = "WSTypes"))]
pub use self::__WSMethodInvocation::WSMethodInvocationSetCallBack;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationSetParameters;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationSetProperty;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodInvocationUnscheduleFromRunLoop;
#[cfg(feature = "WSMethodInvocation")]
pub use self::__WSMethodInvocation::WSMethodResultIsFault;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandler;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyFaultDocument;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyProperty;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyReplyDictionary;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyReplyDocument;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyRequestDictionary;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCopyRequestDocument;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerCreate;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerDeserializationProcPtr;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerSerializationProcPtr;
#[cfg(all(feature = "WSProtocolHandler", feature = "WSTypes"))]
pub use self::__WSProtocolHandler::WSProtocolHandlerSetDeserializationOverride;
#[cfg(feature = "WSProtocolHandler")]
pub use self::__WSProtocolHandler::WSProtocolHandlerSetProperty;
#[cfg(all(feature = "WSProtocolHandler", feature = "WSTypes"))]
pub use self::__WSProtocolHandler::WSProtocolHandlerSetSerializationOverride;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::errWSInternalError;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::errWSParseError;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::errWSTimeoutError;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::errWSTransportError;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::kWSSOAP1999Protocol;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::kWSSOAP2001Protocol;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::kWSXMLRPCProtocol;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSClientContext;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSClientContextCopyDescriptionCallBackProcPtr;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSClientContextReleaseCallBackProcPtr;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSClientContextRetainCallBackProcPtr;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSGetCFTypeIDFromWSTypeID;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSGetWSTypeIDFromCFType;
#[cfg(feature = "WSTypes")]
pub use self::__WSTypes::WSTypeID;
