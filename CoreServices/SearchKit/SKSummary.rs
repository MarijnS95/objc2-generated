//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coreservices/sksummary?language=objc)
#[repr(C)]
pub struct SKSummary {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    #[encoding_name = "__SKSummary"]
    unsafe impl SKSummary {}
);

unsafe impl ConcreteType for SKSummary {
    #[doc(alias = "SKSummaryGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn SKSummaryGetTypeID() -> CFTypeID;
        }
        unsafe { SKSummaryGetTypeID() }
    }
}

#[inline]
pub unsafe extern "C-unwind" fn SKSummaryCreateWithString(
    in_string: Option<&CFString>,
) -> Option<CFRetained<SKSummary>> {
    extern "C-unwind" {
        fn SKSummaryCreateWithString(in_string: Option<&CFString>) -> Option<NonNull<SKSummary>>;
    }
    let ret = unsafe { SKSummaryCreateWithString(in_string) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn SKSummaryGetSentenceCount(summary: &SKSummary) -> CFIndex;
}

extern "C-unwind" {
    pub fn SKSummaryGetParagraphCount(summary: &SKSummary) -> CFIndex;
}

#[inline]
pub unsafe extern "C-unwind" fn SKSummaryCopySentenceAtIndex(
    summary: &SKSummary,
    i: CFIndex,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SKSummaryCopySentenceAtIndex(
            summary: &SKSummary,
            i: CFIndex,
        ) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { SKSummaryCopySentenceAtIndex(summary, i) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn SKSummaryCopyParagraphAtIndex(
    summary: &SKSummary,
    i: CFIndex,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SKSummaryCopyParagraphAtIndex(
            summary: &SKSummary,
            i: CFIndex,
        ) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { SKSummaryCopyParagraphAtIndex(summary, i) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn SKSummaryCopySentenceSummaryString(
    summary: &SKSummary,
    num_sentences: CFIndex,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SKSummaryCopySentenceSummaryString(
            summary: &SKSummary,
            num_sentences: CFIndex,
        ) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { SKSummaryCopySentenceSummaryString(summary, num_sentences) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn SKSummaryCopyParagraphSummaryString(
    summary: &SKSummary,
    num_paragraphs: CFIndex,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn SKSummaryCopyParagraphSummaryString(
            summary: &SKSummary,
            num_paragraphs: CFIndex,
        ) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { SKSummaryCopyParagraphSummaryString(summary, num_paragraphs) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    pub fn SKSummaryGetSentenceSummaryInfo(
        summary: &SKSummary,
        num_sentences_in_summary: CFIndex,
        out_rank_order_of_sentences: *mut CFIndex,
        out_sentence_index_of_sentences: *mut CFIndex,
        out_paragraph_index_of_sentences: *mut CFIndex,
    ) -> CFIndex;
}

extern "C-unwind" {
    pub fn SKSummaryGetParagraphSummaryInfo(
        summary: &SKSummary,
        num_paragraphs_in_summary: CFIndex,
        out_rank_order_of_paragraphs: *mut CFIndex,
        out_paragraph_index_of_paragraphs: *mut CFIndex,
    ) -> CFIndex;
}
