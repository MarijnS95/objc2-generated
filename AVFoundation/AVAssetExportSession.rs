//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetlowquality?language=objc)
    pub static AVAssetExportPresetLowQuality: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetmediumquality?language=objc)
    pub static AVAssetExportPresetMediumQuality: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethighestquality?language=objc)
    pub static AVAssetExportPresetHighestQuality: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevchighestquality?language=objc)
    pub static AVAssetExportPresetHEVCHighestQuality: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevchighestqualitywithalpha?language=objc)
    pub static AVAssetExportPresetHEVCHighestQualityWithAlpha: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpreset640x480?language=objc)
    pub static AVAssetExportPreset640x480: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpreset960x540?language=objc)
    pub static AVAssetExportPreset960x540: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpreset1280x720?language=objc)
    pub static AVAssetExportPreset1280x720: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpreset1920x1080?language=objc)
    pub static AVAssetExportPreset1920x1080: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpreset3840x2160?language=objc)
    pub static AVAssetExportPreset3840x2160: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevc1920x1080?language=objc)
    pub static AVAssetExportPresetHEVC1920x1080: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevc1920x1080withalpha?language=objc)
    pub static AVAssetExportPresetHEVC1920x1080WithAlpha: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevc3840x2160?language=objc)
    pub static AVAssetExportPresetHEVC3840x2160: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevc3840x2160withalpha?language=objc)
    pub static AVAssetExportPresetHEVC3840x2160WithAlpha: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresethevc7680x4320?language=objc)
    pub static AVAssetExportPresetHEVC7680x4320: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetmvhevc960x960?language=objc)
    pub static AVAssetExportPresetMVHEVC960x960: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetmvhevc1440x1440?language=objc)
    pub static AVAssetExportPresetMVHEVC1440x1440: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4a?language=objc)
    pub static AVAssetExportPresetAppleM4A: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetpassthrough?language=objc)
    pub static AVAssetExportPresetPassthrough: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetappleprores422lpcm?language=objc)
    pub static AVAssetExportPresetAppleProRes422LPCM: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetappleprores4444lpcm?language=objc)
    pub static AVAssetExportPresetAppleProRes4444LPCM: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4vcellular?language=objc)
    pub static AVAssetExportPresetAppleM4VCellular: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4vipod?language=objc)
    pub static AVAssetExportPresetAppleM4ViPod: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4v480psd?language=objc)
    pub static AVAssetExportPresetAppleM4V480pSD: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4vappletv?language=objc)
    pub static AVAssetExportPresetAppleM4VAppleTV: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4vwifi?language=objc)
    pub static AVAssetExportPresetAppleM4VWiFi: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4v720phd?language=objc)
    pub static AVAssetExportPresetAppleM4V720pHD: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportpresetapplem4v1080phd?language=objc)
    pub static AVAssetExportPresetAppleM4V1080pHD: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportsessionstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVAssetExportSessionStatus(pub NSInteger);
impl AVAssetExportSessionStatus {
    #[doc(alias = "AVAssetExportSessionStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "AVAssetExportSessionStatusWaiting")]
    pub const Waiting: Self = Self(1);
    #[doc(alias = "AVAssetExportSessionStatusExporting")]
    pub const Exporting: Self = Self(2);
    #[doc(alias = "AVAssetExportSessionStatusCompleted")]
    pub const Completed: Self = Self(3);
    #[doc(alias = "AVAssetExportSessionStatusFailed")]
    pub const Failed: Self = Self(4);
    #[doc(alias = "AVAssetExportSessionStatusCancelled")]
    pub const Cancelled: Self = Self(5);
}

unsafe impl Encode for AVAssetExportSessionStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVAssetExportSessionStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassettrackgroupoutputhandling?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVAssetTrackGroupOutputHandling(pub NSUInteger);
bitflags::bitflags! {
    impl AVAssetTrackGroupOutputHandling: NSUInteger {
        #[doc(alias = "AVAssetTrackGroupOutputHandlingNone")]
        const None = 0;
        #[doc(alias = "AVAssetTrackGroupOutputHandlingPreserveAlternateTracks")]
        const PreserveAlternateTracks = 1<<0;
        #[doc(alias = "AVAssetTrackGroupOutputHandlingDefaultPolicy")]
        const DefaultPolicy = AVAssetTrackGroupOutputHandling::None.0;
    }
}

unsafe impl Encode for AVAssetTrackGroupOutputHandling {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVAssetTrackGroupOutputHandling {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetexportsession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetExportSession;
);

unsafe impl NSObjectProtocol for AVAssetExportSession {}

extern_methods!(
    unsafe impl AVAssetExportSession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other exportSessionWithAsset:presetName:)]
        pub unsafe fn exportSessionWithAsset_presetName(
            asset: &AVAsset,
            preset_name: &NSString,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Init initWithAsset:presetName:)]
        pub unsafe fn initWithAsset_presetName(
            this: Allocated<Self>,
            asset: &AVAsset,
            preset_name: &NSString,
        ) -> Option<Retained<Self>>;

        #[method_id(@__retain_semantics Other presetName)]
        pub unsafe fn presetName(&self) -> Retained<NSString>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other asset)]
        pub unsafe fn asset(&self) -> Retained<AVAsset>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other outputFileType)]
        pub unsafe fn outputFileType(&self) -> Option<Retained<AVFileType>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method(setOutputFileType:)]
        pub unsafe fn setOutputFileType(&self, output_file_type: Option<&AVFileType>);

        #[method_id(@__retain_semantics Other outputURL)]
        pub unsafe fn outputURL(&self) -> Option<Retained<NSURL>>;

        #[method(setOutputURL:)]
        pub unsafe fn setOutputURL(&self, output_url: Option<&NSURL>);

        #[method(shouldOptimizeForNetworkUse)]
        pub unsafe fn shouldOptimizeForNetworkUse(&self) -> bool;

        #[method(setShouldOptimizeForNetworkUse:)]
        pub unsafe fn setShouldOptimizeForNetworkUse(&self, should_optimize_for_network_use: bool);

        #[method(allowsParallelizedExport)]
        pub unsafe fn allowsParallelizedExport(&self) -> bool;

        #[method(setAllowsParallelizedExport:)]
        pub unsafe fn setAllowsParallelizedExport(&self, allows_parallelized_export: bool);

        #[method(status)]
        pub unsafe fn status(&self) -> AVAssetExportSessionStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[cfg(feature = "block2")]
        #[method(exportAsynchronouslyWithCompletionHandler:)]
        pub unsafe fn exportAsynchronouslyWithCompletionHandler(
            &self,
            handler: &block2::Block<dyn Fn()>,
        );

        #[method(progress)]
        pub unsafe fn progress(&self) -> c_float;

        #[method(cancelExport)]
        pub unsafe fn cancelExport(&self);
    }
);

extern_methods!(
    /// AVAssetExportSessionPresets
    unsafe impl AVAssetExportSession {
        #[method_id(@__retain_semantics Other allExportPresets)]
        pub unsafe fn allExportPresets() -> Retained<NSArray<NSString>>;

        #[cfg(feature = "AVAsset")]
        #[deprecated]
        #[method_id(@__retain_semantics Other exportPresetsCompatibleWithAsset:)]
        pub unsafe fn exportPresetsCompatibleWithAsset(
            asset: &AVAsset,
        ) -> Retained<NSArray<NSString>>;

        #[cfg(all(feature = "AVAsset", feature = "AVMediaFormat", feature = "block2"))]
        #[method(determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:)]
        pub unsafe fn determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler(
            preset_name: &NSString,
            asset: &AVAsset,
            output_file_type: Option<&AVFileType>,
            handler: &block2::Block<dyn Fn(Bool)>,
        );
    }
);

extern_methods!(
    /// AVAssetExportSessionFileTypes
    unsafe impl AVAssetExportSession {
        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other supportedFileTypes)]
        pub unsafe fn supportedFileTypes(&self) -> Retained<NSArray<AVFileType>>;

        #[cfg(all(feature = "AVMediaFormat", feature = "block2"))]
        #[method(determineCompatibleFileTypesWithCompletionHandler:)]
        pub unsafe fn determineCompatibleFileTypesWithCompletionHandler(
            &self,
            handler: &block2::Block<dyn Fn(NonNull<NSArray<AVFileType>>)>,
        );
    }
);

extern_methods!(
    /// AVAssetExportSessionDurationAndLength
    unsafe impl AVAssetExportSession {
        #[cfg(feature = "objc2-core-media")]
        #[method(timeRange)]
        pub unsafe fn timeRange(&self) -> CMTimeRange;

        #[cfg(feature = "objc2-core-media")]
        #[method(setTimeRange:)]
        pub unsafe fn setTimeRange(&self, time_range: CMTimeRange);

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use estimateMaximumDurationWithCompletionHandler: instead"]
        #[method(maxDuration)]
        pub unsafe fn maxDuration(&self) -> CMTime;

        #[deprecated = "Use estimateOutputFileLengthWithCompletionHandler: instead"]
        #[method(estimatedOutputFileLength)]
        pub unsafe fn estimatedOutputFileLength(&self) -> c_longlong;

        #[method(fileLengthLimit)]
        pub unsafe fn fileLengthLimit(&self) -> c_longlong;

        #[method(setFileLengthLimit:)]
        pub unsafe fn setFileLengthLimit(&self, file_length_limit: c_longlong);

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(estimateMaximumDurationWithCompletionHandler:)]
        pub unsafe fn estimateMaximumDurationWithCompletionHandler(
            &self,
            handler: &block2::Block<dyn Fn(CMTime, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(estimateOutputFileLengthWithCompletionHandler:)]
        pub unsafe fn estimateOutputFileLengthWithCompletionHandler(
            &self,
            handler: &block2::Block<dyn Fn(i64, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVAssetExportSessionMetadata
    unsafe impl AVAssetExportSession {
        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Option<Retained<NSArray<AVMetadataItem>>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method(setMetadata:)]
        pub unsafe fn setMetadata(&self, metadata: Option<&NSArray<AVMetadataItem>>);

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other metadataItemFilter)]
        pub unsafe fn metadataItemFilter(&self) -> Option<Retained<AVMetadataItemFilter>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method(setMetadataItemFilter:)]
        pub unsafe fn setMetadataItemFilter(
            &self,
            metadata_item_filter: Option<&AVMetadataItemFilter>,
        );
    }
);

extern_methods!(
    /// AVAssetExportSessionMediaProcessing
    unsafe impl AVAssetExportSession {
        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method_id(@__retain_semantics Other audioTimePitchAlgorithm)]
        pub unsafe fn audioTimePitchAlgorithm(&self) -> Retained<AVAudioTimePitchAlgorithm>;

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(setAudioTimePitchAlgorithm:)]
        pub unsafe fn setAudioTimePitchAlgorithm(
            &self,
            audio_time_pitch_algorithm: &AVAudioTimePitchAlgorithm,
        );

        #[cfg(feature = "AVAudioMix")]
        #[method_id(@__retain_semantics Other audioMix)]
        pub unsafe fn audioMix(&self) -> Option<Retained<AVAudioMix>>;

        #[cfg(feature = "AVAudioMix")]
        #[method(setAudioMix:)]
        pub unsafe fn setAudioMix(&self, audio_mix: Option<&AVAudioMix>);

        #[cfg(feature = "AVVideoComposition")]
        #[method_id(@__retain_semantics Other videoComposition)]
        pub unsafe fn videoComposition(&self) -> Option<Retained<AVVideoComposition>>;

        #[cfg(feature = "AVVideoComposition")]
        #[method(setVideoComposition:)]
        pub unsafe fn setVideoComposition(&self, video_composition: Option<&AVVideoComposition>);

        #[cfg(feature = "AVVideoCompositing")]
        #[method_id(@__retain_semantics Other customVideoCompositor)]
        pub unsafe fn customVideoCompositor(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVVideoCompositing>>>;

        #[method(audioTrackGroupHandling)]
        pub unsafe fn audioTrackGroupHandling(&self) -> AVAssetTrackGroupOutputHandling;

        #[method(setAudioTrackGroupHandling:)]
        pub unsafe fn setAudioTrackGroupHandling(
            &self,
            audio_track_group_handling: AVAssetTrackGroupOutputHandling,
        );
    }
);

extern_methods!(
    /// AVAssetExportSessionMultipass
    unsafe impl AVAssetExportSession {
        #[method(canPerformMultiplePassesOverSourceMediaData)]
        pub unsafe fn canPerformMultiplePassesOverSourceMediaData(&self) -> bool;

        #[method(setCanPerformMultiplePassesOverSourceMediaData:)]
        pub unsafe fn setCanPerformMultiplePassesOverSourceMediaData(
            &self,
            can_perform_multiple_passes_over_source_media_data: bool,
        );

        #[method_id(@__retain_semantics Other directoryForTemporaryFiles)]
        pub unsafe fn directoryForTemporaryFiles(&self) -> Option<Retained<NSURL>>;

        #[method(setDirectoryForTemporaryFiles:)]
        pub unsafe fn setDirectoryForTemporaryFiles(
            &self,
            directory_for_temporary_files: Option<&NSURL>,
        );
    }
);
