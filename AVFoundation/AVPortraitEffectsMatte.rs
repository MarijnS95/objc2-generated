//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avportraiteffectsmatte?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPortraitEffectsMatte;
);

unsafe impl NSObjectProtocol for AVPortraitEffectsMatte {}

extern_methods!(
    unsafe impl AVPortraitEffectsMatte {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other portraitEffectsMatteFromDictionaryRepresentation:error:_)]
        pub unsafe fn portraitEffectsMatteFromDictionaryRepresentation_error(
            image_source_aux_data_info_dictionary: &NSDictionary,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "objc2-core-video")]
        #[method_id(@__retain_semantics Other portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:error:_)]
        pub unsafe fn portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer_error(
            &self,
            pixel_buffer: CVPixelBufferRef,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Other dictionaryRepresentationForAuxiliaryDataType:)]
        pub unsafe fn dictionaryRepresentationForAuxiliaryDataType(
            &self,
            out_aux_data_type: Option<&mut Option<Retained<NSString>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[method(pixelFormatType)]
        pub unsafe fn pixelFormatType(&self) -> OSType;

        #[cfg(feature = "objc2-core-video")]
        #[method(mattingImage)]
        pub unsafe fn mattingImage(&self) -> CVPixelBufferRef;
    }
);
