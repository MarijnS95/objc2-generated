//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturefileoutput?language=objc)
    #[unsafe(super(AVCaptureOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AVCaptureOutputBase")]
    pub struct AVCaptureFileOutput;
);

#[cfg(feature = "AVCaptureOutputBase")]
unsafe impl NSObjectProtocol for AVCaptureFileOutput {}

extern_methods!(
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCaptureFileOutput {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVCaptureFileOutputDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AVCaptureFileOutputDelegate>>,
        );

        #[method_id(@__retain_semantics Other outputFileURL)]
        pub unsafe fn outputFileURL(&self) -> Option<Retained<NSURL>>;

        #[method(startRecordingToOutputFileURL:recordingDelegate:)]
        pub unsafe fn startRecordingToOutputFileURL_recordingDelegate(
            &self,
            output_file_url: &NSURL,
            delegate: &ProtocolObject<dyn AVCaptureFileOutputRecordingDelegate>,
        );

        #[method(stopRecording)]
        pub unsafe fn stopRecording(&self);

        #[method(isRecording)]
        pub unsafe fn isRecording(&self) -> bool;

        #[method(isRecordingPaused)]
        pub unsafe fn isRecordingPaused(&self) -> bool;

        #[method(pauseRecording)]
        pub unsafe fn pauseRecording(&self);

        #[method(resumeRecording)]
        pub unsafe fn resumeRecording(&self);

        #[cfg(feature = "objc2-core-media")]
        #[method(recordedDuration)]
        pub unsafe fn recordedDuration(&self) -> CMTime;

        #[method(recordedFileSize)]
        pub unsafe fn recordedFileSize(&self) -> i64;

        #[cfg(feature = "objc2-core-media")]
        #[method(maxRecordedDuration)]
        pub unsafe fn maxRecordedDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setMaxRecordedDuration:)]
        pub unsafe fn setMaxRecordedDuration(&self, max_recorded_duration: CMTime);

        #[method(maxRecordedFileSize)]
        pub unsafe fn maxRecordedFileSize(&self) -> i64;

        #[method(setMaxRecordedFileSize:)]
        pub unsafe fn setMaxRecordedFileSize(&self, max_recorded_file_size: i64);

        #[method(minFreeDiskSpaceLimit)]
        pub unsafe fn minFreeDiskSpaceLimit(&self) -> i64;

        #[method(setMinFreeDiskSpaceLimit:)]
        pub unsafe fn setMinFreeDiskSpaceLimit(&self, min_free_disk_space_limit: i64);
    }
);

extern_methods!(
    /// Methods declared on superclass `AVCaptureOutput`
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCaptureFileOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturefileoutputrecordingdelegate?language=objc)
    pub unsafe trait AVCaptureFileOutputRecordingDelegate: NSObjectProtocol {
        #[cfg(all(feature = "AVCaptureOutputBase", feature = "AVCaptureSession"))]
        #[optional]
        #[method(captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:)]
        unsafe fn captureOutput_didStartRecordingToOutputFileAtURL_fromConnections(
            &self,
            output: &AVCaptureFileOutput,
            file_url: &NSURL,
            connections: &NSArray<AVCaptureConnection>,
        );

        #[cfg(all(
            feature = "AVCaptureOutputBase",
            feature = "AVCaptureSession",
            feature = "objc2-core-media"
        ))]
        #[optional]
        #[method(captureOutput:didStartRecordingToOutputFileAtURL:startPTS:fromConnections:)]
        unsafe fn captureOutput_didStartRecordingToOutputFileAtURL_startPTS_fromConnections(
            &self,
            output: &AVCaptureFileOutput,
            file_url: &NSURL,
            start_pts: CMTime,
            connections: &NSArray<AVCaptureConnection>,
        );

        #[cfg(all(feature = "AVCaptureOutputBase", feature = "AVCaptureSession"))]
        #[optional]
        #[method(captureOutput:didPauseRecordingToOutputFileAtURL:fromConnections:)]
        unsafe fn captureOutput_didPauseRecordingToOutputFileAtURL_fromConnections(
            &self,
            output: &AVCaptureFileOutput,
            file_url: &NSURL,
            connections: &NSArray<AVCaptureConnection>,
        );

        #[cfg(all(feature = "AVCaptureOutputBase", feature = "AVCaptureSession"))]
        #[optional]
        #[method(captureOutput:didResumeRecordingToOutputFileAtURL:fromConnections:)]
        unsafe fn captureOutput_didResumeRecordingToOutputFileAtURL_fromConnections(
            &self,
            output: &AVCaptureFileOutput,
            file_url: &NSURL,
            connections: &NSArray<AVCaptureConnection>,
        );

        #[cfg(all(feature = "AVCaptureOutputBase", feature = "AVCaptureSession"))]
        #[optional]
        #[method(captureOutput:willFinishRecordingToOutputFileAtURL:fromConnections:error:)]
        unsafe fn captureOutput_willFinishRecordingToOutputFileAtURL_fromConnections_error(
            &self,
            output: &AVCaptureFileOutput,
            file_url: &NSURL,
            connections: &NSArray<AVCaptureConnection>,
            error: Option<&NSError>,
        );

        #[cfg(all(feature = "AVCaptureOutputBase", feature = "AVCaptureSession"))]
        #[method(captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:)]
        unsafe fn captureOutput_didFinishRecordingToOutputFileAtURL_fromConnections_error(
            &self,
            output: &AVCaptureFileOutput,
            output_file_url: &NSURL,
            connections: &NSArray<AVCaptureConnection>,
            error: Option<&NSError>,
        );
    }

    unsafe impl ProtocolType for dyn AVCaptureFileOutputRecordingDelegate {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturefileoutputdelegate?language=objc)
    pub unsafe trait AVCaptureFileOutputDelegate: NSObjectProtocol {
        #[cfg(feature = "AVCaptureOutputBase")]
        #[method(captureOutputShouldProvideSampleAccurateRecordingStart:)]
        unsafe fn captureOutputShouldProvideSampleAccurateRecordingStart(
            &self,
            output: &AVCaptureFileOutput,
        ) -> bool;

        #[cfg(all(
            feature = "AVCaptureOutputBase",
            feature = "AVCaptureSession",
            feature = "objc2-core-media"
        ))]
        #[optional]
        #[method(captureOutput:didOutputSampleBuffer:fromConnection:)]
        unsafe fn captureOutput_didOutputSampleBuffer_fromConnection(
            &self,
            output: &AVCaptureFileOutput,
            sample_buffer: CMSampleBufferRef,
            connection: &AVCaptureConnection,
        );
    }

    unsafe impl ProtocolType for dyn AVCaptureFileOutputDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturemoviefileoutput?language=objc)
    #[unsafe(super(AVCaptureFileOutput, AVCaptureOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AVCaptureOutputBase")]
    pub struct AVCaptureMovieFileOutput;
);

#[cfg(feature = "AVCaptureOutputBase")]
unsafe impl NSObjectProtocol for AVCaptureMovieFileOutput {}

extern_methods!(
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCaptureMovieFileOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(movieFragmentInterval)]
        pub unsafe fn movieFragmentInterval(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setMovieFragmentInterval:)]
        pub unsafe fn setMovieFragmentInterval(&self, movie_fragment_interval: CMTime);

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Option<Retained<NSArray<AVMetadataItem>>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method(setMetadata:)]
        pub unsafe fn setMetadata(&self, metadata: Option<&NSArray<AVMetadataItem>>);

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availableVideoCodecTypes)]
        pub unsafe fn availableVideoCodecTypes(&self) -> Retained<NSArray<AVVideoCodecType>>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other supportedOutputSettingsKeysForConnection:)]
        pub unsafe fn supportedOutputSettingsKeysForConnection(
            &self,
            connection: &AVCaptureConnection,
        ) -> Retained<NSArray<NSString>>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other outputSettingsForConnection:)]
        pub unsafe fn outputSettingsForConnection(
            &self,
            connection: &AVCaptureConnection,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "AVCaptureSession")]
        #[method(setOutputSettings:forConnection:)]
        pub unsafe fn setOutputSettings_forConnection(
            &self,
            output_settings: Option<&NSDictionary<NSString, AnyObject>>,
            connection: &AVCaptureConnection,
        );

        #[cfg(feature = "AVCaptureSession")]
        #[method(recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection:)]
        pub unsafe fn recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection(
            &self,
            connection: &AVCaptureConnection,
        ) -> bool;

        #[cfg(feature = "AVCaptureSession")]
        #[method(setRecordsVideoOrientationAndMirroringChanges:asMetadataTrackForConnection:)]
        pub unsafe fn setRecordsVideoOrientationAndMirroringChanges_asMetadataTrackForConnection(
            &self,
            do_record_changes: bool,
            connection: &AVCaptureConnection,
        );

        #[method(isPrimaryConstituentDeviceSwitchingBehaviorForRecordingEnabled)]
        pub unsafe fn isPrimaryConstituentDeviceSwitchingBehaviorForRecordingEnabled(&self)
            -> bool;

        #[method(setPrimaryConstituentDeviceSwitchingBehaviorForRecordingEnabled:)]
        pub unsafe fn setPrimaryConstituentDeviceSwitchingBehaviorForRecordingEnabled(
            &self,
            primary_constituent_device_switching_behavior_for_recording_enabled: bool,
        );

        #[cfg(feature = "AVCaptureDevice")]
        #[method(setPrimaryConstituentDeviceSwitchingBehaviorForRecording:restrictedSwitchingBehaviorConditions:)]
        pub unsafe fn setPrimaryConstituentDeviceSwitchingBehaviorForRecording_restrictedSwitchingBehaviorConditions(
            &self,
            switching_behavior: AVCapturePrimaryConstituentDeviceSwitchingBehavior,
            restricted_switching_behavior_conditions: AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions,
        );

        #[cfg(feature = "AVCaptureDevice")]
        #[method(primaryConstituentDeviceSwitchingBehaviorForRecording)]
        pub unsafe fn primaryConstituentDeviceSwitchingBehaviorForRecording(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceSwitchingBehavior;

        #[cfg(feature = "AVCaptureDevice")]
        #[method(primaryConstituentDeviceRestrictedSwitchingBehaviorConditionsForRecording)]
        pub unsafe fn primaryConstituentDeviceRestrictedSwitchingBehaviorConditionsForRecording(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions;

        #[method(isSpatialVideoCaptureSupported)]
        pub unsafe fn isSpatialVideoCaptureSupported(&self) -> bool;

        #[method(isSpatialVideoCaptureEnabled)]
        pub unsafe fn isSpatialVideoCaptureEnabled(&self) -> bool;

        #[method(setSpatialVideoCaptureEnabled:)]
        pub unsafe fn setSpatialVideoCaptureEnabled(&self, spatial_video_capture_enabled: bool);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureaudiofileoutput?language=objc)
    #[unsafe(super(AVCaptureFileOutput, AVCaptureOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AVCaptureOutputBase")]
    pub struct AVCaptureAudioFileOutput;
);

#[cfg(feature = "AVCaptureOutputBase")]
unsafe impl NSObjectProtocol for AVCaptureAudioFileOutput {}

extern_methods!(
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCaptureAudioFileOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other availableOutputFileTypes)]
        pub unsafe fn availableOutputFileTypes() -> Retained<NSArray<AVFileType>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method(startRecordingToOutputFileURL:outputFileType:recordingDelegate:)]
        pub unsafe fn startRecordingToOutputFileURL_outputFileType_recordingDelegate(
            &self,
            output_file_url: &NSURL,
            file_type: &AVFileType,
            delegate: &ProtocolObject<dyn AVCaptureFileOutputRecordingDelegate>,
        );

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method(setMetadata:)]
        pub unsafe fn setMetadata(&self, metadata: &NSArray<AVMetadataItem>);

        #[method_id(@__retain_semantics Other audioSettings)]
        pub unsafe fn audioSettings(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method(setAudioSettings:)]
        pub unsafe fn setAudioSettings(
            &self,
            audio_settings: Option<&NSDictionary<NSString, AnyObject>>,
        );
    }
);
