//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskminimumrequiredmediabitratekey?language=objc)
    pub static AVAssetDownloadTaskMinimumRequiredMediaBitrateKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskminimumrequiredpresentationsizekey?language=objc)
    pub static AVAssetDownloadTaskMinimumRequiredPresentationSizeKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskmediaselectionkey?language=objc)
    pub static AVAssetDownloadTaskMediaSelectionKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskmediaselectionprefersmultichannelkey?language=objc)
    pub static AVAssetDownloadTaskMediaSelectionPrefersMultichannelKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskpreferslosslessaudiokey?language=objc)
    pub static AVAssetDownloadTaskPrefersLosslessAudioKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskprefershdrkey?language=objc)
    pub static AVAssetDownloadTaskPrefersHDRKey: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtask?language=objc)
    #[unsafe(super(NSURLSessionTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadTask;
);

unsafe impl NSCopying for AVAssetDownloadTask {}

unsafe impl CopyingHelper for AVAssetDownloadTask {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAssetDownloadTask {}

unsafe impl NSProgressReporting for AVAssetDownloadTask {}

extern_methods!(
    unsafe impl AVAssetDownloadTask {
        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other URLAsset)]
        pub unsafe fn URLAsset(&self) -> Retained<AVURLAsset>;

        #[deprecated = "Use the URL property of URLAsset instead"]
        #[method_id(@__retain_semantics Other destinationURL)]
        pub unsafe fn destinationURL(&self) -> Retained<NSURL>;

        #[deprecated = "Use AVAssetDownloadConfiguration instead"]
        #[method_id(@__retain_semantics Other options)]
        pub unsafe fn options(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[deprecated = "Use NSURLSessionTask.progress instead"]
        #[method_id(@__retain_semantics Other loadedTimeRanges)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other originalRequest)]
        pub unsafe fn originalRequest(&self) -> Retained<NSURLRequest>;

        #[method_id(@__retain_semantics Other currentRequest)]
        pub unsafe fn currentRequest(&self) -> Retained<NSURLRequest>;

        #[method_id(@__retain_semantics Other response)]
        pub unsafe fn response(&self) -> Retained<NSURLResponse>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadConfiguration;
);

unsafe impl NSObjectProtocol for AVAssetDownloadConfiguration {}

extern_methods!(
    unsafe impl AVAssetDownloadConfiguration {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other downloadConfigurationWithAsset:title:)]
        pub unsafe fn downloadConfigurationWithAsset_title(
            asset: &AVURLAsset,
            title: &NSString,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other artworkData)]
        pub unsafe fn artworkData(&self) -> Option<Retained<NSData>>;

        #[method(setArtworkData:)]
        pub unsafe fn setArtworkData(&self, artwork_data: Option<&NSData>);

        #[method_id(@__retain_semantics Other primaryContentConfiguration)]
        pub unsafe fn primaryContentConfiguration(
            &self,
        ) -> Retained<AVAssetDownloadContentConfiguration>;

        #[method_id(@__retain_semantics Other auxiliaryContentConfigurations)]
        pub unsafe fn auxiliaryContentConfigurations(
            &self,
        ) -> Retained<NSArray<AVAssetDownloadContentConfiguration>>;

        #[method(setAuxiliaryContentConfigurations:)]
        pub unsafe fn setAuxiliaryContentConfigurations(
            &self,
            auxiliary_content_configurations: &NSArray<AVAssetDownloadContentConfiguration>,
        );

        #[method(optimizesAuxiliaryContentConfigurations)]
        pub unsafe fn optimizesAuxiliaryContentConfigurations(&self) -> bool;

        #[method(setOptimizesAuxiliaryContentConfigurations:)]
        pub unsafe fn setOptimizesAuxiliaryContentConfigurations(
            &self,
            optimizes_auxiliary_content_configurations: bool,
        );

        #[method(downloadsInterstitialAssets)]
        pub unsafe fn downloadsInterstitialAssets(&self) -> bool;

        #[method(setDownloadsInterstitialAssets:)]
        pub unsafe fn setDownloadsInterstitialAssets(&self, downloads_interstitial_assets: bool);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadcontentconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadContentConfiguration;
);

unsafe impl NSCopying for AVAssetDownloadContentConfiguration {}

unsafe impl CopyingHelper for AVAssetDownloadContentConfiguration {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAssetDownloadContentConfiguration {}

extern_methods!(
    unsafe impl AVAssetDownloadContentConfiguration {
        #[cfg(feature = "AVAssetVariant")]
        #[method_id(@__retain_semantics Other variantQualifiers)]
        pub unsafe fn variantQualifiers(&self) -> Retained<NSArray<AVAssetVariantQualifier>>;

        #[cfg(feature = "AVAssetVariant")]
        #[method(setVariantQualifiers:)]
        pub unsafe fn setVariantQualifiers(
            &self,
            variant_qualifiers: &NSArray<AVAssetVariantQualifier>,
        );

        #[cfg(feature = "AVMediaSelection")]
        #[method_id(@__retain_semantics Other mediaSelections)]
        pub unsafe fn mediaSelections(&self) -> Retained<NSArray<AVMediaSelection>>;

        #[cfg(feature = "AVMediaSelection")]
        #[method(setMediaSelections:)]
        pub unsafe fn setMediaSelections(&self, media_selections: &NSArray<AVMediaSelection>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVAssetDownloadContentConfiguration {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avaggregateassetdownloadtask?language=objc)
    #[unsafe(super(NSURLSessionTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
    pub struct AVAggregateAssetDownloadTask;
);

unsafe impl NSCopying for AVAggregateAssetDownloadTask {}

unsafe impl CopyingHelper for AVAggregateAssetDownloadTask {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAggregateAssetDownloadTask {}

unsafe impl NSProgressReporting for AVAggregateAssetDownloadTask {}

extern_methods!(
    unsafe impl AVAggregateAssetDownloadTask {
        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other URLAsset)]
        pub unsafe fn URLAsset(&self) -> Retained<AVURLAsset>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other originalRequest)]
        pub unsafe fn originalRequest(&self) -> Retained<NSURLRequest>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other currentRequest)]
        pub unsafe fn currentRequest(&self) -> Retained<NSURLRequest>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other response)]
        pub unsafe fn response(&self) -> Retained<NSURLResponse>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate?language=objc)
    pub unsafe trait AVAssetDownloadDelegate: NSURLSessionTaskDelegate {
        #[deprecated = "Use URLSession:assetDownloadTask:willDownloadToURL: instead"]
        #[optional]
        #[method(URLSession:assetDownloadTask:didFinishDownloadingToURL:)]
        unsafe fn URLSession_assetDownloadTask_didFinishDownloadingToURL(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            location: &NSURL,
        );

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use NSURLSessionTask.progress instead"]
        #[optional]
        #[method(URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:)]
        unsafe fn URLSession_assetDownloadTask_didLoadTimeRange_totalTimeRangesLoaded_timeRangeExpectedToLoad(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            time_range: CMTimeRange,
            loaded_time_ranges: &NSArray<NSValue>,
            time_range_expected_to_load: CMTimeRange,
        );

        #[cfg(feature = "AVMediaSelection")]
        #[optional]
        #[method(URLSession:assetDownloadTask:didResolveMediaSelection:)]
        unsafe fn URLSession_assetDownloadTask_didResolveMediaSelection(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            resolved_media_selection: &AVMediaSelection,
        );

        #[optional]
        #[method(URLSession:assetDownloadTask:willDownloadToURL:)]
        unsafe fn URLSession_assetDownloadTask_willDownloadToURL(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            location: &NSURL,
        );

        #[deprecated = "Use URLSession:assetDownloadTask:willDownloadToURL: instead"]
        #[optional]
        #[method(URLSession:aggregateAssetDownloadTask:willDownloadToURL:)]
        unsafe fn URLSession_aggregateAssetDownloadTask_willDownloadToURL(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            location: &NSURL,
        );

        #[cfg(feature = "AVMediaSelection")]
        #[deprecated = "Use the NSURLSessionDownloadDelegate method instead, URLSession:task:didCompleteWithError:"]
        #[optional]
        #[method(URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:)]
        unsafe fn URLSession_aggregateAssetDownloadTask_didCompleteForMediaSelection(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            media_selection: &AVMediaSelection,
        );

        #[cfg(all(feature = "AVMediaSelection", feature = "objc2-core-media"))]
        #[deprecated = "Use NSURLSessionTask.progress: instead"]
        #[optional]
        #[method(URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:)]
        unsafe fn URLSession_aggregateAssetDownloadTask_didLoadTimeRange_totalTimeRangesLoaded_timeRangeExpectedToLoad_forMediaSelection(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            time_range: CMTimeRange,
            loaded_time_ranges: &NSArray<NSValue>,
            time_range_expected_to_load: CMTimeRange,
            media_selection: &AVMediaSelection,
        );

        #[cfg(feature = "AVAssetVariant")]
        #[optional]
        #[method(URLSession:assetDownloadTask:willDownloadVariants:)]
        unsafe fn URLSession_assetDownloadTask_willDownloadVariants(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            variants: &NSArray<AVAssetVariant>,
        );
    }

    unsafe impl ProtocolType for dyn AVAssetDownloadDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadurlsession?language=objc)
    #[unsafe(super(NSURLSession, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadURLSession;
);

unsafe impl NSObjectProtocol for AVAssetDownloadURLSession {}

extern_methods!(
    unsafe impl AVAssetDownloadURLSession {
        #[method_id(@__retain_semantics Other sessionWithConfiguration:assetDownloadDelegate:delegateQueue:)]
        pub unsafe fn sessionWithConfiguration_assetDownloadDelegate_delegateQueue(
            configuration: &NSURLSessionConfiguration,
            delegate: Option<&ProtocolObject<dyn AVAssetDownloadDelegate>>,
            delegate_queue: Option<&NSOperationQueue>,
        ) -> Retained<AVAssetDownloadURLSession>;

        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options: instead"]
        #[method_id(@__retain_semantics Other assetDownloadTaskWithURLAsset:destinationURL:options:)]
        pub unsafe fn assetDownloadTaskWithURLAsset_destinationURL_options(
            &self,
            url_asset: &AVURLAsset,
            destination_url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAssetDownloadTask>>;

        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:)]
        pub unsafe fn assetDownloadTaskWithURLAsset_assetTitle_assetArtworkData_options(
            &self,
            url_asset: &AVURLAsset,
            title: &NSString,
            artwork_data: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAssetDownloadTask>>;

        #[cfg(all(feature = "AVAsset", feature = "AVMediaSelection"))]
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[method_id(@__retain_semantics Other aggregateAssetDownloadTaskWithURLAsset:mediaSelections:assetTitle:assetArtworkData:options:)]
        pub unsafe fn aggregateAssetDownloadTaskWithURLAsset_mediaSelections_assetTitle_assetArtworkData_options(
            &self,
            url_asset: &AVURLAsset,
            media_selections: &NSArray<AVMediaSelection>,
            title: &NSString,
            artwork_data: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAggregateAssetDownloadTask>>;

        #[method_id(@__retain_semantics Other assetDownloadTaskWithConfiguration:)]
        pub unsafe fn assetDownloadTaskWithConfiguration(
            &self,
            download_configuration: &AVAssetDownloadConfiguration,
        ) -> Retained<AVAssetDownloadTask>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other sharedSession)]
        pub unsafe fn sharedSession() -> Retained<NSURLSession>;

        #[method_id(@__retain_semantics Other sessionWithConfiguration:)]
        pub unsafe fn sessionWithConfiguration(
            configuration: &NSURLSessionConfiguration,
        ) -> Retained<NSURLSession>;

        #[method_id(@__retain_semantics Other sessionWithConfiguration:delegate:delegateQueue:)]
        pub unsafe fn sessionWithConfiguration_delegate_delegateQueue(
            configuration: &NSURLSessionConfiguration,
            delegate: Option<&ProtocolObject<dyn NSURLSessionDelegate>>,
            queue: Option<&NSOperationQueue>,
        ) -> Retained<NSURLSession>;

        #[method_id(@__retain_semantics Other dataTaskWithRequest:)]
        pub unsafe fn dataTaskWithRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionDataTask>;

        #[method_id(@__retain_semantics Other dataTaskWithURL:)]
        pub unsafe fn dataTaskWithURL(&self, url: &NSURL) -> Retained<NSURLSessionDataTask>;

        #[method_id(@__retain_semantics Other uploadTaskWithRequest:fromFile:)]
        pub unsafe fn uploadTaskWithRequest_fromFile(
            &self,
            request: &NSURLRequest,
            file_url: &NSURL,
        ) -> Retained<NSURLSessionUploadTask>;

        #[method_id(@__retain_semantics Other uploadTaskWithRequest:fromData:)]
        pub unsafe fn uploadTaskWithRequest_fromData(
            &self,
            request: &NSURLRequest,
            body_data: &NSData,
        ) -> Retained<NSURLSessionUploadTask>;

        #[method_id(@__retain_semantics Other uploadTaskWithStreamedRequest:)]
        pub unsafe fn uploadTaskWithStreamedRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionUploadTask>;

        #[method_id(@__retain_semantics Other downloadTaskWithRequest:)]
        pub unsafe fn downloadTaskWithRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[method_id(@__retain_semantics Other downloadTaskWithURL:)]
        pub unsafe fn downloadTaskWithURL(&self, url: &NSURL)
            -> Retained<NSURLSessionDownloadTask>;

        #[method_id(@__retain_semantics Other downloadTaskWithResumeData:)]
        pub unsafe fn downloadTaskWithResumeData(
            &self,
            resume_data: &NSData,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other dataTaskWithRequest:completionHandler:)]
        pub unsafe fn dataTaskWithRequest_completionHandler(
            &self,
            request: &NSURLRequest,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDataTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other dataTaskWithURL:completionHandler:)]
        pub unsafe fn dataTaskWithURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDataTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other uploadTaskWithRequest:fromFile:completionHandler:)]
        pub unsafe fn uploadTaskWithRequest_fromFile_completionHandler(
            &self,
            request: &NSURLRequest,
            file_url: &NSURL,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionUploadTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other uploadTaskWithRequest:fromData:completionHandler:)]
        pub unsafe fn uploadTaskWithRequest_fromData_completionHandler(
            &self,
            request: &NSURLRequest,
            body_data: Option<&NSData>,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionUploadTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other downloadTaskWithRequest:completionHandler:)]
        pub unsafe fn downloadTaskWithRequest_completionHandler(
            &self,
            request: &NSURLRequest,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other downloadTaskWithURL:completionHandler:)]
        pub unsafe fn downloadTaskWithURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other downloadTaskWithResumeData:completionHandler:)]
        pub unsafe fn downloadTaskWithResumeData_completionHandler(
            &self,
            resume_data: &NSData,
            completion_handler: &block2::Block<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;
    }
);
