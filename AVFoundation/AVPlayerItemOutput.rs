//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemoutput?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemOutput;
);

unsafe impl NSObjectProtocol for AVPlayerItemOutput {}

extern_methods!(
    unsafe impl AVPlayerItemOutput {
        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(itemTimeForHostTime:)]
        pub unsafe fn itemTimeForHostTime(&self, host_time_in_seconds: CFTimeInterval) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(itemTimeForMachAbsoluteTime:)]
        pub unsafe fn itemTimeForMachAbsoluteTime(&self, mach_absolute_time: i64) -> CMTime;

        #[cfg(all(feature = "objc2-core-media", feature = "objc2-core-video"))]
        #[method(itemTimeForCVTimeStamp:)]
        pub unsafe fn itemTimeForCVTimeStamp(&self, timestamp: CVTimeStamp) -> CMTime;

        #[method(suppressesPlayerRendering)]
        pub unsafe fn suppressesPlayerRendering(&self) -> bool;

        #[method(setSuppressesPlayerRendering:)]
        pub unsafe fn setSuppressesPlayerRendering(&self, suppresses_player_rendering: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerItemOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemvideooutput?language=objc)
    #[unsafe(super(AVPlayerItemOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemVideoOutput;
);

unsafe impl NSObjectProtocol for AVPlayerItemVideoOutput {}

extern_methods!(
    unsafe impl AVPlayerItemVideoOutput {
        #[method_id(@__retain_semantics Init initWithPixelBufferAttributes:)]
        pub unsafe fn initWithPixelBufferAttributes(
            this: Allocated<Self>,
            pixel_buffer_attributes: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithOutputSettings:)]
        pub unsafe fn initWithOutputSettings(
            this: Allocated<Self>,
            output_settings: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(hasNewPixelBufferForItemTime:)]
        pub unsafe fn hasNewPixelBufferForItemTime(&self, item_time: CMTime) -> bool;

        #[cfg(all(feature = "objc2-core-media", feature = "objc2-core-video"))]
        #[method(copyPixelBufferForItemTime:itemTimeForDisplay:)]
        pub unsafe fn copyPixelBufferForItemTime_itemTimeForDisplay(
            &self,
            item_time: CMTime,
            out_item_time_for_display: *mut CMTime,
        ) -> CVPixelBufferRef;

        #[method(requestNotificationOfMediaDataChangeWithAdvanceInterval:)]
        pub unsafe fn requestNotificationOfMediaDataChangeWithAdvanceInterval(
            &self,
            interval: NSTimeInterval,
        );

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlayerItemOutputPullDelegate>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerItemVideoOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemoutputpulldelegate?language=objc)
    pub unsafe trait AVPlayerItemOutputPullDelegate: NSObjectProtocol {
        #[optional]
        #[method(outputMediaDataWillChange:)]
        unsafe fn outputMediaDataWillChange(&self, sender: &AVPlayerItemOutput);

        #[optional]
        #[method(outputSequenceWasFlushed:)]
        unsafe fn outputSequenceWasFlushed(&self, output: &AVPlayerItemOutput);
    }

    unsafe impl ProtocolType for dyn AVPlayerItemOutputPullDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemlegibleoutput?language=objc)
    #[unsafe(super(AVPlayerItemOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemLegibleOutput;
);

unsafe impl NSObjectProtocol for AVPlayerItemLegibleOutput {}

extern_methods!(
    unsafe impl AVPlayerItemLegibleOutput {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlayerItemLegibleOutputPushDelegate>>>;

        #[method(advanceIntervalForDelegateInvocation)]
        pub unsafe fn advanceIntervalForDelegateInvocation(&self) -> NSTimeInterval;

        #[method(setAdvanceIntervalForDelegateInvocation:)]
        pub unsafe fn setAdvanceIntervalForDelegateInvocation(
            &self,
            advance_interval_for_delegate_invocation: NSTimeInterval,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerItemLegibleOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVPlayerItemLegibleOutput_NativeRepresentation
    unsafe impl AVPlayerItemLegibleOutput {
        #[method_id(@__retain_semantics Init initWithMediaSubtypesForNativeRepresentation:)]
        pub unsafe fn initWithMediaSubtypesForNativeRepresentation(
            this: Allocated<Self>,
            subtypes: &NSArray<NSNumber>,
        ) -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemlegibleoutputtextstylingresolution?language=objc)
// NS_TYPED_ENUM
pub type AVPlayerItemLegibleOutputTextStylingResolution = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemlegibleoutputtextstylingresolutiondefault?language=objc)
    pub static AVPlayerItemLegibleOutputTextStylingResolutionDefault:
        &'static AVPlayerItemLegibleOutputTextStylingResolution;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemlegibleoutputtextstylingresolutionsourceandrulesonly?language=objc)
    pub static AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly:
        &'static AVPlayerItemLegibleOutputTextStylingResolution;
}

extern_methods!(
    /// AVPlayerItemLegibleOutput_TextStylingResolution
    unsafe impl AVPlayerItemLegibleOutput {
        #[method_id(@__retain_semantics Other textStylingResolution)]
        pub unsafe fn textStylingResolution(
            &self,
        ) -> Retained<AVPlayerItemLegibleOutputTextStylingResolution>;

        #[method(setTextStylingResolution:)]
        pub unsafe fn setTextStylingResolution(
            &self,
            text_styling_resolution: &AVPlayerItemLegibleOutputTextStylingResolution,
        );
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemlegibleoutputpushdelegate?language=objc)
    pub unsafe trait AVPlayerItemLegibleOutputPushDelegate:
        AVPlayerItemOutputPushDelegate
    {
        #[cfg(feature = "objc2-core-media")]
        #[optional]
        #[method(legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:)]
        unsafe fn legibleOutput_didOutputAttributedStrings_nativeSampleBuffers_forItemTime(
            &self,
            output: &AVPlayerItemLegibleOutput,
            strings: &NSArray<NSAttributedString>,
            native_samples: &NSArray,
            item_time: CMTime,
        );
    }

    unsafe impl ProtocolType for dyn AVPlayerItemLegibleOutputPushDelegate {}
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemoutputpushdelegate?language=objc)
    pub unsafe trait AVPlayerItemOutputPushDelegate: NSObjectProtocol {
        #[optional]
        #[method(outputSequenceWasFlushed:)]
        unsafe fn outputSequenceWasFlushed(&self, output: &AVPlayerItemOutput);
    }

    unsafe impl ProtocolType for dyn AVPlayerItemOutputPushDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemmetadataoutput?language=objc)
    #[unsafe(super(AVPlayerItemOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemMetadataOutput;
);

unsafe impl NSObjectProtocol for AVPlayerItemMetadataOutput {}

extern_methods!(
    unsafe impl AVPlayerItemMetadataOutput {
        #[method_id(@__retain_semantics Init initWithIdentifiers:)]
        pub unsafe fn initWithIdentifiers(
            this: Allocated<Self>,
            identifiers: Option<&NSArray<NSString>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlayerItemMetadataOutputPushDelegate>>>;

        #[method(advanceIntervalForDelegateInvocation)]
        pub unsafe fn advanceIntervalForDelegateInvocation(&self) -> NSTimeInterval;

        #[method(setAdvanceIntervalForDelegateInvocation:)]
        pub unsafe fn setAdvanceIntervalForDelegateInvocation(
            &self,
            advance_interval_for_delegate_invocation: NSTimeInterval,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerItemMetadataOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemmetadataoutputpushdelegate?language=objc)
    pub unsafe trait AVPlayerItemMetadataOutputPushDelegate:
        AVPlayerItemOutputPushDelegate
    {
        #[cfg(all(feature = "AVPlayerItemTrack", feature = "AVTimedMetadataGroup"))]
        #[optional]
        #[method(metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:)]
        unsafe fn metadataOutput_didOutputTimedMetadataGroups_fromPlayerItemTrack(
            &self,
            output: &AVPlayerItemMetadataOutput,
            groups: &NSArray<AVTimedMetadataGroup>,
            track: Option<&AVPlayerItemTrack>,
        );
    }

    unsafe impl ProtocolType for dyn AVPlayerItemMetadataOutputPushDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemrenderedlegibleoutput?language=objc)
    #[unsafe(super(AVPlayerItemOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemRenderedLegibleOutput;
);

unsafe impl NSObjectProtocol for AVPlayerItemRenderedLegibleOutput {}

extern_methods!(
    unsafe impl AVPlayerItemRenderedLegibleOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method_id(@__retain_semantics Init initWithVideoDisplaySize:)]
        pub unsafe fn initWithVideoDisplaySize(
            this: Allocated<Self>,
            video_display_size: CGSize,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlayerItemRenderedLegibleOutputPushDelegate>>>;

        #[method(advanceIntervalForDelegateInvocation)]
        pub unsafe fn advanceIntervalForDelegateInvocation(&self) -> NSTimeInterval;

        #[method(setAdvanceIntervalForDelegateInvocation:)]
        pub unsafe fn setAdvanceIntervalForDelegateInvocation(
            &self,
            advance_interval_for_delegate_invocation: NSTimeInterval,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoDisplaySize)]
        pub unsafe fn videoDisplaySize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setVideoDisplaySize:)]
        pub unsafe fn setVideoDisplaySize(&self, video_display_size: CGSize);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemrenderedlegibleoutputpushdelegate?language=objc)
    pub unsafe trait AVPlayerItemRenderedLegibleOutputPushDelegate:
        AVPlayerItemOutputPushDelegate
    {
        #[cfg(all(feature = "AVRenderedCaptionImage", feature = "objc2-core-media"))]
        #[optional]
        #[method(renderedLegibleOutput:didOutputRenderedCaptionImages:forItemTime:)]
        unsafe fn renderedLegibleOutput_didOutputRenderedCaptionImages_forItemTime(
            &self,
            output: &AVPlayerItemRenderedLegibleOutput,
            caption_images: &NSArray<AVRenderedCaptionImage>,
            item_time: CMTime,
        );
    }

    unsafe impl ProtocolType for dyn AVPlayerItemRenderedLegibleOutputPushDelegate {}
);
