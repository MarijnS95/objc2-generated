//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemtimejumpednotification?language=objc)
    pub static AVPlayerItemTimeJumpedNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemdidplaytoendtimenotification?language=objc)
    pub static AVPlayerItemDidPlayToEndTimeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemfailedtoplaytoendtimenotification?language=objc)
    pub static AVPlayerItemFailedToPlayToEndTimeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemplaybackstallednotification?language=objc)
    pub static AVPlayerItemPlaybackStalledNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemnewaccesslogentrynotification?language=objc)
    pub static AVPlayerItemNewAccessLogEntryNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemnewerrorlogentrynotification?language=objc)
    pub static AVPlayerItemNewErrorLogEntryNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemrecommendedtimeoffsetfromlivedidchangenotification?language=objc)
    pub static AVPlayerItemRecommendedTimeOffsetFromLiveDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemmediaselectiondidchangenotification?language=objc)
    pub static AVPlayerItemMediaSelectionDidChangeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemfailedtoplaytoendtimeerrorkey?language=objc)
    pub static AVPlayerItemFailedToPlayToEndTimeErrorKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemtimejumpedoriginatingparticipantkey?language=objc)
    pub static AVPlayerItemTimeJumpedOriginatingParticipantKey: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerItemStatus(pub NSInteger);
impl AVPlayerItemStatus {
    #[doc(alias = "AVPlayerItemStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "AVPlayerItemStatusReadyToPlay")]
    pub const ReadyToPlay: Self = Self(1);
    #[doc(alias = "AVPlayerItemStatusFailed")]
    pub const Failed: Self = Self(2);
}

unsafe impl Encode for AVPlayerItemStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerItemStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritem?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItem;
);

unsafe impl NSCopying for AVPlayerItem {}

unsafe impl CopyingHelper for AVPlayerItem {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerItem {}

extern_methods!(
    unsafe impl AVPlayerItem {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[method_id(@__retain_semantics Other playerItemWithURL:)]
        pub unsafe fn playerItemWithURL(url: &NSURL, mtm: MainThreadMarker) -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other playerItemWithAsset:)]
        pub unsafe fn playerItemWithAsset(asset: &AVAsset, mtm: MainThreadMarker)
            -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other playerItemWithAsset:automaticallyLoadedAssetKeys:)]
        pub unsafe fn playerItemWithAsset_automaticallyLoadedAssetKeys(
            asset: &AVAsset,
            automatically_loaded_asset_keys: Option<&NSArray<NSString>>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithURL:)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Init initWithAsset:)]
        pub unsafe fn initWithAsset(this: Allocated<Self>, asset: &AVAsset) -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Init initWithAsset:automaticallyLoadedAssetKeys:)]
        pub unsafe fn initWithAsset_automaticallyLoadedAssetKeys(
            this: Allocated<Self>,
            asset: &AVAsset,
            automatically_loaded_asset_keys: Option<&NSArray<NSString>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Copy copyWithZone:)]
        pub unsafe fn copyWithZone(&self, zone: *mut NSZone) -> Retained<AnyObject>;

        #[method_id(@__retain_semantics Copy copy)]
        pub unsafe fn copy(&self) -> Retained<AnyObject>;

        #[method(status)]
        pub unsafe fn status(&self) -> AVPlayerItemStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;
    }
);

extern_methods!(
    /// AVPlayerItemInspection
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVAsset")]
        #[method_id(@__retain_semantics Other asset)]
        pub unsafe fn asset(&self) -> Retained<AVAsset>;

        #[cfg(feature = "AVPlayerItemTrack")]
        #[method_id(@__retain_semantics Other tracks)]
        pub unsafe fn tracks(&self) -> Retained<NSArray<AVPlayerItemTrack>>;

        #[cfg(feature = "objc2-core-media")]
        #[method(duration)]
        pub unsafe fn duration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(presentationSize)]
        pub unsafe fn presentationSize(&self) -> CGSize;

        #[cfg(feature = "AVMetadataItem")]
        #[deprecated = "Use AVPlayerItemMetadataOutput to obtain timed metadata"]
        #[method_id(@__retain_semantics Other timedMetadata)]
        pub unsafe fn timedMetadata(&self) -> Option<Retained<NSArray<AVMetadataItem>>>;

        #[method_id(@__retain_semantics Other automaticallyLoadedAssetKeys)]
        pub unsafe fn automaticallyLoadedAssetKeys(&self) -> Retained<NSArray<NSString>>;
    }
);

extern_methods!(
    /// AVPlayerItemRateAndSteppingSupport
    unsafe impl AVPlayerItem {
        #[method(canPlayFastForward)]
        pub unsafe fn canPlayFastForward(&self) -> bool;

        #[method(canPlaySlowForward)]
        pub unsafe fn canPlaySlowForward(&self) -> bool;

        #[method(canPlayReverse)]
        pub unsafe fn canPlayReverse(&self) -> bool;

        #[method(canPlaySlowReverse)]
        pub unsafe fn canPlaySlowReverse(&self) -> bool;

        #[method(canPlayFastReverse)]
        pub unsafe fn canPlayFastReverse(&self) -> bool;

        #[method(canStepForward)]
        pub unsafe fn canStepForward(&self) -> bool;

        #[method(canStepBackward)]
        pub unsafe fn canStepBackward(&self) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[method(configuredTimeOffsetFromLive)]
        pub unsafe fn configuredTimeOffsetFromLive(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setConfiguredTimeOffsetFromLive:)]
        pub unsafe fn setConfiguredTimeOffsetFromLive(
            &self,
            configured_time_offset_from_live: CMTime,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(recommendedTimeOffsetFromLive)]
        pub unsafe fn recommendedTimeOffsetFromLive(&self) -> CMTime;

        #[method(automaticallyPreservesTimeOffsetFromLive)]
        pub unsafe fn automaticallyPreservesTimeOffsetFromLive(&self) -> bool;

        #[method(setAutomaticallyPreservesTimeOffsetFromLive:)]
        pub unsafe fn setAutomaticallyPreservesTimeOffsetFromLive(
            &self,
            automatically_preserves_time_offset_from_live: bool,
        );
    }
);

extern_methods!(
    /// AVPlayerItemTimeControl
    unsafe impl AVPlayerItem {
        #[cfg(feature = "objc2-core-media")]
        #[method(currentTime)]
        pub unsafe fn currentTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(forwardPlaybackEndTime)]
        pub unsafe fn forwardPlaybackEndTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setForwardPlaybackEndTime:)]
        pub unsafe fn setForwardPlaybackEndTime(&self, forward_playback_end_time: CMTime);

        #[cfg(feature = "objc2-core-media")]
        #[method(reversePlaybackEndTime)]
        pub unsafe fn reversePlaybackEndTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setReversePlaybackEndTime:)]
        pub unsafe fn setReversePlaybackEndTime(&self, reverse_playback_end_time: CMTime);

        #[method_id(@__retain_semantics Other seekableTimeRanges)]
        pub unsafe fn seekableTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(seekToTime:completionHandler:)]
        pub unsafe fn seekToTime_completionHandler(
            &self,
            time: CMTime,
            completion_handler: Option<&block2::Block<dyn Fn(Bool)>>,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(seekToTime:toleranceBefore:toleranceAfter:completionHandler:)]
        pub unsafe fn seekToTime_toleranceBefore_toleranceAfter_completionHandler(
            &self,
            time: CMTime,
            tolerance_before: CMTime,
            tolerance_after: CMTime,
            completion_handler: Option<&block2::Block<dyn Fn(Bool)>>,
        );

        #[method(cancelPendingSeeks)]
        pub unsafe fn cancelPendingSeeks(&self);

        #[method_id(@__retain_semantics Other currentDate)]
        pub unsafe fn currentDate(&self) -> Option<Retained<NSDate>>;

        #[cfg(feature = "block2")]
        #[method(seekToDate:completionHandler:)]
        pub unsafe fn seekToDate_completionHandler(
            &self,
            date: &NSDate,
            completion_handler: Option<&block2::Block<dyn Fn(Bool)>>,
        ) -> bool;

        #[method(stepByCount:)]
        pub unsafe fn stepByCount(&self, step_count: NSInteger);

        #[cfg(feature = "objc2-core-media")]
        #[method(timebase)]
        pub unsafe fn timebase(&self) -> CMTimebaseRef;
    }
);

extern_methods!(
    /// AVPlayerItemVisualPresentation
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVVideoComposition")]
        #[method_id(@__retain_semantics Other videoComposition)]
        pub unsafe fn videoComposition(&self) -> Option<Retained<AVVideoComposition>>;

        #[cfg(feature = "AVVideoComposition")]
        #[method(setVideoComposition:)]
        pub unsafe fn setVideoComposition(&self, video_composition: Option<&AVVideoComposition>);

        #[cfg(feature = "AVVideoCompositing")]
        #[method_id(@__retain_semantics Other customVideoCompositor)]
        pub unsafe fn customVideoCompositor(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVVideoCompositing>>>;

        #[method(seekingWaitsForVideoCompositionRendering)]
        pub unsafe fn seekingWaitsForVideoCompositionRendering(&self) -> bool;

        #[method(setSeekingWaitsForVideoCompositionRendering:)]
        pub unsafe fn setSeekingWaitsForVideoCompositionRendering(
            &self,
            seeking_waits_for_video_composition_rendering: bool,
        );

        #[cfg(feature = "AVTextStyleRule")]
        #[method_id(@__retain_semantics Other textStyleRules)]
        pub unsafe fn textStyleRules(&self) -> Option<Retained<NSArray<AVTextStyleRule>>>;

        #[cfg(feature = "AVTextStyleRule")]
        #[method(setTextStyleRules:)]
        pub unsafe fn setTextStyleRules(&self, text_style_rules: Option<&NSArray<AVTextStyleRule>>);

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other videoApertureMode)]
        pub unsafe fn videoApertureMode(&self) -> Retained<AVVideoApertureMode>;

        #[cfg(feature = "AVVideoSettings")]
        #[method(setVideoApertureMode:)]
        pub unsafe fn setVideoApertureMode(&self, video_aperture_mode: &AVVideoApertureMode);

        #[method(appliesPerFrameHDRDisplayMetadata)]
        pub unsafe fn appliesPerFrameHDRDisplayMetadata(&self) -> bool;

        #[method(setAppliesPerFrameHDRDisplayMetadata:)]
        pub unsafe fn setAppliesPerFrameHDRDisplayMetadata(
            &self,
            applies_per_frame_hdr_display_metadata: bool,
        );
    }
);

extern_methods!(
    /// AVPlayerItemAudioProcessing
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method_id(@__retain_semantics Other audioTimePitchAlgorithm)]
        pub unsafe fn audioTimePitchAlgorithm(&self) -> Retained<AVAudioTimePitchAlgorithm>;

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(setAudioTimePitchAlgorithm:)]
        pub unsafe fn setAudioTimePitchAlgorithm(
            &self,
            audio_time_pitch_algorithm: &AVAudioTimePitchAlgorithm,
        );

        #[deprecated = "Use allowedAudioSpatializationFormats instead"]
        #[method(isAudioSpatializationAllowed)]
        pub unsafe fn isAudioSpatializationAllowed(&self) -> bool;

        #[deprecated = "Use allowedAudioSpatializationFormats instead"]
        #[method(setAudioSpatializationAllowed:)]
        pub unsafe fn setAudioSpatializationAllowed(&self, audio_spatialization_allowed: bool);

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(allowedAudioSpatializationFormats)]
        pub unsafe fn allowedAudioSpatializationFormats(&self) -> AVAudioSpatializationFormats;

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(setAllowedAudioSpatializationFormats:)]
        pub unsafe fn setAllowedAudioSpatializationFormats(
            &self,
            allowed_audio_spatialization_formats: AVAudioSpatializationFormats,
        );

        #[cfg(feature = "AVAudioMix")]
        #[method_id(@__retain_semantics Other audioMix)]
        pub unsafe fn audioMix(&self) -> Option<Retained<AVAudioMix>>;

        #[cfg(feature = "AVAudioMix")]
        #[method(setAudioMix:)]
        pub unsafe fn setAudioMix(&self, audio_mix: Option<&AVAudioMix>);
    }
);

extern_methods!(
    /// AVPlayerItemPlayability
    unsafe impl AVPlayerItem {
        #[method_id(@__retain_semantics Other loadedTimeRanges)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        #[method(isPlaybackLikelyToKeepUp)]
        pub unsafe fn isPlaybackLikelyToKeepUp(&self) -> bool;

        #[method(isPlaybackBufferFull)]
        pub unsafe fn isPlaybackBufferFull(&self) -> bool;

        #[method(isPlaybackBufferEmpty)]
        pub unsafe fn isPlaybackBufferEmpty(&self) -> bool;

        #[method(canUseNetworkResourcesForLiveStreamingWhilePaused)]
        pub unsafe fn canUseNetworkResourcesForLiveStreamingWhilePaused(&self) -> bool;

        #[method(setCanUseNetworkResourcesForLiveStreamingWhilePaused:)]
        pub unsafe fn setCanUseNetworkResourcesForLiveStreamingWhilePaused(
            &self,
            can_use_network_resources_for_live_streaming_while_paused: bool,
        );

        #[method(preferredForwardBufferDuration)]
        pub unsafe fn preferredForwardBufferDuration(&self) -> NSTimeInterval;

        #[method(setPreferredForwardBufferDuration:)]
        pub unsafe fn setPreferredForwardBufferDuration(
            &self,
            preferred_forward_buffer_duration: NSTimeInterval,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvariantpreferences?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVVariantPreferences(pub NSUInteger);
bitflags::bitflags! {
    impl AVVariantPreferences: NSUInteger {
        const AVVariantPreferenceNone = 0;
        const AVVariantPreferenceScalabilityToLosslessAudio = 1<<0;
    }
}

unsafe impl Encode for AVVariantPreferences {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVVariantPreferences {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVPlayerItemVariantControl
    unsafe impl AVPlayerItem {
        #[method(preferredPeakBitRate)]
        pub unsafe fn preferredPeakBitRate(&self) -> c_double;

        #[method(setPreferredPeakBitRate:)]
        pub unsafe fn setPreferredPeakBitRate(&self, preferred_peak_bit_rate: c_double);

        #[method(preferredPeakBitRateForExpensiveNetworks)]
        pub unsafe fn preferredPeakBitRateForExpensiveNetworks(&self) -> c_double;

        #[method(setPreferredPeakBitRateForExpensiveNetworks:)]
        pub unsafe fn setPreferredPeakBitRateForExpensiveNetworks(
            &self,
            preferred_peak_bit_rate_for_expensive_networks: c_double,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(preferredMaximumResolution)]
        pub unsafe fn preferredMaximumResolution(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setPreferredMaximumResolution:)]
        pub unsafe fn setPreferredMaximumResolution(&self, preferred_maximum_resolution: CGSize);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(preferredMaximumResolutionForExpensiveNetworks)]
        pub unsafe fn preferredMaximumResolutionForExpensiveNetworks(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setPreferredMaximumResolutionForExpensiveNetworks:)]
        pub unsafe fn setPreferredMaximumResolutionForExpensiveNetworks(
            &self,
            preferred_maximum_resolution_for_expensive_networks: CGSize,
        );

        #[method(startsOnFirstEligibleVariant)]
        pub unsafe fn startsOnFirstEligibleVariant(&self) -> bool;

        #[method(setStartsOnFirstEligibleVariant:)]
        pub unsafe fn setStartsOnFirstEligibleVariant(
            &self,
            starts_on_first_eligible_variant: bool,
        );

        #[method(variantPreferences)]
        pub unsafe fn variantPreferences(&self) -> AVVariantPreferences;

        #[method(setVariantPreferences:)]
        pub unsafe fn setVariantPreferences(&self, variant_preferences: AVVariantPreferences);
    }
);

extern_methods!(
    /// AVPlayerItemMediaSelection
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVMediaSelectionGroup")]
        #[method(selectMediaOption:inMediaSelectionGroup:)]
        pub unsafe fn selectMediaOption_inMediaSelectionGroup(
            &self,
            media_selection_option: Option<&AVMediaSelectionOption>,
            media_selection_group: &AVMediaSelectionGroup,
        );

        #[cfg(feature = "AVMediaSelectionGroup")]
        #[method(selectMediaOptionAutomaticallyInMediaSelectionGroup:)]
        pub unsafe fn selectMediaOptionAutomaticallyInMediaSelectionGroup(
            &self,
            media_selection_group: &AVMediaSelectionGroup,
        );

        #[cfg(feature = "AVMediaSelection")]
        #[method_id(@__retain_semantics Other currentMediaSelection)]
        pub unsafe fn currentMediaSelection(&self) -> Retained<AVMediaSelection>;
    }
);

extern_methods!(
    /// AVPlayerItemLogging
    unsafe impl AVPlayerItem {
        #[method_id(@__retain_semantics Other accessLog)]
        pub unsafe fn accessLog(&self) -> Option<Retained<AVPlayerItemAccessLog>>;

        #[method_id(@__retain_semantics Other errorLog)]
        pub unsafe fn errorLog(&self) -> Option<Retained<AVPlayerItemErrorLog>>;
    }
);

extern_methods!(
    /// AVPlayerItemOutputs
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVPlayerItemOutput")]
        #[method(addOutput:)]
        pub unsafe fn addOutput(&self, output: &AVPlayerItemOutput);

        #[cfg(feature = "AVPlayerItemOutput")]
        #[method(removeOutput:)]
        pub unsafe fn removeOutput(&self, output: &AVPlayerItemOutput);

        #[cfg(feature = "AVPlayerItemOutput")]
        #[method_id(@__retain_semantics Other outputs)]
        pub unsafe fn outputs(&self) -> Retained<NSArray<AVPlayerItemOutput>>;
    }
);

extern_methods!(
    /// AVPlayerItemMediaDataCollectors
    unsafe impl AVPlayerItem {
        #[cfg(feature = "AVPlayerItemMediaDataCollector")]
        #[method(addMediaDataCollector:)]
        pub unsafe fn addMediaDataCollector(&self, collector: &AVPlayerItemMediaDataCollector);

        #[cfg(feature = "AVPlayerItemMediaDataCollector")]
        #[method(removeMediaDataCollector:)]
        pub unsafe fn removeMediaDataCollector(&self, collector: &AVPlayerItemMediaDataCollector);

        #[cfg(feature = "AVPlayerItemMediaDataCollector")]
        #[method_id(@__retain_semantics Other mediaDataCollectors)]
        pub unsafe fn mediaDataCollectors(
            &self,
        ) -> Retained<NSArray<AVPlayerItemMediaDataCollector>>;
    }
);

extern_methods!(
    /// AVPlayerItemDeprecated
    unsafe impl AVPlayerItem {
        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use -seekToTime:completionHandler:, passing nil for the completionHandler if you don't require notification of completion"]
        #[method(seekToTime:)]
        pub unsafe fn seekToTime(&self, time: CMTime);

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use -seekToTime:toleranceBefore:toleranceAfter:completionHandler:, passing nil for the completionHandler if you don't require notification of completion"]
        #[method(seekToTime:toleranceBefore:toleranceAfter:)]
        pub unsafe fn seekToTime_toleranceBefore_toleranceAfter(
            &self,
            time: CMTime,
            tolerance_before: CMTime,
            tolerance_after: CMTime,
        );

        #[deprecated = "Use -seekToDate:completionHandler:, passing nil for the completionHandler if you don't require notification of completion"]
        #[method(seekToDate:)]
        pub unsafe fn seekToDate(&self, date: &NSDate) -> bool;

        #[cfg(feature = "AVMediaSelectionGroup")]
        #[deprecated = "Use currentMediaSelection to obtain an instance of AVMediaSelection, which encompasses the currently selected AVMediaSelectionOption in each of the available AVMediaSelectionGroups"]
        #[method_id(@__retain_semantics Other selectedMediaOptionInMediaSelectionGroup:)]
        pub unsafe fn selectedMediaOptionInMediaSelectionGroup(
            &self,
            media_selection_group: &AVMediaSelectionGroup,
        ) -> Option<Retained<AVMediaSelectionOption>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemaccesslog?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemAccessLog;
);

unsafe impl Send for AVPlayerItemAccessLog {}

unsafe impl Sync for AVPlayerItemAccessLog {}

unsafe impl NSCopying for AVPlayerItemAccessLog {}

unsafe impl CopyingHelper for AVPlayerItemAccessLog {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerItemAccessLog {}

extern_methods!(
    unsafe impl AVPlayerItemAccessLog {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other extendedLogData)]
        pub unsafe fn extendedLogData(&self) -> Option<Retained<NSData>>;

        #[method(extendedLogDataStringEncoding)]
        pub unsafe fn extendedLogDataStringEncoding(&self) -> NSStringEncoding;

        #[method_id(@__retain_semantics Other events)]
        pub unsafe fn events(&self) -> Retained<NSArray<AVPlayerItemAccessLogEvent>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemerrorlog?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemErrorLog;
);

unsafe impl Send for AVPlayerItemErrorLog {}

unsafe impl Sync for AVPlayerItemErrorLog {}

unsafe impl NSCopying for AVPlayerItemErrorLog {}

unsafe impl CopyingHelper for AVPlayerItemErrorLog {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerItemErrorLog {}

extern_methods!(
    unsafe impl AVPlayerItemErrorLog {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other extendedLogData)]
        pub unsafe fn extendedLogData(&self) -> Option<Retained<NSData>>;

        #[method(extendedLogDataStringEncoding)]
        pub unsafe fn extendedLogDataStringEncoding(&self) -> NSStringEncoding;

        #[method_id(@__retain_semantics Other events)]
        pub unsafe fn events(&self) -> Retained<NSArray<AVPlayerItemErrorLogEvent>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemaccesslogevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemAccessLogEvent;
);

unsafe impl Send for AVPlayerItemAccessLogEvent {}

unsafe impl Sync for AVPlayerItemAccessLogEvent {}

unsafe impl NSCopying for AVPlayerItemAccessLogEvent {}

unsafe impl CopyingHelper for AVPlayerItemAccessLogEvent {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerItemAccessLogEvent {}

extern_methods!(
    unsafe impl AVPlayerItemAccessLogEvent {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated]
        #[method(numberOfSegmentsDownloaded)]
        pub unsafe fn numberOfSegmentsDownloaded(&self) -> NSInteger;

        #[method(numberOfMediaRequests)]
        pub unsafe fn numberOfMediaRequests(&self) -> NSInteger;

        #[method_id(@__retain_semantics Other playbackStartDate)]
        pub unsafe fn playbackStartDate(&self) -> Option<Retained<NSDate>>;

        #[method_id(@__retain_semantics Other URI)]
        pub unsafe fn URI(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other serverAddress)]
        pub unsafe fn serverAddress(&self) -> Option<Retained<NSString>>;

        #[method(numberOfServerAddressChanges)]
        pub unsafe fn numberOfServerAddressChanges(&self) -> NSInteger;

        #[method_id(@__retain_semantics Other playbackSessionID)]
        pub unsafe fn playbackSessionID(&self) -> Option<Retained<NSString>>;

        #[method(playbackStartOffset)]
        pub unsafe fn playbackStartOffset(&self) -> NSTimeInterval;

        #[method(segmentsDownloadedDuration)]
        pub unsafe fn segmentsDownloadedDuration(&self) -> NSTimeInterval;

        #[method(durationWatched)]
        pub unsafe fn durationWatched(&self) -> NSTimeInterval;

        #[method(numberOfStalls)]
        pub unsafe fn numberOfStalls(&self) -> NSInteger;

        #[method(numberOfBytesTransferred)]
        pub unsafe fn numberOfBytesTransferred(&self) -> c_longlong;

        #[method(transferDuration)]
        pub unsafe fn transferDuration(&self) -> NSTimeInterval;

        #[method(observedBitrate)]
        pub unsafe fn observedBitrate(&self) -> c_double;

        #[method(indicatedBitrate)]
        pub unsafe fn indicatedBitrate(&self) -> c_double;

        #[method(indicatedAverageBitrate)]
        pub unsafe fn indicatedAverageBitrate(&self) -> c_double;

        #[method(averageVideoBitrate)]
        pub unsafe fn averageVideoBitrate(&self) -> c_double;

        #[method(averageAudioBitrate)]
        pub unsafe fn averageAudioBitrate(&self) -> c_double;

        #[method(numberOfDroppedVideoFrames)]
        pub unsafe fn numberOfDroppedVideoFrames(&self) -> NSInteger;

        #[method(startupTime)]
        pub unsafe fn startupTime(&self) -> NSTimeInterval;

        #[method(downloadOverdue)]
        pub unsafe fn downloadOverdue(&self) -> NSInteger;

        #[deprecated = "Use observedBitrateStandardDeviation to monitor variance in network bitrate."]
        #[method(observedMaxBitrate)]
        pub unsafe fn observedMaxBitrate(&self) -> c_double;

        #[deprecated = "Use observedBitrateStandardDeviation to monitor variance in network bitrate."]
        #[method(observedMinBitrate)]
        pub unsafe fn observedMinBitrate(&self) -> c_double;

        #[method(observedBitrateStandardDeviation)]
        pub unsafe fn observedBitrateStandardDeviation(&self) -> c_double;

        #[method_id(@__retain_semantics Other playbackType)]
        pub unsafe fn playbackType(&self) -> Option<Retained<NSString>>;

        #[method(mediaRequestsWWAN)]
        pub unsafe fn mediaRequestsWWAN(&self) -> NSInteger;

        #[method(switchBitrate)]
        pub unsafe fn switchBitrate(&self) -> c_double;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemerrorlogevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemErrorLogEvent;
);

unsafe impl Send for AVPlayerItemErrorLogEvent {}

unsafe impl Sync for AVPlayerItemErrorLogEvent {}

unsafe impl NSCopying for AVPlayerItemErrorLogEvent {}

unsafe impl CopyingHelper for AVPlayerItemErrorLogEvent {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerItemErrorLogEvent {}

extern_methods!(
    unsafe impl AVPlayerItemErrorLogEvent {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other date)]
        pub unsafe fn date(&self) -> Option<Retained<NSDate>>;

        #[method_id(@__retain_semantics Other URI)]
        pub unsafe fn URI(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other serverAddress)]
        pub unsafe fn serverAddress(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other playbackSessionID)]
        pub unsafe fn playbackSessionID(&self) -> Option<Retained<NSString>>;

        #[method(errorStatusCode)]
        pub unsafe fn errorStatusCode(&self) -> NSInteger;

        #[method_id(@__retain_semantics Other errorDomain)]
        pub unsafe fn errorDomain(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other errorComment)]
        pub unsafe fn errorComment(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other allHTTPResponseHeaderFields)]
        pub unsafe fn allHTTPResponseHeaderFields(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, NSString>>>;
    }
);

extern_methods!(
    /// AVMetricEventStreamPublisher
    unsafe impl AVPlayerItem {}
);

#[cfg(feature = "AVMetrics")]
unsafe impl AVMetricEventStreamPublisher for AVPlayerItem {}
