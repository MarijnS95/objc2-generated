//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-image")]
#[cfg(not(target_os = "watchos"))]
use objc2_core_image::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avpixelaspectratio?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVPixelAspectRatio {
    pub horizontalSpacing: NSInteger,
    pub verticalSpacing: NSInteger,
}

unsafe impl Encode for AVPixelAspectRatio {
    const ENCODING: Encoding =
        Encoding::Struct("?", &[<NSInteger>::ENCODING, <NSInteger>::ENCODING]);
}

unsafe impl RefEncode for AVPixelAspectRatio {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avedgewidths?language=objc)
#[cfg(feature = "objc2-core-foundation")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVEdgeWidths {
    pub left: CGFloat,
    pub top: CGFloat,
    pub right: CGFloat,
    pub bottom: CGFloat,
}

#[cfg(feature = "objc2-core-foundation")]
unsafe impl Encode for AVEdgeWidths {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2-core-foundation")]
unsafe impl RefEncode for AVEdgeWidths {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionrendercontext?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoCompositionRenderContext;
);

unsafe impl Send for AVVideoCompositionRenderContext {}

unsafe impl Sync for AVVideoCompositionRenderContext {}

unsafe impl NSObjectProtocol for AVVideoCompositionRenderContext {}

extern_methods!(
    unsafe impl AVVideoCompositionRenderContext {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(size)]
        pub unsafe fn size(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(renderTransform)]
        pub unsafe fn renderTransform(&self) -> CGAffineTransform;

        #[method(renderScale)]
        pub unsafe fn renderScale(&self) -> c_float;

        #[method(pixelAspectRatio)]
        pub unsafe fn pixelAspectRatio(&self) -> AVPixelAspectRatio;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(edgeWidths)]
        pub unsafe fn edgeWidths(&self) -> AVEdgeWidths;

        #[method(highQualityRendering)]
        pub unsafe fn highQualityRendering(&self) -> bool;

        #[cfg(feature = "AVVideoComposition")]
        #[method_id(@__retain_semantics Other videoComposition)]
        pub unsafe fn videoComposition(&self) -> Retained<AVVideoComposition>;

        #[cfg(feature = "objc2-core-video")]
        #[method(newPixelBuffer)]
        pub unsafe fn newPixelBuffer(&self) -> CVPixelBufferRef;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoCompositionRenderContext {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionrenderhint?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoCompositionRenderHint;
);

unsafe impl Send for AVVideoCompositionRenderHint {}

unsafe impl Sync for AVVideoCompositionRenderHint {}

unsafe impl NSObjectProtocol for AVVideoCompositionRenderHint {}

extern_methods!(
    unsafe impl AVVideoCompositionRenderHint {
        #[cfg(feature = "objc2-core-media")]
        #[method(startCompositionTime)]
        pub unsafe fn startCompositionTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(endCompositionTime)]
        pub unsafe fn endCompositionTime(&self) -> CMTime;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoCompositionRenderHint {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositing?language=objc)
    pub unsafe trait AVVideoCompositing: NSObjectProtocol {
        #[method_id(@__retain_semantics Other sourcePixelBufferAttributes)]
        unsafe fn sourcePixelBufferAttributes(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method_id(@__retain_semantics Other requiredPixelBufferAttributesForRenderContext)]
        unsafe fn requiredPixelBufferAttributesForRenderContext(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[method(renderContextChanged:)]
        unsafe fn renderContextChanged(&self, new_render_context: &AVVideoCompositionRenderContext);

        #[method(startVideoCompositionRequest:)]
        unsafe fn startVideoCompositionRequest(
            &self,
            async_video_composition_request: &AVAsynchronousVideoCompositionRequest,
        );

        #[optional]
        #[method(cancelAllPendingVideoCompositionRequests)]
        unsafe fn cancelAllPendingVideoCompositionRequests(&self);

        #[optional]
        #[method(supportsWideColorSourceFrames)]
        unsafe fn supportsWideColorSourceFrames(&self) -> bool;

        #[optional]
        #[method(supportsHDRSourceFrames)]
        unsafe fn supportsHDRSourceFrames(&self) -> bool;

        #[optional]
        #[method(canConformColorOfSourceFrames)]
        unsafe fn canConformColorOfSourceFrames(&self) -> bool;

        #[optional]
        #[method(anticipateRenderingUsingHint:)]
        unsafe fn anticipateRenderingUsingHint(&self, render_hint: &AVVideoCompositionRenderHint);

        #[optional]
        #[method(prerollForRenderingUsingHint:)]
        unsafe fn prerollForRenderingUsingHint(&self, render_hint: &AVVideoCompositionRenderHint);
    }

    unsafe impl ProtocolType for dyn AVVideoCompositing {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avasynchronousvideocompositionrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAsynchronousVideoCompositionRequest;
);

unsafe impl NSCopying for AVAsynchronousVideoCompositionRequest {}

unsafe impl CopyingHelper for AVAsynchronousVideoCompositionRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAsynchronousVideoCompositionRequest {}

extern_methods!(
    unsafe impl AVAsynchronousVideoCompositionRequest {
        #[method_id(@__retain_semantics Other renderContext)]
        pub unsafe fn renderContext(&self) -> Retained<AVVideoCompositionRenderContext>;

        #[cfg(feature = "objc2-core-media")]
        #[method(compositionTime)]
        pub unsafe fn compositionTime(&self) -> CMTime;

        #[method_id(@__retain_semantics Other sourceTrackIDs)]
        pub unsafe fn sourceTrackIDs(&self) -> Retained<NSArray<NSNumber>>;

        #[method_id(@__retain_semantics Other sourceSampleDataTrackIDs)]
        pub unsafe fn sourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;

        #[method_id(@__retain_semantics Other videoCompositionInstruction)]
        pub unsafe fn videoCompositionInstruction(
            &self,
        ) -> Retained<ProtocolObject<dyn AVVideoCompositionInstructionProtocol>>;

        #[cfg(all(feature = "objc2-core-media", feature = "objc2-core-video"))]
        #[method(sourceFrameByTrackID:)]
        pub unsafe fn sourceFrameByTrackID(
            &self,
            track_id: CMPersistentTrackID,
        ) -> CVPixelBufferRef;

        #[cfg(feature = "objc2-core-media")]
        #[method(sourceSampleBufferByTrackID:)]
        pub unsafe fn sourceSampleBufferByTrackID(
            &self,
            track_id: CMPersistentTrackID,
        ) -> CMSampleBufferRef;

        #[cfg(all(feature = "AVTimedMetadataGroup", feature = "objc2-core-media"))]
        #[method_id(@__retain_semantics Other sourceTimedMetadataByTrackID:)]
        pub unsafe fn sourceTimedMetadataByTrackID(
            &self,
            track_id: CMPersistentTrackID,
        ) -> Option<Retained<AVTimedMetadataGroup>>;

        #[cfg(feature = "objc2-core-video")]
        #[method(finishWithComposedVideoFrame:)]
        pub unsafe fn finishWithComposedVideoFrame(&self, composed_video_frame: CVPixelBufferRef);

        #[method(finishWithError:)]
        pub unsafe fn finishWithError(&self, error: &NSError);

        #[method(finishCancelledRequest)]
        pub unsafe fn finishCancelledRequest(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVAsynchronousVideoCompositionRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avasynchronousciimagefilteringrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAsynchronousCIImageFilteringRequest;
);

unsafe impl NSCopying for AVAsynchronousCIImageFilteringRequest {}

unsafe impl CopyingHelper for AVAsynchronousCIImageFilteringRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAsynchronousCIImageFilteringRequest {}

extern_methods!(
    unsafe impl AVAsynchronousCIImageFilteringRequest {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(renderSize)]
        pub unsafe fn renderSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-media")]
        #[method(compositionTime)]
        pub unsafe fn compositionTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-image")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other sourceImage)]
        pub unsafe fn sourceImage(&self) -> Retained<CIImage>;

        #[cfg(feature = "objc2-core-image")]
        #[cfg(not(target_os = "watchos"))]
        #[method(finishWithImage:context:)]
        pub unsafe fn finishWithImage_context(
            &self,
            filtered_image: &CIImage,
            context: Option<&CIContext>,
        );

        #[method(finishWithError:)]
        pub unsafe fn finishWithError(&self, error: &NSError);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVAsynchronousCIImageFilteringRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositioninstructionprotocol?language=objc)
    pub unsafe trait AVVideoCompositionInstructionProtocol: NSObjectProtocol {
        #[cfg(feature = "objc2-core-media")]
        #[method(timeRange)]
        unsafe fn timeRange(&self) -> CMTimeRange;

        #[method(enablePostProcessing)]
        unsafe fn enablePostProcessing(&self) -> bool;

        #[method(containsTweening)]
        unsafe fn containsTweening(&self) -> bool;

        #[method_id(@__retain_semantics Other requiredSourceTrackIDs)]
        unsafe fn requiredSourceTrackIDs(&self) -> Option<Retained<NSArray<NSValue>>>;

        #[cfg(feature = "objc2-core-media")]
        #[method(passthroughTrackID)]
        unsafe fn passthroughTrackID(&self) -> CMPersistentTrackID;

        #[optional]
        #[method_id(@__retain_semantics Other requiredSourceSampleDataTrackIDs)]
        unsafe fn requiredSourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;
    }

    unsafe impl ProtocolType for dyn AVVideoCompositionInstructionProtocol {
        const NAME: &'static str = "AVVideoCompositionInstruction";
    }
);
