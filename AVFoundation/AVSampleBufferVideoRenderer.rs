//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffervideorendererdidfailtodecodenotification?language=objc)
    pub static AVSampleBufferVideoRendererDidFailToDecodeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffervideorendererdidfailtodecodenotificationerrorkey?language=objc)
    pub static AVSampleBufferVideoRendererDidFailToDecodeNotificationErrorKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffervideorendererrequiresflushtoresumedecodingdidchangenotification?language=objc)
    pub static AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotification:
        &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffervideorenderer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleBufferVideoRenderer;
);

#[cfg(feature = "AVQueuedSampleBufferRendering")]
unsafe impl AVQueuedSampleBufferRendering for AVSampleBufferVideoRenderer {}

unsafe impl NSObjectProtocol for AVSampleBufferVideoRenderer {}

extern_methods!(
    unsafe impl AVSampleBufferVideoRenderer {
        #[cfg(feature = "AVQueuedSampleBufferRendering")]
        #[method(status)]
        pub unsafe fn status(&self) -> AVQueuedSampleBufferRenderingStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[method(requiresFlushToResumeDecoding)]
        pub unsafe fn requiresFlushToResumeDecoding(&self) -> bool;

        #[cfg(feature = "block2")]
        #[method(flushWithRemovalOfDisplayedImage:completionHandler:)]
        pub unsafe fn flushWithRemovalOfDisplayedImage_completionHandler(
            &self,
            remove_displayed_image: bool,
            handler: Option<&block2::Block<dyn Fn()>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVSampleBufferVideoRenderer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVSampleBufferVideoRendererPixelBufferOutput
    unsafe impl AVSampleBufferVideoRenderer {
        #[cfg(feature = "objc2-core-video")]
        #[method(copyDisplayedPixelBuffer)]
        pub unsafe fn copyDisplayedPixelBuffer(&self) -> CVPixelBufferRef;
    }
);

extern_methods!(
    /// AVSampleBufferVideoRendererPowerOptimization
    unsafe impl AVSampleBufferVideoRenderer {
        #[cfg(feature = "objc2-core-media")]
        #[method(expectMinimumUpcomingSampleBufferPresentationTime:)]
        pub unsafe fn expectMinimumUpcomingSampleBufferPresentationTime(
            &self,
            minimum_upcoming_presentation_time: CMTime,
        );

        #[method(expectMonotonicallyIncreasingUpcomingSampleBufferPresentationTimes)]
        pub unsafe fn expectMonotonicallyIncreasingUpcomingSampleBufferPresentationTimes(&self);

        #[method(resetUpcomingSampleBufferPresentationTimeExpectations)]
        pub unsafe fn resetUpcomingSampleBufferPresentationTimeExpectations(&self);
    }
);

extern_methods!(
    /// AVSampleBufferVideoRendererVideoPerformanceMetrics
    unsafe impl AVSampleBufferVideoRenderer {
        #[cfg(all(feature = "AVVideoPerformanceMetrics", feature = "block2"))]
        #[method(loadVideoPerformanceMetricsWithCompletionHandler:)]
        pub unsafe fn loadVideoPerformanceMetricsWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut AVVideoPerformanceMetrics)>,
        );
    }
);
