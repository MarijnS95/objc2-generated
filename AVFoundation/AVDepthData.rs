//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdepthdataquality?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVDepthDataQuality(pub NSInteger);
impl AVDepthDataQuality {
    #[doc(alias = "AVDepthDataQualityLow")]
    pub const Low: Self = Self(0);
    #[doc(alias = "AVDepthDataQualityHigh")]
    pub const High: Self = Self(1);
}

unsafe impl Encode for AVDepthDataQuality {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVDepthDataQuality {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdepthdataaccuracy?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVDepthDataAccuracy(pub NSInteger);
impl AVDepthDataAccuracy {
    #[doc(alias = "AVDepthDataAccuracyRelative")]
    pub const Relative: Self = Self(0);
    #[doc(alias = "AVDepthDataAccuracyAbsolute")]
    pub const Absolute: Self = Self(1);
}

unsafe impl Encode for AVDepthDataAccuracy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVDepthDataAccuracy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdepthdata?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDepthData;
);

unsafe impl NSObjectProtocol for AVDepthData {}

extern_methods!(
    unsafe impl AVDepthData {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other depthDataFromDictionaryRepresentation:error:_)]
        pub unsafe fn depthDataFromDictionaryRepresentation_error(
            image_source_aux_data_info_dictionary: &NSDictionary,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Other depthDataByConvertingToDepthDataType:)]
        pub unsafe fn depthDataByConvertingToDepthDataType(
            &self,
            depth_data_type: OSType,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-video")]
        #[method_id(@__retain_semantics Other depthDataByReplacingDepthDataMapWithPixelBuffer:error:_)]
        pub unsafe fn depthDataByReplacingDepthDataMapWithPixelBuffer_error(
            &self,
            pixel_buffer: CVPixelBufferRef,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Other availableDepthDataTypes)]
        pub unsafe fn availableDepthDataTypes(&self) -> Retained<NSArray<NSNumber>>;

        #[method_id(@__retain_semantics Other dictionaryRepresentationForAuxiliaryDataType:)]
        pub unsafe fn dictionaryRepresentationForAuxiliaryDataType(
            &self,
            out_aux_data_type: Option<&mut Option<Retained<NSString>>>,
        ) -> Option<Retained<NSDictionary>>;

        #[method(depthDataType)]
        pub unsafe fn depthDataType(&self) -> OSType;

        #[cfg(feature = "objc2-core-video")]
        #[method(depthDataMap)]
        pub unsafe fn depthDataMap(&self) -> CVPixelBufferRef;

        #[method(depthDataQuality)]
        pub unsafe fn depthDataQuality(&self) -> AVDepthDataQuality;

        #[method(isDepthDataFiltered)]
        pub unsafe fn isDepthDataFiltered(&self) -> bool;

        #[method(depthDataAccuracy)]
        pub unsafe fn depthDataAccuracy(&self) -> AVDepthDataAccuracy;

        #[cfg(feature = "AVCameraCalibrationData")]
        #[method_id(@__retain_semantics Other cameraCalibrationData)]
        pub unsafe fn cameraCalibrationData(&self) -> Option<Retained<AVCameraCalibrationData>>;
    }
);
