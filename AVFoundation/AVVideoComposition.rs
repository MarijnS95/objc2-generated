//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionperframehdrdisplaymetadatapolicy?language=objc)
// NS_TYPED_ENUM
pub type AVVideoCompositionPerFrameHDRDisplayMetadataPolicy = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionperframehdrdisplaymetadatapolicypropagate?language=objc)
    pub static AVVideoCompositionPerFrameHDRDisplayMetadataPolicyPropagate:
        &'static AVVideoCompositionPerFrameHDRDisplayMetadataPolicy;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionperframehdrdisplaymetadatapolicygenerate?language=objc)
    pub static AVVideoCompositionPerFrameHDRDisplayMetadataPolicyGenerate:
        &'static AVVideoCompositionPerFrameHDRDisplayMetadataPolicy;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocomposition?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoComposition;
);

unsafe impl NSCopying for AVVideoComposition {}

unsafe impl CopyingHelper for AVVideoComposition {
    type Result = Self;
}

unsafe impl NSMutableCopying for AVVideoComposition {}

unsafe impl MutableCopyingHelper for AVVideoComposition {
    type Result = AVMutableVideoComposition;
}

unsafe impl NSObjectProtocol for AVVideoComposition {}

extern_methods!(
    unsafe impl AVVideoComposition {
        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use videoCompositionWithPropertiesOfAsset:completionHandler: instead"]
        #[method_id(@__retain_semantics Other videoCompositionWithPropertiesOfAsset:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset(
            asset: &AVAsset,
        ) -> Retained<AVVideoComposition>;

        #[cfg(all(feature = "AVAsset", feature = "block2"))]
        #[method(videoCompositionWithPropertiesOfAsset:completionHandler:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset_completionHandler(
            asset: &AVAsset,
            completion_handler: &block2::Block<dyn Fn(*mut AVVideoComposition, *mut NSError)>,
        );

        #[cfg(feature = "AVVideoCompositing")]
        #[method(customVideoCompositorClass)]
        pub unsafe fn customVideoCompositorClass(&self) -> Option<&'static AnyClass>;

        #[cfg(feature = "objc2-core-media")]
        #[method(frameDuration)]
        pub unsafe fn frameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(sourceTrackIDForFrameTiming)]
        pub unsafe fn sourceTrackIDForFrameTiming(&self) -> CMPersistentTrackID;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(renderSize)]
        pub unsafe fn renderSize(&self) -> CGSize;

        #[method(renderScale)]
        pub unsafe fn renderScale(&self) -> c_float;

        #[cfg(feature = "AVVideoCompositing")]
        #[method_id(@__retain_semantics Other instructions)]
        pub unsafe fn instructions(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn AVVideoCompositionInstructionProtocol>>>;

        #[method_id(@__retain_semantics Other animationTool)]
        pub unsafe fn animationTool(&self)
            -> Option<Retained<AVVideoCompositionCoreAnimationTool>>;

        #[method_id(@__retain_semantics Other sourceSampleDataTrackIDs)]
        pub unsafe fn sourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoComposition {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVVideoCompositionColorimetery
    unsafe impl AVVideoComposition {
        #[method_id(@__retain_semantics Other colorPrimaries)]
        pub unsafe fn colorPrimaries(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other colorYCbCrMatrix)]
        pub unsafe fn colorYCbCrMatrix(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other colorTransferFunction)]
        pub unsafe fn colorTransferFunction(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other perFrameHDRDisplayMetadataPolicy)]
        pub unsafe fn perFrameHDRDisplayMetadataPolicy(
            &self,
        ) -> Retained<AVVideoCompositionPerFrameHDRDisplayMetadataPolicy>;
    }
);

extern_methods!(
    /// AVVideoCompositionFiltering
    unsafe impl AVVideoComposition {
        #[cfg(all(
            feature = "AVAsset",
            feature = "AVVideoCompositing",
            feature = "block2"
        ))]
        #[deprecated = "Use videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler: instead"]
        #[method_id(@__retain_semantics Other videoCompositionWithAsset:applyingCIFiltersWithHandler:)]
        pub unsafe fn videoCompositionWithAsset_applyingCIFiltersWithHandler(
            asset: &AVAsset,
            applier: &block2::Block<dyn Fn(NonNull<AVAsynchronousCIImageFilteringRequest>)>,
        ) -> Retained<AVVideoComposition>;

        #[cfg(all(
            feature = "AVAsset",
            feature = "AVVideoCompositing",
            feature = "block2"
        ))]
        #[method(videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:)]
        pub unsafe fn videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler(
            asset: &AVAsset,
            applier: &block2::Block<dyn Fn(NonNull<AVAsynchronousCIImageFilteringRequest>)>,
            completion_handler: &block2::Block<dyn Fn(*mut AVVideoComposition, *mut NSError)>,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmutablevideocomposition?language=objc)
    #[unsafe(super(AVVideoComposition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMutableVideoComposition;
);

unsafe impl NSCopying for AVMutableVideoComposition {}

unsafe impl CopyingHelper for AVMutableVideoComposition {
    type Result = AVVideoComposition;
}

unsafe impl NSMutableCopying for AVMutableVideoComposition {}

unsafe impl MutableCopyingHelper for AVMutableVideoComposition {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVMutableVideoComposition {}

extern_methods!(
    unsafe impl AVMutableVideoComposition {
        #[method_id(@__retain_semantics Other videoComposition)]
        pub unsafe fn videoComposition() -> Retained<AVMutableVideoComposition>;

        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use videoCompositionWithPropertiesOfAsset:completionHandler: instead"]
        #[method_id(@__retain_semantics Other videoCompositionWithPropertiesOfAsset:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset(
            asset: &AVAsset,
        ) -> Retained<AVMutableVideoComposition>;

        #[cfg(all(feature = "AVAsset", feature = "block2"))]
        #[method(videoCompositionWithPropertiesOfAsset:completionHandler:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset_completionHandler(
            asset: &AVAsset,
            completion_handler: &block2::Block<
                dyn Fn(*mut AVMutableVideoComposition, *mut NSError),
            >,
        );

        #[cfg(feature = "AVAsset")]
        #[deprecated = "Use videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler: instead"]
        #[method_id(@__retain_semantics Other videoCompositionWithPropertiesOfAsset:prototypeInstruction:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset_prototypeInstruction(
            asset: &AVAsset,
            prototype_instruction: &AVVideoCompositionInstruction,
        ) -> Retained<AVMutableVideoComposition>;

        #[cfg(all(feature = "AVAsset", feature = "block2"))]
        #[method(videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler:)]
        pub unsafe fn videoCompositionWithPropertiesOfAsset_prototypeInstruction_completionHandler(
            asset: &AVAsset,
            prototype_instruction: &AVVideoCompositionInstruction,
            completion_handler: &block2::Block<
                dyn Fn(*mut AVMutableVideoComposition, *mut NSError),
            >,
        );

        #[cfg(feature = "AVVideoCompositing")]
        #[method(customVideoCompositorClass)]
        pub unsafe fn customVideoCompositorClass(&self) -> Option<&'static AnyClass>;

        #[cfg(feature = "AVVideoCompositing")]
        #[method(setCustomVideoCompositorClass:)]
        pub unsafe fn setCustomVideoCompositorClass(
            &self,
            custom_video_compositor_class: Option<&AnyClass>,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(frameDuration)]
        pub unsafe fn frameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setFrameDuration:)]
        pub unsafe fn setFrameDuration(&self, frame_duration: CMTime);

        #[cfg(feature = "objc2-core-media")]
        #[method(sourceTrackIDForFrameTiming)]
        pub unsafe fn sourceTrackIDForFrameTiming(&self) -> CMPersistentTrackID;

        #[cfg(feature = "objc2-core-media")]
        #[method(setSourceTrackIDForFrameTiming:)]
        pub unsafe fn setSourceTrackIDForFrameTiming(
            &self,
            source_track_id_for_frame_timing: CMPersistentTrackID,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(renderSize)]
        pub unsafe fn renderSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setRenderSize:)]
        pub unsafe fn setRenderSize(&self, render_size: CGSize);

        #[method(renderScale)]
        pub unsafe fn renderScale(&self) -> c_float;

        #[method(setRenderScale:)]
        pub unsafe fn setRenderScale(&self, render_scale: c_float);

        #[cfg(feature = "AVVideoCompositing")]
        #[method_id(@__retain_semantics Other instructions)]
        pub unsafe fn instructions(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn AVVideoCompositionInstructionProtocol>>>;

        #[cfg(feature = "AVVideoCompositing")]
        #[method(setInstructions:)]
        pub unsafe fn setInstructions(
            &self,
            instructions: &NSArray<ProtocolObject<dyn AVVideoCompositionInstructionProtocol>>,
        );

        #[method_id(@__retain_semantics Other animationTool)]
        pub unsafe fn animationTool(&self)
            -> Option<Retained<AVVideoCompositionCoreAnimationTool>>;

        #[method(setAnimationTool:)]
        pub unsafe fn setAnimationTool(
            &self,
            animation_tool: Option<&AVVideoCompositionCoreAnimationTool>,
        );

        #[method_id(@__retain_semantics Other sourceSampleDataTrackIDs)]
        pub unsafe fn sourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;

        #[method(setSourceSampleDataTrackIDs:)]
        pub unsafe fn setSourceSampleDataTrackIDs(
            &self,
            source_sample_data_track_i_ds: &NSArray<NSNumber>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVMutableVideoComposition {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVMutableVideoCompositionColorimetery
    unsafe impl AVMutableVideoComposition {
        #[method_id(@__retain_semantics Other colorPrimaries)]
        pub unsafe fn colorPrimaries(&self) -> Option<Retained<NSString>>;

        #[method(setColorPrimaries:)]
        pub unsafe fn setColorPrimaries(&self, color_primaries: Option<&NSString>);

        #[method_id(@__retain_semantics Other colorYCbCrMatrix)]
        pub unsafe fn colorYCbCrMatrix(&self) -> Option<Retained<NSString>>;

        #[method(setColorYCbCrMatrix:)]
        pub unsafe fn setColorYCbCrMatrix(&self, color_y_cb_cr_matrix: Option<&NSString>);

        #[method_id(@__retain_semantics Other colorTransferFunction)]
        pub unsafe fn colorTransferFunction(&self) -> Option<Retained<NSString>>;

        #[method(setColorTransferFunction:)]
        pub unsafe fn setColorTransferFunction(&self, color_transfer_function: Option<&NSString>);

        #[method_id(@__retain_semantics Other perFrameHDRDisplayMetadataPolicy)]
        pub unsafe fn perFrameHDRDisplayMetadataPolicy(
            &self,
        ) -> Retained<AVVideoCompositionPerFrameHDRDisplayMetadataPolicy>;

        #[method(setPerFrameHDRDisplayMetadataPolicy:)]
        pub unsafe fn setPerFrameHDRDisplayMetadataPolicy(
            &self,
            per_frame_hdr_display_metadata_policy: &AVVideoCompositionPerFrameHDRDisplayMetadataPolicy,
        );
    }
);

extern_methods!(
    /// AVMutableVideoCompositionFiltering
    unsafe impl AVMutableVideoComposition {
        #[cfg(all(
            feature = "AVAsset",
            feature = "AVVideoCompositing",
            feature = "block2"
        ))]
        #[deprecated = "Use videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler: instead"]
        #[method_id(@__retain_semantics Other videoCompositionWithAsset:applyingCIFiltersWithHandler:)]
        pub unsafe fn videoCompositionWithAsset_applyingCIFiltersWithHandler(
            asset: &AVAsset,
            applier: &block2::Block<dyn Fn(NonNull<AVAsynchronousCIImageFilteringRequest>)>,
        ) -> Retained<AVMutableVideoComposition>;

        #[cfg(all(
            feature = "AVAsset",
            feature = "AVVideoCompositing",
            feature = "block2"
        ))]
        #[method(videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:)]
        pub unsafe fn videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler(
            asset: &AVAsset,
            applier: &block2::Block<dyn Fn(NonNull<AVAsynchronousCIImageFilteringRequest>)>,
            completion_handler: &block2::Block<
                dyn Fn(*mut AVMutableVideoComposition, *mut NSError),
            >,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositioninstruction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoCompositionInstruction;
);

#[cfg(feature = "AVVideoCompositing")]
unsafe impl AVVideoCompositionInstructionProtocol for AVVideoCompositionInstruction {}

unsafe impl NSCoding for AVVideoCompositionInstruction {}

unsafe impl NSCopying for AVVideoCompositionInstruction {}

unsafe impl CopyingHelper for AVVideoCompositionInstruction {
    type Result = Self;
}

unsafe impl NSMutableCopying for AVVideoCompositionInstruction {}

unsafe impl MutableCopyingHelper for AVVideoCompositionInstruction {
    type Result = AVMutableVideoCompositionInstruction;
}

unsafe impl NSObjectProtocol for AVVideoCompositionInstruction {}

unsafe impl NSSecureCoding for AVVideoCompositionInstruction {}

extern_methods!(
    unsafe impl AVVideoCompositionInstruction {
        #[cfg(feature = "objc2-core-media")]
        #[method(timeRange)]
        pub unsafe fn timeRange(&self) -> CMTimeRange;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> CGColorRef;

        #[method_id(@__retain_semantics Other layerInstructions)]
        pub unsafe fn layerInstructions(
            &self,
        ) -> Retained<NSArray<AVVideoCompositionLayerInstruction>>;

        #[method(enablePostProcessing)]
        pub unsafe fn enablePostProcessing(&self) -> bool;

        #[method_id(@__retain_semantics Other requiredSourceTrackIDs)]
        pub unsafe fn requiredSourceTrackIDs(&self) -> Retained<NSArray<NSValue>>;

        #[cfg(feature = "objc2-core-media")]
        #[method(passthroughTrackID)]
        pub unsafe fn passthroughTrackID(&self) -> CMPersistentTrackID;

        #[method_id(@__retain_semantics Other requiredSourceSampleDataTrackIDs)]
        pub unsafe fn requiredSourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoCompositionInstruction {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmutablevideocompositioninstruction?language=objc)
    #[unsafe(super(AVVideoCompositionInstruction, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMutableVideoCompositionInstruction;
);

#[cfg(feature = "AVVideoCompositing")]
unsafe impl AVVideoCompositionInstructionProtocol for AVMutableVideoCompositionInstruction {}

unsafe impl NSCoding for AVMutableVideoCompositionInstruction {}

unsafe impl NSCopying for AVMutableVideoCompositionInstruction {}

unsafe impl CopyingHelper for AVMutableVideoCompositionInstruction {
    type Result = AVVideoCompositionInstruction;
}

unsafe impl NSMutableCopying for AVMutableVideoCompositionInstruction {}

unsafe impl MutableCopyingHelper for AVMutableVideoCompositionInstruction {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVMutableVideoCompositionInstruction {}

unsafe impl NSSecureCoding for AVMutableVideoCompositionInstruction {}

extern_methods!(
    unsafe impl AVMutableVideoCompositionInstruction {
        #[method_id(@__retain_semantics Other videoCompositionInstruction)]
        pub unsafe fn videoCompositionInstruction() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(timeRange)]
        pub unsafe fn timeRange(&self) -> CMTimeRange;

        #[cfg(feature = "objc2-core-media")]
        #[method(setTimeRange:)]
        pub unsafe fn setTimeRange(&self, time_range: CMTimeRange);

        #[cfg(feature = "objc2-core-graphics")]
        #[method(backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> CGColorRef;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, background_color: CGColorRef);

        #[method_id(@__retain_semantics Other layerInstructions)]
        pub unsafe fn layerInstructions(
            &self,
        ) -> Retained<NSArray<AVVideoCompositionLayerInstruction>>;

        #[method(setLayerInstructions:)]
        pub unsafe fn setLayerInstructions(
            &self,
            layer_instructions: &NSArray<AVVideoCompositionLayerInstruction>,
        );

        #[method(enablePostProcessing)]
        pub unsafe fn enablePostProcessing(&self) -> bool;

        #[method(setEnablePostProcessing:)]
        pub unsafe fn setEnablePostProcessing(&self, enable_post_processing: bool);

        #[method_id(@__retain_semantics Other requiredSourceSampleDataTrackIDs)]
        pub unsafe fn requiredSourceSampleDataTrackIDs(&self) -> Retained<NSArray<NSNumber>>;

        #[method(setRequiredSourceSampleDataTrackIDs:)]
        pub unsafe fn setRequiredSourceSampleDataTrackIDs(
            &self,
            required_source_sample_data_track_i_ds: &NSArray<NSNumber>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVMutableVideoCompositionInstruction {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionlayerinstruction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoCompositionLayerInstruction;
);

unsafe impl NSCoding for AVVideoCompositionLayerInstruction {}

unsafe impl NSCopying for AVVideoCompositionLayerInstruction {}

unsafe impl CopyingHelper for AVVideoCompositionLayerInstruction {
    type Result = Self;
}

unsafe impl NSMutableCopying for AVVideoCompositionLayerInstruction {}

unsafe impl MutableCopyingHelper for AVVideoCompositionLayerInstruction {
    type Result = AVMutableVideoCompositionLayerInstruction;
}

unsafe impl NSObjectProtocol for AVVideoCompositionLayerInstruction {}

unsafe impl NSSecureCoding for AVVideoCompositionLayerInstruction {}

extern_methods!(
    unsafe impl AVVideoCompositionLayerInstruction {
        #[cfg(feature = "objc2-core-media")]
        #[method(trackID)]
        pub unsafe fn trackID(&self) -> CMPersistentTrackID;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(getTransformRampForTime:startTransform:endTransform:timeRange:)]
        pub unsafe fn getTransformRampForTime_startTransform_endTransform_timeRange(
            &self,
            time: CMTime,
            start_transform: *mut CGAffineTransform,
            end_transform: *mut CGAffineTransform,
            time_range: *mut CMTimeRange,
        ) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[method(getOpacityRampForTime:startOpacity:endOpacity:timeRange:)]
        pub unsafe fn getOpacityRampForTime_startOpacity_endOpacity_timeRange(
            &self,
            time: CMTime,
            start_opacity: *mut c_float,
            end_opacity: *mut c_float,
            time_range: *mut CMTimeRange,
        ) -> bool;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:)]
        pub unsafe fn getCropRectangleRampForTime_startCropRectangle_endCropRectangle_timeRange(
            &self,
            time: CMTime,
            start_crop_rectangle: *mut CGRect,
            end_crop_rectangle: *mut CGRect,
            time_range: *mut CMTimeRange,
        ) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoCompositionLayerInstruction {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmutablevideocompositionlayerinstruction?language=objc)
    #[unsafe(super(AVVideoCompositionLayerInstruction, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMutableVideoCompositionLayerInstruction;
);

unsafe impl NSCoding for AVMutableVideoCompositionLayerInstruction {}

unsafe impl NSCopying for AVMutableVideoCompositionLayerInstruction {}

unsafe impl CopyingHelper for AVMutableVideoCompositionLayerInstruction {
    type Result = AVVideoCompositionInstruction;
}

unsafe impl NSMutableCopying for AVMutableVideoCompositionLayerInstruction {}

unsafe impl MutableCopyingHelper for AVMutableVideoCompositionLayerInstruction {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVMutableVideoCompositionLayerInstruction {}

unsafe impl NSSecureCoding for AVMutableVideoCompositionLayerInstruction {}

extern_methods!(
    unsafe impl AVMutableVideoCompositionLayerInstruction {
        #[cfg(feature = "AVAssetTrack")]
        #[method_id(@__retain_semantics Other videoCompositionLayerInstructionWithAssetTrack:)]
        pub unsafe fn videoCompositionLayerInstructionWithAssetTrack(
            track: &AVAssetTrack,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other videoCompositionLayerInstruction)]
        pub unsafe fn videoCompositionLayerInstruction() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(trackID)]
        pub unsafe fn trackID(&self) -> CMPersistentTrackID;

        #[cfg(feature = "objc2-core-media")]
        #[method(setTrackID:)]
        pub unsafe fn setTrackID(&self, track_id: CMPersistentTrackID);

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(setTransformRampFromStartTransform:toEndTransform:timeRange:)]
        pub unsafe fn setTransformRampFromStartTransform_toEndTransform_timeRange(
            &self,
            start_transform: CGAffineTransform,
            end_transform: CGAffineTransform,
            time_range: CMTimeRange,
        );

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(setTransform:atTime:)]
        pub unsafe fn setTransform_atTime(&self, transform: CGAffineTransform, time: CMTime);

        #[cfg(feature = "objc2-core-media")]
        #[method(setOpacityRampFromStartOpacity:toEndOpacity:timeRange:)]
        pub unsafe fn setOpacityRampFromStartOpacity_toEndOpacity_timeRange(
            &self,
            start_opacity: c_float,
            end_opacity: c_float,
            time_range: CMTimeRange,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(setOpacity:atTime:)]
        pub unsafe fn setOpacity_atTime(&self, opacity: c_float, time: CMTime);

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:)]
        pub unsafe fn setCropRectangleRampFromStartCropRectangle_toEndCropRectangle_timeRange(
            &self,
            start_crop_rectangle: CGRect,
            end_crop_rectangle: CGRect,
            time_range: CMTimeRange,
        );

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
        #[method(setCropRectangle:atTime:)]
        pub unsafe fn setCropRectangle_atTime(&self, crop_rectangle: CGRect, time: CMTime);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVMutableVideoCompositionLayerInstruction {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositioncoreanimationtool?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoCompositionCoreAnimationTool;
);

unsafe impl NSObjectProtocol for AVVideoCompositionCoreAnimationTool {}

extern_methods!(
    unsafe impl AVVideoCompositionCoreAnimationTool {
        #[cfg(all(feature = "objc2-core-media", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:)]
        pub unsafe fn videoCompositionCoreAnimationToolWithAdditionalLayer_asTrackID(
            layer: &CALayer,
            track_id: CMPersistentTrackID,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:)]
        pub unsafe fn videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer_inLayer(
            video_layer: &CALayer,
            animation_layer: &CALayer,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:)]
        pub unsafe fn videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers_inLayer(
            video_layers: &NSArray<CALayer>,
            animation_layer: &CALayer,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVVideoCompositionCoreAnimationTool {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVAssetVideoCompositionUtility
    #[cfg(feature = "AVAsset")]
    unsafe impl AVAsset {
        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use findUnusedTrackIDWithCompletionHandler: instead"]
        #[method(unusedTrackID)]
        pub unsafe fn unusedTrackID(&self) -> CMPersistentTrackID;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(findUnusedTrackIDWithCompletionHandler:)]
        pub unsafe fn findUnusedTrackIDWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(CMPersistentTrackID, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVVideoCompositionValidation
    unsafe impl AVVideoComposition {
        #[cfg(all(feature = "AVAsset", feature = "objc2-core-media"))]
        #[deprecated = "Use isValidForTracks:assetDuration:timeRange:validationDelegate: instead"]
        #[method(isValidForAsset:timeRange:validationDelegate:)]
        pub unsafe fn isValidForAsset_timeRange_validationDelegate(
            &self,
            asset: Option<&AVAsset>,
            time_range: CMTimeRange,
            validation_delegate: Option<&ProtocolObject<dyn AVVideoCompositionValidationHandling>>,
        ) -> bool;

        #[cfg(all(feature = "AVAsset", feature = "block2", feature = "objc2-core-media"))]
        #[deprecated]
        #[method(determineValidityForAsset:timeRange:validationDelegate:completionHandler:)]
        pub unsafe fn determineValidityForAsset_timeRange_validationDelegate_completionHandler(
            &self,
            asset: Option<&AVAsset>,
            time_range: CMTimeRange,
            validation_delegate: Option<&ProtocolObject<dyn AVVideoCompositionValidationHandling>>,
            completion_handler: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );

        #[cfg(all(feature = "AVAssetTrack", feature = "objc2-core-media"))]
        #[method(isValidForTracks:assetDuration:timeRange:validationDelegate:)]
        pub unsafe fn isValidForTracks_assetDuration_timeRange_validationDelegate(
            &self,
            tracks: &NSArray<AVAssetTrack>,
            duration: CMTime,
            time_range: CMTimeRange,
            validation_delegate: Option<&ProtocolObject<dyn AVVideoCompositionValidationHandling>>,
        ) -> bool;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideocompositionvalidationhandling?language=objc)
    pub unsafe trait AVVideoCompositionValidationHandling: NSObjectProtocol {
        #[optional]
        #[method(videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:)]
        unsafe fn videoComposition_shouldContinueValidatingAfterFindingInvalidValueForKey(
            &self,
            video_composition: &AVVideoComposition,
            key: &NSString,
        ) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[optional]
        #[method(videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:)]
        unsafe fn videoComposition_shouldContinueValidatingAfterFindingEmptyTimeRange(
            &self,
            video_composition: &AVVideoComposition,
            time_range: CMTimeRange,
        ) -> bool;

        #[cfg(feature = "AVVideoCompositing")]
        #[optional]
        #[method(videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:)]
        unsafe fn videoComposition_shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction(
            &self,
            video_composition: &AVVideoComposition,
            video_composition_instruction: &ProtocolObject<
                dyn AVVideoCompositionInstructionProtocol,
            >,
        ) -> bool;

        #[cfg(all(feature = "AVAsset", feature = "AVVideoCompositing"))]
        #[optional]
        #[method(videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:)]
        unsafe fn videoComposition_shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction_layerInstruction_asset(
            &self,
            video_composition: &AVVideoComposition,
            video_composition_instruction: &ProtocolObject<
                dyn AVVideoCompositionInstructionProtocol,
            >,
            layer_instruction: &AVVideoCompositionLayerInstruction,
            asset: &AVAsset,
        ) -> bool;
    }

    unsafe impl ProtocolType for dyn AVVideoCompositionValidationHandling {}
);
