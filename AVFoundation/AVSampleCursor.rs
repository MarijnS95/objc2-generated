//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleCursor;
);

unsafe impl Send for AVSampleCursor {}

unsafe impl Sync for AVSampleCursor {}

unsafe impl NSCopying for AVSampleCursor {}

unsafe impl CopyingHelper for AVSampleCursor {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVSampleCursor {}

extern_methods!(
    unsafe impl AVSampleCursor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(stepInDecodeOrderByCount:)]
        pub unsafe fn stepInDecodeOrderByCount(&self, step_count: i64) -> i64;

        #[method(stepInPresentationOrderByCount:)]
        pub unsafe fn stepInPresentationOrderByCount(&self, step_count: i64) -> i64;

        #[cfg(feature = "objc2-core-media")]
        #[method(stepByDecodeTime:wasPinned:)]
        pub unsafe fn stepByDecodeTime_wasPinned(
            &self,
            delta_decode_time: CMTime,
            out_was_pinned: *mut Bool,
        ) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(stepByPresentationTime:wasPinned:)]
        pub unsafe fn stepByPresentationTime_wasPinned(
            &self,
            delta_presentation_time: CMTime,
            out_was_pinned: *mut Bool,
        ) -> CMTime;
    }
);

extern_methods!(
    /// AVSampleCursorTemporalPosition
    unsafe impl AVSampleCursor {
        #[cfg(feature = "objc2-core-media")]
        #[method(presentationTimeStamp)]
        pub unsafe fn presentationTimeStamp(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(decodeTimeStamp)]
        pub unsafe fn decodeTimeStamp(&self) -> CMTime;

        #[method(comparePositionInDecodeOrderWithPositionOfCursor:)]
        pub unsafe fn comparePositionInDecodeOrderWithPositionOfCursor(
            &self,
            cursor: &AVSampleCursor,
        ) -> NSComparisonResult;

        #[method(samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor:)]
        pub unsafe fn samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor(
            &self,
            cursor: &AVSampleCursor,
        ) -> bool;

        #[method(samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor:)]
        pub unsafe fn samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor(
            &self,
            cursor: &AVSampleCursor,
        ) -> bool;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursorsyncinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct AVSampleCursorSyncInfo {
    pub sampleIsFullSync: Bool,
    pub sampleIsPartialSync: Bool,
    pub sampleIsDroppable: Bool,
}

unsafe impl Encode for AVSampleCursorSyncInfo {
    const ENCODING: Encoding =
        Encoding::Struct("?", &[<Bool>::ENCODING, <Bool>::ENCODING, <Bool>::ENCODING]);
}

unsafe impl RefEncode for AVSampleCursorSyncInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursordependencyinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct AVSampleCursorDependencyInfo {
    pub sampleIndicatesWhetherItHasDependentSamples: Bool,
    pub sampleHasDependentSamples: Bool,
    pub sampleIndicatesWhetherItDependsOnOthers: Bool,
    pub sampleDependsOnOthers: Bool,
    pub sampleIndicatesWhetherItHasRedundantCoding: Bool,
    pub sampleHasRedundantCoding: Bool,
}

unsafe impl Encode for AVSampleCursorDependencyInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <Bool>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for AVSampleCursorDependencyInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursoraudiodependencyinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct AVSampleCursorAudioDependencyInfo {
    pub audioSampleIsIndependentlyDecodable: Bool,
    pub audioSamplePacketRefreshCount: NSInteger,
}

unsafe impl Encode for AVSampleCursorAudioDependencyInfo {
    const ENCODING: Encoding = Encoding::Struct("?", &[<Bool>::ENCODING, <NSInteger>::ENCODING]);
}

unsafe impl RefEncode for AVSampleCursorAudioDependencyInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVSampleCursorCurrentSampleInfo
    unsafe impl AVSampleCursor {
        #[cfg(feature = "objc2-core-media")]
        #[method(currentSampleDuration)]
        pub unsafe fn currentSampleDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(copyCurrentSampleFormatDescription)]
        pub unsafe fn copyCurrentSampleFormatDescription(&self) -> CMFormatDescriptionRef;

        #[method(currentSampleSyncInfo)]
        pub unsafe fn currentSampleSyncInfo(&self) -> AVSampleCursorSyncInfo;

        #[method(currentSampleDependencyInfo)]
        pub unsafe fn currentSampleDependencyInfo(&self) -> AVSampleCursorDependencyInfo;

        #[method_id(@__retain_semantics Other currentSampleDependencyAttachments)]
        pub unsafe fn currentSampleDependencyAttachments(&self) -> Option<Retained<NSDictionary>>;

        #[method(currentSampleAudioDependencyInfo)]
        pub unsafe fn currentSampleAudioDependencyInfo(&self) -> AVSampleCursorAudioDependencyInfo;

        #[method(samplesRequiredForDecoderRefresh)]
        pub unsafe fn samplesRequiredForDecoderRefresh(&self) -> NSInteger;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursorstoragerange?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVSampleCursorStorageRange {
    pub offset: i64,
    pub length: i64,
}

unsafe impl Encode for AVSampleCursorStorageRange {
    const ENCODING: Encoding = Encoding::Struct("?", &[<i64>::ENCODING, <i64>::ENCODING]);
}

unsafe impl RefEncode for AVSampleCursorStorageRange {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplecursorchunkinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct AVSampleCursorChunkInfo {
    pub chunkSampleCount: i64,
    pub chunkHasUniformSampleSizes: Bool,
    pub chunkHasUniformSampleDurations: Bool,
    pub chunkHasUniformFormatDescriptions: Bool,
}

unsafe impl Encode for AVSampleCursorChunkInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <i64>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
            <Bool>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for AVSampleCursorChunkInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVSampleCursorSampleStorageInfo
    unsafe impl AVSampleCursor {
        #[method_id(@__retain_semantics Other currentChunkStorageURL)]
        pub unsafe fn currentChunkStorageURL(&self) -> Option<Retained<NSURL>>;

        #[method(currentChunkStorageRange)]
        pub unsafe fn currentChunkStorageRange(&self) -> AVSampleCursorStorageRange;

        #[method(currentChunkInfo)]
        pub unsafe fn currentChunkInfo(&self) -> AVSampleCursorChunkInfo;

        #[method(currentSampleIndexInChunk)]
        pub unsafe fn currentSampleIndexInChunk(&self) -> i64;

        #[method(currentSampleStorageRange)]
        pub unsafe fn currentSampleStorageRange(&self) -> AVSampleCursorStorageRange;
    }
);
