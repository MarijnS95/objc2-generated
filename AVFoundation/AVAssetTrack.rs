//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An AVAsset is an abstract class that defines AVFoundation's model for timed audiovisual media.
    ///
    /// Each asset contains a collection of tracks that are intended to be presented or processed together, each of a uniform media type, including but not limited to audio, video, text, closed captions, and subtitles.
    ///
    ///
    /// AVAssets are often instantiated via its concrete subclass AVURLAsset with NSURLs that refer to audiovisual media resources, such as streams (including HTTP live streams), QuickTime movie files, MP3 files, and files of other types.
    ///
    /// They can also be instantiated using other concrete subclasses that extend the basic model for audiovisual media in useful ways, as AVComposition does for temporal editing.
    ///
    /// Properties of assets as a whole are defined by AVAsset. Additionally, references to instances of AVAssetTracks representing tracks of the collection can be obtained, so that each of these can be examined independently.
    ///
    /// Because of the nature of timed audiovisual media, upon successful initialization of an AVAsset some or all of the values for its keys may not be immediately available. The value of any key can be requested at any time, and AVAsset will always return its value synchronously, although it may have to block the calling thread in order to do so.
    ///
    /// In order to avoid blocking, clients can register their interest in particular keys and to become notified when their values become available. For further details, see AVAsynchronousKeyValueLoading.h. For clients who want to examine a subset of the tracks, metadata, and other parts of the asset, asynchronous methods like -loadTracksWithMediaType:completionHandler: can be used to load this information without blocking. When using these asynchronous methods, it is not necessary to load the associated property beforehand. Swift clients can also use the load(:) method to load properties in a type safe manner.
    ///
    /// On platforms other than macOS, it is particularly important to avoid blocking.  To preserve responsiveness, a synchronous request that blocks for too long (eg, a property request on an asset on a slow HTTP server) may lead to media services being reset.
    ///
    /// To play an instance of AVAsset, initialize an instance of AVPlayerItem with it, use the AVPlayerItem to set up its presentation state (such as whether only a limited timeRange of the asset should be played, etc.), and provide the AVPlayerItem to an AVPlayer according to whether the items is to be played by itself or together with a collection of other items. Full details available in AVPlayerItem.h and AVPlayer.h.
    ///
    /// AVAssets can also be inserted into AVMutableCompositions in order to assemble audiovisual constructs from one or more source assets.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassettrack?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetTrack;
);

#[cfg(feature = "AVAsynchronousKeyValueLoading")]
unsafe impl AVAsynchronousKeyValueLoading for AVAssetTrack {}

unsafe impl NSCopying for AVAssetTrack {}

unsafe impl CopyingHelper for AVAssetTrack {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAssetTrack {}

extern_methods!(
    unsafe impl AVAssetTrack {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        #[method_id(asset)]
        #[unsafe(method_family = none)]
        pub unsafe fn asset(&self) -> Option<Retained<AVAsset>>;

        #[cfg(feature = "objc2-core-media")]
        #[method(trackID)]
        pub unsafe fn trackID(&self) -> CMPersistentTrackID;
    }
);

extern_methods!(
    /// AVAssetTrackBasicPropertiesAndCharacteristics
    unsafe impl AVAssetTrack {
        #[cfg(feature = "AVMediaFormat")]
        #[method_id(mediaType)]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaType(&self) -> Retained<AVMediaType>;

        #[method_id(formatDescriptions)]
        #[unsafe(method_family = none)]
        pub unsafe fn formatDescriptions(&self) -> Retained<NSArray>;

        #[method(isPlayable)]
        pub unsafe fn isPlayable(&self) -> bool;

        #[method(isDecodable)]
        pub unsafe fn isDecodable(&self) -> bool;

        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        #[method(isSelfContained)]
        pub unsafe fn isSelfContained(&self) -> bool;

        #[method(totalSampleDataLength)]
        pub unsafe fn totalSampleDataLength(&self) -> c_longlong;

        #[cfg(feature = "AVMediaFormat")]
        /// Reports whether the track references media with the specified media characteristic.
        ///
        /// Parameter `mediaCharacteristic`: The media characteristic of interest, e.g. AVMediaCharacteristicVisual, AVMediaCharacteristicAudible, AVMediaCharacteristicLegible, etc.,
        /// as defined above.
        ///
        /// Returns: YES if the track references media with the specified characteristic, otherwise NO.
        #[method(hasMediaCharacteristic:)]
        pub unsafe fn hasMediaCharacteristic(
            &self,
            media_characteristic: &AVMediaCharacteristic,
        ) -> bool;
    }
);

extern_methods!(
    /// AVAssetTrackTemporalProperties
    unsafe impl AVAssetTrack {
        #[cfg(feature = "objc2-core-media")]
        #[method(timeRange)]
        pub unsafe fn timeRange(&self) -> CMTimeRange;

        #[cfg(feature = "objc2-core-media")]
        #[method(naturalTimeScale)]
        pub unsafe fn naturalTimeScale(&self) -> CMTimeScale;

        #[method(estimatedDataRate)]
        pub unsafe fn estimatedDataRate(&self) -> c_float;
    }
);

extern_methods!(
    /// AVAssetTrackLanguageProperties
    unsafe impl AVAssetTrack {
        #[method_id(languageCode)]
        #[unsafe(method_family = none)]
        pub unsafe fn languageCode(&self) -> Option<Retained<NSString>>;

        #[method_id(extendedLanguageTag)]
        #[unsafe(method_family = none)]
        pub unsafe fn extendedLanguageTag(&self) -> Option<Retained<NSString>>;
    }
);

extern_methods!(
    /// AVAssetTrackPropertiesForVisualCharacteristic
    unsafe impl AVAssetTrack {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(naturalSize)]
        pub unsafe fn naturalSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(preferredTransform)]
        pub unsafe fn preferredTransform(&self) -> CGAffineTransform;
    }
);

extern_methods!(
    /// AVAssetTrackPropertiesForAudibleCharacteristic
    unsafe impl AVAssetTrack {
        #[method(preferredVolume)]
        pub unsafe fn preferredVolume(&self) -> c_float;

        #[method(hasAudioSampleDependencies)]
        pub unsafe fn hasAudioSampleDependencies(&self) -> bool;
    }
);

extern_methods!(
    /// AVAssetTrackPropertiesForFrameBasedCharacteristic
    unsafe impl AVAssetTrack {
        /// For tracks that carry a full frame per media sample, indicates the frame rate of the track in units of frames per second.
        ///
        /// For field-based video tracks that carry one field per media sample, the value of this property is the field rate, not the frame rate.
        #[method(nominalFrameRate)]
        pub unsafe fn nominalFrameRate(&self) -> c_float;

        #[cfg(feature = "objc2-core-media")]
        #[method(minFrameDuration)]
        pub unsafe fn minFrameDuration(&self) -> CMTime;

        /// Indicates whether samples in the track may have different values for their presentation and decode timestamps.
        #[method(requiresFrameReordering)]
        pub unsafe fn requiresFrameReordering(&self) -> bool;
    }
);

extern_methods!(
    /// AVAssetTrackSegments
    unsafe impl AVAssetTrack {
        #[cfg(feature = "AVAssetTrackSegment")]
        #[method_id(segments)]
        #[unsafe(method_family = none)]
        pub unsafe fn segments(&self) -> Retained<NSArray<AVAssetTrackSegment>>;

        #[cfg(all(feature = "AVAssetTrackSegment", feature = "objc2-core-media"))]
        /// Supplies the AVAssetTrackSegment from the segments array with a target timeRange that either contains the specified track time or is the closest to it among the target timeRanges of the track's segments.
        ///
        /// Parameter `trackTime`: The trackTime for which an AVAssetTrackSegment is requested.
        ///
        /// Returns: An AVAssetTrackSegment.
        ///
        /// If the trackTime does not map to a sample presentation time (e.g. it's outside the track's timeRange), the segment closest in time to the specified trackTime is returned.
        #[deprecated = "Use loadSegmentForTrackTime:completionHandler: instead"]
        #[method_id(segmentForTrackTime:)]
        #[unsafe(method_family = none)]
        pub unsafe fn segmentForTrackTime(
            &self,
            track_time: CMTime,
        ) -> Option<Retained<AVAssetTrackSegment>>;

        #[cfg(all(
            feature = "AVAssetTrackSegment",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        /// Loads the AVAssetTrackSegment from the segments array with a target timeRange that either contains the specified track time or is the closest to it among the target timeRanges of the track's segments.
        ///
        /// Parameter `trackTime`: The trackTime for which an AVAssetTrackSegment is requested.
        ///
        /// Parameter `completionHandler`: A block that is invoked when loading is complete, vending an AVAssetTrackSegment or an error.
        ///
        /// If the trackTime does not map to a sample presentation time (e.g. it's outside the track's timeRange), the segment closest in time to the specified trackTime is returned.
        #[method(loadSegmentForTrackTime:completionHandler:)]
        pub unsafe fn loadSegmentForTrackTime_completionHandler(
            &self,
            track_time: CMTime,
            completion_handler: &block2::Block<dyn Fn(*mut AVAssetTrackSegment, *mut NSError)>,
        );

        #[cfg(feature = "objc2-core-media")]
        /// Maps the specified trackTime through the appropriate time mapping and returns the resulting sample presentation time.
        ///
        /// Parameter `trackTime`: The trackTime for which a sample presentation time is requested.
        ///
        /// Returns: A CMTime; will be invalid if the trackTime is out of range
        #[deprecated = "Use loadSamplePresentationTimeForTrackTime:completionHandler: instead"]
        #[method(samplePresentationTimeForTrackTime:)]
        pub unsafe fn samplePresentationTimeForTrackTime(&self, track_time: CMTime) -> CMTime;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        /// Maps the specified trackTime through the appropriate time mapping and loads the resulting sample presentation time.
        ///
        /// Parameter `trackTime`: The trackTime for which a sample presentation time is requested.
        ///
        /// Parameter `completionHandler`: A block that is invoked when loading is complete, vending a CMTime (which will be invalid if the trackTime is out of range) or an error.
        #[method(loadSamplePresentationTimeForTrackTime:completionHandler:)]
        pub unsafe fn loadSamplePresentationTimeForTrackTime_completionHandler(
            &self,
            track_time: CMTime,
            completion_handler: &block2::Block<dyn Fn(CMTime, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVAssetTrackMetadataReading
    unsafe impl AVAssetTrack {
        #[cfg(feature = "AVMetadataItem")]
        #[method_id(commonMetadata)]
        #[unsafe(method_family = none)]
        pub unsafe fn commonMetadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(metadata)]
        #[unsafe(method_family = none)]
        pub unsafe fn metadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataFormat")]
        #[method_id(availableMetadataFormats)]
        #[unsafe(method_family = none)]
        pub unsafe fn availableMetadataFormats(&self) -> Retained<NSArray<AVMetadataFormat>>;

        #[cfg(all(feature = "AVMetadataFormat", feature = "AVMetadataItem"))]
        /// Provides an NSArray of AVMetadataItems, one for each metadata item in the container of the specified format.
        ///
        /// Parameter `format`: The metadata format for which items are requested.
        ///
        /// Returns: An NSArray containing AVMetadataItems.
        ///
        /// Becomes callable without blocking when the key
        /// "
        /// availableMetadataFormats" has been loaded
        #[deprecated = "Use loadMetadataForFormat:completionHandler: instead"]
        #[method_id(metadataForFormat:)]
        #[unsafe(method_family = none)]
        pub unsafe fn metadataForFormat(
            &self,
            format: &AVMetadataFormat,
        ) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(all(
            feature = "AVMetadataFormat",
            feature = "AVMetadataItem",
            feature = "block2"
        ))]
        /// Loads an NSArray of AVMetadataItems, one for each metadata item in the container of the specified format.
        ///
        /// Parameter `format`: The metadata format for which items are requested.
        ///
        /// Parameter `completionHandler`: A block that is invoked when loading is complete, vending the array of metadata items (which may be empty if there is no metadata of the specified format) or an error.
        #[method(loadMetadataForFormat:completionHandler:)]
        pub unsafe fn loadMetadataForFormat_completionHandler(
            &self,
            format: &AVMetadataFormat,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<AVMetadataItem>, *mut NSError)>,
        );
    }
);

/// The type of a track association.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtype?language=objc)
// NS_TYPED_ENUM
pub type AVTrackAssociationType = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypeaudiofallback?language=objc)
    pub static AVTrackAssociationTypeAudioFallback: &'static AVTrackAssociationType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypechapterlist?language=objc)
    pub static AVTrackAssociationTypeChapterList: &'static AVTrackAssociationType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypeforcedsubtitlesonly?language=objc)
    pub static AVTrackAssociationTypeForcedSubtitlesOnly: &'static AVTrackAssociationType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypeselectionfollower?language=objc)
    pub static AVTrackAssociationTypeSelectionFollower: &'static AVTrackAssociationType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypetimecode?language=objc)
    pub static AVTrackAssociationTypeTimecode: &'static AVTrackAssociationType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avtrackassociationtypemetadatareferent?language=objc)
    pub static AVTrackAssociationTypeMetadataReferent: &'static AVTrackAssociationType;
}

extern_methods!(
    /// AVAssetTrackTrackAssociations
    unsafe impl AVAssetTrack {
        #[method_id(availableTrackAssociationTypes)]
        #[unsafe(method_family = none)]
        pub unsafe fn availableTrackAssociationTypes(
            &self,
        ) -> Retained<NSArray<AVTrackAssociationType>>;

        /// Provides an NSArray of AVAssetTracks, one for each track associated with the receiver with the specified type of track association.
        ///
        /// Parameter `trackAssociationType`: The type of track association for which associated tracks are requested.
        ///
        /// Returns: An NSArray containing AVAssetTracks; may be empty if there is no associated tracks of the specified type.
        ///
        /// Becomes callable without blocking when the key
        /// "
        /// availableTrackAssociationTypes" has been loaded.
        #[deprecated = "Use loadAssociatedTracksOfType:completionHandler: instead"]
        #[method_id(associatedTracksOfType:)]
        #[unsafe(method_family = none)]
        pub unsafe fn associatedTracksOfType(
            &self,
            track_association_type: &AVTrackAssociationType,
        ) -> Retained<NSArray<AVAssetTrack>>;

        #[cfg(feature = "block2")]
        /// Provides an NSArray of AVAssetTracks, one for each track associated with the receiver with the specified type of track association.
        ///
        /// Parameter `trackAssociationType`: The type of track association for which associated tracks are requested.
        ///
        /// Parameter `completionHandler`: A block that is invoked when loading is comlete, vending an array of tracks (which may be empty if there is no associated tracks of the specified type) or an error.
        /// `
        #[method(loadAssociatedTracksOfType:completionHandler:)]
        pub unsafe fn loadAssociatedTracksOfType_completionHandler(
            &self,
            track_association_type: &AVTrackAssociationType,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<AVAssetTrack>, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVAssetTrackSampleCursorProvision
    unsafe impl AVAssetTrack {
        #[method(canProvideSampleCursors)]
        pub unsafe fn canProvideSampleCursors(&self) -> bool;

        #[cfg(all(feature = "AVSampleCursor", feature = "objc2-core-media"))]
        /// Creates an instance of AVSampleCursor and positions it at or near the specified presentation timestamp.
        ///
        /// Parameter `presentationTimeStamp`: The desired initial presentation timestamp of the returned AVSampleCursor.
        ///
        /// Returns: An instance of AVSampleCursor.
        ///
        /// If the receiver's asset has a value of YES for providesPreciseDurationAndTiming, the sample cursor will be accurately positioned at the receiver's last media sample with presentation timestamp less than or equal to the desired timestamp, or, if there are no such samples, the first sample in presentation order.
        /// If the receiver's asset has a value of NO for providesPreciseDurationAndTiming, and it is prohibitively expensive to locate the precise sample at the desired timestamp, the sample cursor may be approximately positioned.
        /// This method will return nil if there are no samples in the track.
        #[method_id(makeSampleCursorWithPresentationTimeStamp:)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeSampleCursorWithPresentationTimeStamp(
            &self,
            presentation_time_stamp: CMTime,
        ) -> Option<Retained<AVSampleCursor>>;

        #[cfg(feature = "AVSampleCursor")]
        /// Creates an instance of AVSampleCursor and positions it at the receiver's first media sample in decode order.
        ///
        /// Returns: An instance of AVSampleCursor.
        ///
        /// This method will return nil if there are no samples in the track.
        #[method_id(makeSampleCursorAtFirstSampleInDecodeOrder)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeSampleCursorAtFirstSampleInDecodeOrder(
            &self,
        ) -> Option<Retained<AVSampleCursor>>;

        #[cfg(feature = "AVSampleCursor")]
        /// Creates an instance of AVSampleCursor and positions it at the receiver's last media sample in decode order.
        ///
        /// Returns: An instance of AVSampleCursor.
        ///
        /// This method will return nil if there are no samples in the track.
        #[method_id(makeSampleCursorAtLastSampleInDecodeOrder)]
        #[unsafe(method_family = none)]
        pub unsafe fn makeSampleCursorAtLastSampleInDecodeOrder(
            &self,
        ) -> Option<Retained<AVSampleCursor>>;
    }
);

extern "C" {
    /// Posted when the timeRange of an AVFragmentedAssetTrack changes while the associated instance of AVFragmentedAsset is being minded by an AVFragmentedAssetMinder, but only for changes that occur after the status of the value of
    /// "
    /// timeRange" has reached AVKeyValueStatusLoaded.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassettracktimerangedidchangenotification?language=objc)
    pub static AVAssetTrackTimeRangeDidChangeNotification: &'static NSString;
}

extern "C" {
    /// Posted when the array of segments of an AVFragmentedAssetTrack changes while the associated instance of AVFragmentedAsset is being minded by an AVFragmentedAssetMinder, but only for changes that occur after the status of the value of
    /// "
    /// segments" has reached AVKeyValueStatusLoaded.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassettracksegmentsdidchangenotification?language=objc)
    pub static AVAssetTrackSegmentsDidChangeNotification: &'static NSString;
}

extern "C" {
    /// Posted when the collection of track associations of an AVAssetTrack changes, but only for changes that occur after the status of the value of
    /// "
    /// availableTrackAssociationTypes" has reached AVKeyValueStatusLoaded.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassettracktrackassociationsdidchangenotification?language=objc)
    pub static AVAssetTrackTrackAssociationsDidChangeNotification: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avfragmentedassettrack?language=objc)
    #[unsafe(super(AVAssetTrack, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVFragmentedAssetTrack;
);

unsafe impl Send for AVFragmentedAssetTrack {}

unsafe impl Sync for AVFragmentedAssetTrack {}

#[cfg(feature = "AVAsynchronousKeyValueLoading")]
unsafe impl AVAsynchronousKeyValueLoading for AVFragmentedAssetTrack {}

unsafe impl NSCopying for AVFragmentedAssetTrack {}

unsafe impl CopyingHelper for AVFragmentedAssetTrack {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVFragmentedAssetTrack {}

extern_methods!(
    unsafe impl AVFragmentedAssetTrack {}
);

extern_methods!(
    /// Methods declared on superclass `AVAssetTrack`
    unsafe impl AVFragmentedAssetTrack {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
