//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysystem?language=objc)
// NS_TYPED_ENUM
pub type AVContentKeySystem = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysystemfairplaystreaming?language=objc)
    pub static AVContentKeySystemFairPlayStreaming: &'static AVContentKeySystem;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysystemclearkey?language=objc)
    pub static AVContentKeySystemClearKey: &'static AVContentKeySystem;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysystemauthorizationtoken?language=objc)
    pub static AVContentKeySystemAuthorizationToken: &'static AVContentKeySystem;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysessionserverplaybackcontextoption?language=objc)
// NS_TYPED_ENUM
pub type AVContentKeySessionServerPlaybackContextOption = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysessionserverplaybackcontextoptionprotocolversions?language=objc)
    pub static AVContentKeySessionServerPlaybackContextOptionProtocolVersions:
        &'static AVContentKeySessionServerPlaybackContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysessionserverplaybackcontextoptionserverchallenge?language=objc)
    pub static AVContentKeySessionServerPlaybackContextOptionServerChallenge:
        &'static AVContentKeySessionServerPlaybackContextOption;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVContentKeySession;
);

unsafe impl Send for AVContentKeySession {}

unsafe impl Sync for AVContentKeySession {}

unsafe impl NSObjectProtocol for AVContentKeySession {}

extern_methods!(
    unsafe impl AVContentKeySession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other contentKeySessionWithKeySystem:)]
        pub unsafe fn contentKeySessionWithKeySystem(
            key_system: &AVContentKeySystem,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other contentKeySessionWithKeySystem:storageDirectoryAtURL:)]
        pub unsafe fn contentKeySessionWithKeySystem_storageDirectoryAtURL(
            key_system: &AVContentKeySystem,
            storage_url: &NSURL,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVContentKeySessionDelegate>>>;

        #[method_id(@__retain_semantics Other storageURL)]
        pub unsafe fn storageURL(&self) -> Option<Retained<NSURL>>;

        #[method_id(@__retain_semantics Other keySystem)]
        pub unsafe fn keySystem(&self) -> Retained<AVContentKeySystem>;

        #[method(expire)]
        pub unsafe fn expire(&self);

        #[method_id(@__retain_semantics Other contentProtectionSessionIdentifier)]
        pub unsafe fn contentProtectionSessionIdentifier(&self) -> Option<Retained<NSData>>;

        #[method(processContentKeyRequestWithIdentifier:initializationData:options:)]
        pub unsafe fn processContentKeyRequestWithIdentifier_initializationData_options(
            &self,
            identifier: Option<&AnyObject>,
            initialization_data: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[method(renewExpiringResponseDataForContentKeyRequest:)]
        pub unsafe fn renewExpiringResponseDataForContentKeyRequest(
            &self,
            content_key_request: &AVContentKeyRequest,
        );

        #[cfg(feature = "block2")]
        #[method(makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:)]
        pub unsafe fn makeSecureTokenForExpirationDateOfPersistableContentKey_completionHandler(
            &self,
            persistable_content_key_data: &NSData,
            handler: &block2::Block<dyn Fn(*mut NSData, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(invalidatePersistableContentKey:options:completionHandler:)]
        pub unsafe fn invalidatePersistableContentKey_options_completionHandler(
            &self,
            persistable_content_key_data: &NSData,
            options: Option<
                &NSDictionary<AVContentKeySessionServerPlaybackContextOption, AnyObject>,
            >,
            handler: &block2::Block<dyn Fn(*mut NSData, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(invalidateAllPersistableContentKeysForApp:options:completionHandler:)]
        pub unsafe fn invalidateAllPersistableContentKeysForApp_options_completionHandler(
            &self,
            app_identifier: &NSData,
            options: Option<
                &NSDictionary<AVContentKeySessionServerPlaybackContextOption, AnyObject>,
            >,
            handler: &block2::Block<dyn Fn(*mut NSData, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVContentKeyRecipients
    unsafe impl AVContentKeySession {
        #[method(addContentKeyRecipient:)]
        pub unsafe fn addContentKeyRecipient(
            &self,
            recipient: &ProtocolObject<dyn AVContentKeyRecipient>,
        );

        #[method(removeContentKeyRecipient:)]
        pub unsafe fn removeContentKeyRecipient(
            &self,
            recipient: &ProtocolObject<dyn AVContentKeyRecipient>,
        );

        #[method_id(@__retain_semantics Other contentKeyRecipients)]
        pub unsafe fn contentKeyRecipients(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn AVContentKeyRecipient>>>;
    }
);

extern_methods!(
    /// AVContentKeySessionPendingExpiredSessionReports
    unsafe impl AVContentKeySession {
        #[method_id(@__retain_semantics Other pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:)]
        pub unsafe fn pendingExpiredSessionReportsWithAppIdentifier_storageDirectoryAtURL(
            app_identifier: &NSData,
            storage_url: &NSURL,
        ) -> Retained<NSArray<NSData>>;

        #[method(removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:)]
        pub unsafe fn removePendingExpiredSessionReports_withAppIdentifier_storageDirectoryAtURL(
            expired_session_reports: &NSArray<NSData>,
            app_identifier: &NSData,
            storage_url: &NSURL,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestretryreason?language=objc)
// NS_TYPED_ENUM
pub type AVContentKeyRequestRetryReason = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestretryreasontimedout?language=objc)
    pub static AVContentKeyRequestRetryReasonTimedOut: &'static AVContentKeyRequestRetryReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestretryreasonreceivedresponsewithexpiredlease?language=objc)
    pub static AVContentKeyRequestRetryReasonReceivedResponseWithExpiredLease:
        &'static AVContentKeyRequestRetryReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestretryreasonreceivedobsoletecontentkey?language=objc)
    pub static AVContentKeyRequestRetryReasonReceivedObsoleteContentKey:
        &'static AVContentKeyRequestRetryReason;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeysessiondelegate?language=objc)
    pub unsafe trait AVContentKeySessionDelegate: NSObjectProtocol {
        #[method(contentKeySession:didProvideContentKeyRequest:)]
        unsafe fn contentKeySession_didProvideContentKeyRequest(
            &self,
            session: &AVContentKeySession,
            key_request: &AVContentKeyRequest,
        );

        #[optional]
        #[method(contentKeySession:didProvideRenewingContentKeyRequest:)]
        unsafe fn contentKeySession_didProvideRenewingContentKeyRequest(
            &self,
            session: &AVContentKeySession,
            key_request: &AVContentKeyRequest,
        );

        #[optional]
        #[method(contentKeySession:didProvidePersistableContentKeyRequest:)]
        unsafe fn contentKeySession_didProvidePersistableContentKeyRequest(
            &self,
            session: &AVContentKeySession,
            key_request: &AVPersistableContentKeyRequest,
        );

        #[optional]
        #[method(contentKeySession:didUpdatePersistableContentKey:forContentKeyIdentifier:)]
        unsafe fn contentKeySession_didUpdatePersistableContentKey_forContentKeyIdentifier(
            &self,
            session: &AVContentKeySession,
            persistable_content_key: &NSData,
            key_identifier: &AnyObject,
        );

        #[optional]
        #[method(contentKeySession:contentKeyRequest:didFailWithError:)]
        unsafe fn contentKeySession_contentKeyRequest_didFailWithError(
            &self,
            session: &AVContentKeySession,
            key_request: &AVContentKeyRequest,
            err: &NSError,
        );

        #[optional]
        #[method(contentKeySession:shouldRetryContentKeyRequest:reason:)]
        unsafe fn contentKeySession_shouldRetryContentKeyRequest_reason(
            &self,
            session: &AVContentKeySession,
            key_request: &AVContentKeyRequest,
            retry_reason: &AVContentKeyRequestRetryReason,
        ) -> bool;

        #[optional]
        #[method(contentKeySession:contentKeyRequestDidSucceed:)]
        unsafe fn contentKeySession_contentKeyRequestDidSucceed(
            &self,
            session: &AVContentKeySession,
            key_request: &AVContentKeyRequest,
        );

        #[optional]
        #[method(contentKeySessionContentProtectionSessionIdentifierDidChange:)]
        unsafe fn contentKeySessionContentProtectionSessionIdentifierDidChange(
            &self,
            session: &AVContentKeySession,
        );

        #[optional]
        #[method(contentKeySessionDidGenerateExpiredSessionReport:)]
        unsafe fn contentKeySessionDidGenerateExpiredSessionReport(
            &self,
            session: &AVContentKeySession,
        );

        #[optional]
        #[method(contentKeySession:externalProtectionStatusDidChangeForContentKey:)]
        unsafe fn contentKeySession_externalProtectionStatusDidChangeForContentKey(
            &self,
            session: &AVContentKeySession,
            content_key: &AVContentKey,
        );

        #[optional]
        #[method(contentKeySession:didProvideContentKeyRequests:forInitializationData:)]
        unsafe fn contentKeySession_didProvideContentKeyRequests_forInitializationData(
            &self,
            session: &AVContentKeySession,
            key_requests: &NSArray<AVContentKeyRequest>,
            initialization_data: Option<&NSData>,
        );
    }

    unsafe impl ProtocolType for dyn AVContentKeySessionDelegate {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequeststatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVContentKeyRequestStatus(pub NSInteger);
impl AVContentKeyRequestStatus {
    #[doc(alias = "AVContentKeyRequestStatusRequestingResponse")]
    pub const RequestingResponse: Self = Self(0);
    #[doc(alias = "AVContentKeyRequestStatusReceivedResponse")]
    pub const ReceivedResponse: Self = Self(1);
    #[doc(alias = "AVContentKeyRequestStatusRenewed")]
    pub const Renewed: Self = Self(2);
    #[doc(alias = "AVContentKeyRequestStatusRetried")]
    pub const Retried: Self = Self(3);
    #[doc(alias = "AVContentKeyRequestStatusCancelled")]
    pub const Cancelled: Self = Self(4);
    #[doc(alias = "AVContentKeyRequestStatusFailed")]
    pub const Failed: Self = Self(5);
}

unsafe impl Encode for AVContentKeyRequestStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVContentKeyRequestStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestrequiresvalidationdatainsecuretokenkey?language=objc)
    pub static AVContentKeyRequestRequiresValidationDataInSecureTokenKey: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVContentKeyRequest;
);

unsafe impl Send for AVContentKeyRequest {}

unsafe impl Sync for AVContentKeyRequest {}

unsafe impl NSObjectProtocol for AVContentKeyRequest {}

extern_methods!(
    unsafe impl AVContentKeyRequest {
        #[method(status)]
        pub unsafe fn status(&self) -> AVContentKeyRequestStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Option<Retained<AnyObject>>;

        #[method_id(@__retain_semantics Other initializationData)]
        pub unsafe fn initializationData(&self) -> Option<Retained<NSData>>;

        #[method_id(@__retain_semantics Other options)]
        pub unsafe fn options(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[method(canProvidePersistableContentKey)]
        pub unsafe fn canProvidePersistableContentKey(&self) -> bool;

        #[method_id(@__retain_semantics Other contentKeySpecifier)]
        pub unsafe fn contentKeySpecifier(&self) -> Retained<AVContentKeySpecifier>;

        #[method_id(@__retain_semantics Other contentKey)]
        pub unsafe fn contentKey(&self) -> Option<Retained<AVContentKey>>;

        #[cfg(feature = "block2")]
        #[method(makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:)]
        pub unsafe fn makeStreamingContentKeyRequestDataForApp_contentIdentifier_options_completionHandler(
            &self,
            app_identifier: &NSData,
            content_identifier: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
            handler: &block2::Block<dyn Fn(*mut NSData, *mut NSError)>,
        );

        #[method(processContentKeyResponse:)]
        pub unsafe fn processContentKeyResponse(&self, key_response: &AVContentKeyResponse);

        #[method(processContentKeyResponseError:)]
        pub unsafe fn processContentKeyResponseError(&self, error: &NSError);

        #[deprecated]
        #[method(respondByRequestingPersistableContentKeyRequest)]
        pub unsafe fn respondByRequestingPersistableContentKeyRequest(&self);

        #[method(respondByRequestingPersistableContentKeyRequestAndReturnError:_)]
        pub unsafe fn respondByRequestingPersistableContentKeyRequestAndReturnError(
            &self,
        ) -> Result<(), Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVContentKeyRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avpersistablecontentkeyrequest?language=objc)
    #[unsafe(super(AVContentKeyRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPersistableContentKeyRequest;
);

unsafe impl Send for AVPersistableContentKeyRequest {}

unsafe impl Sync for AVPersistableContentKeyRequest {}

unsafe impl NSObjectProtocol for AVPersistableContentKeyRequest {}

extern_methods!(
    unsafe impl AVPersistableContentKeyRequest {
        #[method_id(@__retain_semantics Other persistableContentKeyFromKeyVendorResponse:options:error:_)]
        pub unsafe fn persistableContentKeyFromKeyVendorResponse_options_error(
            &self,
            key_vendor_response: &NSData,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Result<Retained<NSData>, Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPersistableContentKeyRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVContentKeyRequestRenewal
    unsafe impl AVContentKeyRequest {
        #[method(renewsExpiringResponseData)]
        pub unsafe fn renewsExpiringResponseData(&self) -> bool;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyresponse?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVContentKeyResponse;
);

unsafe impl Send for AVContentKeyResponse {}

unsafe impl Sync for AVContentKeyResponse {}

unsafe impl NSObjectProtocol for AVContentKeyResponse {}

extern_methods!(
    unsafe impl AVContentKeyResponse {
        #[method_id(@__retain_semantics Other contentKeyResponseWithFairPlayStreamingKeyResponseData:)]
        pub unsafe fn contentKeyResponseWithFairPlayStreamingKeyResponseData(
            key_response_data: &NSData,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other contentKeyResponseWithClearKeyData:initializationVector:)]
        pub unsafe fn contentKeyResponseWithClearKeyData_initializationVector(
            key_data: &NSData,
            initialization_vector: Option<&NSData>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other contentKeyResponseWithAuthorizationTokenData:)]
        pub unsafe fn contentKeyResponseWithAuthorizationTokenData(
            authorization_token_data: &NSData,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVContentKeyResponse {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrequestprotocolversionskey?language=objc)
    pub static AVContentKeyRequestProtocolVersionsKey: &'static NSString;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyrecipient?language=objc)
    pub unsafe trait AVContentKeyRecipient {
        #[optional]
        #[method(contentKeySession:didProvideContentKey:)]
        unsafe fn contentKeySession_didProvideContentKey(
            &self,
            content_key_session: &AVContentKeySession,
            content_key: &AVContentKey,
        );

        #[method(mayRequireContentKeysForMediaDataProcessing)]
        unsafe fn mayRequireContentKeysForMediaDataProcessing(&self) -> bool;
    }

    unsafe impl ProtocolType for dyn AVContentKeyRecipient {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkeyspecifier?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVContentKeySpecifier;
);

unsafe impl Send for AVContentKeySpecifier {}

unsafe impl Sync for AVContentKeySpecifier {}

unsafe impl NSObjectProtocol for AVContentKeySpecifier {}

extern_methods!(
    unsafe impl AVContentKeySpecifier {
        #[method_id(@__retain_semantics Other contentKeySpecifierForKeySystem:identifier:options:)]
        pub unsafe fn contentKeySpecifierForKeySystem_identifier_options(
            key_system: &AVContentKeySystem,
            content_key_identifier: &AnyObject,
            options: &NSDictionary<NSString, AnyObject>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initForKeySystem:identifier:options:)]
        pub unsafe fn initForKeySystem_identifier_options(
            this: Allocated<Self>,
            key_system: &AVContentKeySystem,
            content_key_identifier: &AnyObject,
            options: &NSDictionary<NSString, AnyObject>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other keySystem)]
        pub unsafe fn keySystem(&self) -> Retained<AVContentKeySystem>;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<AnyObject>;

        #[method_id(@__retain_semantics Other options)]
        pub unsafe fn options(&self) -> Retained<NSDictionary<NSString, AnyObject>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVContentKeySpecifier {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avexternalcontentprotectionstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVExternalContentProtectionStatus(pub NSInteger);
impl AVExternalContentProtectionStatus {
    #[doc(alias = "AVExternalContentProtectionStatusPending")]
    pub const Pending: Self = Self(0);
    #[doc(alias = "AVExternalContentProtectionStatusSufficient")]
    pub const Sufficient: Self = Self(1);
    #[doc(alias = "AVExternalContentProtectionStatusInsufficient")]
    pub const Insufficient: Self = Self(2);
}

unsafe impl Encode for AVExternalContentProtectionStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVExternalContentProtectionStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcontentkey?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVContentKey;
);

unsafe impl Send for AVContentKey {}

unsafe impl Sync for AVContentKey {}

unsafe impl NSObjectProtocol for AVContentKey {}

extern_methods!(
    unsafe impl AVContentKey {
        #[method_id(@__retain_semantics Other contentKeySpecifier)]
        pub unsafe fn contentKeySpecifier(&self) -> Retained<AVContentKeySpecifier>;

        #[method(externalContentProtectionStatus)]
        pub unsafe fn externalContentProtectionStatus(&self) -> AVExternalContentProtectionStatus;

        #[method(revoke)]
        pub unsafe fn revoke(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVContentKey {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C-unwind" {
    #[cfg(feature = "objc2-core-media")]
    pub fn AVSampleBufferAttachContentKey(
        sbuf: CMSampleBufferRef,
        content_key: &AVContentKey,
        out_error: *mut *mut NSError,
    ) -> Bool;
}
