//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicewasconnectednotification?language=objc)
    pub static AVCaptureDeviceWasConnectedNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicewasdisconnectednotification?language=objc)
    pub static AVCaptureDeviceWasDisconnectedNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicesubjectareadidchangenotification?language=objc)
    pub static AVCaptureDeviceSubjectAreaDidChangeNotification: &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevice?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDevice;
);

unsafe impl NSObjectProtocol for AVCaptureDevice {}

extern_methods!(
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated = "Use AVCaptureDeviceDiscoverySession instead."]
        #[method_id(@__retain_semantics Other devices)]
        pub unsafe fn devices() -> Retained<NSArray<AVCaptureDevice>>;

        #[cfg(feature = "AVMediaFormat")]
        #[deprecated = "Use AVCaptureDeviceDiscoverySession instead."]
        #[method_id(@__retain_semantics Other devicesWithMediaType:)]
        pub unsafe fn devicesWithMediaType(
            media_type: &AVMediaType,
        ) -> Retained<NSArray<AVCaptureDevice>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other defaultDeviceWithMediaType:)]
        pub unsafe fn defaultDeviceWithMediaType(
            media_type: &AVMediaType,
        ) -> Option<Retained<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other deviceWithUniqueID:)]
        pub unsafe fn deviceWithUniqueID(
            device_unique_id: &NSString,
        ) -> Option<Retained<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other uniqueID)]
        pub unsafe fn uniqueID(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other modelID)]
        pub unsafe fn modelID(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other localizedName)]
        pub unsafe fn localizedName(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other manufacturer)]
        pub unsafe fn manufacturer(&self) -> Retained<NSString>;

        #[method(transportType)]
        pub unsafe fn transportType(&self) -> i32;

        #[cfg(feature = "AVMediaFormat")]
        #[method(hasMediaType:)]
        pub unsafe fn hasMediaType(&self, media_type: &AVMediaType) -> bool;

        #[method(lockForConfiguration:_)]
        pub unsafe fn lockForConfiguration(&self) -> Result<(), Retained<NSError>>;

        #[method(unlockForConfiguration)]
        pub unsafe fn unlockForConfiguration(&self);

        #[cfg(feature = "AVCaptureSessionPreset")]
        #[method(supportsAVCaptureSessionPreset:)]
        pub unsafe fn supportsAVCaptureSessionPreset(
            &self,
            preset: &AVCaptureSessionPreset,
        ) -> bool;

        #[method(isConnected)]
        pub unsafe fn isConnected(&self) -> bool;

        #[method(isInUseByAnotherApplication)]
        pub unsafe fn isInUseByAnotherApplication(&self) -> bool;

        #[method(isSuspended)]
        pub unsafe fn isSuspended(&self) -> bool;

        #[method_id(@__retain_semantics Other linkedDevices)]
        pub unsafe fn linkedDevices(&self) -> Retained<NSArray<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other formats)]
        pub unsafe fn formats(&self) -> Retained<NSArray<AVCaptureDeviceFormat>>;

        #[method_id(@__retain_semantics Other activeFormat)]
        pub unsafe fn activeFormat(&self) -> Retained<AVCaptureDeviceFormat>;

        #[method(setActiveFormat:)]
        pub unsafe fn setActiveFormat(&self, active_format: &AVCaptureDeviceFormat);

        #[cfg(feature = "objc2-core-media")]
        #[method(activeVideoMinFrameDuration)]
        pub unsafe fn activeVideoMinFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setActiveVideoMinFrameDuration:)]
        pub unsafe fn setActiveVideoMinFrameDuration(
            &self,
            active_video_min_frame_duration: CMTime,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(activeVideoMaxFrameDuration)]
        pub unsafe fn activeVideoMaxFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setActiveVideoMaxFrameDuration:)]
        pub unsafe fn setActiveVideoMaxFrameDuration(
            &self,
            active_video_max_frame_duration: CMTime,
        );

        #[method(isAutoVideoFrameRateEnabled)]
        pub unsafe fn isAutoVideoFrameRateEnabled(&self) -> bool;

        #[method(setAutoVideoFrameRateEnabled:)]
        pub unsafe fn setAutoVideoFrameRateEnabled(&self, auto_video_frame_rate_enabled: bool);

        #[method_id(@__retain_semantics Other inputSources)]
        pub unsafe fn inputSources(&self) -> Retained<NSArray<AVCaptureDeviceInputSource>>;

        #[method_id(@__retain_semantics Other activeInputSource)]
        pub unsafe fn activeInputSource(&self) -> Option<Retained<AVCaptureDeviceInputSource>>;

        #[method(setActiveInputSource:)]
        pub unsafe fn setActiveInputSource(
            &self,
            active_input_source: Option<&AVCaptureDeviceInputSource>,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedeviceposition?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureDevicePosition(pub NSInteger);
impl AVCaptureDevicePosition {
    #[doc(alias = "AVCaptureDevicePositionUnspecified")]
    pub const Unspecified: Self = Self(0);
    #[doc(alias = "AVCaptureDevicePositionBack")]
    pub const Back: Self = Self(1);
    #[doc(alias = "AVCaptureDevicePositionFront")]
    pub const Front: Self = Self(2);
}

unsafe impl Encode for AVCaptureDevicePosition {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureDevicePosition {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDevicePosition
    unsafe impl AVCaptureDevice {
        #[method(position)]
        pub unsafe fn position(&self) -> AVCaptureDevicePosition;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetype?language=objc)
// NS_TYPED_ENUM
pub type AVCaptureDeviceType = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypeexternal?language=objc)
    pub static AVCaptureDeviceTypeExternal: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypemicrophone?language=objc)
    pub static AVCaptureDeviceTypeMicrophone: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltinwideanglecamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInWideAngleCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltintelephotocamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInTelephotoCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltinultrawidecamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInUltraWideCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltindualcamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInDualCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltindualwidecamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInDualWideCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltintriplecamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInTripleCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltintruedepthcamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInTrueDepthCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltinlidardepthcamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInLiDARDepthCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypecontinuitycamera?language=objc)
    pub static AVCaptureDeviceTypeContinuityCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypedeskviewcamera?language=objc)
    pub static AVCaptureDeviceTypeDeskViewCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypeexternalunknown?language=objc)
    pub static AVCaptureDeviceTypeExternalUnknown: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltinduocamera?language=objc)
    pub static AVCaptureDeviceTypeBuiltInDuoCamera: &'static AVCaptureDeviceType;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetypebuiltinmicrophone?language=objc)
    pub static AVCaptureDeviceTypeBuiltInMicrophone: &'static AVCaptureDeviceType;
}

extern_methods!(
    /// AVCaptureDeviceType
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other deviceType)]
        pub unsafe fn deviceType(&self) -> Retained<AVCaptureDeviceType>;
    }
);

extern_methods!(
    /// AVCaptureDefaultDevice
    unsafe impl AVCaptureDevice {
        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other defaultDeviceWithDeviceType:mediaType:position:)]
        pub unsafe fn defaultDeviceWithDeviceType_mediaType_position(
            device_type: &AVCaptureDeviceType,
            media_type: Option<&AVMediaType>,
            position: AVCaptureDevicePosition,
        ) -> Option<Retained<AVCaptureDevice>>;
    }
);

extern_methods!(
    /// AVCaptureDevicePreferredCamera
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other userPreferredCamera)]
        pub unsafe fn userPreferredCamera() -> Option<Retained<AVCaptureDevice>>;

        #[method(setUserPreferredCamera:)]
        pub unsafe fn setUserPreferredCamera(user_preferred_camera: Option<&AVCaptureDevice>);

        #[method_id(@__retain_semantics Other systemPreferredCamera)]
        pub unsafe fn systemPreferredCamera() -> Option<Retained<AVCaptureDevice>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceSystemPressure
    unsafe impl AVCaptureDevice {
        #[cfg(feature = "AVCaptureSystemPressure")]
        #[method_id(@__retain_semantics Other systemPressureState)]
        pub unsafe fn systemPressureState(&self) -> Retained<AVCaptureSystemPressureState>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureprimaryconstituentdeviceswitchingbehavior?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCapturePrimaryConstituentDeviceSwitchingBehavior(pub NSInteger);
impl AVCapturePrimaryConstituentDeviceSwitchingBehavior {
    #[doc(alias = "AVCapturePrimaryConstituentDeviceSwitchingBehaviorUnsupported")]
    pub const Unsupported: Self = Self(0);
    #[doc(alias = "AVCapturePrimaryConstituentDeviceSwitchingBehaviorAuto")]
    pub const Auto: Self = Self(1);
    #[doc(alias = "AVCapturePrimaryConstituentDeviceSwitchingBehaviorRestricted")]
    pub const Restricted: Self = Self(2);
    #[doc(alias = "AVCapturePrimaryConstituentDeviceSwitchingBehaviorLocked")]
    pub const Locked: Self = Self(3);
}

unsafe impl Encode for AVCapturePrimaryConstituentDeviceSwitchingBehavior {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCapturePrimaryConstituentDeviceSwitchingBehavior {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureprimaryconstituentdevicerestrictedswitchingbehaviorconditions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions(pub NSUInteger);
bitflags::bitflags! {
    impl AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions: NSUInteger {
        const AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionNone = 0;
        const AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionVideoZoomChanged = 1<<0;
        const AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionFocusModeChanged = 1<<1;
        const AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionExposureModeChanged = 1<<2;
    }
}

unsafe impl Encode for AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceVirtual
    unsafe impl AVCaptureDevice {
        #[method(isVirtualDevice)]
        pub unsafe fn isVirtualDevice(&self) -> bool;

        #[method_id(@__retain_semantics Other constituentDevices)]
        pub unsafe fn constituentDevices(&self) -> Retained<NSArray<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other virtualDeviceSwitchOverVideoZoomFactors)]
        pub unsafe fn virtualDeviceSwitchOverVideoZoomFactors(&self)
            -> Retained<NSArray<NSNumber>>;

        #[method(setPrimaryConstituentDeviceSwitchingBehavior:restrictedSwitchingBehaviorConditions:)]
        pub unsafe fn setPrimaryConstituentDeviceSwitchingBehavior_restrictedSwitchingBehaviorConditions(
            &self,
            switching_behavior: AVCapturePrimaryConstituentDeviceSwitchingBehavior,
            restricted_switching_behavior_conditions: AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions,
        );

        #[method(primaryConstituentDeviceSwitchingBehavior)]
        pub unsafe fn primaryConstituentDeviceSwitchingBehavior(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceSwitchingBehavior;

        #[method(primaryConstituentDeviceRestrictedSwitchingBehaviorConditions)]
        pub unsafe fn primaryConstituentDeviceRestrictedSwitchingBehaviorConditions(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions;

        #[method(activePrimaryConstituentDeviceSwitchingBehavior)]
        pub unsafe fn activePrimaryConstituentDeviceSwitchingBehavior(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceSwitchingBehavior;

        #[method(activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions)]
        pub unsafe fn activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions(
            &self,
        ) -> AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions;

        #[method_id(@__retain_semantics Other activePrimaryConstituentDevice)]
        pub unsafe fn activePrimaryConstituentDevice(&self) -> Option<Retained<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other supportedFallbackPrimaryConstituentDevices)]
        pub unsafe fn supportedFallbackPrimaryConstituentDevices(
            &self,
        ) -> Retained<NSArray<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other fallbackPrimaryConstituentDevices)]
        pub unsafe fn fallbackPrimaryConstituentDevices(
            &self,
        ) -> Retained<NSArray<AVCaptureDevice>>;

        #[method(setFallbackPrimaryConstituentDevices:)]
        pub unsafe fn setFallbackPrimaryConstituentDevices(
            &self,
            fallback_primary_constituent_devices: &NSArray<AVCaptureDevice>,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureflashmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureFlashMode(pub NSInteger);
impl AVCaptureFlashMode {
    #[doc(alias = "AVCaptureFlashModeOff")]
    pub const Off: Self = Self(0);
    #[doc(alias = "AVCaptureFlashModeOn")]
    pub const On: Self = Self(1);
    #[doc(alias = "AVCaptureFlashModeAuto")]
    pub const Auto: Self = Self(2);
}

unsafe impl Encode for AVCaptureFlashMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureFlashMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceFlash
    unsafe impl AVCaptureDevice {
        #[method(hasFlash)]
        pub unsafe fn hasFlash(&self) -> bool;

        #[method(isFlashAvailable)]
        pub unsafe fn isFlashAvailable(&self) -> bool;

        #[deprecated = "Use AVCapturePhotoOutput's -isFlashScene instead."]
        #[method(isFlashActive)]
        pub unsafe fn isFlashActive(&self) -> bool;

        #[deprecated = "Use AVCapturePhotoOutput's -supportedFlashModes instead."]
        #[method(isFlashModeSupported:)]
        pub unsafe fn isFlashModeSupported(&self, flash_mode: AVCaptureFlashMode) -> bool;

        #[deprecated = "Use AVCapturePhotoSettings.flashMode instead."]
        #[method(flashMode)]
        pub unsafe fn flashMode(&self) -> AVCaptureFlashMode;

        #[deprecated = "Use AVCapturePhotoSettings.flashMode instead."]
        #[method(setFlashMode:)]
        pub unsafe fn setFlashMode(&self, flash_mode: AVCaptureFlashMode);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturetorchmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureTorchMode(pub NSInteger);
impl AVCaptureTorchMode {
    #[doc(alias = "AVCaptureTorchModeOff")]
    pub const Off: Self = Self(0);
    #[doc(alias = "AVCaptureTorchModeOn")]
    pub const On: Self = Self(1);
    #[doc(alias = "AVCaptureTorchModeAuto")]
    pub const Auto: Self = Self(2);
}

unsafe impl Encode for AVCaptureTorchMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureTorchMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturemaxavailabletorchlevel?language=objc)
    pub static AVCaptureMaxAvailableTorchLevel: c_float;
}

extern_methods!(
    /// AVCaptureDeviceTorch
    unsafe impl AVCaptureDevice {
        #[method(hasTorch)]
        pub unsafe fn hasTorch(&self) -> bool;

        #[method(isTorchAvailable)]
        pub unsafe fn isTorchAvailable(&self) -> bool;

        #[method(isTorchActive)]
        pub unsafe fn isTorchActive(&self) -> bool;

        #[method(torchLevel)]
        pub unsafe fn torchLevel(&self) -> c_float;

        #[method(isTorchModeSupported:)]
        pub unsafe fn isTorchModeSupported(&self, torch_mode: AVCaptureTorchMode) -> bool;

        #[method(torchMode)]
        pub unsafe fn torchMode(&self) -> AVCaptureTorchMode;

        #[method(setTorchMode:)]
        pub unsafe fn setTorchMode(&self, torch_mode: AVCaptureTorchMode);

        #[method(setTorchModeOnWithLevel:error:_)]
        pub unsafe fn setTorchModeOnWithLevel_error(
            &self,
            torch_level: c_float,
        ) -> Result<(), Retained<NSError>>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturefocusmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureFocusMode(pub NSInteger);
impl AVCaptureFocusMode {
    #[doc(alias = "AVCaptureFocusModeLocked")]
    pub const Locked: Self = Self(0);
    #[doc(alias = "AVCaptureFocusModeAutoFocus")]
    pub const AutoFocus: Self = Self(1);
    #[doc(alias = "AVCaptureFocusModeContinuousAutoFocus")]
    pub const ContinuousAutoFocus: Self = Self(2);
}

unsafe impl Encode for AVCaptureFocusMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureFocusMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureautofocusrangerestriction?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureAutoFocusRangeRestriction(pub NSInteger);
impl AVCaptureAutoFocusRangeRestriction {
    #[doc(alias = "AVCaptureAutoFocusRangeRestrictionNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "AVCaptureAutoFocusRangeRestrictionNear")]
    pub const Near: Self = Self(1);
    #[doc(alias = "AVCaptureAutoFocusRangeRestrictionFar")]
    pub const Far: Self = Self(2);
}

unsafe impl Encode for AVCaptureAutoFocusRangeRestriction {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureAutoFocusRangeRestriction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturelenspositioncurrent?language=objc)
    pub static AVCaptureLensPositionCurrent: c_float;
}

extern_methods!(
    /// AVCaptureDeviceFocus
    unsafe impl AVCaptureDevice {
        #[method(isFocusModeSupported:)]
        pub unsafe fn isFocusModeSupported(&self, focus_mode: AVCaptureFocusMode) -> bool;

        #[method(isLockingFocusWithCustomLensPositionSupported)]
        pub unsafe fn isLockingFocusWithCustomLensPositionSupported(&self) -> bool;

        #[method(focusMode)]
        pub unsafe fn focusMode(&self) -> AVCaptureFocusMode;

        #[method(setFocusMode:)]
        pub unsafe fn setFocusMode(&self, focus_mode: AVCaptureFocusMode);

        #[method(isFocusPointOfInterestSupported)]
        pub unsafe fn isFocusPointOfInterestSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(focusPointOfInterest)]
        pub unsafe fn focusPointOfInterest(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setFocusPointOfInterest:)]
        pub unsafe fn setFocusPointOfInterest(&self, focus_point_of_interest: CGPoint);

        #[method(isAdjustingFocus)]
        pub unsafe fn isAdjustingFocus(&self) -> bool;

        #[method(isAutoFocusRangeRestrictionSupported)]
        pub unsafe fn isAutoFocusRangeRestrictionSupported(&self) -> bool;

        #[method(autoFocusRangeRestriction)]
        pub unsafe fn autoFocusRangeRestriction(&self) -> AVCaptureAutoFocusRangeRestriction;

        #[method(setAutoFocusRangeRestriction:)]
        pub unsafe fn setAutoFocusRangeRestriction(
            &self,
            auto_focus_range_restriction: AVCaptureAutoFocusRangeRestriction,
        );

        #[method(isSmoothAutoFocusSupported)]
        pub unsafe fn isSmoothAutoFocusSupported(&self) -> bool;

        #[method(isSmoothAutoFocusEnabled)]
        pub unsafe fn isSmoothAutoFocusEnabled(&self) -> bool;

        #[method(setSmoothAutoFocusEnabled:)]
        pub unsafe fn setSmoothAutoFocusEnabled(&self, smooth_auto_focus_enabled: bool);

        #[method(automaticallyAdjustsFaceDrivenAutoFocusEnabled)]
        pub unsafe fn automaticallyAdjustsFaceDrivenAutoFocusEnabled(&self) -> bool;

        #[method(setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled:)]
        pub unsafe fn setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled(
            &self,
            automatically_adjusts_face_driven_auto_focus_enabled: bool,
        );

        #[method(isFaceDrivenAutoFocusEnabled)]
        pub unsafe fn isFaceDrivenAutoFocusEnabled(&self) -> bool;

        #[method(setFaceDrivenAutoFocusEnabled:)]
        pub unsafe fn setFaceDrivenAutoFocusEnabled(&self, face_driven_auto_focus_enabled: bool);

        #[method(lensPosition)]
        pub unsafe fn lensPosition(&self) -> c_float;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(setFocusModeLockedWithLensPosition:completionHandler:)]
        pub unsafe fn setFocusModeLockedWithLensPosition_completionHandler(
            &self,
            lens_position: c_float,
            handler: Option<&block2::Block<dyn Fn(CMTime)>>,
        );

        #[method(minimumFocusDistance)]
        pub unsafe fn minimumFocusDistance(&self) -> NSInteger;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureexposuremode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureExposureMode(pub NSInteger);
impl AVCaptureExposureMode {
    #[doc(alias = "AVCaptureExposureModeLocked")]
    pub const Locked: Self = Self(0);
    #[doc(alias = "AVCaptureExposureModeAutoExpose")]
    pub const AutoExpose: Self = Self(1);
    #[doc(alias = "AVCaptureExposureModeContinuousAutoExposure")]
    pub const ContinuousAutoExposure: Self = Self(2);
    #[doc(alias = "AVCaptureExposureModeCustom")]
    pub const Custom: Self = Self(3);
}

unsafe impl Encode for AVCaptureExposureMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureExposureMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureexposuredurationcurrent?language=objc)
    #[cfg(feature = "objc2-core-media")]
    pub static AVCaptureExposureDurationCurrent: CMTime;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureisocurrent?language=objc)
    pub static AVCaptureISOCurrent: c_float;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureexposuretargetbiascurrent?language=objc)
    pub static AVCaptureExposureTargetBiasCurrent: c_float;
}

extern_methods!(
    /// AVCaptureDeviceExposure
    unsafe impl AVCaptureDevice {
        #[method(isExposureModeSupported:)]
        pub unsafe fn isExposureModeSupported(&self, exposure_mode: AVCaptureExposureMode) -> bool;

        #[method(exposureMode)]
        pub unsafe fn exposureMode(&self) -> AVCaptureExposureMode;

        #[method(setExposureMode:)]
        pub unsafe fn setExposureMode(&self, exposure_mode: AVCaptureExposureMode);

        #[method(isExposurePointOfInterestSupported)]
        pub unsafe fn isExposurePointOfInterestSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(exposurePointOfInterest)]
        pub unsafe fn exposurePointOfInterest(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setExposurePointOfInterest:)]
        pub unsafe fn setExposurePointOfInterest(&self, exposure_point_of_interest: CGPoint);

        #[method(automaticallyAdjustsFaceDrivenAutoExposureEnabled)]
        pub unsafe fn automaticallyAdjustsFaceDrivenAutoExposureEnabled(&self) -> bool;

        #[method(setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled:)]
        pub unsafe fn setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled(
            &self,
            automatically_adjusts_face_driven_auto_exposure_enabled: bool,
        );

        #[method(isFaceDrivenAutoExposureEnabled)]
        pub unsafe fn isFaceDrivenAutoExposureEnabled(&self) -> bool;

        #[method(setFaceDrivenAutoExposureEnabled:)]
        pub unsafe fn setFaceDrivenAutoExposureEnabled(
            &self,
            face_driven_auto_exposure_enabled: bool,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(activeMaxExposureDuration)]
        pub unsafe fn activeMaxExposureDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setActiveMaxExposureDuration:)]
        pub unsafe fn setActiveMaxExposureDuration(&self, active_max_exposure_duration: CMTime);

        #[method(isAdjustingExposure)]
        pub unsafe fn isAdjustingExposure(&self) -> bool;

        #[method(lensAperture)]
        pub unsafe fn lensAperture(&self) -> c_float;

        #[cfg(feature = "objc2-core-media")]
        #[method(exposureDuration)]
        pub unsafe fn exposureDuration(&self) -> CMTime;

        #[method(ISO)]
        pub unsafe fn ISO(&self) -> c_float;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(setExposureModeCustomWithDuration:ISO:completionHandler:)]
        pub unsafe fn setExposureModeCustomWithDuration_ISO_completionHandler(
            &self,
            duration: CMTime,
            iso: c_float,
            handler: Option<&block2::Block<dyn Fn(CMTime)>>,
        );

        #[method(exposureTargetOffset)]
        pub unsafe fn exposureTargetOffset(&self) -> c_float;

        #[method(exposureTargetBias)]
        pub unsafe fn exposureTargetBias(&self) -> c_float;

        #[method(minExposureTargetBias)]
        pub unsafe fn minExposureTargetBias(&self) -> c_float;

        #[method(maxExposureTargetBias)]
        pub unsafe fn maxExposureTargetBias(&self) -> c_float;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(setExposureTargetBias:completionHandler:)]
        pub unsafe fn setExposureTargetBias_completionHandler(
            &self,
            bias: c_float,
            handler: Option<&block2::Block<dyn Fn(CMTime)>>,
        );
    }
);

extern_methods!(
    /// AVCaptureDeviceToneMapping
    unsafe impl AVCaptureDevice {
        #[method(isGlobalToneMappingEnabled)]
        pub unsafe fn isGlobalToneMappingEnabled(&self) -> bool;

        #[method(setGlobalToneMappingEnabled:)]
        pub unsafe fn setGlobalToneMappingEnabled(&self, global_tone_mapping_enabled: bool);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturewhitebalancemode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureWhiteBalanceMode(pub NSInteger);
impl AVCaptureWhiteBalanceMode {
    #[doc(alias = "AVCaptureWhiteBalanceModeLocked")]
    pub const Locked: Self = Self(0);
    #[doc(alias = "AVCaptureWhiteBalanceModeAutoWhiteBalance")]
    pub const AutoWhiteBalance: Self = Self(1);
    #[doc(alias = "AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance")]
    pub const ContinuousAutoWhiteBalance: Self = Self(2);
}

unsafe impl Encode for AVCaptureWhiteBalanceMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureWhiteBalanceMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturewhitebalancegains?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVCaptureWhiteBalanceGains {
    pub redGain: c_float,
    pub greenGain: c_float,
    pub blueGain: c_float,
}

unsafe impl Encode for AVCaptureWhiteBalanceGains {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <c_float>::ENCODING,
            <c_float>::ENCODING,
            <c_float>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for AVCaptureWhiteBalanceGains {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturewhitebalancechromaticityvalues?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVCaptureWhiteBalanceChromaticityValues {
    pub x: c_float,
    pub y: c_float,
}

unsafe impl Encode for AVCaptureWhiteBalanceChromaticityValues {
    const ENCODING: Encoding = Encoding::Struct("?", &[<c_float>::ENCODING, <c_float>::ENCODING]);
}

unsafe impl RefEncode for AVCaptureWhiteBalanceChromaticityValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturewhitebalancetemperatureandtintvalues?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVCaptureWhiteBalanceTemperatureAndTintValues {
    pub temperature: c_float,
    pub tint: c_float,
}

unsafe impl Encode for AVCaptureWhiteBalanceTemperatureAndTintValues {
    const ENCODING: Encoding = Encoding::Struct("?", &[<c_float>::ENCODING, <c_float>::ENCODING]);
}

unsafe impl RefEncode for AVCaptureWhiteBalanceTemperatureAndTintValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturewhitebalancegainscurrent?language=objc)
    pub static AVCaptureWhiteBalanceGainsCurrent: AVCaptureWhiteBalanceGains;
}

extern_methods!(
    /// AVCaptureDeviceWhiteBalance
    unsafe impl AVCaptureDevice {
        #[method(isWhiteBalanceModeSupported:)]
        pub unsafe fn isWhiteBalanceModeSupported(
            &self,
            white_balance_mode: AVCaptureWhiteBalanceMode,
        ) -> bool;

        #[method(isLockingWhiteBalanceWithCustomDeviceGainsSupported)]
        pub unsafe fn isLockingWhiteBalanceWithCustomDeviceGainsSupported(&self) -> bool;

        #[method(whiteBalanceMode)]
        pub unsafe fn whiteBalanceMode(&self) -> AVCaptureWhiteBalanceMode;

        #[method(setWhiteBalanceMode:)]
        pub unsafe fn setWhiteBalanceMode(&self, white_balance_mode: AVCaptureWhiteBalanceMode);

        #[method(isAdjustingWhiteBalance)]
        pub unsafe fn isAdjustingWhiteBalance(&self) -> bool;

        #[method(deviceWhiteBalanceGains)]
        pub unsafe fn deviceWhiteBalanceGains(&self) -> AVCaptureWhiteBalanceGains;

        #[method(grayWorldDeviceWhiteBalanceGains)]
        pub unsafe fn grayWorldDeviceWhiteBalanceGains(&self) -> AVCaptureWhiteBalanceGains;

        #[method(maxWhiteBalanceGain)]
        pub unsafe fn maxWhiteBalanceGain(&self) -> c_float;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:)]
        pub unsafe fn setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains_completionHandler(
            &self,
            white_balance_gains: AVCaptureWhiteBalanceGains,
            handler: Option<&block2::Block<dyn Fn(CMTime)>>,
        );

        #[method(chromaticityValuesForDeviceWhiteBalanceGains:)]
        pub unsafe fn chromaticityValuesForDeviceWhiteBalanceGains(
            &self,
            white_balance_gains: AVCaptureWhiteBalanceGains,
        ) -> AVCaptureWhiteBalanceChromaticityValues;

        #[method(deviceWhiteBalanceGainsForChromaticityValues:)]
        pub unsafe fn deviceWhiteBalanceGainsForChromaticityValues(
            &self,
            chromaticity_values: AVCaptureWhiteBalanceChromaticityValues,
        ) -> AVCaptureWhiteBalanceGains;

        #[method(temperatureAndTintValuesForDeviceWhiteBalanceGains:)]
        pub unsafe fn temperatureAndTintValuesForDeviceWhiteBalanceGains(
            &self,
            white_balance_gains: AVCaptureWhiteBalanceGains,
        ) -> AVCaptureWhiteBalanceTemperatureAndTintValues;

        #[method(deviceWhiteBalanceGainsForTemperatureAndTintValues:)]
        pub unsafe fn deviceWhiteBalanceGainsForTemperatureAndTintValues(
            &self,
            temp_and_tint_values: AVCaptureWhiteBalanceTemperatureAndTintValues,
        ) -> AVCaptureWhiteBalanceGains;
    }
);

extern_methods!(
    /// AVCaptureDeviceSubjectAreaChangeMonitoring
    unsafe impl AVCaptureDevice {
        #[method(isSubjectAreaChangeMonitoringEnabled)]
        pub unsafe fn isSubjectAreaChangeMonitoringEnabled(&self) -> bool;

        #[method(setSubjectAreaChangeMonitoringEnabled:)]
        pub unsafe fn setSubjectAreaChangeMonitoringEnabled(
            &self,
            subject_area_change_monitoring_enabled: bool,
        );
    }
);

extern_methods!(
    /// AVCaptureDeviceLowLightBoost
    unsafe impl AVCaptureDevice {
        #[method(isLowLightBoostSupported)]
        pub unsafe fn isLowLightBoostSupported(&self) -> bool;

        #[method(isLowLightBoostEnabled)]
        pub unsafe fn isLowLightBoostEnabled(&self) -> bool;

        #[method(automaticallyEnablesLowLightBoostWhenAvailable)]
        pub unsafe fn automaticallyEnablesLowLightBoostWhenAvailable(&self) -> bool;

        #[method(setAutomaticallyEnablesLowLightBoostWhenAvailable:)]
        pub unsafe fn setAutomaticallyEnablesLowLightBoostWhenAvailable(
            &self,
            automatically_enables_low_light_boost_when_available: bool,
        );
    }
);

extern_methods!(
    /// AVCaptureDeviceVideoZoom
    unsafe impl AVCaptureDevice {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoZoomFactor)]
        pub unsafe fn videoZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setVideoZoomFactor:)]
        pub unsafe fn setVideoZoomFactor(&self, video_zoom_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(rampToVideoZoomFactor:withRate:)]
        pub unsafe fn rampToVideoZoomFactor_withRate(&self, factor: CGFloat, rate: c_float);

        #[method(isRampingVideoZoom)]
        pub unsafe fn isRampingVideoZoom(&self) -> bool;

        #[method(cancelVideoZoomRamp)]
        pub unsafe fn cancelVideoZoomRamp(&self);

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated]
        #[method(dualCameraSwitchOverVideoZoomFactor)]
        pub unsafe fn dualCameraSwitchOverVideoZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(displayVideoZoomFactorMultiplier)]
        pub unsafe fn displayVideoZoomFactorMultiplier(&self) -> CGFloat;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avauthorizationstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVAuthorizationStatus(pub NSInteger);
impl AVAuthorizationStatus {
    #[doc(alias = "AVAuthorizationStatusNotDetermined")]
    pub const NotDetermined: Self = Self(0);
    #[doc(alias = "AVAuthorizationStatusRestricted")]
    pub const Restricted: Self = Self(1);
    #[doc(alias = "AVAuthorizationStatusDenied")]
    pub const Denied: Self = Self(2);
    #[doc(alias = "AVAuthorizationStatusAuthorized")]
    pub const Authorized: Self = Self(3);
}

unsafe impl Encode for AVAuthorizationStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVAuthorizationStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceAuthorization
    unsafe impl AVCaptureDevice {
        #[cfg(feature = "AVMediaFormat")]
        #[method(authorizationStatusForMediaType:)]
        pub unsafe fn authorizationStatusForMediaType(
            media_type: &AVMediaType,
        ) -> AVAuthorizationStatus;

        #[cfg(all(feature = "AVMediaFormat", feature = "block2"))]
        #[method(requestAccessForMediaType:completionHandler:)]
        pub unsafe fn requestAccessForMediaType_completionHandler(
            media_type: &AVMediaType,
            handler: &block2::Block<dyn Fn(Bool)>,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetransportcontrolsspeed?language=objc)
pub type AVCaptureDeviceTransportControlsSpeed = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicetransportcontrolsplaybackmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureDeviceTransportControlsPlaybackMode(pub NSInteger);
impl AVCaptureDeviceTransportControlsPlaybackMode {
    pub const AVCaptureDeviceTransportControlsNotPlayingMode: Self = Self(0);
    pub const AVCaptureDeviceTransportControlsPlayingMode: Self = Self(1);
}

unsafe impl Encode for AVCaptureDeviceTransportControlsPlaybackMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureDeviceTransportControlsPlaybackMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceTransportControls
    unsafe impl AVCaptureDevice {
        #[method(transportControlsSupported)]
        pub unsafe fn transportControlsSupported(&self) -> bool;

        #[method(transportControlsPlaybackMode)]
        pub unsafe fn transportControlsPlaybackMode(
            &self,
        ) -> AVCaptureDeviceTransportControlsPlaybackMode;

        #[method(transportControlsSpeed)]
        pub unsafe fn transportControlsSpeed(&self) -> AVCaptureDeviceTransportControlsSpeed;

        #[method(setTransportControlsPlaybackMode:speed:)]
        pub unsafe fn setTransportControlsPlaybackMode_speed(
            &self,
            mode: AVCaptureDeviceTransportControlsPlaybackMode,
            speed: AVCaptureDeviceTransportControlsSpeed,
        );
    }
);

extern_methods!(
    /// AVCaptureDeviceHighDynamicRangeSupport
    unsafe impl AVCaptureDevice {
        #[method(automaticallyAdjustsVideoHDREnabled)]
        pub unsafe fn automaticallyAdjustsVideoHDREnabled(&self) -> bool;

        #[method(setAutomaticallyAdjustsVideoHDREnabled:)]
        pub unsafe fn setAutomaticallyAdjustsVideoHDREnabled(
            &self,
            automatically_adjusts_video_hdr_enabled: bool,
        );

        #[method(isVideoHDREnabled)]
        pub unsafe fn isVideoHDREnabled(&self) -> bool;

        #[method(setVideoHDREnabled:)]
        pub unsafe fn setVideoHDREnabled(&self, video_hdr_enabled: bool);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturecolorspace?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureColorSpace(pub NSInteger);
impl AVCaptureColorSpace {
    #[doc(alias = "AVCaptureColorSpace_sRGB")]
    pub const _sRGB: Self = Self(0);
    #[doc(alias = "AVCaptureColorSpace_P3_D65")]
    pub const _P3_D65: Self = Self(1);
    #[doc(alias = "AVCaptureColorSpace_HLG_BT2020")]
    pub const _HLG_BT2020: Self = Self(2);
    #[doc(alias = "AVCaptureColorSpace_AppleLog")]
    pub const _AppleLog: Self = Self(3);
}

unsafe impl Encode for AVCaptureColorSpace {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureColorSpace {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceColorSpaceSupport
    unsafe impl AVCaptureDevice {
        #[method(activeColorSpace)]
        pub unsafe fn activeColorSpace(&self) -> AVCaptureColorSpace;

        #[method(setActiveColorSpace:)]
        pub unsafe fn setActiveColorSpace(&self, active_color_space: AVCaptureColorSpace);
    }
);

extern_methods!(
    /// AVCaptureDeviceDepthSupport
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other activeDepthDataFormat)]
        pub unsafe fn activeDepthDataFormat(&self) -> Option<Retained<AVCaptureDeviceFormat>>;

        #[method(setActiveDepthDataFormat:)]
        pub unsafe fn setActiveDepthDataFormat(
            &self,
            active_depth_data_format: Option<&AVCaptureDeviceFormat>,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(activeDepthDataMinFrameDuration)]
        pub unsafe fn activeDepthDataMinFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setActiveDepthDataMinFrameDuration:)]
        pub unsafe fn setActiveDepthDataMinFrameDuration(
            &self,
            active_depth_data_min_frame_duration: CMTime,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(minAvailableVideoZoomFactor)]
        pub unsafe fn minAvailableVideoZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(maxAvailableVideoZoomFactor)]
        pub unsafe fn maxAvailableVideoZoomFactor(&self) -> CGFloat;
    }
);

extern_methods!(
    /// AVCaptureDeviceGeometricDistortionCorrection
    unsafe impl AVCaptureDevice {
        #[method(isGeometricDistortionCorrectionSupported)]
        pub unsafe fn isGeometricDistortionCorrectionSupported(&self) -> bool;

        #[method(isGeometricDistortionCorrectionEnabled)]
        pub unsafe fn isGeometricDistortionCorrectionEnabled(&self) -> bool;

        #[method(setGeometricDistortionCorrectionEnabled:)]
        pub unsafe fn setGeometricDistortionCorrectionEnabled(
            &self,
            geometric_distortion_correction_enabled: bool,
        );
    }
);

extern_methods!(
    /// AVCaptureDeviceCalibration
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other extrinsicMatrixFromDevice:toDevice:)]
        pub unsafe fn extrinsicMatrixFromDevice_toDevice(
            from_device: &AVCaptureDevice,
            to_device: &AVCaptureDevice,
        ) -> Option<Retained<NSData>>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturecenterstagecontrolmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureCenterStageControlMode(pub NSInteger);
impl AVCaptureCenterStageControlMode {
    #[doc(alias = "AVCaptureCenterStageControlModeUser")]
    pub const User: Self = Self(0);
    #[doc(alias = "AVCaptureCenterStageControlModeApp")]
    pub const App: Self = Self(1);
    #[doc(alias = "AVCaptureCenterStageControlModeCooperative")]
    pub const Cooperative: Self = Self(2);
}

unsafe impl Encode for AVCaptureCenterStageControlMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureCenterStageControlMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureDeviceCenterStage
    unsafe impl AVCaptureDevice {
        #[method(centerStageControlMode)]
        pub unsafe fn centerStageControlMode() -> AVCaptureCenterStageControlMode;

        #[method(setCenterStageControlMode:)]
        pub unsafe fn setCenterStageControlMode(
            center_stage_control_mode: AVCaptureCenterStageControlMode,
        );

        #[method(isCenterStageEnabled)]
        pub unsafe fn isCenterStageEnabled() -> bool;

        #[method(setCenterStageEnabled:)]
        pub unsafe fn setCenterStageEnabled(center_stage_enabled: bool);

        #[method(isCenterStageActive)]
        pub unsafe fn isCenterStageActive(&self) -> bool;

        #[method(isCenterStageRectOfInterestSupported)]
        pub unsafe fn isCenterStageRectOfInterestSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(centerStageRectOfInterest)]
        pub unsafe fn centerStageRectOfInterest(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(setCenterStageRectOfInterest:)]
        pub unsafe fn setCenterStageRectOfInterest(&self, center_stage_rect_of_interest: CGRect);
    }
);

extern_methods!(
    /// AVCaptureDevicePortraitEffect
    unsafe impl AVCaptureDevice {
        #[method(isPortraitEffectEnabled)]
        pub unsafe fn isPortraitEffectEnabled() -> bool;

        #[method(isPortraitEffectActive)]
        pub unsafe fn isPortraitEffectActive(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceReactionEffects
    unsafe impl AVCaptureDevice {
        #[method(reactionEffectsEnabled)]
        pub unsafe fn reactionEffectsEnabled() -> bool;

        #[method(reactionEffectGesturesEnabled)]
        pub unsafe fn reactionEffectGesturesEnabled() -> bool;

        #[method(canPerformReactionEffects)]
        pub unsafe fn canPerformReactionEffects(&self) -> bool;

        #[cfg(feature = "AVCaptureReactions")]
        #[method_id(@__retain_semantics Other availableReactionTypes)]
        pub unsafe fn availableReactionTypes(&self) -> Retained<NSSet<AVCaptureReactionType>>;

        #[cfg(feature = "AVCaptureReactions")]
        #[method(performEffectForReaction:)]
        pub unsafe fn performEffectForReaction(&self, reaction_type: &AVCaptureReactionType);

        #[cfg(feature = "AVCaptureReactions")]
        #[method_id(@__retain_semantics Other reactionEffectsInProgress)]
        pub unsafe fn reactionEffectsInProgress(
            &self,
        ) -> Retained<NSArray<AVCaptureReactionEffectState>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceBackgroundReplacement
    unsafe impl AVCaptureDevice {
        #[method(isBackgroundReplacementEnabled)]
        pub unsafe fn isBackgroundReplacementEnabled() -> bool;

        #[method(isBackgroundReplacementActive)]
        pub unsafe fn isBackgroundReplacementActive(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceContinuityCamera
    unsafe impl AVCaptureDevice {
        #[method(isContinuityCamera)]
        pub unsafe fn isContinuityCamera(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceDeskViewCamera
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other companionDeskViewCamera)]
        pub unsafe fn companionDeskViewCamera(&self) -> Option<Retained<AVCaptureDevice>>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturemicrophonemode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureMicrophoneMode(pub NSInteger);
impl AVCaptureMicrophoneMode {
    #[doc(alias = "AVCaptureMicrophoneModeStandard")]
    pub const Standard: Self = Self(0);
    #[doc(alias = "AVCaptureMicrophoneModeWideSpectrum")]
    pub const WideSpectrum: Self = Self(1);
    #[doc(alias = "AVCaptureMicrophoneModeVoiceIsolation")]
    pub const VoiceIsolation: Self = Self(2);
}

unsafe impl Encode for AVCaptureMicrophoneMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureMicrophoneMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureMicrophoneMode
    unsafe impl AVCaptureDevice {
        #[method(preferredMicrophoneMode)]
        pub unsafe fn preferredMicrophoneMode() -> AVCaptureMicrophoneMode;

        #[method(activeMicrophoneMode)]
        pub unsafe fn activeMicrophoneMode() -> AVCaptureMicrophoneMode;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturesystemuserinterface?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureSystemUserInterface(pub NSInteger);
impl AVCaptureSystemUserInterface {
    #[doc(alias = "AVCaptureSystemUserInterfaceVideoEffects")]
    pub const VideoEffects: Self = Self(1);
    #[doc(alias = "AVCaptureSystemUserInterfaceMicrophoneModes")]
    pub const MicrophoneModes: Self = Self(2);
}

unsafe impl Encode for AVCaptureSystemUserInterface {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureSystemUserInterface {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCaptureSystemUserInterface
    unsafe impl AVCaptureDevice {
        #[method(showSystemUserInterface:)]
        pub unsafe fn showSystemUserInterface(system_user_interface: AVCaptureSystemUserInterface);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avspatialcapturediscomfortreason?language=objc)
// NS_TYPED_ENUM
pub type AVSpatialCaptureDiscomfortReason = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avspatialcapturediscomfortreasonnotenoughlight?language=objc)
    pub static AVSpatialCaptureDiscomfortReasonNotEnoughLight:
        &'static AVSpatialCaptureDiscomfortReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avspatialcapturediscomfortreasonsubjecttooclose?language=objc)
    pub static AVSpatialCaptureDiscomfortReasonSubjectTooClose:
        &'static AVSpatialCaptureDiscomfortReason;
}

extern_methods!(
    /// AVCaptureDeviceSpatialCapture
    unsafe impl AVCaptureDevice {
        #[method_id(@__retain_semantics Other spatialCaptureDiscomfortReasons)]
        pub unsafe fn spatialCaptureDiscomfortReasons(
            &self,
        ) -> Retained<NSSet<AVSpatialCaptureDiscomfortReason>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicediscoverysession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDeviceDiscoverySession;
);

unsafe impl NSObjectProtocol for AVCaptureDeviceDiscoverySession {}

extern_methods!(
    unsafe impl AVCaptureDeviceDiscoverySession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other discoverySessionWithDeviceTypes:mediaType:position:)]
        pub unsafe fn discoverySessionWithDeviceTypes_mediaType_position(
            device_types: &NSArray<AVCaptureDeviceType>,
            media_type: Option<&AVMediaType>,
            position: AVCaptureDevicePosition,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other devices)]
        pub unsafe fn devices(&self) -> Retained<NSArray<AVCaptureDevice>>;

        #[method_id(@__retain_semantics Other supportedMultiCamDeviceSets)]
        pub unsafe fn supportedMultiCamDeviceSets(
            &self,
        ) -> Retained<NSArray<NSSet<AVCaptureDevice>>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevicerotationcoordinator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDeviceRotationCoordinator;
);

unsafe impl NSObjectProtocol for AVCaptureDeviceRotationCoordinator {}

extern_methods!(
    unsafe impl AVCaptureDeviceRotationCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Init initWithDevice:previewLayer:)]
        pub unsafe fn initWithDevice_previewLayer(
            this: Allocated<Self>,
            device: &AVCaptureDevice,
            preview_layer: Option<&CALayer>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Option<Retained<AVCaptureDevice>>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other previewLayer)]
        pub unsafe fn previewLayer(&self) -> Option<Retained<CALayer>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoRotationAngleForHorizonLevelPreview)]
        pub unsafe fn videoRotationAngleForHorizonLevelPreview(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoRotationAngleForHorizonLevelCapture)]
        pub unsafe fn videoRotationAngleForHorizonLevelCapture(&self) -> CGFloat;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avexposurebiasrange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVExposureBiasRange;
);

unsafe impl NSObjectProtocol for AVExposureBiasRange {}

extern_methods!(
    unsafe impl AVExposureBiasRange {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(minExposureBias)]
        pub unsafe fn minExposureBias(&self) -> c_float;

        #[method(maxExposureBias)]
        pub unsafe fn maxExposureBias(&self) -> c_float;

        #[method(containsExposureBias:)]
        pub unsafe fn containsExposureBias(&self, exposure_bias: c_float) -> bool;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avframeraterange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVFrameRateRange;
);

unsafe impl NSObjectProtocol for AVFrameRateRange {}

extern_methods!(
    unsafe impl AVFrameRateRange {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(minFrameRate)]
        pub unsafe fn minFrameRate(&self) -> f64;

        #[method(maxFrameRate)]
        pub unsafe fn maxFrameRate(&self) -> f64;

        #[cfg(feature = "objc2-core-media")]
        #[method(maxFrameDuration)]
        pub unsafe fn maxFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(minFrameDuration)]
        pub unsafe fn minFrameDuration(&self) -> CMTime;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avzoomrange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVZoomRange;
);

unsafe impl NSObjectProtocol for AVZoomRange {}

extern_methods!(
    unsafe impl AVZoomRange {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(minZoomFactor)]
        pub unsafe fn minZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(maxZoomFactor)]
        pub unsafe fn maxZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(containsZoomFactor:)]
        pub unsafe fn containsZoomFactor(&self, zoom_factor: CGFloat) -> bool;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureVideoStabilizationMode(pub NSInteger);
impl AVCaptureVideoStabilizationMode {
    #[doc(alias = "AVCaptureVideoStabilizationModeOff")]
    pub const Off: Self = Self(0);
    #[doc(alias = "AVCaptureVideoStabilizationModeStandard")]
    pub const Standard: Self = Self(1);
    #[doc(alias = "AVCaptureVideoStabilizationModeCinematic")]
    pub const Cinematic: Self = Self(2);
    #[doc(alias = "AVCaptureVideoStabilizationModeCinematicExtended")]
    pub const CinematicExtended: Self = Self(3);
    #[doc(alias = "AVCaptureVideoStabilizationModePreviewOptimized")]
    pub const PreviewOptimized: Self = Self(4);
    #[doc(alias = "AVCaptureVideoStabilizationModeCinematicExtendedEnhanced")]
    pub const CinematicExtendedEnhanced: Self = Self(5);
    #[doc(alias = "AVCaptureVideoStabilizationModeAuto")]
    pub const Auto: Self = Self(-1);
}

unsafe impl Encode for AVCaptureVideoStabilizationMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureVideoStabilizationMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureautofocussystem?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureAutoFocusSystem(pub NSInteger);
impl AVCaptureAutoFocusSystem {
    #[doc(alias = "AVCaptureAutoFocusSystemNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "AVCaptureAutoFocusSystemContrastDetection")]
    pub const ContrastDetection: Self = Self(1);
    #[doc(alias = "AVCaptureAutoFocusSystemPhaseDetection")]
    pub const PhaseDetection: Self = Self(2);
}

unsafe impl Encode for AVCaptureAutoFocusSystem {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureAutoFocusSystem {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedeviceformat?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDeviceFormat;
);

unsafe impl NSObjectProtocol for AVCaptureDeviceFormat {}

extern_methods!(
    unsafe impl AVCaptureDeviceFormat {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other mediaType)]
        pub unsafe fn mediaType(&self) -> Retained<AVMediaType>;

        #[cfg(feature = "objc2-core-media")]
        #[method(formatDescription)]
        pub unsafe fn formatDescription(&self) -> CMFormatDescriptionRef;

        #[method_id(@__retain_semantics Other videoSupportedFrameRateRanges)]
        pub unsafe fn videoSupportedFrameRateRanges(&self) -> Retained<NSArray<AVFrameRateRange>>;

        #[method(videoFieldOfView)]
        pub unsafe fn videoFieldOfView(&self) -> c_float;

        #[method(isVideoBinned)]
        pub unsafe fn isVideoBinned(&self) -> bool;

        #[method(isVideoStabilizationModeSupported:)]
        pub unsafe fn isVideoStabilizationModeSupported(
            &self,
            video_stabilization_mode: AVCaptureVideoStabilizationMode,
        ) -> bool;

        #[deprecated = "Use isVideoStabilizationModeSupported: instead."]
        #[method(isVideoStabilizationSupported)]
        pub unsafe fn isVideoStabilizationSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoMaxZoomFactor)]
        pub unsafe fn videoMaxZoomFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoZoomFactorUpscaleThreshold)]
        pub unsafe fn videoZoomFactorUpscaleThreshold(&self) -> CGFloat;

        #[method_id(@__retain_semantics Other systemRecommendedVideoZoomRange)]
        pub unsafe fn systemRecommendedVideoZoomRange(&self) -> Option<Retained<AVZoomRange>>;

        #[cfg(feature = "objc2-core-media")]
        #[method(minExposureDuration)]
        pub unsafe fn minExposureDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(maxExposureDuration)]
        pub unsafe fn maxExposureDuration(&self) -> CMTime;

        #[method_id(@__retain_semantics Other systemRecommendedExposureBiasRange)]
        pub unsafe fn systemRecommendedExposureBiasRange(
            &self,
        ) -> Option<Retained<AVExposureBiasRange>>;

        #[method(minISO)]
        pub unsafe fn minISO(&self) -> c_float;

        #[method(maxISO)]
        pub unsafe fn maxISO(&self) -> c_float;

        #[method(isGlobalToneMappingSupported)]
        pub unsafe fn isGlobalToneMappingSupported(&self) -> bool;

        #[method(isVideoHDRSupported)]
        pub unsafe fn isVideoHDRSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use supportedMaxPhotoDimensions instead."]
        #[method(highResolutionStillImageDimensions)]
        pub unsafe fn highResolutionStillImageDimensions(&self) -> CMVideoDimensions;

        #[method(isHighPhotoQualitySupported)]
        pub unsafe fn isHighPhotoQualitySupported(&self) -> bool;

        #[method(isHighestPhotoQualitySupported)]
        pub unsafe fn isHighestPhotoQualitySupported(&self) -> bool;

        #[method(autoFocusSystem)]
        pub unsafe fn autoFocusSystem(&self) -> AVCaptureAutoFocusSystem;

        #[method_id(@__retain_semantics Other supportedColorSpaces)]
        pub unsafe fn supportedColorSpaces(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated]
        #[method(videoMinZoomFactorForDepthDataDelivery)]
        pub unsafe fn videoMinZoomFactorForDepthDataDelivery(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated]
        #[method(videoMaxZoomFactorForDepthDataDelivery)]
        pub unsafe fn videoMaxZoomFactorForDepthDataDelivery(&self) -> CGFloat;

        #[deprecated]
        #[method_id(@__retain_semantics Other supportedVideoZoomFactorsForDepthDataDelivery)]
        pub unsafe fn supportedVideoZoomFactorsForDepthDataDelivery(
            &self,
        ) -> Retained<NSArray<NSNumber>>;

        #[method_id(@__retain_semantics Other supportedVideoZoomRangesForDepthDataDelivery)]
        pub unsafe fn supportedVideoZoomRangesForDepthDataDelivery(
            &self,
        ) -> Retained<NSArray<AVZoomRange>>;

        #[method(zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported)]
        pub unsafe fn zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported(&self) -> bool;

        #[method_id(@__retain_semantics Other supportedDepthDataFormats)]
        pub unsafe fn supportedDepthDataFormats(&self) -> Retained<NSArray<AVCaptureDeviceFormat>>;

        #[method_id(@__retain_semantics Other unsupportedCaptureOutputClasses)]
        pub unsafe fn unsupportedCaptureOutputClasses(&self) -> Retained<NSArray<AnyClass>>;

        #[method_id(@__retain_semantics Other supportedMaxPhotoDimensions)]
        pub unsafe fn supportedMaxPhotoDimensions(&self) -> Retained<NSArray<NSValue>>;

        #[method_id(@__retain_semantics Other secondaryNativeResolutionZoomFactors)]
        pub unsafe fn secondaryNativeResolutionZoomFactors(&self) -> Retained<NSArray<NSNumber>>;

        #[method(isAutoVideoFrameRateSupported)]
        pub unsafe fn isAutoVideoFrameRateSupported(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatDepthDataAdditions
    unsafe impl AVCaptureDeviceFormat {
        #[method(isPortraitEffectsMatteStillImageDeliverySupported)]
        pub unsafe fn isPortraitEffectsMatteStillImageDeliverySupported(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatMultiCamAdditions
    unsafe impl AVCaptureDeviceFormat {
        #[method(isMultiCamSupported)]
        pub unsafe fn isMultiCamSupported(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatSpatialVideoCapture
    unsafe impl AVCaptureDeviceFormat {
        #[method(isSpatialVideoCaptureSupported)]
        pub unsafe fn isSpatialVideoCaptureSupported(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatGeometricDistortionCorrection
    unsafe impl AVCaptureDeviceFormat {
        #[method(geometricDistortionCorrectedVideoFieldOfView)]
        pub unsafe fn geometricDistortionCorrectedVideoFieldOfView(&self) -> c_float;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatCenterStage
    unsafe impl AVCaptureDeviceFormat {
        #[method(isCenterStageSupported)]
        pub unsafe fn isCenterStageSupported(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoMinZoomFactorForCenterStage)]
        pub unsafe fn videoMinZoomFactorForCenterStage(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(videoMaxZoomFactorForCenterStage)]
        pub unsafe fn videoMaxZoomFactorForCenterStage(&self) -> CGFloat;

        #[method_id(@__retain_semantics Other videoFrameRateRangeForCenterStage)]
        pub unsafe fn videoFrameRateRangeForCenterStage(
            &self,
        ) -> Option<Retained<AVFrameRateRange>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatPortraitEffect
    unsafe impl AVCaptureDeviceFormat {
        #[method(isPortraitEffectSupported)]
        pub unsafe fn isPortraitEffectSupported(&self) -> bool;

        #[method_id(@__retain_semantics Other videoFrameRateRangeForPortraitEffect)]
        pub unsafe fn videoFrameRateRangeForPortraitEffect(
            &self,
        ) -> Option<Retained<AVFrameRateRange>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceStudioLight
    unsafe impl AVCaptureDevice {
        #[method(isStudioLightEnabled)]
        pub unsafe fn isStudioLightEnabled() -> bool;

        #[method(isStudioLightActive)]
        pub unsafe fn isStudioLightActive(&self) -> bool;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatStudioLight
    unsafe impl AVCaptureDeviceFormat {
        #[method(isStudioLightSupported)]
        pub unsafe fn isStudioLightSupported(&self) -> bool;

        #[method_id(@__retain_semantics Other videoFrameRateRangeForStudioLight)]
        pub unsafe fn videoFrameRateRangeForStudioLight(
            &self,
        ) -> Option<Retained<AVFrameRateRange>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatReactionEffects
    unsafe impl AVCaptureDeviceFormat {
        #[method(reactionEffectsSupported)]
        pub unsafe fn reactionEffectsSupported(&self) -> bool;

        #[method_id(@__retain_semantics Other videoFrameRateRangeForReactionEffectsInProgress)]
        pub unsafe fn videoFrameRateRangeForReactionEffectsInProgress(
            &self,
        ) -> Option<Retained<AVFrameRateRange>>;
    }
);

extern_methods!(
    /// AVCaptureDeviceFormatBackgroundReplacement
    unsafe impl AVCaptureDeviceFormat {
        #[method(isBackgroundReplacementSupported)]
        pub unsafe fn isBackgroundReplacementSupported(&self) -> bool;

        #[method_id(@__retain_semantics Other videoFrameRateRangeForBackgroundReplacement)]
        pub unsafe fn videoFrameRateRangeForBackgroundReplacement(
            &self,
        ) -> Option<Retained<AVFrameRateRange>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedeviceinputsource?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDeviceInputSource;
);

unsafe impl NSObjectProtocol for AVCaptureDeviceInputSource {}

extern_methods!(
    unsafe impl AVCaptureDeviceInputSource {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other inputSourceID)]
        pub unsafe fn inputSourceID(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other localizedName)]
        pub unsafe fn localizedName(&self) -> Retained<NSString>;
    }
);
