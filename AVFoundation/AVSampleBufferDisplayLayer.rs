//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayerfailedtodecodenotification?language=objc)
    pub static AVSampleBufferDisplayLayerFailedToDecodeNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayerfailedtodecodenotificationerrorkey?language=objc)
    pub static AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayerrequiresflushtoresumedecodingdidchangenotification?language=objc)
    pub static AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayeroutputobscuredduetoinsufficientexternalprotectiondidchangenotification?language=objc)
    pub static AVSampleBufferDisplayLayerOutputObscuredDueToInsufficientExternalProtectionDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayerreadyfordisplaydidchangenotification?language=objc)
    pub static AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification:
        &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferdisplaylayer?language=objc)
    #[unsafe(super(CALayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    pub struct AVSampleBufferDisplayLayer;
);

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl CAMediaTiming for AVSampleBufferDisplayLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSCoding for AVSampleBufferDisplayLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSObjectProtocol for AVSampleBufferDisplayLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSSecureCoding for AVSampleBufferDisplayLayer {}

extern_methods!(
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[cfg(feature = "objc2-core-media")]
        #[method(controlTimebase)]
        pub unsafe fn controlTimebase(&self) -> CMTimebaseRef;

        #[cfg(feature = "objc2-core-media")]
        #[method(setControlTimebase:)]
        pub unsafe fn setControlTimebase(&self, control_timebase: CMTimebaseRef);

        #[cfg(feature = "AVAnimation")]
        #[method_id(@__retain_semantics Other videoGravity)]
        pub unsafe fn videoGravity(&self) -> Retained<AVLayerVideoGravity>;

        #[cfg(feature = "AVAnimation")]
        #[method(setVideoGravity:)]
        pub unsafe fn setVideoGravity(&self, video_gravity: &AVLayerVideoGravity);

        #[method(isReadyForDisplay)]
        pub unsafe fn isReadyForDisplay(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(this: Allocated<Self>, layer: &AnyObject) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVSampleBufferDisplayLayerQueueManagement
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use sampleBufferRenderer's timebase instead"]
        #[method(timebase)]
        pub unsafe fn timebase(&self) -> CMTimebaseRef;

        #[cfg(feature = "AVQueuedSampleBufferRendering")]
        #[deprecated = "Use sampleBufferRenderer's status instead"]
        #[method(status)]
        pub unsafe fn status(&self) -> AVQueuedSampleBufferRenderingStatus;

        #[deprecated = "Use sampleBufferRenderer's error instead"]
        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use sampleBufferRenderer's enqueueSampleBuffer: instead"]
        #[method(enqueueSampleBuffer:)]
        pub unsafe fn enqueueSampleBuffer(&self, sample_buffer: CMSampleBufferRef);

        #[deprecated = "Use sampleBufferRenderer's flush instead"]
        #[method(flush)]
        pub unsafe fn flush(&self);

        #[deprecated = "Use sampleBufferRenderer's flushWithRemovalOfDisplayedImage:completionHandler: instead"]
        #[method(flushAndRemoveImage)]
        pub unsafe fn flushAndRemoveImage(&self);

        #[deprecated = "Use sampleBufferRenderer's requiresFlushToResumeDecoding instead"]
        #[method(requiresFlushToResumeDecoding)]
        pub unsafe fn requiresFlushToResumeDecoding(&self) -> bool;

        #[deprecated = "Use sampleBufferRenderer's readyForMoreMediaData instead"]
        #[method(isReadyForMoreMediaData)]
        pub unsafe fn isReadyForMoreMediaData(&self) -> bool;

        #[deprecated = "Use sampleBufferRenderer's stopRequestingMediaData instead"]
        #[method(stopRequestingMediaData)]
        pub unsafe fn stopRequestingMediaData(&self);

        #[deprecated = "Use sampleBufferRenderer's hasSufficientMediaDataForReliablePlaybackStart instead"]
        #[method(hasSufficientMediaDataForReliablePlaybackStart)]
        pub unsafe fn hasSufficientMediaDataForReliablePlaybackStart(&self) -> bool;
    }
);

#[cfg(all(
    feature = "AVQueuedSampleBufferRendering",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
unsafe impl AVQueuedSampleBufferRendering for AVSampleBufferDisplayLayer {}

extern_methods!(
    /// AVSampleBufferDisplayLayerImageProtection
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method(preventsCapture)]
        pub unsafe fn preventsCapture(&self) -> bool;

        #[method(setPreventsCapture:)]
        pub unsafe fn setPreventsCapture(&self, prevents_capture: bool);
    }
);

extern_methods!(
    /// AVSampleBufferDisplayLayerVideoDisplaySleepPrevention
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method(preventsDisplaySleepDuringVideoPlayback)]
        pub unsafe fn preventsDisplaySleepDuringVideoPlayback(&self) -> bool;

        #[method(setPreventsDisplaySleepDuringVideoPlayback:)]
        pub unsafe fn setPreventsDisplaySleepDuringVideoPlayback(
            &self,
            prevents_display_sleep_during_video_playback: bool,
        );
    }
);

extern_methods!(
    /// AVSampleBufferDisplayLayerAutomaticBackgroundPrevention
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method(preventsAutomaticBackgroundingDuringVideoPlayback)]
        pub unsafe fn preventsAutomaticBackgroundingDuringVideoPlayback(&self) -> bool;

        #[method(setPreventsAutomaticBackgroundingDuringVideoPlayback:)]
        pub unsafe fn setPreventsAutomaticBackgroundingDuringVideoPlayback(
            &self,
            prevents_automatic_backgrounding_during_video_playback: bool,
        );
    }
);

extern_methods!(
    /// ProtectedContent
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[method(outputObscuredDueToInsufficientExternalProtection)]
        pub unsafe fn outputObscuredDueToInsufficientExternalProtection(&self) -> bool;
    }
);

extern_methods!(
    /// AVSampleBufferDisplayLayerRenderer
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVSampleBufferDisplayLayer {
        #[cfg(feature = "AVSampleBufferVideoRenderer")]
        #[method_id(@__retain_semantics Other sampleBufferRenderer)]
        pub unsafe fn sampleBufferRenderer(&self) -> Retained<AVSampleBufferVideoRenderer>;
    }
);
