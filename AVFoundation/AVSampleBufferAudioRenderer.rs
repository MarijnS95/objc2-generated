//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferaudiorenderer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleBufferAudioRenderer;
);

#[cfg(feature = "AVQueuedSampleBufferRendering")]
unsafe impl AVQueuedSampleBufferRendering for AVSampleBufferAudioRenderer {}

unsafe impl NSObjectProtocol for AVSampleBufferAudioRenderer {}

extern_methods!(
    unsafe impl AVSampleBufferAudioRenderer {
        #[cfg(feature = "AVQueuedSampleBufferRendering")]
        #[method(status)]
        pub unsafe fn status(&self) -> AVQueuedSampleBufferRenderingStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[method_id(@__retain_semantics Other audioOutputDeviceUniqueID)]
        pub unsafe fn audioOutputDeviceUniqueID(&self) -> Option<Retained<NSString>>;

        #[method(setAudioOutputDeviceUniqueID:)]
        pub unsafe fn setAudioOutputDeviceUniqueID(
            &self,
            audio_output_device_unique_id: Option<&NSString>,
        );

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method_id(@__retain_semantics Other audioTimePitchAlgorithm)]
        pub unsafe fn audioTimePitchAlgorithm(&self) -> Retained<AVAudioTimePitchAlgorithm>;

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(setAudioTimePitchAlgorithm:)]
        pub unsafe fn setAudioTimePitchAlgorithm(
            &self,
            audio_time_pitch_algorithm: &AVAudioTimePitchAlgorithm,
        );

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(allowedAudioSpatializationFormats)]
        pub unsafe fn allowedAudioSpatializationFormats(&self) -> AVAudioSpatializationFormats;

        #[cfg(feature = "AVAudioProcessingSettings")]
        #[method(setAllowedAudioSpatializationFormats:)]
        pub unsafe fn setAllowedAudioSpatializationFormats(
            &self,
            allowed_audio_spatialization_formats: AVAudioSpatializationFormats,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVSampleBufferAudioRenderer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVSampleBufferAudioRendererVolumeControl
    unsafe impl AVSampleBufferAudioRenderer {
        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(isMuted)]
        pub unsafe fn isMuted(&self) -> bool;

        #[method(setMuted:)]
        pub unsafe fn setMuted(&self, muted: bool);
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferaudiorendererwasflushedautomaticallynotification?language=objc)
    pub static AVSampleBufferAudioRendererWasFlushedAutomaticallyNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferaudiorendereroutputconfigurationdidchangenotification?language=objc)
    pub static AVSampleBufferAudioRendererOutputConfigurationDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferaudiorendererflushtimekey?language=objc)
    pub static AVSampleBufferAudioRendererFlushTimeKey: &'static NSString;
}

extern_methods!(
    /// AVSampleBufferAudioRendererQueueManagement
    unsafe impl AVSampleBufferAudioRenderer {
        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(flushFromSourceTime:completionHandler:)]
        pub unsafe fn flushFromSourceTime_completionHandler(
            &self,
            time: CMTime,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );
    }
);
