//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotoqualityprioritization?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCapturePhotoQualityPrioritization(pub NSInteger);
impl AVCapturePhotoQualityPrioritization {
    #[doc(alias = "AVCapturePhotoQualityPrioritizationSpeed")]
    pub const Speed: Self = Self(1);
    #[doc(alias = "AVCapturePhotoQualityPrioritizationBalanced")]
    pub const Balanced: Self = Self(2);
    #[doc(alias = "AVCapturePhotoQualityPrioritizationQuality")]
    pub const Quality: Self = Self(3);
}

unsafe impl Encode for AVCapturePhotoQualityPrioritization {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCapturePhotoQualityPrioritization {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotooutputcapturereadiness?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCapturePhotoOutputCaptureReadiness(pub NSInteger);
impl AVCapturePhotoOutputCaptureReadiness {
    #[doc(alias = "AVCapturePhotoOutputCaptureReadinessSessionNotRunning")]
    pub const SessionNotRunning: Self = Self(0);
    #[doc(alias = "AVCapturePhotoOutputCaptureReadinessReady")]
    pub const Ready: Self = Self(1);
    #[doc(alias = "AVCapturePhotoOutputCaptureReadinessNotReadyMomentarily")]
    pub const NotReadyMomentarily: Self = Self(2);
    #[doc(alias = "AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForCapture")]
    pub const NotReadyWaitingForCapture: Self = Self(3);
    #[doc(alias = "AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForProcessing")]
    pub const NotReadyWaitingForProcessing: Self = Self(4);
}

unsafe impl Encode for AVCapturePhotoOutputCaptureReadiness {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCapturePhotoOutputCaptureReadiness {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotooutput?language=objc)
    #[unsafe(super(AVCaptureOutput, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AVCaptureOutputBase")]
    pub struct AVCapturePhotoOutput;
);

#[cfg(feature = "AVCaptureOutputBase")]
unsafe impl NSObjectProtocol for AVCapturePhotoOutput {}

extern_methods!(
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCapturePhotoOutput {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(capturePhotoWithSettings:delegate:)]
        pub unsafe fn capturePhotoWithSettings_delegate(
            &self,
            settings: &AVCapturePhotoSettings,
            delegate: &ProtocolObject<dyn AVCapturePhotoCaptureDelegate>,
        );

        #[method_id(@__retain_semantics Other preparedPhotoSettingsArray)]
        pub unsafe fn preparedPhotoSettingsArray(
            &self,
        ) -> Retained<NSArray<AVCapturePhotoSettings>>;

        #[cfg(feature = "block2")]
        #[method(setPreparedPhotoSettingsArray:completionHandler:)]
        pub unsafe fn setPreparedPhotoSettingsArray_completionHandler(
            &self,
            prepared_photo_settings_array: &NSArray<AVCapturePhotoSettings>,
            completion_handler: Option<&block2::Block<dyn Fn(Bool, *mut NSError)>>,
        );

        #[method_id(@__retain_semantics Other availablePhotoPixelFormatTypes)]
        pub unsafe fn availablePhotoPixelFormatTypes(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availablePhotoCodecTypes)]
        pub unsafe fn availablePhotoCodecTypes(&self) -> Retained<NSArray<AVVideoCodecType>>;

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availableRawPhotoCodecTypes)]
        pub unsafe fn availableRawPhotoCodecTypes(&self) -> Retained<NSArray<AVVideoCodecType>>;

        #[method(isAppleProRAWSupported)]
        pub unsafe fn isAppleProRAWSupported(&self) -> bool;

        #[method(isAppleProRAWEnabled)]
        pub unsafe fn isAppleProRAWEnabled(&self) -> bool;

        #[method(setAppleProRAWEnabled:)]
        pub unsafe fn setAppleProRAWEnabled(&self, apple_pro_raw_enabled: bool);

        #[method(isBayerRAWPixelFormat:)]
        pub unsafe fn isBayerRAWPixelFormat(pixel_format: OSType) -> bool;

        #[method(isAppleProRAWPixelFormat:)]
        pub unsafe fn isAppleProRAWPixelFormat(pixel_format: OSType) -> bool;

        #[method_id(@__retain_semantics Other availableRawPhotoPixelFormatTypes)]
        pub unsafe fn availableRawPhotoPixelFormatTypes(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other availablePhotoFileTypes)]
        pub unsafe fn availablePhotoFileTypes(&self) -> Retained<NSArray<AVFileType>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other availableRawPhotoFileTypes)]
        pub unsafe fn availableRawPhotoFileTypes(&self) -> Retained<NSArray<AVFileType>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other supportedPhotoPixelFormatTypesForFileType:)]
        pub unsafe fn supportedPhotoPixelFormatTypesForFileType(
            &self,
            file_type: &AVFileType,
        ) -> Retained<NSArray<NSNumber>>;

        #[cfg(all(feature = "AVMediaFormat", feature = "AVVideoSettings"))]
        #[method_id(@__retain_semantics Other supportedPhotoCodecTypesForFileType:)]
        pub unsafe fn supportedPhotoCodecTypesForFileType(
            &self,
            file_type: &AVFileType,
        ) -> Retained<NSArray<AVVideoCodecType>>;

        #[cfg(all(feature = "AVMediaFormat", feature = "AVVideoSettings"))]
        #[method_id(@__retain_semantics Other supportedRawPhotoCodecTypesForRawPhotoPixelFormatType:fileType:)]
        pub unsafe fn supportedRawPhotoCodecTypesForRawPhotoPixelFormatType_fileType(
            &self,
            pixel_format_type: OSType,
            file_type: &AVFileType,
        ) -> Retained<NSArray<AVVideoCodecType>>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other supportedRawPhotoPixelFormatTypesForFileType:)]
        pub unsafe fn supportedRawPhotoPixelFormatTypesForFileType(
            &self,
            file_type: &AVFileType,
        ) -> Retained<NSArray<NSNumber>>;

        #[method(maxPhotoQualityPrioritization)]
        pub unsafe fn maxPhotoQualityPrioritization(&self) -> AVCapturePhotoQualityPrioritization;

        #[method(setMaxPhotoQualityPrioritization:)]
        pub unsafe fn setMaxPhotoQualityPrioritization(
            &self,
            max_photo_quality_prioritization: AVCapturePhotoQualityPrioritization,
        );

        #[method(isFastCapturePrioritizationSupported)]
        pub unsafe fn isFastCapturePrioritizationSupported(&self) -> bool;

        #[method(setFastCapturePrioritizationSupported:)]
        pub unsafe fn setFastCapturePrioritizationSupported(
            &self,
            fast_capture_prioritization_supported: bool,
        );

        #[method(isFastCapturePrioritizationEnabled)]
        pub unsafe fn isFastCapturePrioritizationEnabled(&self) -> bool;

        #[method(setFastCapturePrioritizationEnabled:)]
        pub unsafe fn setFastCapturePrioritizationEnabled(
            &self,
            fast_capture_prioritization_enabled: bool,
        );

        #[method(isAutoDeferredPhotoDeliverySupported)]
        pub unsafe fn isAutoDeferredPhotoDeliverySupported(&self) -> bool;

        #[method(isAutoDeferredPhotoDeliveryEnabled)]
        pub unsafe fn isAutoDeferredPhotoDeliveryEnabled(&self) -> bool;

        #[method(setAutoDeferredPhotoDeliveryEnabled:)]
        pub unsafe fn setAutoDeferredPhotoDeliveryEnabled(
            &self,
            auto_deferred_photo_delivery_enabled: bool,
        );

        #[deprecated]
        #[method(isStillImageStabilizationSupported)]
        pub unsafe fn isStillImageStabilizationSupported(&self) -> bool;

        #[deprecated]
        #[method(isStillImageStabilizationScene)]
        pub unsafe fn isStillImageStabilizationScene(&self) -> bool;

        #[method(isVirtualDeviceFusionSupported)]
        pub unsafe fn isVirtualDeviceFusionSupported(&self) -> bool;

        #[deprecated]
        #[method(isDualCameraFusionSupported)]
        pub unsafe fn isDualCameraFusionSupported(&self) -> bool;

        #[method(isVirtualDeviceConstituentPhotoDeliverySupported)]
        pub unsafe fn isVirtualDeviceConstituentPhotoDeliverySupported(&self) -> bool;

        #[deprecated]
        #[method(isDualCameraDualPhotoDeliverySupported)]
        pub unsafe fn isDualCameraDualPhotoDeliverySupported(&self) -> bool;

        #[method(isVirtualDeviceConstituentPhotoDeliveryEnabled)]
        pub unsafe fn isVirtualDeviceConstituentPhotoDeliveryEnabled(&self) -> bool;

        #[method(setVirtualDeviceConstituentPhotoDeliveryEnabled:)]
        pub unsafe fn setVirtualDeviceConstituentPhotoDeliveryEnabled(
            &self,
            virtual_device_constituent_photo_delivery_enabled: bool,
        );

        #[deprecated]
        #[method(isDualCameraDualPhotoDeliveryEnabled)]
        pub unsafe fn isDualCameraDualPhotoDeliveryEnabled(&self) -> bool;

        #[deprecated]
        #[method(setDualCameraDualPhotoDeliveryEnabled:)]
        pub unsafe fn setDualCameraDualPhotoDeliveryEnabled(
            &self,
            dual_camera_dual_photo_delivery_enabled: bool,
        );

        #[method(isCameraCalibrationDataDeliverySupported)]
        pub unsafe fn isCameraCalibrationDataDeliverySupported(&self) -> bool;

        #[method_id(@__retain_semantics Other supportedFlashModes)]
        pub unsafe fn supportedFlashModes(&self) -> Retained<NSArray<NSNumber>>;

        #[method(isAutoRedEyeReductionSupported)]
        pub unsafe fn isAutoRedEyeReductionSupported(&self) -> bool;

        #[method(isFlashScene)]
        pub unsafe fn isFlashScene(&self) -> bool;

        #[method_id(@__retain_semantics Other photoSettingsForSceneMonitoring)]
        pub unsafe fn photoSettingsForSceneMonitoring(
            &self,
        ) -> Option<Retained<AVCapturePhotoSettings>>;

        #[method(setPhotoSettingsForSceneMonitoring:)]
        pub unsafe fn setPhotoSettingsForSceneMonitoring(
            &self,
            photo_settings_for_scene_monitoring: Option<&AVCapturePhotoSettings>,
        );

        #[deprecated = "Use maxPhotoDimensions instead."]
        #[method(isHighResolutionCaptureEnabled)]
        pub unsafe fn isHighResolutionCaptureEnabled(&self) -> bool;

        #[deprecated = "Use maxPhotoDimensions instead."]
        #[method(setHighResolutionCaptureEnabled:)]
        pub unsafe fn setHighResolutionCaptureEnabled(&self, high_resolution_capture_enabled: bool);

        #[cfg(feature = "objc2-core-media")]
        #[method(maxPhotoDimensions)]
        pub unsafe fn maxPhotoDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(setMaxPhotoDimensions:)]
        pub unsafe fn setMaxPhotoDimensions(&self, max_photo_dimensions: CMVideoDimensions);

        #[method(maxBracketedCapturePhotoCount)]
        pub unsafe fn maxBracketedCapturePhotoCount(&self) -> NSUInteger;

        #[method(isLensStabilizationDuringBracketedCaptureSupported)]
        pub unsafe fn isLensStabilizationDuringBracketedCaptureSupported(&self) -> bool;

        #[method(isLivePhotoCaptureSupported)]
        pub unsafe fn isLivePhotoCaptureSupported(&self) -> bool;

        #[method(isLivePhotoCaptureEnabled)]
        pub unsafe fn isLivePhotoCaptureEnabled(&self) -> bool;

        #[method(setLivePhotoCaptureEnabled:)]
        pub unsafe fn setLivePhotoCaptureEnabled(&self, live_photo_capture_enabled: bool);

        #[method(isLivePhotoCaptureSuspended)]
        pub unsafe fn isLivePhotoCaptureSuspended(&self) -> bool;

        #[method(setLivePhotoCaptureSuspended:)]
        pub unsafe fn setLivePhotoCaptureSuspended(&self, live_photo_capture_suspended: bool);

        #[method(preservesLivePhotoCaptureSuspendedOnSessionStop)]
        pub unsafe fn preservesLivePhotoCaptureSuspendedOnSessionStop(&self) -> bool;

        #[method(setPreservesLivePhotoCaptureSuspendedOnSessionStop:)]
        pub unsafe fn setPreservesLivePhotoCaptureSuspendedOnSessionStop(
            &self,
            preserves_live_photo_capture_suspended_on_session_stop: bool,
        );

        #[method(isLivePhotoAutoTrimmingEnabled)]
        pub unsafe fn isLivePhotoAutoTrimmingEnabled(&self) -> bool;

        #[method(setLivePhotoAutoTrimmingEnabled:)]
        pub unsafe fn setLivePhotoAutoTrimmingEnabled(
            &self,
            live_photo_auto_trimming_enabled: bool,
        );

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availableLivePhotoVideoCodecTypes)]
        pub unsafe fn availableLivePhotoVideoCodecTypes(
            &self,
        ) -> Retained<NSArray<AVVideoCodecType>>;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated]
        #[method_id(@__retain_semantics Other JPEGPhotoDataRepresentationForJPEGSampleBuffer:previewPhotoSampleBuffer:)]
        pub unsafe fn JPEGPhotoDataRepresentationForJPEGSampleBuffer_previewPhotoSampleBuffer(
            jpeg_sample_buffer: CMSampleBufferRef,
            preview_photo_sample_buffer: CMSampleBufferRef,
        ) -> Option<Retained<NSData>>;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated]
        #[method_id(@__retain_semantics Other DNGPhotoDataRepresentationForRawSampleBuffer:previewPhotoSampleBuffer:)]
        pub unsafe fn DNGPhotoDataRepresentationForRawSampleBuffer_previewPhotoSampleBuffer(
            raw_sample_buffer: CMSampleBufferRef,
            preview_photo_sample_buffer: CMSampleBufferRef,
        ) -> Option<Retained<NSData>>;

        #[method(isContentAwareDistortionCorrectionSupported)]
        pub unsafe fn isContentAwareDistortionCorrectionSupported(&self) -> bool;

        #[method(isContentAwareDistortionCorrectionEnabled)]
        pub unsafe fn isContentAwareDistortionCorrectionEnabled(&self) -> bool;

        #[method(setContentAwareDistortionCorrectionEnabled:)]
        pub unsafe fn setContentAwareDistortionCorrectionEnabled(
            &self,
            content_aware_distortion_correction_enabled: bool,
        );

        #[method(isZeroShutterLagSupported)]
        pub unsafe fn isZeroShutterLagSupported(&self) -> bool;

        #[method(isZeroShutterLagEnabled)]
        pub unsafe fn isZeroShutterLagEnabled(&self) -> bool;

        #[method(setZeroShutterLagEnabled:)]
        pub unsafe fn setZeroShutterLagEnabled(&self, zero_shutter_lag_enabled: bool);

        #[method(isResponsiveCaptureSupported)]
        pub unsafe fn isResponsiveCaptureSupported(&self) -> bool;

        #[method(isResponsiveCaptureEnabled)]
        pub unsafe fn isResponsiveCaptureEnabled(&self) -> bool;

        #[method(setResponsiveCaptureEnabled:)]
        pub unsafe fn setResponsiveCaptureEnabled(&self, responsive_capture_enabled: bool);

        #[method(captureReadiness)]
        pub unsafe fn captureReadiness(&self) -> AVCapturePhotoOutputCaptureReadiness;

        #[method(isConstantColorSupported)]
        pub unsafe fn isConstantColorSupported(&self) -> bool;

        #[method(isConstantColorEnabled)]
        pub unsafe fn isConstantColorEnabled(&self) -> bool;

        #[method(setConstantColorEnabled:)]
        pub unsafe fn setConstantColorEnabled(&self, constant_color_enabled: bool);

        #[method(isShutterSoundSuppressionSupported)]
        pub unsafe fn isShutterSoundSuppressionSupported(&self) -> bool;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotooutputreadinesscoordinator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCapturePhotoOutputReadinessCoordinator;
);

unsafe impl NSObjectProtocol for AVCapturePhotoOutputReadinessCoordinator {}

extern_methods!(
    unsafe impl AVCapturePhotoOutputReadinessCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVCaptureOutputBase")]
        #[method_id(@__retain_semantics Init initWithPhotoOutput:)]
        pub unsafe fn initWithPhotoOutput(
            this: Allocated<Self>,
            photo_output: &AVCapturePhotoOutput,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVCapturePhotoOutputReadinessCoordinatorDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AVCapturePhotoOutputReadinessCoordinatorDelegate>>,
        );

        #[method(captureReadiness)]
        pub unsafe fn captureReadiness(&self) -> AVCapturePhotoOutputCaptureReadiness;

        #[method(startTrackingCaptureRequestUsingPhotoSettings:)]
        pub unsafe fn startTrackingCaptureRequestUsingPhotoSettings(
            &self,
            settings: &AVCapturePhotoSettings,
        );

        #[method(stopTrackingCaptureRequestUsingPhotoSettingsUniqueID:)]
        pub unsafe fn stopTrackingCaptureRequestUsingPhotoSettingsUniqueID(
            &self,
            settings_unique_id: i64,
        );
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotooutputreadinesscoordinatordelegate?language=objc)
    pub unsafe trait AVCapturePhotoOutputReadinessCoordinatorDelegate:
        NSObjectProtocol
    {
        #[optional]
        #[method(readinessCoordinator:captureReadinessDidChange:)]
        unsafe fn readinessCoordinator_captureReadinessDidChange(
            &self,
            coordinator: &AVCapturePhotoOutputReadinessCoordinator,
            capture_readiness: AVCapturePhotoOutputCaptureReadiness,
        );
    }

    unsafe impl ProtocolType for dyn AVCapturePhotoOutputReadinessCoordinatorDelegate {}
);

extern_methods!(
    /// AVCapturePhotoOutputDepthDataDeliverySupport
    #[cfg(feature = "AVCaptureOutputBase")]
    unsafe impl AVCapturePhotoOutput {
        #[method(isDepthDataDeliverySupported)]
        pub unsafe fn isDepthDataDeliverySupported(&self) -> bool;

        #[method(isDepthDataDeliveryEnabled)]
        pub unsafe fn isDepthDataDeliveryEnabled(&self) -> bool;

        #[method(setDepthDataDeliveryEnabled:)]
        pub unsafe fn setDepthDataDeliveryEnabled(&self, depth_data_delivery_enabled: bool);

        #[method(isPortraitEffectsMatteDeliverySupported)]
        pub unsafe fn isPortraitEffectsMatteDeliverySupported(&self) -> bool;

        #[method(isPortraitEffectsMatteDeliveryEnabled)]
        pub unsafe fn isPortraitEffectsMatteDeliveryEnabled(&self) -> bool;

        #[method(setPortraitEffectsMatteDeliveryEnabled:)]
        pub unsafe fn setPortraitEffectsMatteDeliveryEnabled(
            &self,
            portrait_effects_matte_delivery_enabled: bool,
        );

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method_id(@__retain_semantics Other availableSemanticSegmentationMatteTypes)]
        pub unsafe fn availableSemanticSegmentationMatteTypes(
            &self,
        ) -> Retained<NSArray<AVSemanticSegmentationMatteType>>;

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method_id(@__retain_semantics Other enabledSemanticSegmentationMatteTypes)]
        pub unsafe fn enabledSemanticSegmentationMatteTypes(
            &self,
        ) -> Retained<NSArray<AVSemanticSegmentationMatteType>>;

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method(setEnabledSemanticSegmentationMatteTypes:)]
        pub unsafe fn setEnabledSemanticSegmentationMatteTypes(
            &self,
            enabled_semantic_segmentation_matte_types: &NSArray<AVSemanticSegmentationMatteType>,
        );
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotocapturedelegate?language=objc)
    pub unsafe trait AVCapturePhotoCaptureDelegate: NSObjectProtocol {
        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:willBeginCaptureForResolvedSettings:)]
        unsafe fn captureOutput_willBeginCaptureForResolvedSettings(
            &self,
            output: &AVCapturePhotoOutput,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:willCapturePhotoForResolvedSettings:)]
        unsafe fn captureOutput_willCapturePhotoForResolvedSettings(
            &self,
            output: &AVCapturePhotoOutput,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:didCapturePhotoForResolvedSettings:)]
        unsafe fn captureOutput_didCapturePhotoForResolvedSettings(
            &self,
            output: &AVCapturePhotoOutput,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:didFinishProcessingPhoto:error:)]
        unsafe fn captureOutput_didFinishProcessingPhoto_error(
            &self,
            output: &AVCapturePhotoOutput,
            photo: &AVCapturePhoto,
            error: Option<&NSError>,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:didFinishCapturingDeferredPhotoProxy:error:)]
        unsafe fn captureOutput_didFinishCapturingDeferredPhotoProxy_error(
            &self,
            output: &AVCapturePhotoOutput,
            deferred_photo_proxy: Option<&AVCaptureDeferredPhotoProxy>,
            error: Option<&NSError>,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:didFinishRecordingLivePhotoMovieForEventualFileAtURL:resolvedSettings:)]
        unsafe fn captureOutput_didFinishRecordingLivePhotoMovieForEventualFileAtURL_resolvedSettings(
            &self,
            output: &AVCapturePhotoOutput,
            output_file_url: &NSURL,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
        );

        #[cfg(all(feature = "AVCaptureOutputBase", feature = "objc2-core-media"))]
        #[optional]
        #[method(captureOutput:didFinishProcessingLivePhotoToMovieFileAtURL:duration:photoDisplayTime:resolvedSettings:error:)]
        unsafe fn captureOutput_didFinishProcessingLivePhotoToMovieFileAtURL_duration_photoDisplayTime_resolvedSettings_error(
            &self,
            output: &AVCapturePhotoOutput,
            output_file_url: &NSURL,
            duration: CMTime,
            photo_display_time: CMTime,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
            error: Option<&NSError>,
        );

        #[cfg(feature = "AVCaptureOutputBase")]
        #[optional]
        #[method(captureOutput:didFinishCaptureForResolvedSettings:error:)]
        unsafe fn captureOutput_didFinishCaptureForResolvedSettings_error(
            &self,
            output: &AVCapturePhotoOutput,
            resolved_settings: &AVCaptureResolvedPhotoSettings,
            error: Option<&NSError>,
        );
    }

    unsafe impl ProtocolType for dyn AVCapturePhotoCaptureDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotosettings?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCapturePhotoSettings;
);

unsafe impl NSCopying for AVCapturePhotoSettings {}

unsafe impl CopyingHelper for AVCapturePhotoSettings {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVCapturePhotoSettings {}

extern_methods!(
    unsafe impl AVCapturePhotoSettings {
        #[method_id(@__retain_semantics Other photoSettings)]
        pub unsafe fn photoSettings() -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithFormat:)]
        pub unsafe fn photoSettingsWithFormat(
            format: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType(
            raw_pixel_format_type: OSType,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:processedFormat:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType_processedFormat(
            raw_pixel_format_type: OSType,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType(
            raw_pixel_format_type: OSType,
            raw_file_type: Option<&AVFileType>,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
            processed_file_type: Option<&AVFileType>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsFromPhotoSettings:)]
        pub unsafe fn photoSettingsFromPhotoSettings(
            photo_settings: &AVCapturePhotoSettings,
        ) -> Retained<Self>;

        #[method(uniqueID)]
        pub unsafe fn uniqueID(&self) -> i64;

        #[method_id(@__retain_semantics Other format)]
        pub unsafe fn format(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method_id(@__retain_semantics Other rawFileFormat)]
        pub unsafe fn rawFileFormat(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method(setRawFileFormat:)]
        pub unsafe fn setRawFileFormat(
            &self,
            raw_file_format: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other processedFileType)]
        pub unsafe fn processedFileType(&self) -> Option<Retained<AVFileType>>;

        #[method(rawPhotoPixelFormatType)]
        pub unsafe fn rawPhotoPixelFormatType(&self) -> OSType;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other rawFileType)]
        pub unsafe fn rawFileType(&self) -> Option<Retained<AVFileType>>;

        #[cfg(feature = "AVCaptureDevice")]
        #[method(flashMode)]
        pub unsafe fn flashMode(&self) -> AVCaptureFlashMode;

        #[cfg(feature = "AVCaptureDevice")]
        #[method(setFlashMode:)]
        pub unsafe fn setFlashMode(&self, flash_mode: AVCaptureFlashMode);

        #[method(isAutoRedEyeReductionEnabled)]
        pub unsafe fn isAutoRedEyeReductionEnabled(&self) -> bool;

        #[method(setAutoRedEyeReductionEnabled:)]
        pub unsafe fn setAutoRedEyeReductionEnabled(&self, auto_red_eye_reduction_enabled: bool);

        #[method(photoQualityPrioritization)]
        pub unsafe fn photoQualityPrioritization(&self) -> AVCapturePhotoQualityPrioritization;

        #[method(setPhotoQualityPrioritization:)]
        pub unsafe fn setPhotoQualityPrioritization(
            &self,
            photo_quality_prioritization: AVCapturePhotoQualityPrioritization,
        );

        #[deprecated]
        #[method(isAutoStillImageStabilizationEnabled)]
        pub unsafe fn isAutoStillImageStabilizationEnabled(&self) -> bool;

        #[deprecated]
        #[method(setAutoStillImageStabilizationEnabled:)]
        pub unsafe fn setAutoStillImageStabilizationEnabled(
            &self,
            auto_still_image_stabilization_enabled: bool,
        );

        #[method(isAutoVirtualDeviceFusionEnabled)]
        pub unsafe fn isAutoVirtualDeviceFusionEnabled(&self) -> bool;

        #[method(setAutoVirtualDeviceFusionEnabled:)]
        pub unsafe fn setAutoVirtualDeviceFusionEnabled(
            &self,
            auto_virtual_device_fusion_enabled: bool,
        );

        #[deprecated]
        #[method(isAutoDualCameraFusionEnabled)]
        pub unsafe fn isAutoDualCameraFusionEnabled(&self) -> bool;

        #[deprecated]
        #[method(setAutoDualCameraFusionEnabled:)]
        pub unsafe fn setAutoDualCameraFusionEnabled(&self, auto_dual_camera_fusion_enabled: bool);

        #[cfg(feature = "AVCaptureDevice")]
        #[method_id(@__retain_semantics Other virtualDeviceConstituentPhotoDeliveryEnabledDevices)]
        pub unsafe fn virtualDeviceConstituentPhotoDeliveryEnabledDevices(
            &self,
        ) -> Retained<NSArray<AVCaptureDevice>>;

        #[cfg(feature = "AVCaptureDevice")]
        #[method(setVirtualDeviceConstituentPhotoDeliveryEnabledDevices:)]
        pub unsafe fn setVirtualDeviceConstituentPhotoDeliveryEnabledDevices(
            &self,
            virtual_device_constituent_photo_delivery_enabled_devices: &NSArray<AVCaptureDevice>,
        );

        #[deprecated]
        #[method(isDualCameraDualPhotoDeliveryEnabled)]
        pub unsafe fn isDualCameraDualPhotoDeliveryEnabled(&self) -> bool;

        #[deprecated]
        #[method(setDualCameraDualPhotoDeliveryEnabled:)]
        pub unsafe fn setDualCameraDualPhotoDeliveryEnabled(
            &self,
            dual_camera_dual_photo_delivery_enabled: bool,
        );

        #[deprecated = "Use maxPhotoDimensions instead."]
        #[method(isHighResolutionPhotoEnabled)]
        pub unsafe fn isHighResolutionPhotoEnabled(&self) -> bool;

        #[deprecated = "Use maxPhotoDimensions instead."]
        #[method(setHighResolutionPhotoEnabled:)]
        pub unsafe fn setHighResolutionPhotoEnabled(&self, high_resolution_photo_enabled: bool);

        #[cfg(feature = "objc2-core-media")]
        #[method(maxPhotoDimensions)]
        pub unsafe fn maxPhotoDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(setMaxPhotoDimensions:)]
        pub unsafe fn setMaxPhotoDimensions(&self, max_photo_dimensions: CMVideoDimensions);

        #[method(isDepthDataDeliveryEnabled)]
        pub unsafe fn isDepthDataDeliveryEnabled(&self) -> bool;

        #[method(setDepthDataDeliveryEnabled:)]
        pub unsafe fn setDepthDataDeliveryEnabled(&self, depth_data_delivery_enabled: bool);

        #[method(embedsDepthDataInPhoto)]
        pub unsafe fn embedsDepthDataInPhoto(&self) -> bool;

        #[method(setEmbedsDepthDataInPhoto:)]
        pub unsafe fn setEmbedsDepthDataInPhoto(&self, embeds_depth_data_in_photo: bool);

        #[method(isDepthDataFiltered)]
        pub unsafe fn isDepthDataFiltered(&self) -> bool;

        #[method(setDepthDataFiltered:)]
        pub unsafe fn setDepthDataFiltered(&self, depth_data_filtered: bool);

        #[method(isCameraCalibrationDataDeliveryEnabled)]
        pub unsafe fn isCameraCalibrationDataDeliveryEnabled(&self) -> bool;

        #[method(setCameraCalibrationDataDeliveryEnabled:)]
        pub unsafe fn setCameraCalibrationDataDeliveryEnabled(
            &self,
            camera_calibration_data_delivery_enabled: bool,
        );

        #[method(isPortraitEffectsMatteDeliveryEnabled)]
        pub unsafe fn isPortraitEffectsMatteDeliveryEnabled(&self) -> bool;

        #[method(setPortraitEffectsMatteDeliveryEnabled:)]
        pub unsafe fn setPortraitEffectsMatteDeliveryEnabled(
            &self,
            portrait_effects_matte_delivery_enabled: bool,
        );

        #[method(embedsPortraitEffectsMatteInPhoto)]
        pub unsafe fn embedsPortraitEffectsMatteInPhoto(&self) -> bool;

        #[method(setEmbedsPortraitEffectsMatteInPhoto:)]
        pub unsafe fn setEmbedsPortraitEffectsMatteInPhoto(
            &self,
            embeds_portrait_effects_matte_in_photo: bool,
        );

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method_id(@__retain_semantics Other enabledSemanticSegmentationMatteTypes)]
        pub unsafe fn enabledSemanticSegmentationMatteTypes(
            &self,
        ) -> Retained<NSArray<AVSemanticSegmentationMatteType>>;

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method(setEnabledSemanticSegmentationMatteTypes:)]
        pub unsafe fn setEnabledSemanticSegmentationMatteTypes(
            &self,
            enabled_semantic_segmentation_matte_types: &NSArray<AVSemanticSegmentationMatteType>,
        );

        #[method(embedsSemanticSegmentationMattesInPhoto)]
        pub unsafe fn embedsSemanticSegmentationMattesInPhoto(&self) -> bool;

        #[method(setEmbedsSemanticSegmentationMattesInPhoto:)]
        pub unsafe fn setEmbedsSemanticSegmentationMattesInPhoto(
            &self,
            embeds_semantic_segmentation_mattes_in_photo: bool,
        );

        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[method(setMetadata:)]
        pub unsafe fn setMetadata(&self, metadata: &NSDictionary<NSString, AnyObject>);

        #[method_id(@__retain_semantics Other livePhotoMovieFileURL)]
        pub unsafe fn livePhotoMovieFileURL(&self) -> Option<Retained<NSURL>>;

        #[method(setLivePhotoMovieFileURL:)]
        pub unsafe fn setLivePhotoMovieFileURL(&self, live_photo_movie_file_url: Option<&NSURL>);

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other livePhotoVideoCodecType)]
        pub unsafe fn livePhotoVideoCodecType(&self) -> Retained<AVVideoCodecType>;

        #[cfg(feature = "AVVideoSettings")]
        #[method(setLivePhotoVideoCodecType:)]
        pub unsafe fn setLivePhotoVideoCodecType(
            &self,
            live_photo_video_codec_type: &AVVideoCodecType,
        );

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other livePhotoMovieMetadata)]
        pub unsafe fn livePhotoMovieMetadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method(setLivePhotoMovieMetadata:)]
        pub unsafe fn setLivePhotoMovieMetadata(
            &self,
            live_photo_movie_metadata: Option<&NSArray<AVMetadataItem>>,
        );

        #[method_id(@__retain_semantics Other availablePreviewPhotoPixelFormatTypes)]
        pub unsafe fn availablePreviewPhotoPixelFormatTypes(&self) -> Retained<NSArray<NSNumber>>;

        #[method_id(@__retain_semantics Other previewPhotoFormat)]
        pub unsafe fn previewPhotoFormat(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method(setPreviewPhotoFormat:)]
        pub unsafe fn setPreviewPhotoFormat(
            &self,
            preview_photo_format: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availableEmbeddedThumbnailPhotoCodecTypes)]
        pub unsafe fn availableEmbeddedThumbnailPhotoCodecTypes(
            &self,
        ) -> Retained<NSArray<AVVideoCodecType>>;

        #[method_id(@__retain_semantics Other embeddedThumbnailPhotoFormat)]
        pub unsafe fn embeddedThumbnailPhotoFormat(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method(setEmbeddedThumbnailPhotoFormat:)]
        pub unsafe fn setEmbeddedThumbnailPhotoFormat(
            &self,
            embedded_thumbnail_photo_format: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(feature = "AVVideoSettings")]
        #[method_id(@__retain_semantics Other availableRawEmbeddedThumbnailPhotoCodecTypes)]
        pub unsafe fn availableRawEmbeddedThumbnailPhotoCodecTypes(
            &self,
        ) -> Retained<NSArray<AVVideoCodecType>>;

        #[method_id(@__retain_semantics Other rawEmbeddedThumbnailPhotoFormat)]
        pub unsafe fn rawEmbeddedThumbnailPhotoFormat(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[method(setRawEmbeddedThumbnailPhotoFormat:)]
        pub unsafe fn setRawEmbeddedThumbnailPhotoFormat(
            &self,
            raw_embedded_thumbnail_photo_format: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[method(isAutoContentAwareDistortionCorrectionEnabled)]
        pub unsafe fn isAutoContentAwareDistortionCorrectionEnabled(&self) -> bool;

        #[method(setAutoContentAwareDistortionCorrectionEnabled:)]
        pub unsafe fn setAutoContentAwareDistortionCorrectionEnabled(
            &self,
            auto_content_aware_distortion_correction_enabled: bool,
        );

        #[method(isConstantColorEnabled)]
        pub unsafe fn isConstantColorEnabled(&self) -> bool;

        #[method(setConstantColorEnabled:)]
        pub unsafe fn setConstantColorEnabled(&self, constant_color_enabled: bool);

        #[method(isConstantColorFallbackPhotoDeliveryEnabled)]
        pub unsafe fn isConstantColorFallbackPhotoDeliveryEnabled(&self) -> bool;

        #[method(setConstantColorFallbackPhotoDeliveryEnabled:)]
        pub unsafe fn setConstantColorFallbackPhotoDeliveryEnabled(
            &self,
            constant_color_fallback_photo_delivery_enabled: bool,
        );

        #[method(isShutterSoundSuppressionEnabled)]
        pub unsafe fn isShutterSoundSuppressionEnabled(&self) -> bool;

        #[method(setShutterSoundSuppressionEnabled:)]
        pub unsafe fn setShutterSoundSuppressionEnabled(
            &self,
            shutter_sound_suppression_enabled: bool,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVCapturePhotoSettings {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotobracketsettings?language=objc)
    #[unsafe(super(AVCapturePhotoSettings, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCapturePhotoBracketSettings;
);

unsafe impl NSCopying for AVCapturePhotoBracketSettings {}

unsafe impl CopyingHelper for AVCapturePhotoBracketSettings {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVCapturePhotoBracketSettings {}

extern_methods!(
    unsafe impl AVCapturePhotoBracketSettings {
        #[cfg(feature = "AVCaptureStillImageOutput")]
        #[method_id(@__retain_semantics Other photoBracketSettingsWithRawPixelFormatType:processedFormat:bracketedSettings:)]
        pub unsafe fn photoBracketSettingsWithRawPixelFormatType_processedFormat_bracketedSettings(
            raw_pixel_format_type: OSType,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
            bracketed_settings: &NSArray<AVCaptureBracketedStillImageSettings>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "AVCaptureStillImageOutput", feature = "AVMediaFormat"))]
        #[method_id(@__retain_semantics Other photoBracketSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:bracketedSettings:)]
        pub unsafe fn photoBracketSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType_bracketedSettings(
            raw_pixel_format_type: OSType,
            raw_file_type: Option<&AVFileType>,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
            processed_file_type: Option<&AVFileType>,
            bracketed_settings: &NSArray<AVCaptureBracketedStillImageSettings>,
        ) -> Retained<Self>;

        #[cfg(feature = "AVCaptureStillImageOutput")]
        #[method_id(@__retain_semantics Other bracketedSettings)]
        pub unsafe fn bracketedSettings(
            &self,
        ) -> Retained<NSArray<AVCaptureBracketedStillImageSettings>>;

        #[method(isLensStabilizationEnabled)]
        pub unsafe fn isLensStabilizationEnabled(&self) -> bool;

        #[method(setLensStabilizationEnabled:)]
        pub unsafe fn setLensStabilizationEnabled(&self, lens_stabilization_enabled: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `AVCapturePhotoSettings`
    unsafe impl AVCapturePhotoBracketSettings {
        #[method_id(@__retain_semantics Other photoSettings)]
        pub unsafe fn photoSettings() -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithFormat:)]
        pub unsafe fn photoSettingsWithFormat(
            format: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType(
            raw_pixel_format_type: OSType,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:processedFormat:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType_processedFormat(
            raw_pixel_format_type: OSType,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:)]
        pub unsafe fn photoSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType(
            raw_pixel_format_type: OSType,
            raw_file_type: Option<&AVFileType>,
            processed_format: Option<&NSDictionary<NSString, AnyObject>>,
            processed_file_type: Option<&AVFileType>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other photoSettingsFromPhotoSettings:)]
        pub unsafe fn photoSettingsFromPhotoSettings(
            photo_settings: &AVCapturePhotoSettings,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVCapturePhotoBracketSettings {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptureresolvedphotosettings?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureResolvedPhotoSettings;
);

unsafe impl NSObjectProtocol for AVCaptureResolvedPhotoSettings {}

extern_methods!(
    unsafe impl AVCaptureResolvedPhotoSettings {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(uniqueID)]
        pub unsafe fn uniqueID(&self) -> i64;

        #[cfg(feature = "objc2-core-media")]
        #[method(photoDimensions)]
        pub unsafe fn photoDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(rawPhotoDimensions)]
        pub unsafe fn rawPhotoDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(previewDimensions)]
        pub unsafe fn previewDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(embeddedThumbnailDimensions)]
        pub unsafe fn embeddedThumbnailDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(rawEmbeddedThumbnailDimensions)]
        pub unsafe fn rawEmbeddedThumbnailDimensions(&self) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(portraitEffectsMatteDimensions)]
        pub unsafe fn portraitEffectsMatteDimensions(&self) -> CMVideoDimensions;

        #[cfg(all(feature = "AVSemanticSegmentationMatte", feature = "objc2-core-media"))]
        #[method(dimensionsForSemanticSegmentationMatteOfType:)]
        pub unsafe fn dimensionsForSemanticSegmentationMatteOfType(
            &self,
            semantic_segmentation_matte_type: &AVSemanticSegmentationMatteType,
        ) -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        #[method(livePhotoMovieDimensions)]
        pub unsafe fn livePhotoMovieDimensions(&self) -> CMVideoDimensions;

        #[method(isFlashEnabled)]
        pub unsafe fn isFlashEnabled(&self) -> bool;

        #[method(isRedEyeReductionEnabled)]
        pub unsafe fn isRedEyeReductionEnabled(&self) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[method(deferredPhotoProxyDimensions)]
        pub unsafe fn deferredPhotoProxyDimensions(&self) -> CMVideoDimensions;

        #[deprecated]
        #[method(isStillImageStabilizationEnabled)]
        pub unsafe fn isStillImageStabilizationEnabled(&self) -> bool;

        #[method(isVirtualDeviceFusionEnabled)]
        pub unsafe fn isVirtualDeviceFusionEnabled(&self) -> bool;

        #[deprecated]
        #[method(isDualCameraFusionEnabled)]
        pub unsafe fn isDualCameraFusionEnabled(&self) -> bool;

        #[method(expectedPhotoCount)]
        pub unsafe fn expectedPhotoCount(&self) -> NSUInteger;

        #[cfg(feature = "objc2-core-media")]
        #[method(photoProcessingTimeRange)]
        pub unsafe fn photoProcessingTimeRange(&self) -> CMTimeRange;

        #[method(isContentAwareDistortionCorrectionEnabled)]
        pub unsafe fn isContentAwareDistortionCorrectionEnabled(&self) -> bool;

        #[method(isFastCapturePrioritizationEnabled)]
        pub unsafe fn isFastCapturePrioritizationEnabled(&self) -> bool;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephoto?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCapturePhoto;
);

unsafe impl NSObjectProtocol for AVCapturePhoto {}

extern_methods!(
    unsafe impl AVCapturePhoto {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(timestamp)]
        pub unsafe fn timestamp(&self) -> CMTime;

        #[method(isRawPhoto)]
        pub unsafe fn isRawPhoto(&self) -> bool;

        #[cfg(feature = "objc2-core-video")]
        #[method(pixelBuffer)]
        pub unsafe fn pixelBuffer(&self) -> CVPixelBufferRef;

        #[cfg(feature = "objc2-core-video")]
        #[method(previewPixelBuffer)]
        pub unsafe fn previewPixelBuffer(&self) -> CVPixelBufferRef;

        #[method_id(@__retain_semantics Other embeddedThumbnailPhotoFormat)]
        pub unsafe fn embeddedThumbnailPhotoFormat(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[cfg(feature = "AVDepthData")]
        #[method_id(@__retain_semantics Other depthData)]
        pub unsafe fn depthData(&self) -> Option<Retained<AVDepthData>>;

        #[cfg(feature = "AVPortraitEffectsMatte")]
        #[method_id(@__retain_semantics Other portraitEffectsMatte)]
        pub unsafe fn portraitEffectsMatte(&self) -> Option<Retained<AVPortraitEffectsMatte>>;

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[method_id(@__retain_semantics Other semanticSegmentationMatteForType:)]
        pub unsafe fn semanticSegmentationMatteForType(
            &self,
            semantic_segmentation_matte_type: &AVSemanticSegmentationMatteType,
        ) -> Option<Retained<AVSemanticSegmentationMatte>>;

        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "AVCameraCalibrationData")]
        #[method_id(@__retain_semantics Other cameraCalibrationData)]
        pub unsafe fn cameraCalibrationData(&self) -> Option<Retained<AVCameraCalibrationData>>;

        #[method_id(@__retain_semantics Other resolvedSettings)]
        pub unsafe fn resolvedSettings(&self) -> Retained<AVCaptureResolvedPhotoSettings>;

        #[method(photoCount)]
        pub unsafe fn photoCount(&self) -> NSInteger;

        #[cfg(feature = "AVCaptureDevice")]
        #[method_id(@__retain_semantics Other sourceDeviceType)]
        pub unsafe fn sourceDeviceType(&self) -> Option<Retained<AVCaptureDeviceType>>;

        #[cfg(feature = "objc2-core-video")]
        #[method(constantColorConfidenceMap)]
        pub unsafe fn constantColorConfidenceMap(&self) -> CVPixelBufferRef;

        #[method(constantColorCenterWeightedMeanConfidenceLevel)]
        pub unsafe fn constantColorCenterWeightedMeanConfidenceLevel(&self) -> c_float;

        #[method(isConstantColorFallbackPhoto)]
        pub unsafe fn isConstantColorFallbackPhoto(&self) -> bool;
    }
);

extern_methods!(
    /// AVCapturePhotoConversions
    unsafe impl AVCapturePhoto {
        #[method_id(@__retain_semantics Other fileDataRepresentation)]
        pub unsafe fn fileDataRepresentation(&self) -> Option<Retained<NSData>>;

        #[method_id(@__retain_semantics Other fileDataRepresentationWithCustomizer:)]
        pub unsafe fn fileDataRepresentationWithCustomizer(
            &self,
            customizer: &ProtocolObject<dyn AVCapturePhotoFileDataRepresentationCustomizer>,
        ) -> Option<Retained<NSData>>;

        #[cfg(all(feature = "AVDepthData", feature = "objc2-core-video"))]
        #[deprecated]
        #[method_id(@__retain_semantics Other fileDataRepresentationWithReplacementMetadata:replacementEmbeddedThumbnailPhotoFormat:replacementEmbeddedThumbnailPixelBuffer:replacementDepthData:)]
        pub unsafe fn fileDataRepresentationWithReplacementMetadata_replacementEmbeddedThumbnailPhotoFormat_replacementEmbeddedThumbnailPixelBuffer_replacementDepthData(
            &self,
            replacement_metadata: Option<&NSDictionary<NSString, AnyObject>>,
            replacement_embedded_thumbnail_photo_format: Option<&NSDictionary<NSString, AnyObject>>,
            replacement_embedded_thumbnail_pixel_buffer: CVPixelBufferRef,
            replacement_depth_data: Option<&AVDepthData>,
        ) -> Option<Retained<NSData>>;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(CGImageRepresentation)]
        pub unsafe fn CGImageRepresentation(&self) -> CGImageRef;

        #[cfg(feature = "objc2-core-graphics")]
        #[method(previewCGImageRepresentation)]
        pub unsafe fn previewCGImageRepresentation(&self) -> CGImageRef;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturelensstabilizationstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVCaptureLensStabilizationStatus(pub NSInteger);
impl AVCaptureLensStabilizationStatus {
    #[doc(alias = "AVCaptureLensStabilizationStatusUnsupported")]
    pub const Unsupported: Self = Self(0);
    #[doc(alias = "AVCaptureLensStabilizationStatusOff")]
    pub const Off: Self = Self(1);
    #[doc(alias = "AVCaptureLensStabilizationStatusActive")]
    pub const Active: Self = Self(2);
    #[doc(alias = "AVCaptureLensStabilizationStatusOutOfRange")]
    pub const OutOfRange: Self = Self(3);
    #[doc(alias = "AVCaptureLensStabilizationStatusUnavailable")]
    pub const Unavailable: Self = Self(4);
}

unsafe impl Encode for AVCaptureLensStabilizationStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVCaptureLensStabilizationStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVCapturePhotoBracketedCapture
    unsafe impl AVCapturePhoto {
        #[cfg(feature = "AVCaptureStillImageOutput")]
        #[method_id(@__retain_semantics Other bracketSettings)]
        pub unsafe fn bracketSettings(
            &self,
        ) -> Option<Retained<AVCaptureBracketedStillImageSettings>>;

        #[method(sequenceCount)]
        pub unsafe fn sequenceCount(&self) -> NSInteger;

        #[method(lensStabilizationStatus)]
        pub unsafe fn lensStabilizationStatus(&self) -> AVCaptureLensStabilizationStatus;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturedeferredphotoproxy?language=objc)
    #[unsafe(super(AVCapturePhoto, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptureDeferredPhotoProxy;
);

unsafe impl NSObjectProtocol for AVCaptureDeferredPhotoProxy {}

extern_methods!(
    unsafe impl AVCaptureDeferredPhotoProxy {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturephotofiledatarepresentationcustomizer?language=objc)
    pub unsafe trait AVCapturePhotoFileDataRepresentationCustomizer:
        NSObjectProtocol
    {
        #[optional]
        #[method_id(@__retain_semantics Other replacementMetadataForPhoto:)]
        unsafe fn replacementMetadataForPhoto(
            &self,
            photo: &AVCapturePhoto,
        ) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[cfg(feature = "objc2-core-video")]
        #[optional]
        #[method(replacementEmbeddedThumbnailPixelBufferWithPhotoFormat:forPhoto:)]
        unsafe fn replacementEmbeddedThumbnailPixelBufferWithPhotoFormat_forPhoto(
            &self,
            replacement_embedded_thumbnail_photo_format_out: &mut Option<
                Retained<NSDictionary<NSString, AnyObject>>,
            >,
            photo: &AVCapturePhoto,
        ) -> CVPixelBufferRef;

        #[cfg(feature = "AVDepthData")]
        #[optional]
        #[method_id(@__retain_semantics Other replacementDepthDataForPhoto:)]
        unsafe fn replacementDepthDataForPhoto(
            &self,
            photo: &AVCapturePhoto,
        ) -> Option<Retained<AVDepthData>>;

        #[cfg(feature = "AVPortraitEffectsMatte")]
        #[optional]
        #[method_id(@__retain_semantics Other replacementPortraitEffectsMatteForPhoto:)]
        unsafe fn replacementPortraitEffectsMatteForPhoto(
            &self,
            photo: &AVCapturePhoto,
        ) -> Option<Retained<AVPortraitEffectsMatte>>;

        #[cfg(feature = "AVSemanticSegmentationMatte")]
        #[optional]
        #[method_id(@__retain_semantics Other replacementSemanticSegmentationMatteOfType:forPhoto:)]
        unsafe fn replacementSemanticSegmentationMatteOfType_forPhoto(
            &self,
            semantic_segmentation_matte_type: &AVSemanticSegmentationMatteType,
            photo: &AVCapturePhoto,
        ) -> Option<Retained<AVSemanticSegmentationMatte>>;

        #[optional]
        #[method_id(@__retain_semantics Other replacementAppleProRAWCompressionSettingsForPhoto:defaultSettings:maximumBitDepth:)]
        unsafe fn replacementAppleProRAWCompressionSettingsForPhoto_defaultSettings_maximumBitDepth(
            &self,
            photo: &AVCapturePhoto,
            default_settings: &NSDictionary<NSString, AnyObject>,
            maximum_bit_depth: NSInteger,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;
    }

    unsafe impl ProtocolType for dyn AVCapturePhotoFileDataRepresentationCustomizer {}
);
