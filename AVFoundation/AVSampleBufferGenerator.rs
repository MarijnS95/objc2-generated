//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffergenerator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleBufferGenerator;
);

unsafe impl Send for AVSampleBufferGenerator {}

unsafe impl Sync for AVSampleBufferGenerator {}

unsafe impl NSObjectProtocol for AVSampleBufferGenerator {}

extern_methods!(
    unsafe impl AVSampleBufferGenerator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "AVAsset", feature = "objc2-core-media"))]
        #[method_id(@__retain_semantics Init initWithAsset:timebase:)]
        pub unsafe fn initWithAsset_timebase(
            this: Allocated<Self>,
            asset: &AVAsset,
            timebase: CMTimebaseRef,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated = "Use -createSampleBufferForRequest: error:, passing NULL for the error if not required"]
        #[method(createSampleBufferForRequest:)]
        pub unsafe fn createSampleBufferForRequest(
            &self,
            request: &AVSampleBufferRequest,
        ) -> CMSampleBufferRef;

        #[method_id(@__retain_semantics Other makeBatch)]
        pub unsafe fn makeBatch(&self) -> Retained<AVSampleBufferGeneratorBatch>;

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(notifyOfDataReadyForSampleBuffer:completionHandler:)]
        pub unsafe fn notifyOfDataReadyForSampleBuffer_completionHandler(
            sbuf: CMSampleBufferRef,
            completion_handler: &block2::Block<dyn Fn(Bool, *mut NSError)>,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferrequestdirection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVSampleBufferRequestDirection(pub NSInteger);
impl AVSampleBufferRequestDirection {
    #[doc(alias = "AVSampleBufferRequestDirectionForward")]
    pub const Forward: Self = Self(1);
    #[doc(alias = "AVSampleBufferRequestDirectionNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "AVSampleBufferRequestDirectionReverse")]
    pub const Reverse: Self = Self(-1);
}

unsafe impl Encode for AVSampleBufferRequestDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVSampleBufferRequestDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferrequestmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVSampleBufferRequestMode(pub NSInteger);
impl AVSampleBufferRequestMode {
    #[doc(alias = "AVSampleBufferRequestModeImmediate")]
    pub const Immediate: Self = Self(0);
    #[doc(alias = "AVSampleBufferRequestModeScheduled")]
    pub const Scheduled: Self = Self(1);
    #[doc(alias = "AVSampleBufferRequestModeOpportunistic")]
    pub const Opportunistic: Self = Self(2);
}

unsafe impl Encode for AVSampleBufferRequestMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVSampleBufferRequestMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebufferrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleBufferRequest;
);

unsafe impl NSObjectProtocol for AVSampleBufferRequest {}

extern_methods!(
    unsafe impl AVSampleBufferRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVSampleCursor")]
        #[method_id(@__retain_semantics Init initWithStartCursor:)]
        pub unsafe fn initWithStartCursor(
            this: Allocated<Self>,
            start_cursor: &AVSampleCursor,
        ) -> Retained<Self>;

        #[cfg(feature = "AVSampleCursor")]
        #[method_id(@__retain_semantics Other startCursor)]
        pub unsafe fn startCursor(&self) -> Retained<AVSampleCursor>;

        #[method(direction)]
        pub unsafe fn direction(&self) -> AVSampleBufferRequestDirection;

        #[method(setDirection:)]
        pub unsafe fn setDirection(&self, direction: AVSampleBufferRequestDirection);

        #[cfg(feature = "AVSampleCursor")]
        #[method_id(@__retain_semantics Other limitCursor)]
        pub unsafe fn limitCursor(&self) -> Option<Retained<AVSampleCursor>>;

        #[cfg(feature = "AVSampleCursor")]
        #[method(setLimitCursor:)]
        pub unsafe fn setLimitCursor(&self, limit_cursor: Option<&AVSampleCursor>);

        #[method(preferredMinSampleCount)]
        pub unsafe fn preferredMinSampleCount(&self) -> NSInteger;

        #[method(setPreferredMinSampleCount:)]
        pub unsafe fn setPreferredMinSampleCount(&self, preferred_min_sample_count: NSInteger);

        #[method(maxSampleCount)]
        pub unsafe fn maxSampleCount(&self) -> NSInteger;

        #[method(setMaxSampleCount:)]
        pub unsafe fn setMaxSampleCount(&self, max_sample_count: NSInteger);

        #[method(mode)]
        pub unsafe fn mode(&self) -> AVSampleBufferRequestMode;

        #[method(setMode:)]
        pub unsafe fn setMode(&self, mode: AVSampleBufferRequestMode);

        #[cfg(feature = "objc2-core-media")]
        #[method(overrideTime)]
        pub unsafe fn overrideTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(setOverrideTime:)]
        pub unsafe fn setOverrideTime(&self, override_time: CMTime);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avsamplebuffergeneratorbatch?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVSampleBufferGeneratorBatch;
);

unsafe impl Send for AVSampleBufferGeneratorBatch {}

unsafe impl Sync for AVSampleBufferGeneratorBatch {}

unsafe impl NSObjectProtocol for AVSampleBufferGeneratorBatch {}

extern_methods!(
    unsafe impl AVSampleBufferGeneratorBatch {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method(makeDataReadyWithCompletionHandler:)]
        pub unsafe fn makeDataReadyWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[method(cancel)]
        pub unsafe fn cancel(&self);
    }
);
