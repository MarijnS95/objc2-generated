//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideopreviewlayer?language=objc)
    #[unsafe(super(CALayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    pub struct AVCaptureVideoPreviewLayer;
);

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl CAMediaTiming for AVCaptureVideoPreviewLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSCoding for AVCaptureVideoPreviewLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSObjectProtocol for AVCaptureVideoPreviewLayer {}

#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
unsafe impl NSSecureCoding for AVCaptureVideoPreviewLayer {}

extern_methods!(
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVCaptureVideoPreviewLayer {
        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other layerWithSession:)]
        pub unsafe fn layerWithSession(session: &AVCaptureSession) -> Retained<Self>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Init initWithSession:)]
        pub unsafe fn initWithSession(
            this: Allocated<Self>,
            session: &AVCaptureSession,
        ) -> Retained<Self>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other layerWithSessionWithNoConnection:)]
        pub unsafe fn layerWithSessionWithNoConnection(
            session: &AVCaptureSession,
        ) -> Retained<Self>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Init initWithSessionWithNoConnection:)]
        pub unsafe fn initWithSessionWithNoConnection(
            this: Allocated<Self>,
            session: &AVCaptureSession,
        ) -> Retained<Self>;

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other session)]
        pub unsafe fn session(&self) -> Option<Retained<AVCaptureSession>>;

        #[cfg(feature = "AVCaptureSession")]
        #[method(setSession:)]
        pub unsafe fn setSession(&self, session: Option<&AVCaptureSession>);

        #[cfg(feature = "AVCaptureSession")]
        #[method(setSessionWithNoConnection:)]
        pub unsafe fn setSessionWithNoConnection(&self, session: &AVCaptureSession);

        #[cfg(feature = "AVCaptureSession")]
        #[method_id(@__retain_semantics Other connection)]
        pub unsafe fn connection(&self) -> Option<Retained<AVCaptureConnection>>;

        #[cfg(feature = "AVAnimation")]
        #[method_id(@__retain_semantics Other videoGravity)]
        pub unsafe fn videoGravity(&self) -> Retained<AVLayerVideoGravity>;

        #[cfg(feature = "AVAnimation")]
        #[method(setVideoGravity:)]
        pub unsafe fn setVideoGravity(&self, video_gravity: &AVLayerVideoGravity);

        #[method(isPreviewing)]
        pub unsafe fn isPreviewing(&self) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(captureDevicePointOfInterestForPoint:)]
        pub unsafe fn captureDevicePointOfInterestForPoint(
            &self,
            point_in_layer: CGPoint,
        ) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(pointForCaptureDevicePointOfInterest:)]
        pub unsafe fn pointForCaptureDevicePointOfInterest(
            &self,
            capture_device_point_of_interest: CGPoint,
        ) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(metadataOutputRectOfInterestForRect:)]
        pub unsafe fn metadataOutputRectOfInterestForRect(
            &self,
            rect_in_layer_coordinates: CGRect,
        ) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(rectForMetadataOutputRectOfInterest:)]
        pub unsafe fn rectForMetadataOutputRectOfInterest(
            &self,
            rect_in_metadata_output_coordinates: CGRect,
        ) -> CGRect;

        #[cfg(feature = "AVMetadataObject")]
        #[method_id(@__retain_semantics Other transformedMetadataObjectForMetadataObject:)]
        pub unsafe fn transformedMetadataObjectForMetadataObject(
            &self,
            metadata_object: &AVMetadataObject,
        ) -> Option<Retained<AVMetadataObject>>;

        #[deprecated = "Use AVCaptureConnection's isVideoOrientationSupported instead."]
        #[method(isOrientationSupported)]
        pub unsafe fn isOrientationSupported(&self) -> bool;

        #[cfg(feature = "AVCaptureSession")]
        #[deprecated = "Use AVCaptureConnection's videoOrientation instead."]
        #[method(orientation)]
        pub unsafe fn orientation(&self) -> AVCaptureVideoOrientation;

        #[cfg(feature = "AVCaptureSession")]
        #[deprecated = "Use AVCaptureConnection's videoOrientation instead."]
        #[method(setOrientation:)]
        pub unsafe fn setOrientation(&self, orientation: AVCaptureVideoOrientation);

        #[deprecated = "Use AVCaptureConnection's isVideoMirroringSupported instead."]
        #[method(isMirroringSupported)]
        pub unsafe fn isMirroringSupported(&self) -> bool;

        #[deprecated = "Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead."]
        #[method(automaticallyAdjustsMirroring)]
        pub unsafe fn automaticallyAdjustsMirroring(&self) -> bool;

        #[deprecated = "Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead."]
        #[method(setAutomaticallyAdjustsMirroring:)]
        pub unsafe fn setAutomaticallyAdjustsMirroring(
            &self,
            automatically_adjusts_mirroring: bool,
        );

        #[deprecated = "Use AVCaptureConnection's videoMirrored instead."]
        #[method(isMirrored)]
        pub unsafe fn isMirrored(&self) -> bool;

        #[deprecated = "Use AVCaptureConnection's videoMirrored instead."]
        #[method(setMirrored:)]
        pub unsafe fn setMirrored(&self, mirrored: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVCaptureVideoPreviewLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(this: Allocated<Self>, layer: &AnyObject) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-quartz-core")]
    #[cfg(not(target_os = "watchos"))]
    unsafe impl AVCaptureVideoPreviewLayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
