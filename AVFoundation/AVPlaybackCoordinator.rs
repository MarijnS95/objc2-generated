//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreason?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type AVCoordinatedPlaybackSuspensionReason = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasonaudiosessioninterrupted?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonAudioSessionInterrupted:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasonstallrecovery?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonStallRecovery:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasonplayinginterstitial?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonPlayingInterstitial:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasoncoordinatedplaybacknotpossible?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonCoordinatedPlaybackNotPossible:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasonuseractionrequired?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonUserActionRequired:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspensionreasonuserischangingcurrenttime?language=objc)
    pub static AVCoordinatedPlaybackSuspensionReasonUserIsChangingCurrentTime:
        &'static AVCoordinatedPlaybackSuspensionReason;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybacksuspension?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCoordinatedPlaybackSuspension;
);

unsafe impl NSObjectProtocol for AVCoordinatedPlaybackSuspension {}

extern_methods!(
    unsafe impl AVCoordinatedPlaybackSuspension {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other reason)]
        pub unsafe fn reason(&self) -> Retained<AVCoordinatedPlaybackSuspensionReason>;

        #[method_id(@__retain_semantics Other beginDate)]
        pub unsafe fn beginDate(&self) -> Retained<NSDate>;

        #[method(end)]
        pub unsafe fn end(&self);

        #[cfg(feature = "objc2-core-media")]
        #[method(endProposingNewTime:)]
        pub unsafe fn endProposingNewTime(&self, time: CMTime);
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplaybackcoordinatorotherparticipantsdidchangenotification?language=objc)
    pub static AVPlaybackCoordinatorOtherParticipantsDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplaybackcoordinatorsuspensionreasonsdidchangenotification?language=objc)
    pub static AVPlaybackCoordinatorSuspensionReasonsDidChangeNotification:
        &'static NSNotificationName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplaybackcoordinator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlaybackCoordinator;
);

unsafe impl NSObjectProtocol for AVPlaybackCoordinator {}

extern_methods!(
    unsafe impl AVPlaybackCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other otherParticipants)]
        pub unsafe fn otherParticipants(
            &self,
        ) -> Retained<NSArray<AVCoordinatedPlaybackParticipant>>;

        #[method_id(@__retain_semantics Other suspensionReasons)]
        pub unsafe fn suspensionReasons(
            &self,
        ) -> Retained<NSArray<AVCoordinatedPlaybackSuspensionReason>>;

        #[method_id(@__retain_semantics Other beginSuspensionForReason:)]
        pub unsafe fn beginSuspensionForReason(
            &self,
            suspension_reason: &AVCoordinatedPlaybackSuspensionReason,
        ) -> Retained<AVCoordinatedPlaybackSuspension>;

        #[cfg(feature = "objc2-core-media")]
        #[method(expectedItemTimeAtHostTime:)]
        pub unsafe fn expectedItemTimeAtHostTime(&self, host_clock_time: CMTime) -> CMTime;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcoordinatedplaybackparticipant?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCoordinatedPlaybackParticipant;
);

unsafe impl Send for AVCoordinatedPlaybackParticipant {}

unsafe impl Sync for AVCoordinatedPlaybackParticipant {}

unsafe impl NSObjectProtocol for AVCoordinatedPlaybackParticipant {}

extern_methods!(
    unsafe impl AVCoordinatedPlaybackParticipant {
        #[method_id(@__retain_semantics Other suspensionReasons)]
        pub unsafe fn suspensionReasons(
            &self,
        ) -> Retained<NSArray<AVCoordinatedPlaybackSuspensionReason>>;

        #[method(isReadyToPlay)]
        pub unsafe fn isReadyToPlay(&self) -> bool;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSUUID>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVCoordinatedPlaybackParticipant {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVCoordinatedPlaybackPolicies
    unsafe impl AVPlaybackCoordinator {
        #[method(setParticipantLimit:forWaitingOutSuspensionsWithReason:)]
        pub unsafe fn setParticipantLimit_forWaitingOutSuspensionsWithReason(
            &self,
            participant_limit: NSInteger,
            reason: &AVCoordinatedPlaybackSuspensionReason,
        );

        #[method(participantLimitForWaitingOutSuspensionsWithReason:)]
        pub unsafe fn participantLimitForWaitingOutSuspensionsWithReason(
            &self,
            reason: &AVCoordinatedPlaybackSuspensionReason,
        ) -> NSInteger;

        #[method_id(@__retain_semantics Other suspensionReasonsThatTriggerWaiting)]
        pub unsafe fn suspensionReasonsThatTriggerWaiting(
            &self,
        ) -> Retained<NSArray<AVCoordinatedPlaybackSuspensionReason>>;

        #[method(setSuspensionReasonsThatTriggerWaiting:)]
        pub unsafe fn setSuspensionReasonsThatTriggerWaiting(
            &self,
            suspension_reasons_that_trigger_waiting: &NSArray<
                AVCoordinatedPlaybackSuspensionReason,
            >,
        );

        #[method(pauseSnapsToMediaTimeOfOriginator)]
        pub unsafe fn pauseSnapsToMediaTimeOfOriginator(&self) -> bool;

        #[method(setPauseSnapsToMediaTimeOfOriginator:)]
        pub unsafe fn setPauseSnapsToMediaTimeOfOriginator(
            &self,
            pause_snaps_to_media_time_of_originator: bool,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerplaybackcoordinator?language=objc)
    #[unsafe(super(AVPlaybackCoordinator, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerPlaybackCoordinator;
);

unsafe impl NSObjectProtocol for AVPlayerPlaybackCoordinator {}

extern_methods!(
    unsafe impl AVPlayerPlaybackCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other player)]
        pub unsafe fn player(&self, mtm: MainThreadMarker) -> Option<Retained<AVPlayer>>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlayerPlaybackCoordinatorDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AVPlayerPlaybackCoordinatorDelegate>>,
        );
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerplaybackcoordinatordelegate?language=objc)
    pub unsafe trait AVPlayerPlaybackCoordinatorDelegate: NSObjectProtocol {
        #[cfg(feature = "AVPlayerItem")]
        #[optional]
        #[method_id(@__retain_semantics Other playbackCoordinator:identifierForPlayerItem:)]
        unsafe fn playbackCoordinator_identifierForPlayerItem(
            &self,
            coordinator: &AVPlayerPlaybackCoordinator,
            player_item: &AVPlayerItem,
        ) -> Retained<NSString>;

        #[cfg(feature = "AVPlayerItem")]
        #[optional]
        #[method_id(@__retain_semantics Other playbackCoordinator:interstitialTimeRangesForPlayerItem:)]
        unsafe fn playbackCoordinator_interstitialTimeRangesForPlayerItem(
            &self,
            coordinator: &AVPlayerPlaybackCoordinator,
            player_item: &AVPlayerItem,
        ) -> Retained<NSArray<NSValue>>;
    }

    unsafe impl ProtocolType for dyn AVPlayerPlaybackCoordinatorDelegate {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorratechangeoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVDelegatingPlaybackCoordinatorRateChangeOptions(pub NSUInteger);
bitflags::bitflags! {
    impl AVDelegatingPlaybackCoordinatorRateChangeOptions: NSUInteger {
        const AVDelegatingPlaybackCoordinatorRateChangeOptionPlayImmediately = 1<<0;
    }
}

unsafe impl Encode for AVDelegatingPlaybackCoordinatorRateChangeOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVDelegatingPlaybackCoordinatorRateChangeOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorseekoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVDelegatingPlaybackCoordinatorSeekOptions(pub NSUInteger);
bitflags::bitflags! {
    impl AVDelegatingPlaybackCoordinatorSeekOptions: NSUInteger {
        const AVDelegatingPlaybackCoordinatorSeekOptionResumeImmediately = 1<<0;
    }
}

unsafe impl Encode for AVDelegatingPlaybackCoordinatorSeekOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVDelegatingPlaybackCoordinatorSeekOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinator?language=objc)
    #[unsafe(super(AVPlaybackCoordinator, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinator;
);

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinator {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinator {
        #[method_id(@__retain_semantics Init initWithPlaybackControlDelegate:)]
        pub unsafe fn initWithPlaybackControlDelegate(
            this: Allocated<Self>,
            playback_control_delegate: &ProtocolObject<
                dyn AVPlaybackCoordinatorPlaybackControlDelegate,
            >,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other playbackControlDelegate)]
        pub unsafe fn playbackControlDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVPlaybackCoordinatorPlaybackControlDelegate>>>;

        #[method(coordinateRateChangeToRate:options:)]
        pub unsafe fn coordinateRateChangeToRate_options(
            &self,
            rate: c_float,
            options: AVDelegatingPlaybackCoordinatorRateChangeOptions,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(coordinateSeekToTime:options:)]
        pub unsafe fn coordinateSeekToTime_options(
            &self,
            time: CMTime,
            options: AVDelegatingPlaybackCoordinatorSeekOptions,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(transitionToItemWithIdentifier:proposingInitialTimingBasedOnTimebase:)]
        pub unsafe fn transitionToItemWithIdentifier_proposingInitialTimingBasedOnTimebase(
            &self,
            item_identifier: Option<&NSString>,
            snapshot_timebase: CMTimebaseRef,
        );

        #[method_id(@__retain_semantics Other currentItemIdentifier)]
        pub unsafe fn currentItemIdentifier(&self) -> Option<Retained<NSString>>;

        #[method(reapplyCurrentItemStateToPlaybackControlDelegate)]
        pub unsafe fn reapplyCurrentItemStateToPlaybackControlDelegate(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `AVPlaybackCoordinator`
    unsafe impl AVDelegatingPlaybackCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplaybackcoordinatorplaybackcontroldelegate?language=objc)
    pub unsafe trait AVPlaybackCoordinatorPlaybackControlDelegate: NSObjectProtocol {
        #[cfg(feature = "block2")]
        #[method(playbackCoordinator:didIssuePlayCommand:completionHandler:)]
        unsafe fn playbackCoordinator_didIssuePlayCommand_completionHandler(
            &self,
            coordinator: &AVDelegatingPlaybackCoordinator,
            play_command: &AVDelegatingPlaybackCoordinatorPlayCommand,
            completion_handler: &block2::Block<dyn Fn()>,
        );

        #[cfg(feature = "block2")]
        #[method(playbackCoordinator:didIssuePauseCommand:completionHandler:)]
        unsafe fn playbackCoordinator_didIssuePauseCommand_completionHandler(
            &self,
            coordinator: &AVDelegatingPlaybackCoordinator,
            pause_command: &AVDelegatingPlaybackCoordinatorPauseCommand,
            completion_handler: &block2::Block<dyn Fn()>,
        );

        #[cfg(feature = "block2")]
        #[method(playbackCoordinator:didIssueSeekCommand:completionHandler:)]
        unsafe fn playbackCoordinator_didIssueSeekCommand_completionHandler(
            &self,
            coordinator: &AVDelegatingPlaybackCoordinator,
            seek_command: &AVDelegatingPlaybackCoordinatorSeekCommand,
            completion_handler: &block2::Block<dyn Fn()>,
        );

        #[cfg(feature = "block2")]
        #[method(playbackCoordinator:didIssueBufferingCommand:completionHandler:)]
        unsafe fn playbackCoordinator_didIssueBufferingCommand_completionHandler(
            &self,
            coordinator: &AVDelegatingPlaybackCoordinator,
            buffering_command: &AVDelegatingPlaybackCoordinatorBufferingCommand,
            completion_handler: &block2::Block<dyn Fn()>,
        );
    }

    unsafe impl ProtocolType for dyn AVPlaybackCoordinatorPlaybackControlDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorplaybackcontrolcommand?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinatorPlaybackControlCommand;
);

unsafe impl Send for AVDelegatingPlaybackCoordinatorPlaybackControlCommand {}

unsafe impl Sync for AVDelegatingPlaybackCoordinatorPlaybackControlCommand {}

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinatorPlaybackControlCommand {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinatorPlaybackControlCommand {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other originator)]
        pub unsafe fn originator(&self) -> Option<Retained<AVCoordinatedPlaybackParticipant>>;

        #[method_id(@__retain_semantics Other expectedCurrentItemIdentifier)]
        pub unsafe fn expectedCurrentItemIdentifier(&self) -> Retained<NSString>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorplaycommand?language=objc)
    #[unsafe(super(AVDelegatingPlaybackCoordinatorPlaybackControlCommand, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinatorPlayCommand;
);

unsafe impl Send for AVDelegatingPlaybackCoordinatorPlayCommand {}

unsafe impl Sync for AVDelegatingPlaybackCoordinatorPlayCommand {}

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinatorPlayCommand {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinatorPlayCommand {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[cfg(feature = "objc2-core-media")]
        #[method(itemTime)]
        pub unsafe fn itemTime(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(hostClockTime)]
        pub unsafe fn hostClockTime(&self) -> CMTime;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorbufferingcommand?language=objc)
    #[unsafe(super(AVDelegatingPlaybackCoordinatorPlaybackControlCommand, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinatorBufferingCommand;
);

unsafe impl Send for AVDelegatingPlaybackCoordinatorBufferingCommand {}

unsafe impl Sync for AVDelegatingPlaybackCoordinatorBufferingCommand {}

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinatorBufferingCommand {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinatorBufferingCommand {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(anticipatedPlaybackRate)]
        pub unsafe fn anticipatedPlaybackRate(&self) -> c_float;

        #[method_id(@__retain_semantics Other completionDueDate)]
        pub unsafe fn completionDueDate(&self) -> Option<Retained<NSDate>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorpausecommand?language=objc)
    #[unsafe(super(AVDelegatingPlaybackCoordinatorPlaybackControlCommand, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinatorPauseCommand;
);

unsafe impl Send for AVDelegatingPlaybackCoordinatorPauseCommand {}

unsafe impl Sync for AVDelegatingPlaybackCoordinatorPauseCommand {}

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinatorPauseCommand {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinatorPauseCommand {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(shouldBufferInAnticipationOfPlayback)]
        pub unsafe fn shouldBufferInAnticipationOfPlayback(&self) -> bool;

        #[method(anticipatedPlaybackRate)]
        pub unsafe fn anticipatedPlaybackRate(&self) -> c_float;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avdelegatingplaybackcoordinatorseekcommand?language=objc)
    #[unsafe(super(AVDelegatingPlaybackCoordinatorPlaybackControlCommand, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVDelegatingPlaybackCoordinatorSeekCommand;
);

unsafe impl Send for AVDelegatingPlaybackCoordinatorSeekCommand {}

unsafe impl Sync for AVDelegatingPlaybackCoordinatorSeekCommand {}

unsafe impl NSObjectProtocol for AVDelegatingPlaybackCoordinatorSeekCommand {}

extern_methods!(
    unsafe impl AVDelegatingPlaybackCoordinatorSeekCommand {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(itemTime)]
        pub unsafe fn itemTime(&self) -> CMTime;

        #[method(shouldBufferInAnticipationOfPlayback)]
        pub unsafe fn shouldBufferInAnticipationOfPlayback(&self) -> bool;

        #[method(anticipatedPlaybackRate)]
        pub unsafe fn anticipatedPlaybackRate(&self) -> c_float;

        #[method_id(@__retain_semantics Other completionDueDate)]
        pub unsafe fn completionDueDate(&self) -> Option<Retained<NSDate>>;
    }
);
