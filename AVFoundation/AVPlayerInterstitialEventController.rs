//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventrestrictions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerInterstitialEventRestrictions(pub NSUInteger);
bitflags::bitflags! {
    impl AVPlayerInterstitialEventRestrictions: NSUInteger {
        const AVPlayerInterstitialEventRestrictionNone = 0;
        const AVPlayerInterstitialEventRestrictionConstrainsSeekingForwardInPrimaryContent = 1<<0;
        const AVPlayerInterstitialEventRestrictionRequiresPlaybackAtPreferredRateForAdvancement = 1<<2;
        const AVPlayerInterstitialEventRestrictionDefaultPolicy = AVPlayerInterstitialEventRestrictions::AVPlayerInterstitialEventRestrictionNone.0;
    }
}

unsafe impl Encode for AVPlayerInterstitialEventRestrictions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerInterstitialEventRestrictions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventcue?language=objc)
// NS_TYPED_ENUM
pub type AVPlayerInterstitialEventCue = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventnocue?language=objc)
    pub static AVPlayerInterstitialEventNoCue: &'static AVPlayerInterstitialEventCue;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventjoincue?language=objc)
    pub static AVPlayerInterstitialEventJoinCue: &'static AVPlayerInterstitialEventCue;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventleavecue?language=objc)
    pub static AVPlayerInterstitialEventLeaveCue: &'static AVPlayerInterstitialEventCue;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventtimelineoccupancy?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerInterstitialEventTimelineOccupancy(pub NSInteger);
impl AVPlayerInterstitialEventTimelineOccupancy {
    #[doc(alias = "AVPlayerInterstitialEventTimelineOccupancySinglePoint")]
    pub const SinglePoint: Self = Self(0);
    #[doc(alias = "AVPlayerInterstitialEventTimelineOccupancyFill")]
    pub const Fill: Self = Self(1);
}

unsafe impl Encode for AVPlayerInterstitialEventTimelineOccupancy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerInterstitialEventTimelineOccupancy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventassetlistresponsestatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerInterstitialEventAssetListResponseStatus(pub NSInteger);
impl AVPlayerInterstitialEventAssetListResponseStatus {
    #[doc(alias = "AVPlayerInterstitialEventAssetListResponseStatusAvailable")]
    pub const Available: Self = Self(0);
    #[doc(alias = "AVPlayerInterstitialEventAssetListResponseStatusCleared")]
    pub const Cleared: Self = Self(1);
    #[doc(alias = "AVPlayerInterstitialEventAssetListResponseStatusUnavailable")]
    pub const Unavailable: Self = Self(2);
}

unsafe impl Encode for AVPlayerInterstitialEventAssetListResponseStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerInterstitialEventAssetListResponseStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerInterstitialEvent;
);

unsafe impl NSCopying for AVPlayerInterstitialEvent {}

unsafe impl CopyingHelper for AVPlayerInterstitialEvent {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVPlayerInterstitialEvent {}

extern_methods!(
    unsafe impl AVPlayerInterstitialEvent {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "AVPlayerItem", feature = "objc2-core-media"))]
        #[deprecated = "Use interstitialEventWithPrimaryItem:time: instead"]
        #[method_id(@__retain_semantics Other interstitialEventWithPrimaryItem:identifier:time:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:)]
        pub unsafe fn interstitialEventWithPrimaryItem_identifier_time_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes(
            primary_item: &AVPlayerItem,
            identifier: Option<&NSString>,
            time: CMTime,
            template_items: &NSArray<AVPlayerItem>,
            restrictions: AVPlayerInterstitialEventRestrictions,
            resumption_offset: CMTime,
            playout_limit: CMTime,
            user_defined_attributes: Option<&NSDictionary>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "AVPlayerItem", feature = "objc2-core-media"))]
        #[deprecated = "Use interstitialEventWithPrimaryItem:date: instead"]
        #[method_id(@__retain_semantics Other interstitialEventWithPrimaryItem:identifier:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:)]
        pub unsafe fn interstitialEventWithPrimaryItem_identifier_date_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes(
            primary_item: &AVPlayerItem,
            identifier: Option<&NSString>,
            date: &NSDate,
            template_items: &NSArray<AVPlayerItem>,
            restrictions: AVPlayerInterstitialEventRestrictions,
            resumption_offset: CMTime,
            playout_limit: CMTime,
            user_defined_attributes: Option<&NSDictionary>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "AVPlayerItem", feature = "objc2-core-media"))]
        #[method_id(@__retain_semantics Other interstitialEventWithPrimaryItem:time:)]
        pub unsafe fn interstitialEventWithPrimaryItem_time(
            primary_item: &AVPlayerItem,
            time: CMTime,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other interstitialEventWithPrimaryItem:date:)]
        pub unsafe fn interstitialEventWithPrimaryItem_date(
            primary_item: &AVPlayerItem,
            date: &NSDate,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other primaryItem)]
        pub unsafe fn primaryItem(&self, mtm: MainThreadMarker) -> Option<Retained<AVPlayerItem>>;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        #[cfg(feature = "objc2-core-media")]
        #[method(time)]
        pub unsafe fn time(&self) -> CMTime;

        #[method_id(@__retain_semantics Other date)]
        pub unsafe fn date(&self) -> Option<Retained<NSDate>>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other templateItems)]
        pub unsafe fn templateItems(
            &self,
            mtm: MainThreadMarker,
        ) -> Retained<NSArray<AVPlayerItem>>;

        #[method(restrictions)]
        pub unsafe fn restrictions(&self) -> AVPlayerInterstitialEventRestrictions;

        #[cfg(feature = "objc2-core-media")]
        #[method(resumptionOffset)]
        pub unsafe fn resumptionOffset(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        #[method(playoutLimit)]
        pub unsafe fn playoutLimit(&self) -> CMTime;

        #[method(alignsStartWithPrimarySegmentBoundary)]
        pub unsafe fn alignsStartWithPrimarySegmentBoundary(&self) -> bool;

        #[method(alignsResumptionWithPrimarySegmentBoundary)]
        pub unsafe fn alignsResumptionWithPrimarySegmentBoundary(&self) -> bool;

        #[method_id(@__retain_semantics Other cue)]
        pub unsafe fn cue(&self) -> Retained<AVPlayerInterstitialEventCue>;

        #[method(willPlayOnce)]
        pub unsafe fn willPlayOnce(&self) -> bool;

        #[method_id(@__retain_semantics Other userDefinedAttributes)]
        pub unsafe fn userDefinedAttributes(&self) -> Retained<NSDictionary>;

        #[method_id(@__retain_semantics Other assetListResponse)]
        pub unsafe fn assetListResponse(&self) -> Option<Retained<NSDictionary>>;

        #[method(timelineOccupancy)]
        pub unsafe fn timelineOccupancy(&self) -> AVPlayerInterstitialEventTimelineOccupancy;

        #[method(supplementsPrimaryContent)]
        pub unsafe fn supplementsPrimaryContent(&self) -> bool;

        #[method(contentMayVary)]
        pub unsafe fn contentMayVary(&self) -> bool;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerInterstitialEventMonitor;
);

unsafe impl Send for AVPlayerInterstitialEventMonitor {}

unsafe impl Sync for AVPlayerInterstitialEventMonitor {}

unsafe impl NSObjectProtocol for AVPlayerInterstitialEventMonitor {}

extern_methods!(
    unsafe impl AVPlayerInterstitialEventMonitor {
        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other interstitialEventMonitorWithPrimaryPlayer:)]
        pub unsafe fn interstitialEventMonitorWithPrimaryPlayer(
            primary_player: &AVPlayer,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Init initWithPrimaryPlayer:)]
        pub unsafe fn initWithPrimaryPlayer(
            this: Allocated<Self>,
            primary_player: &AVPlayer,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other primaryPlayer)]
        pub unsafe fn primaryPlayer(&self, mtm: MainThreadMarker) -> Option<Retained<AVPlayer>>;

        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other interstitialPlayer)]
        pub unsafe fn interstitialPlayer(&self, mtm: MainThreadMarker) -> Retained<AVQueuePlayer>;

        #[method_id(@__retain_semantics Other events)]
        pub unsafe fn events(&self) -> Retained<NSArray<AVPlayerInterstitialEvent>>;

        #[method_id(@__retain_semantics Other currentEvent)]
        pub unsafe fn currentEvent(&self) -> Option<Retained<AVPlayerInterstitialEvent>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerInterstitialEventMonitor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitoreventsdidchangenotification?language=objc)
    pub static AVPlayerInterstitialEventMonitorEventsDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitorcurrenteventdidchangenotification?language=objc)
    pub static AVPlayerInterstitialEventMonitorCurrentEventDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitorassetlistresponsestatusdidchangenotification?language=objc)
    pub static AVPlayerInterstitialEventMonitorAssetListResponseStatusDidChangeNotification:
        &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitorassetlistresponsestatusdidchangeeventkey?language=objc)
    pub static AVPlayerInterstitialEventMonitorAssetListResponseStatusDidChangeEventKey:
        &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitorassetlistresponsestatusdidchangestatuskey?language=objc)
    pub static AVPlayerInterstitialEventMonitorAssetListResponseStatusDidChangeStatusKey:
        &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventmonitorassetlistresponsestatusdidchangeerrorkey?language=objc)
    pub static AVPlayerInterstitialEventMonitorAssetListResponseStatusDidChangeErrorKey:
        &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerinterstitialeventcontroller?language=objc)
    #[unsafe(super(AVPlayerInterstitialEventMonitor, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerInterstitialEventController;
);

unsafe impl NSObjectProtocol for AVPlayerInterstitialEventController {}

extern_methods!(
    unsafe impl AVPlayerInterstitialEventController {
        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other interstitialEventControllerWithPrimaryPlayer:)]
        pub unsafe fn interstitialEventControllerWithPrimaryPlayer(
            primary_player: &AVPlayer,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Init initWithPrimaryPlayer:)]
        pub unsafe fn initWithPrimaryPlayer(
            this: Allocated<Self>,
            primary_player: &AVPlayer,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other events)]
        pub unsafe fn events(&self) -> Retained<NSArray<AVPlayerInterstitialEvent>>;

        #[method(setEvents:)]
        pub unsafe fn setEvents(&self, events: Option<&NSArray<AVPlayerInterstitialEvent>>);

        #[cfg(feature = "objc2-core-media")]
        #[method(cancelCurrentEventWithResumptionOffset:)]
        pub unsafe fn cancelCurrentEventWithResumptionOffset(&self, resumption_offset: CMTime);
    }
);

extern_methods!(
    /// Methods declared on superclass `AVPlayerInterstitialEventMonitor`
    unsafe impl AVPlayerInterstitialEventController {
        #[cfg(feature = "AVPlayer")]
        #[method_id(@__retain_semantics Other interstitialEventMonitorWithPrimaryPlayer:)]
        pub unsafe fn interstitialEventMonitorWithPrimaryPlayer(
            primary_player: &AVPlayer,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayerInterstitialEventController {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingduringinterstitialeventreason?language=objc)
    #[cfg(feature = "AVPlayer")]
    pub static AVPlayerWaitingDuringInterstitialEventReason: &'static AVPlayerWaitingReason;
}

extern_methods!(
    /// AVPlayerInterstitialSupport
    #[cfg(feature = "AVPlayer")]
    unsafe impl AVPlayer {}
);

extern_methods!(
    /// AVPlayerInterstitialSupport
    #[cfg(feature = "AVPlayerItem")]
    unsafe impl AVPlayerItem {
        #[method(automaticallyHandlesInterstitialEvents)]
        pub unsafe fn automaticallyHandlesInterstitialEvents(&self) -> bool;

        #[method(setAutomaticallyHandlesInterstitialEvents:)]
        pub unsafe fn setAutomaticallyHandlesInterstitialEvents(
            &self,
            automatically_handles_interstitial_events: bool,
        );

        #[method_id(@__retain_semantics Other templatePlayerItem)]
        pub unsafe fn templatePlayerItem(&self) -> Option<Retained<AVPlayerItem>>;
    }
);
