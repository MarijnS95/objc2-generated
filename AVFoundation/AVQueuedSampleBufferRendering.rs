//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avqueuedsamplebufferrenderingstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVQueuedSampleBufferRenderingStatus(pub NSInteger);
impl AVQueuedSampleBufferRenderingStatus {
    #[doc(alias = "AVQueuedSampleBufferRenderingStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "AVQueuedSampleBufferRenderingStatusRendering")]
    pub const Rendering: Self = Self(1);
    #[doc(alias = "AVQueuedSampleBufferRenderingStatusFailed")]
    pub const Failed: Self = Self(2);
}

unsafe impl Encode for AVQueuedSampleBufferRenderingStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVQueuedSampleBufferRenderingStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avqueuedsamplebufferrendering?language=objc)
    pub unsafe trait AVQueuedSampleBufferRendering: NSObjectProtocol {
        #[cfg(feature = "objc2-core-media")]
        #[method(timebase)]
        unsafe fn timebase(&self) -> CMTimebaseRef;

        #[cfg(feature = "objc2-core-media")]
        #[method(enqueueSampleBuffer:)]
        unsafe fn enqueueSampleBuffer(&self, sample_buffer: CMSampleBufferRef);

        #[method(flush)]
        unsafe fn flush(&self);

        #[method(isReadyForMoreMediaData)]
        unsafe fn isReadyForMoreMediaData(&self) -> bool;

        #[method(stopRequestingMediaData)]
        unsafe fn stopRequestingMediaData(&self);

        #[method(hasSufficientMediaDataForReliablePlaybackStart)]
        unsafe fn hasSufficientMediaDataForReliablePlaybackStart(&self) -> bool;
    }

    unsafe impl ProtocolType for dyn AVQueuedSampleBufferRendering {}
);
