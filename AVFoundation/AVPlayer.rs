//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerStatus(pub NSInteger);
impl AVPlayerStatus {
    #[doc(alias = "AVPlayerStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "AVPlayerStatusReadyToPlay")]
    pub const ReadyToPlay: Self = Self(1);
    #[doc(alias = "AVPlayerStatusFailed")]
    pub const Failed: Self = Self(2);
}

unsafe impl Encode for AVPlayerStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayer?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayer;
);

unsafe impl NSObjectProtocol for AVPlayer {}

extern_methods!(
    unsafe impl AVPlayer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Other playerWithURL:)]
        pub unsafe fn playerWithURL(url: &NSURL, mtm: MainThreadMarker) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other playerWithPlayerItem:)]
        pub unsafe fn playerWithPlayerItem(
            item: Option<&AVPlayerItem>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithURL:)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Init initWithPlayerItem:)]
        pub unsafe fn initWithPlayerItem(
            this: Allocated<Self>,
            item: Option<&AVPlayerItem>,
        ) -> Retained<Self>;

        #[method(status)]
        pub unsafe fn status(&self) -> AVPlayerStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVPlayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangenotification?language=objc)
    pub static AVPlayerRateDidChangeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereasonkey?language=objc)
    pub static AVPlayerRateDidChangeReasonKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangeoriginatingparticipantkey?language=objc)
    pub static AVPlayerRateDidChangeOriginatingParticipantKey: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereason?language=objc)
// NS_TYPED_ENUM
pub type AVPlayerRateDidChangeReason = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereasonsetratecalled?language=objc)
    pub static AVPlayerRateDidChangeReasonSetRateCalled: &'static AVPlayerRateDidChangeReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereasonsetratefailed?language=objc)
    pub static AVPlayerRateDidChangeReasonSetRateFailed: &'static AVPlayerRateDidChangeReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereasonaudiosessioninterrupted?language=objc)
    pub static AVPlayerRateDidChangeReasonAudioSessionInterrupted:
        &'static AVPlayerRateDidChangeReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerratedidchangereasonappbackgrounded?language=objc)
    pub static AVPlayerRateDidChangeReasonAppBackgrounded: &'static AVPlayerRateDidChangeReason;
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayertimecontrolstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerTimeControlStatus(pub NSInteger);
impl AVPlayerTimeControlStatus {
    #[doc(alias = "AVPlayerTimeControlStatusPaused")]
    pub const Paused: Self = Self(0);
    #[doc(alias = "AVPlayerTimeControlStatusWaitingToPlayAtSpecifiedRate")]
    pub const WaitingToPlayAtSpecifiedRate: Self = Self(1);
    #[doc(alias = "AVPlayerTimeControlStatusPlaying")]
    pub const Playing: Self = Self(2);
}

unsafe impl Encode for AVPlayerTimeControlStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerTimeControlStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingreason?language=objc)
// NS_TYPED_ENUM
pub type AVPlayerWaitingReason = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingtominimizestallsreason?language=objc)
    pub static AVPlayerWaitingToMinimizeStallsReason: &'static AVPlayerWaitingReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingwhileevaluatingbufferingratereason?language=objc)
    pub static AVPlayerWaitingWhileEvaluatingBufferingRateReason: &'static AVPlayerWaitingReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingwithnoitemtoplayreason?language=objc)
    pub static AVPlayerWaitingWithNoItemToPlayReason: &'static AVPlayerWaitingReason;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerwaitingforcoordinatedplaybackreason?language=objc)
    pub static AVPlayerWaitingForCoordinatedPlaybackReason: &'static AVPlayerWaitingReason;
}

extern_methods!(
    /// AVPlayerPlaybackControl
    unsafe impl AVPlayer {
        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[method(setRate:)]
        pub unsafe fn setRate(&self, rate: c_float);

        #[method(defaultRate)]
        pub unsafe fn defaultRate(&self) -> c_float;

        #[method(setDefaultRate:)]
        pub unsafe fn setDefaultRate(&self, default_rate: c_float);

        #[method(play)]
        pub unsafe fn play(&self);

        #[method(pause)]
        pub unsafe fn pause(&self);

        #[method(timeControlStatus)]
        pub unsafe fn timeControlStatus(&self) -> AVPlayerTimeControlStatus;

        #[method_id(@__retain_semantics Other reasonForWaitingToPlay)]
        pub unsafe fn reasonForWaitingToPlay(&self) -> Option<Retained<AVPlayerWaitingReason>>;

        #[method(playImmediatelyAtRate:)]
        pub unsafe fn playImmediatelyAtRate(&self, rate: c_float);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeractionatitemend?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerActionAtItemEnd(pub NSInteger);
impl AVPlayerActionAtItemEnd {
    #[doc(alias = "AVPlayerActionAtItemEndAdvance")]
    pub const Advance: Self = Self(0);
    #[doc(alias = "AVPlayerActionAtItemEndPause")]
    pub const Pause: Self = Self(1);
    #[doc(alias = "AVPlayerActionAtItemEndNone")]
    pub const None: Self = Self(2);
}

unsafe impl Encode for AVPlayerActionAtItemEnd {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerActionAtItemEnd {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVPlayerItemControl
    unsafe impl AVPlayer {
        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other currentItem)]
        pub unsafe fn currentItem(&self) -> Option<Retained<AVPlayerItem>>;

        #[cfg(feature = "AVPlayerItem")]
        #[method(replaceCurrentItemWithPlayerItem:)]
        pub unsafe fn replaceCurrentItemWithPlayerItem(&self, item: Option<&AVPlayerItem>);

        #[method(actionAtItemEnd)]
        pub unsafe fn actionAtItemEnd(&self) -> AVPlayerActionAtItemEnd;

        #[method(setActionAtItemEnd:)]
        pub unsafe fn setActionAtItemEnd(&self, action_at_item_end: AVPlayerActionAtItemEnd);
    }
);

extern_methods!(
    /// AVPlayerTimeControl
    unsafe impl AVPlayer {
        #[cfg(feature = "objc2-core-media")]
        #[method(currentTime)]
        pub unsafe fn currentTime(&self) -> CMTime;

        #[method(seekToDate:)]
        pub unsafe fn seekToDate(&self, date: &NSDate);

        #[cfg(feature = "block2")]
        #[method(seekToDate:completionHandler:)]
        pub unsafe fn seekToDate_completionHandler(
            &self,
            date: &NSDate,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(seekToTime:)]
        pub unsafe fn seekToTime(&self, time: CMTime);

        #[cfg(feature = "objc2-core-media")]
        #[method(seekToTime:toleranceBefore:toleranceAfter:)]
        pub unsafe fn seekToTime_toleranceBefore_toleranceAfter(
            &self,
            time: CMTime,
            tolerance_before: CMTime,
            tolerance_after: CMTime,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(seekToTime:completionHandler:)]
        pub unsafe fn seekToTime_completionHandler(
            &self,
            time: CMTime,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );

        #[cfg(all(feature = "block2", feature = "objc2-core-media"))]
        #[method(seekToTime:toleranceBefore:toleranceAfter:completionHandler:)]
        pub unsafe fn seekToTime_toleranceBefore_toleranceAfter_completionHandler(
            &self,
            time: CMTime,
            tolerance_before: CMTime,
            tolerance_after: CMTime,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );
    }
);

extern_methods!(
    /// AVPlayerAdvancedRateControl
    unsafe impl AVPlayer {
        #[method(automaticallyWaitsToMinimizeStalling)]
        pub unsafe fn automaticallyWaitsToMinimizeStalling(&self) -> bool;

        #[method(setAutomaticallyWaitsToMinimizeStalling:)]
        pub unsafe fn setAutomaticallyWaitsToMinimizeStalling(
            &self,
            automatically_waits_to_minimize_stalling: bool,
        );

        #[cfg(feature = "objc2-core-media")]
        #[method(setRate:time:atHostTime:)]
        pub unsafe fn setRate_time_atHostTime(
            &self,
            rate: c_float,
            item_time: CMTime,
            host_clock_time: CMTime,
        );

        #[cfg(feature = "block2")]
        #[method(prerollAtRate:completionHandler:)]
        pub unsafe fn prerollAtRate_completionHandler(
            &self,
            rate: c_float,
            completion_handler: Option<&block2::Block<dyn Fn(Bool)>>,
        );

        #[method(cancelPendingPrerolls)]
        pub unsafe fn cancelPendingPrerolls(&self);

        #[cfg(feature = "objc2-core-media")]
        #[method(sourceClock)]
        pub unsafe fn sourceClock(&self) -> CMClockRef;

        #[cfg(feature = "objc2-core-media")]
        #[method(setSourceClock:)]
        pub unsafe fn setSourceClock(&self, source_clock: CMClockRef);
    }
);

extern_methods!(
    /// AVPlayerTimeObservation
    unsafe impl AVPlayer {
        #[method(removeTimeObserver:)]
        pub unsafe fn removeTimeObserver(&self, observer: &AnyObject);
    }
);

extern_methods!(
    /// AVPlayerMediaControl
    unsafe impl AVPlayer {
        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(isMuted)]
        pub unsafe fn isMuted(&self) -> bool;

        #[method(setMuted:)]
        pub unsafe fn setMuted(&self, muted: bool);
    }
);

extern_methods!(
    /// AVPlayerAutomaticMediaSelection
    unsafe impl AVPlayer {
        #[method(appliesMediaSelectionCriteriaAutomatically)]
        pub unsafe fn appliesMediaSelectionCriteriaAutomatically(&self) -> bool;

        #[method(setAppliesMediaSelectionCriteriaAutomatically:)]
        pub unsafe fn setAppliesMediaSelectionCriteriaAutomatically(
            &self,
            applies_media_selection_criteria_automatically: bool,
        );

        #[cfg(all(feature = "AVMediaFormat", feature = "AVPlayerMediaSelectionCriteria"))]
        #[method(setMediaSelectionCriteria:forMediaCharacteristic:)]
        pub unsafe fn setMediaSelectionCriteria_forMediaCharacteristic(
            &self,
            criteria: Option<&AVPlayerMediaSelectionCriteria>,
            media_characteristic: &AVMediaCharacteristic,
        );

        #[cfg(all(feature = "AVMediaFormat", feature = "AVPlayerMediaSelectionCriteria"))]
        #[method_id(@__retain_semantics Other mediaSelectionCriteriaForMediaCharacteristic:)]
        pub unsafe fn mediaSelectionCriteriaForMediaCharacteristic(
            &self,
            media_characteristic: &AVMediaCharacteristic,
        ) -> Option<Retained<AVPlayerMediaSelectionCriteria>>;
    }
);

extern_methods!(
    /// AVPlayerAudioDeviceSupport
    unsafe impl AVPlayer {
        #[method_id(@__retain_semantics Other audioOutputDeviceUniqueID)]
        pub unsafe fn audioOutputDeviceUniqueID(&self) -> Option<Retained<NSString>>;

        #[method(setAudioOutputDeviceUniqueID:)]
        pub unsafe fn setAudioOutputDeviceUniqueID(
            &self,
            audio_output_device_unique_id: Option<&NSString>,
        );
    }
);

extern_methods!(
    /// AVPlayerExternalPlaybackSupport
    unsafe impl AVPlayer {
        #[method(allowsExternalPlayback)]
        pub unsafe fn allowsExternalPlayback(&self) -> bool;

        #[method(setAllowsExternalPlayback:)]
        pub unsafe fn setAllowsExternalPlayback(&self, allows_external_playback: bool);

        #[method(isExternalPlaybackActive)]
        pub unsafe fn isExternalPlaybackActive(&self) -> bool;

        #[method(usesExternalPlaybackWhileExternalScreenIsActive)]
        pub unsafe fn usesExternalPlaybackWhileExternalScreenIsActive(&self) -> bool;

        #[method(setUsesExternalPlaybackWhileExternalScreenIsActive:)]
        pub unsafe fn setUsesExternalPlaybackWhileExternalScreenIsActive(
            &self,
            uses_external_playback_while_external_screen_is_active: bool,
        );

        #[cfg(feature = "AVAnimation")]
        #[method_id(@__retain_semantics Other externalPlaybackVideoGravity)]
        pub unsafe fn externalPlaybackVideoGravity(&self) -> Retained<AVLayerVideoGravity>;

        #[cfg(feature = "AVAnimation")]
        #[method(setExternalPlaybackVideoGravity:)]
        pub unsafe fn setExternalPlaybackVideoGravity(
            &self,
            external_playback_video_gravity: &AVLayerVideoGravity,
        );
    }
);

extern_methods!(
    /// AVPlayerProtectedContent
    unsafe impl AVPlayer {
        #[method(outputObscuredDueToInsufficientExternalProtection)]
        pub unsafe fn outputObscuredDueToInsufficientExternalProtection(&self) -> bool;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayerhdrmode?language=objc)
// NS_OPTIONS
#[deprecated = "The deprecated availableHDRModes uses this enum. Use eligibleForHDRPlayback instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerHDRMode(pub NSInteger);
bitflags::bitflags! {
    impl AVPlayerHDRMode: NSInteger {
#[deprecated = "The deprecated availableHDRModes uses this enum. Use eligibleForHDRPlayback instead"]
        #[doc(alias = "AVPlayerHDRModeHLG")]
        const HLG = 0x1;
#[deprecated = "The deprecated availableHDRModes uses this enum. Use eligibleForHDRPlayback instead"]
        #[doc(alias = "AVPlayerHDRModeHDR10")]
        const HDR10 = 0x2;
#[deprecated = "The deprecated availableHDRModes uses this enum. Use eligibleForHDRPlayback instead"]
        #[doc(alias = "AVPlayerHDRModeDolbyVision")]
        const DolbyVision = 0x4;
    }
}

unsafe impl Encode for AVPlayerHDRMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerHDRMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeravailablehdrmodesdidchangenotification?language=objc)
    pub static AVPlayerAvailableHDRModesDidChangeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayereligibleforhdrplaybackdidchangenotification?language=objc)
    pub static AVPlayerEligibleForHDRPlaybackDidChangeNotification: &'static NSNotificationName;
}

extern_methods!(
    /// AVPlayerPlaybackCapabilities
    unsafe impl AVPlayer {
        #[deprecated = "Use eligibleForHDRPlayback instead"]
        #[method(availableHDRModes)]
        pub unsafe fn availableHDRModes(mtm: MainThreadMarker) -> AVPlayerHDRMode;

        #[method(eligibleForHDRPlayback)]
        pub unsafe fn eligibleForHDRPlayback(mtm: MainThreadMarker) -> bool;
    }
);

extern_methods!(
    /// AVPlayerVideoDecoderGPUSupport
    unsafe impl AVPlayer {
        #[method(preferredVideoDecoderGPURegistryID)]
        pub unsafe fn preferredVideoDecoderGPURegistryID(&self) -> u64;

        #[method(setPreferredVideoDecoderGPURegistryID:)]
        pub unsafe fn setPreferredVideoDecoderGPURegistryID(
            &self,
            preferred_video_decoder_gpu_registry_id: u64,
        );
    }
);

extern_methods!(
    /// AVPlayerVideoDisplaySleepPrevention
    unsafe impl AVPlayer {
        #[method(preventsDisplaySleepDuringVideoPlayback)]
        pub unsafe fn preventsDisplaySleepDuringVideoPlayback(&self) -> bool;

        #[method(setPreventsDisplaySleepDuringVideoPlayback:)]
        pub unsafe fn setPreventsDisplaySleepDuringVideoPlayback(
            &self,
            prevents_display_sleep_during_video_playback: bool,
        );
    }
);

extern_methods!(
    /// AVPlayerAutomaticBackgroundPrevention
    unsafe impl AVPlayer {
        #[method(preventsAutomaticBackgroundingDuringVideoPlayback)]
        pub unsafe fn preventsAutomaticBackgroundingDuringVideoPlayback(&self) -> bool;

        #[method(setPreventsAutomaticBackgroundingDuringVideoPlayback:)]
        pub unsafe fn setPreventsAutomaticBackgroundingDuringVideoPlayback(
            &self,
            prevents_automatic_backgrounding_during_video_playback: bool,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeraudiovisualbackgroundplaybackpolicy?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVPlayerAudiovisualBackgroundPlaybackPolicy(pub NSInteger);
impl AVPlayerAudiovisualBackgroundPlaybackPolicy {
    #[doc(alias = "AVPlayerAudiovisualBackgroundPlaybackPolicyAutomatic")]
    pub const Automatic: Self = Self(1);
    #[doc(alias = "AVPlayerAudiovisualBackgroundPlaybackPolicyPauses")]
    pub const Pauses: Self = Self(2);
    #[doc(alias = "AVPlayerAudiovisualBackgroundPlaybackPolicyContinuesIfPossible")]
    pub const ContinuesIfPossible: Self = Self(3);
}

unsafe impl Encode for AVPlayerAudiovisualBackgroundPlaybackPolicy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AVPlayerAudiovisualBackgroundPlaybackPolicy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVPlayerBackgroundSupport
    unsafe impl AVPlayer {
        #[method(audiovisualBackgroundPlaybackPolicy)]
        pub unsafe fn audiovisualBackgroundPlaybackPolicy(
            &self,
        ) -> AVPlayerAudiovisualBackgroundPlaybackPolicy;

        #[method(setAudiovisualBackgroundPlaybackPolicy:)]
        pub unsafe fn setAudiovisualBackgroundPlaybackPolicy(
            &self,
            audiovisual_background_playback_policy: AVPlayerAudiovisualBackgroundPlaybackPolicy,
        );
    }
);

extern_methods!(
    /// PlaybackCoordination
    unsafe impl AVPlayer {
        #[cfg(feature = "AVPlaybackCoordinator")]
        #[method_id(@__retain_semantics Other playbackCoordinator)]
        pub unsafe fn playbackCoordinator(&self) -> Retained<AVPlayerPlaybackCoordinator>;
    }
);

extern_methods!(
    /// AVPlayerOutputSupport
    unsafe impl AVPlayer {
        #[cfg(feature = "AVPlayerOutput")]
        #[method_id(@__retain_semantics Other videoOutput)]
        pub unsafe fn videoOutput(&self) -> Option<Retained<AVPlayerVideoOutput>>;

        #[cfg(feature = "AVPlayerOutput")]
        #[method(setVideoOutput:)]
        pub unsafe fn setVideoOutput(&self, video_output: Option<&AVPlayerVideoOutput>);
    }
);

extern_methods!(
    /// AVPlayerDeprecated
    unsafe impl AVPlayer {
        #[deprecated = "Allow AVPlayer to enable closed captions automatically according to user preferences by ensuring that the value of appliesMediaSelectionCriteriaAutomatically is YES."]
        #[method(isClosedCaptionDisplayEnabled)]
        pub unsafe fn isClosedCaptionDisplayEnabled(&self) -> bool;

        #[deprecated = "Allow AVPlayer to enable closed captions automatically according to user preferences by ensuring that the value of appliesMediaSelectionCriteriaAutomatically is YES."]
        #[method(setClosedCaptionDisplayEnabled:)]
        pub unsafe fn setClosedCaptionDisplayEnabled(&self, closed_caption_display_enabled: bool);

        #[cfg(feature = "objc2-core-media")]
        #[deprecated]
        #[method(masterClock)]
        pub unsafe fn masterClock(&self) -> CMClockRef;

        #[cfg(feature = "objc2-core-media")]
        #[deprecated]
        #[method(setMasterClock:)]
        pub unsafe fn setMasterClock(&self, master_clock: CMClockRef);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avqueueplayer?language=objc)
    #[unsafe(super(AVPlayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVQueuePlayer;
);

unsafe impl NSObjectProtocol for AVQueuePlayer {}

extern_methods!(
    unsafe impl AVQueuePlayer {
        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other queuePlayerWithItems:)]
        pub unsafe fn queuePlayerWithItems(
            items: &NSArray<AVPlayerItem>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Init initWithItems:)]
        pub unsafe fn initWithItems(
            this: Allocated<Self>,
            items: &NSArray<AVPlayerItem>,
        ) -> Retained<AVQueuePlayer>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other items)]
        pub unsafe fn items(&self) -> Retained<NSArray<AVPlayerItem>>;

        #[method(advanceToNextItem)]
        pub unsafe fn advanceToNextItem(&self);

        #[cfg(feature = "AVPlayerItem")]
        #[method(canInsertItem:afterItem:)]
        pub unsafe fn canInsertItem_afterItem(
            &self,
            item: &AVPlayerItem,
            after_item: Option<&AVPlayerItem>,
        ) -> bool;

        #[cfg(feature = "AVPlayerItem")]
        #[method(insertItem:afterItem:)]
        pub unsafe fn insertItem_afterItem(
            &self,
            item: &AVPlayerItem,
            after_item: Option<&AVPlayerItem>,
        );

        #[cfg(feature = "AVPlayerItem")]
        #[method(removeItem:)]
        pub unsafe fn removeItem(&self, item: &AVPlayerItem);

        #[method(removeAllItems)]
        pub unsafe fn removeAllItems(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `AVPlayer`
    unsafe impl AVQueuePlayer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Other playerWithURL:)]
        pub unsafe fn playerWithURL(url: &NSURL, mtm: MainThreadMarker) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Other playerWithPlayerItem:)]
        pub unsafe fn playerWithPlayerItem(
            item: Option<&AVPlayerItem>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithURL:)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "AVPlayerItem")]
        #[method_id(@__retain_semantics Init initWithPlayerItem:)]
        pub unsafe fn initWithPlayerItem(
            this: Allocated<Self>,
            item: Option<&AVPlayerItem>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVQueuePlayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
