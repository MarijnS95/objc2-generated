//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avasset?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAsset;
);

#[cfg(feature = "AVAsynchronousKeyValueLoading")]
unsafe impl AVAsynchronousKeyValueLoading for AVAsset {}

unsafe impl NSCopying for AVAsset {}

unsafe impl CopyingHelper for AVAsset {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVAsset {}

extern_methods!(
    unsafe impl AVAsset {
        #[method_id(@__retain_semantics Other assetWithURL:)]
        pub unsafe fn assetWithURL(url: &NSURL) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        #[method(duration)]
        pub unsafe fn duration(&self) -> CMTime;

        #[method(preferredRate)]
        pub unsafe fn preferredRate(&self) -> c_float;

        #[method(preferredVolume)]
        pub unsafe fn preferredVolume(&self) -> c_float;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(preferredTransform)]
        pub unsafe fn preferredTransform(&self) -> CGAffineTransform;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Use the naturalSize and preferredTransform, as appropriate, of the receiver's video tracks. See -tracksWithMediaType:"]
        #[method(naturalSize)]
        pub unsafe fn naturalSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-media")]
        #[method(minimumTimeOffsetFromLive)]
        pub unsafe fn minimumTimeOffsetFromLive(&self) -> CMTime;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVAsset {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVAssetAsynchronousLoading
    unsafe impl AVAsset {
        #[method(providesPreciseDurationAndTiming)]
        pub unsafe fn providesPreciseDurationAndTiming(&self) -> bool;

        #[method(cancelLoading)]
        pub unsafe fn cancelLoading(&self);
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetreferencerestrictions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AVAssetReferenceRestrictions(pub NSUInteger);
bitflags::bitflags! {
    impl AVAssetReferenceRestrictions: NSUInteger {
        const AVAssetReferenceRestrictionForbidNone = 0;
        const AVAssetReferenceRestrictionForbidRemoteReferenceToLocal = 1<<0;
        const AVAssetReferenceRestrictionForbidLocalReferenceToRemote = 1<<1;
        const AVAssetReferenceRestrictionForbidCrossSiteReference = 1<<2;
        const AVAssetReferenceRestrictionForbidLocalReferenceToLocal = 1<<3;
        const AVAssetReferenceRestrictionForbidAll = 0xFFFF;
        const AVAssetReferenceRestrictionDefaultPolicy = AVAssetReferenceRestrictions::AVAssetReferenceRestrictionForbidLocalReferenceToRemote.0;
    }
}

unsafe impl Encode for AVAssetReferenceRestrictions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AVAssetReferenceRestrictions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// AVAssetReferenceRestrictions
    unsafe impl AVAsset {
        #[method(referenceRestrictions)]
        pub unsafe fn referenceRestrictions(&self) -> AVAssetReferenceRestrictions;
    }
);

extern_methods!(
    /// AVAssetTrackInspection
    unsafe impl AVAsset {
        #[cfg(feature = "AVAssetTrack")]
        #[method_id(@__retain_semantics Other tracks)]
        pub unsafe fn tracks(&self) -> Retained<NSArray<AVAssetTrack>>;

        #[cfg(all(feature = "AVAssetTrack", feature = "objc2-core-media"))]
        #[deprecated = "Use loadTrackWithTrackID:completionHandler: instead"]
        #[method_id(@__retain_semantics Other trackWithTrackID:)]
        pub unsafe fn trackWithTrackID(
            &self,
            track_id: CMPersistentTrackID,
        ) -> Option<Retained<AVAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        #[method(loadTrackWithTrackID:completionHandler:)]
        pub unsafe fn loadTrackWithTrackID_completionHandler(
            &self,
            track_id: CMPersistentTrackID,
            completion_handler: &block2::Block<dyn Fn(*mut AVAssetTrack, *mut NSError)>,
        );

        #[cfg(all(feature = "AVAssetTrack", feature = "AVMediaFormat"))]
        #[deprecated = "Use loadTracksWithMediaType:completionHandler: instead"]
        #[method_id(@__retain_semantics Other tracksWithMediaType:)]
        pub unsafe fn tracksWithMediaType(
            &self,
            media_type: &AVMediaType,
        ) -> Retained<NSArray<AVAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "AVMediaFormat",
            feature = "block2"
        ))]
        #[method(loadTracksWithMediaType:completionHandler:)]
        pub unsafe fn loadTracksWithMediaType_completionHandler(
            &self,
            media_type: &AVMediaType,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<AVAssetTrack>, *mut NSError)>,
        );

        #[cfg(all(feature = "AVAssetTrack", feature = "AVMediaFormat"))]
        #[deprecated = "Use loadTracksWithMediaCharacteristic:completionHandler: instead"]
        #[method_id(@__retain_semantics Other tracksWithMediaCharacteristic:)]
        pub unsafe fn tracksWithMediaCharacteristic(
            &self,
            media_characteristic: &AVMediaCharacteristic,
        ) -> Retained<NSArray<AVAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "AVMediaFormat",
            feature = "block2"
        ))]
        #[method(loadTracksWithMediaCharacteristic:completionHandler:)]
        pub unsafe fn loadTracksWithMediaCharacteristic_completionHandler(
            &self,
            media_characteristic: &AVMediaCharacteristic,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<AVAssetTrack>, *mut NSError)>,
        );

        #[cfg(feature = "AVAssetTrackGroup")]
        #[method_id(@__retain_semantics Other trackGroups)]
        pub unsafe fn trackGroups(&self) -> Retained<NSArray<AVAssetTrackGroup>>;
    }
);

extern_methods!(
    /// AVAssetMetadataReading
    unsafe impl AVAsset {
        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other creationDate)]
        pub unsafe fn creationDate(&self) -> Option<Retained<AVMetadataItem>>;

        #[method_id(@__retain_semantics Other lyrics)]
        pub unsafe fn lyrics(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other commonMetadata)]
        pub unsafe fn commonMetadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataItem")]
        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(feature = "AVMetadataFormat")]
        #[method_id(@__retain_semantics Other availableMetadataFormats)]
        pub unsafe fn availableMetadataFormats(&self) -> Retained<NSArray<AVMetadataFormat>>;

        #[cfg(all(feature = "AVMetadataFormat", feature = "AVMetadataItem"))]
        #[deprecated = "Use loadMetadataForFormat:completionHandler: instead"]
        #[method_id(@__retain_semantics Other metadataForFormat:)]
        pub unsafe fn metadataForFormat(
            &self,
            format: &AVMetadataFormat,
        ) -> Retained<NSArray<AVMetadataItem>>;

        #[cfg(all(
            feature = "AVMetadataFormat",
            feature = "AVMetadataItem",
            feature = "block2"
        ))]
        #[method(loadMetadataForFormat:completionHandler:)]
        pub unsafe fn loadMetadataForFormat_completionHandler(
            &self,
            format: &AVMetadataFormat,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<AVMetadataItem>, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVAssetChapterInspection
    unsafe impl AVAsset {
        #[method_id(@__retain_semantics Other availableChapterLocales)]
        pub unsafe fn availableChapterLocales(&self) -> Retained<NSArray<NSLocale>>;

        #[cfg(all(feature = "AVMetadataFormat", feature = "AVTimedMetadataGroup"))]
        #[deprecated = "Use loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler: instead"]
        #[method_id(@__retain_semantics Other chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:)]
        pub unsafe fn chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys(
            &self,
            locale: &NSLocale,
            common_keys: Option<&NSArray<AVMetadataKey>>,
        ) -> Retained<NSArray<AVTimedMetadataGroup>>;

        #[cfg(all(
            feature = "AVMetadataFormat",
            feature = "AVTimedMetadataGroup",
            feature = "block2"
        ))]
        #[method(loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler:)]
        pub unsafe fn loadChapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_completionHandler(
            &self,
            locale: &NSLocale,
            common_keys: &NSArray<AVMetadataKey>,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSArray<AVTimedMetadataGroup>, *mut NSError),
            >,
        );

        #[cfg(feature = "AVTimedMetadataGroup")]
        #[deprecated = "Use loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler: instead"]
        #[method_id(@__retain_semantics Other chapterMetadataGroupsBestMatchingPreferredLanguages:)]
        pub unsafe fn chapterMetadataGroupsBestMatchingPreferredLanguages(
            &self,
            preferred_languages: &NSArray<NSString>,
        ) -> Retained<NSArray<AVTimedMetadataGroup>>;

        #[cfg(all(feature = "AVTimedMetadataGroup", feature = "block2"))]
        #[method(loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler:)]
        pub unsafe fn loadChapterMetadataGroupsBestMatchingPreferredLanguages_completionHandler(
            &self,
            preferred_languages: &NSArray<NSString>,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSArray<AVTimedMetadataGroup>, *mut NSError),
            >,
        );
    }
);

extern_methods!(
    /// AVAssetMediaSelection
    unsafe impl AVAsset {
        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other availableMediaCharacteristicsWithMediaSelectionOptions)]
        pub unsafe fn availableMediaCharacteristicsWithMediaSelectionOptions(
            &self,
        ) -> Retained<NSArray<AVMediaCharacteristic>>;

        #[cfg(all(feature = "AVMediaFormat", feature = "AVMediaSelectionGroup"))]
        #[deprecated = "Use loadMediaSelectionGroupForMediaCharacteristic:completionHandler: instead"]
        #[method_id(@__retain_semantics Other mediaSelectionGroupForMediaCharacteristic:)]
        pub unsafe fn mediaSelectionGroupForMediaCharacteristic(
            &self,
            media_characteristic: &AVMediaCharacteristic,
        ) -> Option<Retained<AVMediaSelectionGroup>>;

        #[cfg(all(
            feature = "AVMediaFormat",
            feature = "AVMediaSelectionGroup",
            feature = "block2"
        ))]
        #[method(loadMediaSelectionGroupForMediaCharacteristic:completionHandler:)]
        pub unsafe fn loadMediaSelectionGroupForMediaCharacteristic_completionHandler(
            &self,
            media_characteristic: &AVMediaCharacteristic,
            completion_handler: &block2::Block<dyn Fn(*mut AVMediaSelectionGroup, *mut NSError)>,
        );

        #[cfg(feature = "AVMediaSelection")]
        #[method_id(@__retain_semantics Other preferredMediaSelection)]
        pub unsafe fn preferredMediaSelection(&self) -> Retained<AVMediaSelection>;

        #[cfg(feature = "AVMediaSelection")]
        #[method_id(@__retain_semantics Other allMediaSelections)]
        pub unsafe fn allMediaSelections(&self) -> Retained<NSArray<AVMediaSelection>>;
    }
);

extern_methods!(
    /// AVAssetProtectedContent
    unsafe impl AVAsset {
        #[method(hasProtectedContent)]
        pub unsafe fn hasProtectedContent(&self) -> bool;
    }
);

extern_methods!(
    /// AVAssetFragments
    unsafe impl AVAsset {
        #[method(canContainFragments)]
        pub unsafe fn canContainFragments(&self) -> bool;

        #[method(containsFragments)]
        pub unsafe fn containsFragments(&self) -> bool;

        #[cfg(feature = "objc2-core-media")]
        #[method(overallDurationHint)]
        pub unsafe fn overallDurationHint(&self) -> CMTime;
    }
);

extern_methods!(
    /// AVAssetUsability
    unsafe impl AVAsset {
        #[method(isPlayable)]
        pub unsafe fn isPlayable(&self) -> bool;

        #[method(isExportable)]
        pub unsafe fn isExportable(&self) -> bool;

        #[method(isReadable)]
        pub unsafe fn isReadable(&self) -> bool;

        #[method(isComposable)]
        pub unsafe fn isComposable(&self) -> bool;

        #[method(isCompatibleWithSavedPhotosAlbum)]
        pub unsafe fn isCompatibleWithSavedPhotosAlbum(&self) -> bool;

        #[method(isCompatibleWithAirPlayVideo)]
        pub unsafe fn isCompatibleWithAirPlayVideo(&self) -> bool;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetpreferprecisedurationandtimingkey?language=objc)
    pub static AVURLAssetPreferPreciseDurationAndTimingKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetoverridemimetypekey?language=objc)
    pub static AVURLAssetOverrideMIMETypeKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetreferencerestrictionskey?language=objc)
    pub static AVURLAssetReferenceRestrictionsKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassethttpcookieskey?language=objc)
    pub static AVURLAssetHTTPCookiesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetallowscellularaccesskey?language=objc)
    pub static AVURLAssetAllowsCellularAccessKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetallowsexpensivenetworkaccesskey?language=objc)
    pub static AVURLAssetAllowsExpensiveNetworkAccessKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetallowsconstrainednetworkaccesskey?language=objc)
    pub static AVURLAssetAllowsConstrainedNetworkAccessKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetshouldsupportaliasdatareferenceskey?language=objc)
    pub static AVURLAssetShouldSupportAliasDataReferencesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlasseturlrequestattributionkey?language=objc)
    pub static AVURLAssetURLRequestAttributionKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassethttpuseragentkey?language=objc)
    pub static AVURLAssetHTTPUserAgentKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlassetprimarysessionidentifierkey?language=objc)
    pub static AVURLAssetPrimarySessionIdentifierKey: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avurlasset?language=objc)
    #[unsafe(super(AVAsset, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVURLAsset;
);

unsafe impl Send for AVURLAsset {}

unsafe impl Sync for AVURLAsset {}

#[cfg(feature = "AVAsynchronousKeyValueLoading")]
unsafe impl AVAsynchronousKeyValueLoading for AVURLAsset {}

unsafe impl NSCopying for AVURLAsset {}

unsafe impl CopyingHelper for AVURLAsset {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVURLAsset {}

extern_methods!(
    unsafe impl AVURLAsset {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVMediaFormat")]
        #[method_id(@__retain_semantics Other audiovisualTypes)]
        pub unsafe fn audiovisualTypes() -> Retained<NSArray<AVFileType>>;

        #[method_id(@__retain_semantics Other audiovisualMIMETypes)]
        pub unsafe fn audiovisualMIMETypes() -> Retained<NSArray<NSString>>;

        #[method(isPlayableExtendedMIMEType:)]
        pub unsafe fn isPlayableExtendedMIMEType(extended_mime_type: &NSString) -> bool;

        #[method_id(@__retain_semantics Other URLAssetWithURL:options:)]
        pub unsafe fn URLAssetWithURL_options(
            url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithURL:options:)]
        pub unsafe fn initWithURL_options(
            this: Allocated<Self>,
            url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Retained<NSURL>;

        #[method_id(@__retain_semantics Other httpSessionIdentifier)]
        pub unsafe fn httpSessionIdentifier(&self) -> Retained<NSUUID>;
    }
);

extern_methods!(
    /// Methods declared on superclass `AVAsset`
    unsafe impl AVURLAsset {
        #[method_id(@__retain_semantics Other assetWithURL:)]
        pub unsafe fn assetWithURL(url: &NSURL) -> Retained<Self>;
    }
);

extern_methods!(
    /// AVURLAssetURLHandling
    unsafe impl AVURLAsset {
        #[cfg(feature = "AVAssetResourceLoader")]
        #[method_id(@__retain_semantics Other resourceLoader)]
        pub unsafe fn resourceLoader(&self) -> Retained<AVAssetResourceLoader>;
    }
);

extern_methods!(
    /// AVURLAssetCache
    unsafe impl AVURLAsset {
        #[cfg(feature = "AVAssetCache")]
        #[method_id(@__retain_semantics Other assetCache)]
        pub unsafe fn assetCache(&self) -> Option<Retained<AVAssetCache>>;
    }
);

extern_methods!(
    /// AVAssetCompositionUtility
    unsafe impl AVURLAsset {
        #[cfg(all(feature = "AVAssetTrack", feature = "AVCompositionTrack"))]
        #[deprecated = "Use findCompatibleTrackForCompositionTrack:completionHandler: instead"]
        #[method_id(@__retain_semantics Other compatibleTrackForCompositionTrack:)]
        pub unsafe fn compatibleTrackForCompositionTrack(
            &self,
            composition_track: &AVCompositionTrack,
        ) -> Option<Retained<AVAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "AVCompositionTrack",
            feature = "block2"
        ))]
        #[method(findCompatibleTrackForCompositionTrack:completionHandler:)]
        pub unsafe fn findCompatibleTrackForCompositionTrack_completionHandler(
            &self,
            composition_track: &AVCompositionTrack,
            completion_handler: &block2::Block<dyn Fn(*mut AVAssetTrack, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// AVAssetVariantInspection
    unsafe impl AVURLAsset {
        #[cfg(feature = "AVAssetVariant")]
        #[method_id(@__retain_semantics Other variants)]
        pub unsafe fn variants(&self) -> Retained<NSArray<AVAssetVariant>>;
    }
);

extern_methods!(
    /// AVURLAssetNSItemProvider
    unsafe impl AVURLAsset {}
);

unsafe impl NSItemProviderReading for AVURLAsset {}

unsafe impl NSItemProviderWriting for AVURLAsset {}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmediaextensionproperties?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMediaExtensionProperties;
);

unsafe impl Send for AVMediaExtensionProperties {}

unsafe impl Sync for AVMediaExtensionProperties {}

unsafe impl NSCopying for AVMediaExtensionProperties {}

unsafe impl CopyingHelper for AVMediaExtensionProperties {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVMediaExtensionProperties {}

extern_methods!(
    unsafe impl AVMediaExtensionProperties {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other extensionIdentifier)]
        pub unsafe fn extensionIdentifier(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other extensionName)]
        pub unsafe fn extensionName(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other containingBundleName)]
        pub unsafe fn containingBundleName(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other extensionURL)]
        pub unsafe fn extensionURL(&self) -> Retained<NSURL>;

        #[method_id(@__retain_semantics Other containingBundleURL)]
        pub unsafe fn containingBundleURL(&self) -> Retained<NSURL>;
    }
);

extern_methods!(
    /// AVMediaExtension
    unsafe impl AVURLAsset {
        #[method_id(@__retain_semantics Other mediaExtensionProperties)]
        pub unsafe fn mediaExtensionProperties(
            &self,
        ) -> Option<Retained<AVMediaExtensionProperties>>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdurationdidchangenotification?language=objc)
    pub static AVAssetDurationDidChangeNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetcontainsfragmentsdidchangenotification?language=objc)
    pub static AVAssetContainsFragmentsDidChangeNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetwasdefragmentednotification?language=objc)
    pub static AVAssetWasDefragmentedNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetchaptermetadatagroupsdidchangenotification?language=objc)
    pub static AVAssetChapterMetadataGroupsDidChangeNotification: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetmediaselectiongroupsdidchangenotification?language=objc)
    pub static AVAssetMediaSelectionGroupsDidChangeNotification: &'static NSString;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avfragmentminding?language=objc)
    pub unsafe trait AVFragmentMinding {
        #[method(isAssociatedWithFragmentMinder)]
        unsafe fn isAssociatedWithFragmentMinder(&self) -> bool;
    }

    unsafe impl ProtocolType for dyn AVFragmentMinding {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avfragmentedasset?language=objc)
    #[unsafe(super(AVURLAsset, AVAsset, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVFragmentedAsset;
);

unsafe impl Send for AVFragmentedAsset {}

unsafe impl Sync for AVFragmentedAsset {}

#[cfg(feature = "AVAsynchronousKeyValueLoading")]
unsafe impl AVAsynchronousKeyValueLoading for AVFragmentedAsset {}

unsafe impl AVFragmentMinding for AVFragmentedAsset {}

unsafe impl NSCopying for AVFragmentedAsset {}

unsafe impl CopyingHelper for AVFragmentedAsset {
    type Result = Self;
}

unsafe impl NSObjectProtocol for AVFragmentedAsset {}

extern_methods!(
    unsafe impl AVFragmentedAsset {
        #[method_id(@__retain_semantics Other fragmentedAssetWithURL:options:)]
        pub unsafe fn fragmentedAssetWithURL_options(
            url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(feature = "AVAssetTrack")]
        #[method_id(@__retain_semantics Other tracks)]
        pub unsafe fn tracks(&self) -> Retained<NSArray<AVFragmentedAssetTrack>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `AVURLAsset`
    unsafe impl AVFragmentedAsset {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Other URLAssetWithURL:options:)]
        pub unsafe fn URLAssetWithURL_options(
            url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithURL:options:)]
        pub unsafe fn initWithURL_options(
            this: Allocated<Self>,
            url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `AVAsset`
    unsafe impl AVFragmentedAsset {
        #[method_id(@__retain_semantics Other assetWithURL:)]
        pub unsafe fn assetWithURL(url: &NSURL) -> Retained<Self>;
    }
);

extern_methods!(
    /// AVFragmentedAssetTrackInspection
    unsafe impl AVFragmentedAsset {
        #[cfg(all(feature = "AVAssetTrack", feature = "objc2-core-media"))]
        #[deprecated = "Use loadTrackWithTrackID:completionHandler: instead"]
        #[method_id(@__retain_semantics Other trackWithTrackID:)]
        pub unsafe fn trackWithTrackID(
            &self,
            track_id: CMPersistentTrackID,
        ) -> Option<Retained<AVFragmentedAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        #[method(loadTrackWithTrackID:completionHandler:)]
        pub unsafe fn loadTrackWithTrackID_completionHandler(
            &self,
            track_id: CMPersistentTrackID,
            completion_handler: &block2::Block<dyn Fn(*mut AVFragmentedAssetTrack, *mut NSError)>,
        );

        #[cfg(all(feature = "AVAssetTrack", feature = "AVMediaFormat"))]
        #[deprecated = "Use loadTracksWithMediaType:completionHandler: instead"]
        #[method_id(@__retain_semantics Other tracksWithMediaType:)]
        pub unsafe fn tracksWithMediaType(
            &self,
            media_type: &AVMediaType,
        ) -> Retained<NSArray<AVFragmentedAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "AVMediaFormat",
            feature = "block2"
        ))]
        #[method(loadTracksWithMediaType:completionHandler:)]
        pub unsafe fn loadTracksWithMediaType_completionHandler(
            &self,
            media_type: &AVMediaType,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSArray<AVFragmentedAssetTrack>, *mut NSError),
            >,
        );

        #[cfg(all(feature = "AVAssetTrack", feature = "AVMediaFormat"))]
        #[deprecated = "Use loadTracksWithMediaCharacteristic:completionHandler: instead"]
        #[method_id(@__retain_semantics Other tracksWithMediaCharacteristic:)]
        pub unsafe fn tracksWithMediaCharacteristic(
            &self,
            media_characteristic: &AVMediaCharacteristic,
        ) -> Retained<NSArray<AVFragmentedAssetTrack>>;

        #[cfg(all(
            feature = "AVAssetTrack",
            feature = "AVMediaFormat",
            feature = "block2"
        ))]
        #[method(loadTracksWithMediaCharacteristic:completionHandler:)]
        pub unsafe fn loadTracksWithMediaCharacteristic_completionHandler(
            &self,
            media_characteristic: &AVMediaCharacteristic,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSArray<AVFragmentedAssetTrack>, *mut NSError),
            >,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avfragmentedassetminder?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVFragmentedAssetMinder;
);

unsafe impl NSObjectProtocol for AVFragmentedAssetMinder {}

extern_methods!(
    unsafe impl AVFragmentedAssetMinder {
        #[method_id(@__retain_semantics Other fragmentedAssetMinderWithAsset:mindingInterval:)]
        pub unsafe fn fragmentedAssetMinderWithAsset_mindingInterval(
            asset: &AVAsset,
            minding_interval: NSTimeInterval,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithAsset:mindingInterval:)]
        pub unsafe fn initWithAsset_mindingInterval(
            this: Allocated<Self>,
            asset: &AVAsset,
            minding_interval: NSTimeInterval,
        ) -> Retained<Self>;

        #[method(mindingInterval)]
        pub unsafe fn mindingInterval(&self) -> NSTimeInterval;

        #[method(setMindingInterval:)]
        pub unsafe fn setMindingInterval(&self, minding_interval: NSTimeInterval);

        #[method_id(@__retain_semantics Other assets)]
        pub unsafe fn assets(&self) -> Retained<NSArray<AVAsset>>;

        #[method(addFragmentedAsset:)]
        pub unsafe fn addFragmentedAsset(&self, asset: &AVAsset);

        #[method(removeFragmentedAsset:)]
        pub unsafe fn removeFragmentedAsset(&self, asset: &AVAsset);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVFragmentedAssetMinder {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// AVURLAssetContentKeyEligibility
    unsafe impl AVURLAsset {
        #[method(mayRequireContentKeysForMediaDataProcessing)]
        pub unsafe fn mayRequireContentKeysForMediaDataProcessing(&self) -> bool;
    }
);

#[cfg(feature = "AVContentKeySession")]
unsafe impl AVContentKeyRecipient for AVURLAsset {}
