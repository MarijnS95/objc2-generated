//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Class representing a timer bound to the display vsync. *
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quartzcore/cadisplaylink?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CADisplayLink;
);

unsafe impl NSObjectProtocol for CADisplayLink {}

extern_methods!(
    unsafe impl CADisplayLink {
        #[method_id(displayLinkWithTarget:selector:)]
        #[unsafe(method_family = none)]
        pub unsafe fn displayLinkWithTarget_selector(
            target: &AnyObject,
            sel: Sel,
        ) -> Retained<CADisplayLink>;

        #[method(addToRunLoop:forMode:)]
        pub unsafe fn addToRunLoop_forMode(&self, runloop: &NSRunLoop, mode: &NSRunLoopMode);

        #[method(removeFromRunLoop:forMode:)]
        pub unsafe fn removeFromRunLoop_forMode(&self, runloop: &NSRunLoop, mode: &NSRunLoopMode);

        #[method(invalidate)]
        pub unsafe fn invalidate(&self);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(timestamp)]
        pub unsafe fn timestamp(&self) -> CFTimeInterval;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(duration)]
        pub unsafe fn duration(&self) -> CFTimeInterval;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(targetTimestamp)]
        pub unsafe fn targetTimestamp(&self) -> CFTimeInterval;

        #[method(isPaused)]
        pub unsafe fn isPaused(&self) -> bool;

        /// Setter for [`isPaused`][Self::isPaused].
        #[method(setPaused:)]
        pub unsafe fn setPaused(&self, paused: bool);

        #[deprecated = "preferredFramesPerSecond"]
        #[method(frameInterval)]
        pub unsafe fn frameInterval(&self) -> NSInteger;

        /// Setter for [`frameInterval`][Self::frameInterval].
        #[deprecated = "preferredFramesPerSecond"]
        #[method(setFrameInterval:)]
        pub unsafe fn setFrameInterval(&self, frame_interval: NSInteger);

        #[deprecated]
        #[method(preferredFramesPerSecond)]
        pub unsafe fn preferredFramesPerSecond(&self) -> NSInteger;

        /// Setter for [`preferredFramesPerSecond`][Self::preferredFramesPerSecond].
        #[deprecated]
        #[method(setPreferredFramesPerSecond:)]
        pub unsafe fn setPreferredFramesPerSecond(&self, preferred_frames_per_second: NSInteger);

        #[cfg(feature = "CAFrameRateRange")]
        #[method(preferredFrameRateRange)]
        pub unsafe fn preferredFrameRateRange(&self) -> CAFrameRateRange;

        #[cfg(feature = "CAFrameRateRange")]
        /// Setter for [`preferredFrameRateRange`][Self::preferredFrameRateRange].
        #[method(setPreferredFrameRateRange:)]
        pub unsafe fn setPreferredFrameRateRange(
            &self,
            preferred_frame_rate_range: CAFrameRateRange,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CADisplayLink {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
