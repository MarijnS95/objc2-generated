//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostcompletionhandler?language=objc)
#[cfg(feature = "block2")]
pub type IOUSBHostCompletionHandler = *mut block2::Block<dyn Fn(IOReturn, NSUInteger)>;

/// AbsoluteTime represented as a uint64_t.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhosttime?language=objc)
pub type IOUSBHostTime = u64;

/// Structure representing a single frame in an isochronous transfer. Use of this
/// structure is discouraged, use
///
/// ```text
///  IOUSBHostIsochronousTransaction
/// ```
///
/// instead.
/// Field: status Completion status for this individual frame. IOUSBHostFamily will initialize
/// this to kIOReturnInvalid and will update the field with a valid status code upon
/// completion of the frame.
/// Field: requestCount The number of bytes requested to transfer for this frame.
/// This field must be initialized by the caller before the structure is submitted.
/// Field: completeCount The number of bytes actually transferred for this frame.
/// IOUSBHostFamily will update this field upon completion of the frame.
/// Field: reserved Reserved for future use.
/// Field: timeStamp The observed IOUSBHostTime for this frame's completion.  Note that
/// interrupt latency and system load may result in more than one frame completing with
/// the same timestamp.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronousframe?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct IOUSBHostIsochronousFrame {
    pub status: IOReturn,
    pub requestCount: u32,
    pub completeCount: u32,
    pub reserved: u32,
    pub timeStamp: IOUSBHostTime,
}

unsafe impl Encode for IOUSBHostIsochronousFrame {
    const ENCODING: Encoding = Encoding::Struct(
        "IOUSBHostIsochronousFrame",
        &[
            <IOReturn>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <IOUSBHostTime>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for IOUSBHostIsochronousFrame {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Options for
/// <code>
/// sendIORequestWithData:transactionList:transactionListCount:firstFrameNumber:options:error
/// </code>
/// and
/// <code>
/// sendIORequestWithData:transactionList:transactionListCount:firstFrameNumber:options:error:completionHandler
/// </code>
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronoustransferoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOUSBHostIsochronousTransferOptions(pub u32);
bitflags::bitflags! {
    impl IOUSBHostIsochronousTransferOptions: u32 {
        #[doc(alias = "IOUSBHostIsochronousTransferOptionsNone")]
        const None = 0;
    }
}

unsafe impl Encode for IOUSBHostIsochronousTransferOptions {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for IOUSBHostIsochronousTransferOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Options for
/// <code>
/// sendIORequestWithData:transactionList:transactionListCount:firstFrameNumber:error
/// </code>
/// and
/// <code>
/// sendIORequestWithData:transactionList:transactionListCount:firstFrameNumber:error:completionHandler
/// </code>
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronoustransactionoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOUSBHostIsochronousTransactionOptions(pub u32);
bitflags::bitflags! {
    impl IOUSBHostIsochronousTransactionOptions: u32 {
        #[doc(alias = "IOUSBHostIsochronousTransactionOptionsNone")]
        const None = 0;
        #[doc(alias = "IOUSBHostIsochronousTransactionOptionsWrap")]
        const Wrap = 1<<0;
    }
}

unsafe impl Encode for IOUSBHostIsochronousTransactionOptions {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for IOUSBHostIsochronousTransactionOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Structure representing a single frame or microframe in an isochronous transfer.
/// Field: status Completion status for this individual transaction. IOUSBHostFamily will
/// initialize this to kIOReturnInvalid and will update the field with a valid status
/// code upon completion of the transaction.
/// Field: requestCount The number of bytes requested to transfer for this transaction.
/// This field must be initialized by the caller before the structure is submitted.
/// Field: offset The number of bytes between the start of the memory descriptor in which this
/// transaction resides and the start of the transaction.  The offset cannot exceed 4GB.
/// Field: completeCount The number of bytes actually transferred for this transaction.
/// IOUSBHostFamily will update this field upon completion of the transaction.
/// Field: timeStamp The observed IOUSBHostTime for this transaction's completion.  Note that
/// interrupt latency and system load may result in more than one transaction completing
/// with the same timestamp.
/// Field: options Flags that specify additional transaction behavior.  See
///
/// ```text
///  IOUSBHostIsochronousTransactionOptions
/// ```
///
/// for more details.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronoustransaction?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct IOUSBHostIsochronousTransaction {
    pub status: IOReturn,
    pub requestCount: u32,
    pub offset: u32,
    pub completeCount: u32,
    pub timeStamp: IOUSBHostTime,
    pub options: IOUSBHostIsochronousTransactionOptions,
}

unsafe impl Encode for IOUSBHostIsochronousTransaction {
    const ENCODING: Encoding = Encoding::Struct(
        "IOUSBHostIsochronousTransaction",
        &[
            <IOReturn>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <IOUSBHostTime>::ENCODING,
            <IOUSBHostIsochronousTransactionOptions>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for IOUSBHostIsochronousTransaction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Isochronous IO completion handler.
///
/// Parameter `status`: IOReturn result code for isochronous transfer.
///
/// Parameter `frameList`: Frame list for isochronous transfer.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronouscompletionhandler?language=objc)
#[cfg(feature = "block2")]
pub type IOUSBHostIsochronousCompletionHandler =
    *mut block2::Block<dyn Fn(IOReturn, NonNull<IOUSBHostIsochronousFrame>)>;

/// Isochronous IO completion handler.
///
/// Parameter `status`: IOReturn result code for isochronous transfer.
///
/// Parameter `transactionList`: Transaction list for isochronous transfer.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostisochronoustransactioncompletionhandler?language=objc)
#[cfg(feature = "block2")]
pub type IOUSBHostIsochronousTransactionCompletionHandler =
    *mut block2::Block<dyn Fn(IOReturn, NonNull<IOUSBHostIsochronousTransaction>)>;

extern "C" {
    /// NSErrorDomain for IOUSBHostFamily. Error codes are IOKit IOReturn codes.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhosterrordomain?language=objc)
    pub static IOUSBHostErrorDomain: &'static NSErrorDomain;
}

/// Options for
/// <code>
/// abort
/// </code>
///
/// waiting for the aborted IO to complete
///
/// IO has completed
///
/// To be used with
///
/// ```text
///  abortDeviceRequestsWithOption:error:
/// ```
///
///
/// ```text
///  abortWithOption:error:
/// ```
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostabortoption?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOUSBHostAbortOption(pub NSUInteger);
impl IOUSBHostAbortOption {
    #[doc(alias = "IOUSBHostAbortOptionAsynchronous")]
    pub const Asynchronous: Self = Self(0);
    #[doc(alias = "IOUSBHostAbortOptionSynchronous")]
    pub const Synchronous: Self = Self(1);
}

unsafe impl Encode for IOUSBHostAbortOption {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for IOUSBHostAbortOption {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Options for
/// <code>
/// initWithIOService:options:queue:error:interestHandler
/// </code>
///
/// and the IOUSBHostDevice IOService object needs to have successfully been authorized by IOServiceAuthorize().
/// If the caller has root privelages the entitlement and authorization is not needed. Using this option
/// will terminate all clients and drivers of the IOUSBHostDevice and associated IOUSBHostInterface clients
/// besides the caller.
/// Upon
/// <code>
/// destroy
/// </code>
/// of the IOUSBHostDevice, the device will be reset and drivers will be re-registered
/// for matching. This option is only valid for macOS
///
/// service to close via
/// <code>
/// kUSBHostMessageDeviceIsRequestingClose
/// </code>
/// message.  The message will include
/// the registry entry ID of the requesting service.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostobjectinitoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOUSBHostObjectInitOptions(pub NSUInteger);
bitflags::bitflags! {
    impl IOUSBHostObjectInitOptions: NSUInteger {
        #[doc(alias = "IOUSBHostObjectInitOptionsNone")]
        const None = 0;
        #[doc(alias = "IOUSBHostObjectInitOptionsDeviceCapture")]
        const DeviceCapture = 1<<0;
        #[doc(alias = "IOUSBHostObjectInitOptionsDeviceSeize")]
        const DeviceSeize = 1<<1;
    }
}

unsafe impl Encode for IOUSBHostObjectInitOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for IOUSBHostObjectInitOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Options for
/// <code>
/// destroyWithOptions
/// </code>
///
/// the device will not be reset and drivers will not be re-registered for matching.  This allows for IOUSBHostDevice
/// objects that were initialized with
/// <code>
/// IOUSBHostObjectInitOptionsDeviceCapture
/// </code>
/// to honor the
/// <code>
/// kUSBHostMessageDeviceIsRequestingClose
/// </code>
/// message.
///
/// This option is only valid for macOS
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostobjectdestroyoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct IOUSBHostObjectDestroyOptions(pub NSUInteger);
bitflags::bitflags! {
    impl IOUSBHostObjectDestroyOptions: NSUInteger {
        #[doc(alias = "IOUSBHostObjectDestroyOptionsNone")]
        const None = 0;
        #[doc(alias = "IOUSBHostObjectDestroyOptionsDeviceSurrender")]
        const DeviceSurrender = 1<<0;
    }
}

unsafe impl Encode for IOUSBHostObjectDestroyOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for IOUSBHostObjectDestroyOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn IOUSBHostDeviceRequestType(direction: tIOUSBDeviceRequestDirectionValue,r#type: tIOUSBDeviceRequestTypeValue,recipient: tIOUSBDeviceRequestRecipientValue,) -> u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykey?language=objc)
// NS_TYPED_ENUM
pub type IOUSBHostMatchingPropertyKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyvendorid?language=objc)
    pub static IOUSBHostMatchingPropertyKeyVendorID: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyproductid?language=objc)
    pub static IOUSBHostMatchingPropertyKeyProductID: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyproductidarray?language=objc)
    pub static IOUSBHostMatchingPropertyKeyProductIDArray: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyinterfacenumber?language=objc)
    pub static IOUSBHostMatchingPropertyKeyInterfaceNumber: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyconfigurationvalue?language=objc)
    pub static IOUSBHostMatchingPropertyKeyConfigurationValue:
        &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeydevicereleasenumber?language=objc)
    pub static IOUSBHostMatchingPropertyKeyDeviceReleaseNumber:
        &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyinterfaceclass?language=objc)
    pub static IOUSBHostMatchingPropertyKeyInterfaceClass: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyinterfacesubclass?language=objc)
    pub static IOUSBHostMatchingPropertyKeyInterfaceSubClass: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyinterfaceprotocol?language=objc)
    pub static IOUSBHostMatchingPropertyKeyInterfaceProtocol: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeydeviceclass?language=objc)
    pub static IOUSBHostMatchingPropertyKeyDeviceClass: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeydevicesubclass?language=objc)
    pub static IOUSBHostMatchingPropertyKeyDeviceSubClass: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeydeviceprotocol?language=objc)
    pub static IOUSBHostMatchingPropertyKeyDeviceProtocol: &'static IOUSBHostMatchingPropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostmatchingpropertykeyspeed?language=objc)
    pub static IOUSBHostMatchingPropertyKeySpeed: &'static IOUSBHostMatchingPropertyKey;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostpropertykey?language=objc)
pub type IOUSBHostPropertyKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostpropertykeylocationid?language=objc)
    pub static IOUSBHostPropertyKeyLocationID: &'static IOUSBHostPropertyKey;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdevicepropertykey?language=objc)
// NS_TYPED_ENUM
pub type IOUSBHostDevicePropertyKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdevicepropertykeyvendorstring?language=objc)
    pub static IOUSBHostDevicePropertyKeyVendorString: &'static IOUSBHostDevicePropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdevicepropertykeyserialnumberstring?language=objc)
    pub static IOUSBHostDevicePropertyKeySerialNumberString: &'static IOUSBHostDevicePropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdevicepropertykeycontainerid?language=objc)
    pub static IOUSBHostDevicePropertyKeyContainerID: &'static IOUSBHostDevicePropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdevicepropertykeycurrentconfiguration?language=objc)
    pub static IOUSBHostDevicePropertyKeyCurrentConfiguration: &'static IOUSBHostDevicePropertyKey;
}

/// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostinterfacepropertykey?language=objc)
// NS_TYPED_ENUM
pub type IOUSBHostInterfacePropertyKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostinterfacepropertykeyalternatesetting?language=objc)
    pub static IOUSBHostInterfacePropertyKeyAlternateSetting:
        &'static IOUSBHostInterfacePropertyKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostdefaultcontrolcompletiontimeout?language=objc)
    pub static IOUSBHostDefaultControlCompletionTimeout: NSTimeInterval;
}
