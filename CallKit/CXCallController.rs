//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/callkit/cxcallcontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CXCallController;
);

unsafe impl NSObjectProtocol for CXCallController {}

extern_methods!(
    unsafe impl CXCallController {
        /// Initialize call controller with a private, serial queue.
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "CXCallObserver")]
        #[method_id(@__method_family Other callObserver)]
        pub unsafe fn callObserver(&self) -> Retained<CXCallObserver>;

        #[cfg(all(feature = "CXTransaction", feature = "block2"))]
        /// Request a transaction to be performed by the in-app provider.
        ///
        /// If the completion block is called with a nil error, then the transaction will be passed to the CXProvider's -provider:executeTransaction: delegate callback.
        /// A non-nil error indicates that the requested transaction could not be executed.
        ///
        /// Completion block is performed on the queue supplied to designated initializer.
        #[method(requestTransaction:completion:)]
        pub unsafe fn requestTransaction_completion(
            &self,
            transaction: &CXTransaction,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "CXAction", feature = "block2"))]
        /// Request a transaction containing the specified actions to be performed by the in-app provider.
        ///
        /// If the completion block is called with a nil error, then the transaction will be passed to the CXProvider's -provider:executeTransaction: delegate callback.
        /// A non-nil error indicates that the requested transaction could not be executed.
        ///
        /// Completion block is performed on the queue supplied to designated initializer.
        #[method(requestTransactionWithActions:completion:)]
        pub unsafe fn requestTransactionWithActions_completion(
            &self,
            actions: &NSArray<CXAction>,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "CXAction", feature = "block2"))]
        /// Request a transaction containing the specified action to be performed by the in-app provider.
        ///
        /// If the completion block is called with a nil error, then the transaction will be passed to the CXProvider's -provider:executeTransaction: delegate callback.
        /// A non-nil error indicates that the requested transaction could not be executed.
        ///
        /// Completion block is performed on the queue supplied to designated initializer.
        #[method(requestTransactionWithAction:completion:)]
        pub unsafe fn requestTransactionWithAction_completion(
            &self,
            action: &CXAction,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CXCallController {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
