//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An extension of VNPoint3D that associates an identifier to the point.
    ///
    /// It should be noted that VNRecognizedPoint3D is not intended as an overall replacement of simd float 4x4, but is used by observations that recognize labeled points of interest.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/vision/vnrecognizedpoint3d?language=objc)
    #[unsafe(super(VNPoint3D, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VNGeometry")]
    pub struct VNRecognizedPoint3D;
);

#[cfg(feature = "VNGeometry")]
extern_conformance!(
    unsafe impl NSCoding for VNRecognizedPoint3D {}
);

#[cfg(feature = "VNGeometry")]
extern_conformance!(
    unsafe impl NSCopying for VNRecognizedPoint3D {}
);

#[cfg(feature = "VNGeometry")]
unsafe impl CopyingHelper for VNRecognizedPoint3D {
    type Result = Self;
}

#[cfg(feature = "VNGeometry")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNRecognizedPoint3D {}
);

#[cfg(feature = "VNGeometry")]
extern_conformance!(
    unsafe impl NSSecureCoding for VNRecognizedPoint3D {}
);

#[cfg(feature = "VNGeometry")]
impl VNRecognizedPoint3D {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VNTypes")]
        /// The is the identifier that provides context as to the kind of point that was recognized.
        ///
        /// The string is defined by the model that recognized the point. Usually these are technical labels that are not localized and not meant to be used directly to be presented to an end user in the UI.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<VNRecognizedPointKey>;
    );
}
