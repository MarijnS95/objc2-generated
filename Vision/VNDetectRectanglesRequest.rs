//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vndetectrectanglesrequest?language=objc)
    #[unsafe(super(VNImageBasedRequest, VNRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VNRequest")]
    pub struct VNDetectRectanglesRequest;
);

#[cfg(feature = "VNRequest")]
unsafe impl NSCopying for VNDetectRectanglesRequest {}

#[cfg(feature = "VNRequest")]
unsafe impl CopyingHelper for VNDetectRectanglesRequest {
    type Result = Self;
}

#[cfg(feature = "VNRequest")]
unsafe impl NSObjectProtocol for VNDetectRectanglesRequest {}

extern_methods!(
    #[cfg(feature = "VNRequest")]
    unsafe impl VNDetectRectanglesRequest {
        #[cfg(feature = "VNTypes")]
        #[method(minimumAspectRatio)]
        pub unsafe fn minimumAspectRatio(&self) -> VNAspectRatio;

        #[cfg(feature = "VNTypes")]
        #[method(setMinimumAspectRatio:)]
        pub unsafe fn setMinimumAspectRatio(&self, minimum_aspect_ratio: VNAspectRatio);

        #[cfg(feature = "VNTypes")]
        #[method(maximumAspectRatio)]
        pub unsafe fn maximumAspectRatio(&self) -> VNAspectRatio;

        #[cfg(feature = "VNTypes")]
        #[method(setMaximumAspectRatio:)]
        pub unsafe fn setMaximumAspectRatio(&self, maximum_aspect_ratio: VNAspectRatio);

        #[cfg(feature = "VNTypes")]
        #[method(quadratureTolerance)]
        pub unsafe fn quadratureTolerance(&self) -> VNDegrees;

        #[cfg(feature = "VNTypes")]
        #[method(setQuadratureTolerance:)]
        pub unsafe fn setQuadratureTolerance(&self, quadrature_tolerance: VNDegrees);

        #[method(minimumSize)]
        pub unsafe fn minimumSize(&self) -> c_float;

        #[method(setMinimumSize:)]
        pub unsafe fn setMinimumSize(&self, minimum_size: c_float);

        #[cfg(feature = "VNTypes")]
        #[method(minimumConfidence)]
        pub unsafe fn minimumConfidence(&self) -> VNConfidence;

        #[cfg(feature = "VNTypes")]
        #[method(setMinimumConfidence:)]
        pub unsafe fn setMinimumConfidence(&self, minimum_confidence: VNConfidence);

        #[method(maximumObservations)]
        pub unsafe fn maximumObservations(&self) -> NSUInteger;

        #[method(setMaximumObservations:)]
        pub unsafe fn setMaximumObservations(&self, maximum_observations: NSUInteger);

        #[cfg(feature = "VNObservation")]
        #[method_id(@__retain_semantics Other results)]
        pub unsafe fn results(&self) -> Option<Retained<NSArray<VNRectangleObservation>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `VNRequest`
    #[cfg(feature = "VNRequest")]
    unsafe impl VNDetectRectanglesRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Init initWithCompletionHandler:)]
        pub unsafe fn initWithCompletionHandler(
            this: Allocated<Self>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "VNRequest")]
    unsafe impl VNDetectRectanglesRequest {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vndetectrectanglesrequestrevision1?language=objc)
pub static VNDetectRectanglesRequestRevision1: NSUInteger = 1;
