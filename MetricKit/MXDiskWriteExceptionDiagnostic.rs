//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An MXDiagnostic subclass that encapsulates disk write exception reports.
    ///
    /// Disk write exceptions occur when your application writes data excessively to disk.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metrickit/mxdiskwriteexceptiondiagnostic?language=objc)
    #[unsafe(super(MXDiagnostic, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MXDiagnostic")]
    pub struct MXDiskWriteExceptionDiagnostic;
);

#[cfg(feature = "MXDiagnostic")]
unsafe impl NSCoding for MXDiskWriteExceptionDiagnostic {}

#[cfg(feature = "MXDiagnostic")]
unsafe impl NSObjectProtocol for MXDiskWriteExceptionDiagnostic {}

#[cfg(feature = "MXDiagnostic")]
unsafe impl NSSecureCoding for MXDiskWriteExceptionDiagnostic {}

extern_methods!(
    #[cfg(feature = "MXDiagnostic")]
    unsafe impl MXDiskWriteExceptionDiagnostic {
        #[cfg(feature = "MXCallStackTree")]
        /// The application call stack tree associated with the excessive disk writes.
        #[unsafe(method(callStackTree))]
        #[unsafe(method_family = none)]
        pub unsafe fn callStackTree(&self) -> Retained<MXCallStackTree>;

        /// Total disk writes caused in the scope of this disk write exception.
        ///
        /// Dimensioned as NSUnitInformationStorage.
        #[unsafe(method(totalWritesCaused))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalWritesCaused(&self)
            -> Retained<NSMeasurement<NSUnitInformationStorage>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MXDiagnostic")]
    unsafe impl MXDiskWriteExceptionDiagnostic {
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
