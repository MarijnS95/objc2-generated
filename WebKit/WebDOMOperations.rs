//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_methods!(
    /// WebDOMNodeOperations
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMNode {
        #[cfg(feature = "WebArchive")]
        /// A WebArchive representing the node and the children of the node.
        #[deprecated]
        #[method_id(webArchive)]
        #[unsafe(method_family = none)]
        pub unsafe fn webArchive(&self) -> Option<Retained<WebArchive>>;
    }
);

extern_methods!(
    /// WebDOMDocumentOperations
    #[cfg(all(
        feature = "DOMDocument",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMDocument {
        #[cfg(feature = "WebFrame")]
        /// The frame of the DOM document.
        #[deprecated]
        #[method_id(webFrame)]
        #[unsafe(method_family = none)]
        pub unsafe fn webFrame(&self) -> Option<Retained<WebFrame>>;

        /// Constructs a URL given an attribute string.
        ///
        /// This method constructs a URL given an attribute string just as WebKit does.
        /// An attribute string is the value of an attribute of an element such as the href attribute on
        /// the DOMHTMLAnchorElement class. This method is only applicable to attributes that refer to URLs.
        #[deprecated]
        #[method_id(URLWithAttributeString:)]
        #[unsafe(method_family = none)]
        pub unsafe fn URLWithAttributeString(
            &self,
            string: Option<&NSString>,
        ) -> Option<Retained<NSURL>>;
    }
);

extern_methods!(
    /// WebDOMRangeOperations
    #[cfg(all(
        feature = "DOMObject",
        feature = "DOMRange",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMRange {
        #[cfg(feature = "WebArchive")]
        /// A WebArchive representing the range.
        #[deprecated]
        #[method_id(webArchive)]
        #[unsafe(method_family = none)]
        pub unsafe fn webArchive(&self) -> Option<Retained<WebArchive>>;

        /// A markup string representing the range.
        #[deprecated]
        #[method_id(markupString)]
        #[unsafe(method_family = none)]
        pub unsafe fn markupString(&self) -> Retained<NSString>;
    }
);

extern_methods!(
    /// WebDOMHTMLFrameElementOperations
    #[cfg(all(
        feature = "DOMElement",
        feature = "DOMHTMLElement",
        feature = "DOMHTMLFrameElement",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLFrameElement {
        #[cfg(feature = "WebFrame")]
        /// The content frame of the element.
        #[deprecated]
        #[method_id(contentFrame)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    }
);

extern_methods!(
    /// WebDOMHTMLIFrameElementOperations
    #[cfg(all(
        feature = "DOMElement",
        feature = "DOMHTMLElement",
        feature = "DOMHTMLIFrameElement",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLIFrameElement {
        #[cfg(feature = "WebFrame")]
        /// Returns the content frame of the element.
        #[deprecated]
        #[method_id(contentFrame)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    }
);

extern_methods!(
    /// WebDOMHTMLObjectElementOperations
    #[cfg(all(
        feature = "DOMElement",
        feature = "DOMHTMLElement",
        feature = "DOMHTMLObjectElement",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLObjectElement {
        #[cfg(feature = "WebFrame")]
        /// The content frame of the element.
        ///
        /// Returns non-nil only if the object represents a child frame
        /// such as if the data of the object is HTML content.
        #[deprecated]
        #[method_id(contentFrame)]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    }
);
