//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::WebKit::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKNavigationActionPolicy(pub NSInteger);
impl WKNavigationActionPolicy {
    #[doc(alias = "WKNavigationActionPolicyCancel")]
    pub const Cancel: Self = Self(0);
    #[doc(alias = "WKNavigationActionPolicyAllow")]
    pub const Allow: Self = Self(1);
    #[doc(alias = "WKNavigationActionPolicyDownload")]
    pub const Download: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for WKNavigationActionPolicy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for WKNavigationActionPolicy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKNavigationResponsePolicy(pub NSInteger);
impl WKNavigationResponsePolicy {
    #[doc(alias = "WKNavigationResponsePolicyCancel")]
    pub const Cancel: Self = Self(0);
    #[doc(alias = "WKNavigationResponsePolicyAllow")]
    pub const Allow: Self = Self(1);
    #[doc(alias = "WKNavigationResponsePolicyDownload")]
    pub const Download: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for WKNavigationResponsePolicy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for WKNavigationResponsePolicy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    pub unsafe trait WKNavigationDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigationAction",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:decidePolicyForNavigationAction:decisionHandler:)]
        unsafe fn webView_decidePolicyForNavigationAction_decisionHandler(
            &self,
            web_view: &WKWebView,
            navigation_action: &WKNavigationAction,
            decision_handler: &Block<dyn Fn(WKNavigationActionPolicy)>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigationAction",
            feature = "WebKit_WKWebView",
            feature = "WebKit_WKWebpagePreferences"
        ))]
        #[optional]
        #[method(webView:decidePolicyForNavigationAction:preferences:decisionHandler:)]
        unsafe fn webView_decidePolicyForNavigationAction_preferences_decisionHandler(
            &self,
            web_view: &WKWebView,
            navigation_action: &WKNavigationAction,
            preferences: &WKWebpagePreferences,
            decision_handler: &Block<
                dyn Fn(WKNavigationActionPolicy, NonNull<WKWebpagePreferences>),
            >,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigationResponse",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:decidePolicyForNavigationResponse:decisionHandler:)]
        unsafe fn webView_decidePolicyForNavigationResponse_decisionHandler(
            &self,
            web_view: &WKWebView,
            navigation_response: &WKNavigationResponse,
            decision_handler: &Block<dyn Fn(WKNavigationResponsePolicy)>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didStartProvisionalNavigation:)]
        unsafe fn webView_didStartProvisionalNavigation(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didReceiveServerRedirectForProvisionalNavigation:)]
        unsafe fn webView_didReceiveServerRedirectForProvisionalNavigation(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "Foundation_NSError",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didFailProvisionalNavigation:withError:)]
        unsafe fn webView_didFailProvisionalNavigation_withError(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
            error: &NSError,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didCommitNavigation:)]
        unsafe fn webView_didCommitNavigation(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didFinishNavigation:)]
        unsafe fn webView_didFinishNavigation(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "Foundation_NSError",
            feature = "WebKit_WKNavigation",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didFailNavigation:withError:)]
        unsafe fn webView_didFailNavigation_withError(
            &self,
            web_view: &WKWebView,
            navigation: Option<&WKNavigation>,
            error: &NSError,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "Foundation_NSURLAuthenticationChallenge",
            feature = "Foundation_NSURLCredential",
            feature = "Foundation_NSURLSession",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:didReceiveAuthenticationChallenge:completionHandler:)]
        unsafe fn webView_didReceiveAuthenticationChallenge_completionHandler(
            &self,
            web_view: &WKWebView,
            challenge: &NSURLAuthenticationChallenge,
            completion_handler: &Block<
                dyn Fn(NSURLSessionAuthChallengeDisposition, *mut NSURLCredential),
            >,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webViewWebContentProcessDidTerminate:)]
        unsafe fn webViewWebContentProcessDidTerminate(&self, web_view: &WKWebView);

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "Foundation_NSURLAuthenticationChallenge",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:authenticationChallenge:shouldAllowDeprecatedTLS:)]
        unsafe fn webView_authenticationChallenge_shouldAllowDeprecatedTLS(
            &self,
            web_view: &WKWebView,
            challenge: &NSURLAuthenticationChallenge,
            decision_handler: &Block<dyn Fn(Bool)>,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKDownload",
            feature = "WebKit_WKNavigationAction",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:navigationAction:didBecomeDownload:)]
        unsafe fn webView_navigationAction_didBecomeDownload(
            &self,
            web_view: &WKWebView,
            navigation_action: &WKNavigationAction,
            download: &WKDownload,
        );

        #[cfg(all(
            feature = "AppKit_NSResponder",
            feature = "AppKit_NSView",
            feature = "WebKit_WKDownload",
            feature = "WebKit_WKNavigationResponse",
            feature = "WebKit_WKWebView"
        ))]
        #[optional]
        #[method(webView:navigationResponse:didBecomeDownload:)]
        unsafe fn webView_navigationResponse_didBecomeDownload(
            &self,
            web_view: &WKWebView,
            navigation_response: &WKNavigationResponse,
            download: &WKDownload,
        );
    }

    unsafe impl ProtocolType for dyn WKNavigationDelegate {}
);
