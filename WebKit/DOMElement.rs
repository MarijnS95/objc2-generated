//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/webkit/dom_allow_keyboard_input?language=objc)
#[deprecated]
pub const DOM_ALLOW_KEYBOARD_INPUT: c_uint = 1;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/webkit/domelement?language=objc)
    #[unsafe(super(DOMNode, DOMObject, WebScriptObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    #[deprecated]
    pub struct DOMElement;
);

#[cfg(all(
    feature = "DOMEventTarget",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl DOMEventTarget for DOMElement {}

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSCopying for DOMElement {}

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl CopyingHelper for DOMElement {
    type Result = Self;
}

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSObjectProtocol for DOMElement {}

extern_methods!(
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMElement {
        #[deprecated]
        #[method(tagName)]
        #[unsafe(method_family = none)]
        pub unsafe fn tagName(&self) -> Retained<NSString>;

        #[cfg(feature = "DOMCSSStyleDeclaration")]
        #[deprecated]
        #[method(style)]
        #[unsafe(method_family = none)]
        pub unsafe fn style(&self) -> Option<Retained<DOMCSSStyleDeclaration>>;

        #[deprecated]
        #[method(offsetLeft)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetLeft(&self) -> c_int;

        #[deprecated]
        #[method(offsetTop)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetTop(&self) -> c_int;

        #[deprecated]
        #[method(offsetWidth)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetWidth(&self) -> c_int;

        #[deprecated]
        #[method(offsetHeight)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetHeight(&self) -> c_int;

        #[method(clientLeft)]
        #[unsafe(method_family = none)]
        pub unsafe fn clientLeft(&self) -> c_int;

        #[method(clientTop)]
        #[unsafe(method_family = none)]
        pub unsafe fn clientTop(&self) -> c_int;

        #[deprecated]
        #[method(clientWidth)]
        #[unsafe(method_family = none)]
        pub unsafe fn clientWidth(&self) -> c_int;

        #[deprecated]
        #[method(clientHeight)]
        #[unsafe(method_family = none)]
        pub unsafe fn clientHeight(&self) -> c_int;

        #[deprecated]
        #[method(scrollLeft)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollLeft(&self) -> c_int;

        /// Setter for [`scrollLeft`][Self::scrollLeft].
        #[deprecated]
        #[method(setScrollLeft:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setScrollLeft(&self, scroll_left: c_int);

        #[deprecated]
        #[method(scrollTop)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollTop(&self) -> c_int;

        /// Setter for [`scrollTop`][Self::scrollTop].
        #[deprecated]
        #[method(setScrollTop:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setScrollTop(&self, scroll_top: c_int);

        #[deprecated]
        #[method(scrollWidth)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollWidth(&self) -> c_int;

        #[deprecated]
        #[method(scrollHeight)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollHeight(&self) -> c_int;

        #[deprecated]
        #[method(offsetParent)]
        #[unsafe(method_family = none)]
        pub unsafe fn offsetParent(&self) -> Option<Retained<DOMElement>>;

        #[deprecated]
        #[method(innerHTML)]
        #[unsafe(method_family = none)]
        pub unsafe fn innerHTML(&self) -> Retained<NSString>;

        /// Setter for [`innerHTML`][Self::innerHTML].
        #[deprecated]
        #[method(setInnerHTML:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setInnerHTML(&self, inner_html: Option<&NSString>);

        #[deprecated]
        #[method(outerHTML)]
        #[unsafe(method_family = none)]
        pub unsafe fn outerHTML(&self) -> Retained<NSString>;

        /// Setter for [`outerHTML`][Self::outerHTML].
        #[deprecated]
        #[method(setOuterHTML:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setOuterHTML(&self, outer_html: Option<&NSString>);

        #[deprecated]
        #[method(className)]
        #[unsafe(method_family = none)]
        pub unsafe fn className(&self) -> Retained<NSString>;

        /// Setter for [`className`][Self::className].
        #[deprecated]
        #[method(setClassName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setClassName(&self, class_name: Option<&NSString>);

        #[method(innerText)]
        #[unsafe(method_family = none)]
        pub unsafe fn innerText(&self) -> Retained<NSString>;

        #[method(previousElementSibling)]
        #[unsafe(method_family = none)]
        pub unsafe fn previousElementSibling(&self) -> Option<Retained<DOMElement>>;

        #[method(nextElementSibling)]
        #[unsafe(method_family = none)]
        pub unsafe fn nextElementSibling(&self) -> Option<Retained<DOMElement>>;

        #[method(firstElementChild)]
        #[unsafe(method_family = none)]
        pub unsafe fn firstElementChild(&self) -> Option<Retained<DOMElement>>;

        #[method(lastElementChild)]
        #[unsafe(method_family = none)]
        pub unsafe fn lastElementChild(&self) -> Option<Retained<DOMElement>>;

        #[method(childElementCount)]
        #[unsafe(method_family = none)]
        pub unsafe fn childElementCount(&self) -> c_uint;

        #[deprecated]
        #[method(getAttribute:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttribute(&self, name: Option<&NSString>) -> Option<Retained<NSString>>;

        #[method(setAttribute:value:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttribute_value(&self, name: Option<&NSString>, value: Option<&NSString>);

        #[deprecated]
        #[method(removeAttribute:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAttribute(&self, name: Option<&NSString>);

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[method(getAttributeNode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttributeNode(&self, name: Option<&NSString>)
            -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[method(setAttributeNode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributeNode(
            &self,
            new_attr: Option<&DOMAttr>,
        ) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[method(removeAttributeNode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAttributeNode(
            &self,
            old_attr: Option<&DOMAttr>,
        ) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMNodeList")]
        #[deprecated]
        #[method(getElementsByTagName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagName(
            &self,
            name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[method(getAttributeNS:localName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttributeNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<NSString>>;

        #[method(setAttributeNS:qualifiedName:value:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributeNS_qualifiedName_value(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
            value: Option<&NSString>,
        );

        #[method(removeAttributeNS:localName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAttributeNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        );

        #[cfg(feature = "DOMNodeList")]
        #[method(getElementsByTagNameNS:localName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagNameNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[cfg(feature = "DOMAttr")]
        #[method(getAttributeNodeNS:localName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttributeNodeNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[method(setAttributeNodeNS:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributeNodeNS(
            &self,
            new_attr: Option<&DOMAttr>,
        ) -> Option<Retained<DOMAttr>>;

        #[deprecated]
        #[method(hasAttribute:)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasAttribute(&self, name: Option<&NSString>) -> bool;

        #[method(hasAttributeNS:localName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasAttributeNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> bool;

        #[method(focus)]
        #[unsafe(method_family = none)]
        pub unsafe fn focus(&self);

        #[method(blur)]
        #[unsafe(method_family = none)]
        pub unsafe fn blur(&self);

        #[method(scrollIntoView:)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollIntoView(&self, align_with_top: bool);

        #[method(scrollIntoViewIfNeeded:)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollIntoViewIfNeeded(&self, center_if_needed: bool);

        #[cfg(feature = "DOMNodeList")]
        #[method(getElementsByClassName:)]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByClassName(
            &self,
            name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[method(webkitRequestFullScreen:)]
        #[unsafe(method_family = none)]
        pub unsafe fn webkitRequestFullScreen(&self, flags: c_ushort);

        #[method(querySelector:)]
        #[unsafe(method_family = none)]
        pub unsafe fn querySelector(
            &self,
            selectors: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMNodeList")]
        #[method(querySelectorAll:)]
        #[unsafe(method_family = none)]
        pub unsafe fn querySelectorAll(
            &self,
            selectors: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `DOMObject`
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMElement {
        #[deprecated]
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMElement {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// DOMElementDeprecated
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMElement {
        #[deprecated]
        #[method(setAttribute::)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttribute(&self, name: Option<&NSString>, value: Option<&NSString>);

        #[deprecated]
        #[method(getAttributeNS::)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttributeNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<NSString>>;

        #[deprecated]
        #[method(setAttributeNS:::)]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributeNS(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
            value: Option<&NSString>,
        );

        #[deprecated]
        #[method(removeAttributeNS::)]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAttributeNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        );

        #[cfg(feature = "DOMNodeList")]
        #[deprecated]
        #[method(getElementsByTagNameNS::)]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagNameNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[method(getAttributeNodeNS::)]
        #[unsafe(method_family = none)]
        pub unsafe fn getAttributeNodeNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMAttr>>;

        #[deprecated]
        #[method(hasAttributeNS::)]
        #[unsafe(method_family = none)]
        pub unsafe fn hasAttributeNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> bool;

        #[deprecated]
        #[method(scrollByLines:)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollByLines(&self, lines: c_int);

        #[deprecated]
        #[method(scrollByPages:)]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollByPages(&self, pages: c_int);
    }
);
