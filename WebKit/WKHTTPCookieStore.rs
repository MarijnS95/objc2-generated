//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/webkit/wkcookiepolicy?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKCookiePolicy(pub NSInteger);
impl WKCookiePolicy {
    #[doc(alias = "WKCookiePolicyAllow")]
    pub const Allow: Self = Self(0);
    #[doc(alias = "WKCookiePolicyDisallow")]
    pub const Disallow: Self = Self(1);
}

unsafe impl Encode for WKCookiePolicy {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for WKCookiePolicy {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/webkit/wkhttpcookiestoreobserver?language=objc)
    pub unsafe trait WKHTTPCookieStoreObserver: NSObjectProtocol + MainThreadOnly {
        #[optional]
        #[method(cookiesDidChangeInCookieStore:)]
        unsafe fn cookiesDidChangeInCookieStore(&self, cookie_store: &WKHTTPCookieStore);
    }
);

extern_class!(
    /// A WKHTTPCookieStore object allows managing the HTTP cookies associated with a particular WKWebsiteDataStore.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/wkhttpcookiestore?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKHTTPCookieStore;
);

unsafe impl NSObjectProtocol for WKHTTPCookieStore {}

extern_methods!(
    unsafe impl WKHTTPCookieStore {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// Fetches all stored cookies.
        ///
        /// Parameter `completionHandler`: A block to invoke with the fetched cookies.
        #[method(getAllCookies:)]
        pub unsafe fn getAllCookies(
            &self,
            completion_handler: &block2::Block<dyn Fn(NonNull<NSArray<NSHTTPCookie>>)>,
        );

        #[cfg(feature = "block2")]
        /// Set a cookie.
        ///
        /// Parameter `cookie`: The cookie to set.
        ///
        /// Parameter `completionHandler`: A block to invoke once the cookie has been stored.
        #[method(setCookie:completionHandler:)]
        pub unsafe fn setCookie_completionHandler(
            &self,
            cookie: &NSHTTPCookie,
            completion_handler: Option<&block2::Block<dyn Fn()>>,
        );

        #[cfg(feature = "block2")]
        /// Delete the specified cookie.
        ///
        /// Parameter `completionHandler`: A block to invoke once the cookie has been deleted.
        #[method(deleteCookie:completionHandler:)]
        pub unsafe fn deleteCookie_completionHandler(
            &self,
            cookie: &NSHTTPCookie,
            completion_handler: Option<&block2::Block<dyn Fn()>>,
        );

        /// Adds a WKHTTPCookieStoreObserver object with the cookie store.
        ///
        /// Parameter `observer`: The observer object to add.
        ///
        /// The observer is not retained by the receiver. It is your responsibility
        /// to unregister the observer before it becomes invalid.
        #[method(addObserver:)]
        pub unsafe fn addObserver(&self, observer: &ProtocolObject<dyn WKHTTPCookieStoreObserver>);

        /// Removes a WKHTTPCookieStoreObserver object from the cookie store.
        ///
        /// Parameter `observer`: The observer to remove.
        #[method(removeObserver:)]
        pub unsafe fn removeObserver(
            &self,
            observer: &ProtocolObject<dyn WKHTTPCookieStoreObserver>,
        );

        #[cfg(feature = "block2")]
        /// Set whether cookies are allowed.
        ///
        /// Parameter `policy`: A value indicating whether cookies are allowed. The default value is WKCookiePolicyAllow.
        ///
        /// Parameter `completionHandler`: A block to invoke once the cookie policy has been set.
        #[method(setCookiePolicy:completionHandler:)]
        pub unsafe fn setCookiePolicy_completionHandler(
            &self,
            policy: WKCookiePolicy,
            completion_handler: Option<&block2::Block<dyn Fn()>>,
        );

        #[cfg(feature = "block2")]
        /// Get whether cookies are allowed.
        ///
        /// Parameter `completionHandler`: A block to invoke with the value of whether cookies are allowed.
        #[method(getCookiePolicy:)]
        pub unsafe fn getCookiePolicy(
            &self,
            completion_handler: &block2::Block<dyn Fn(WKCookiePolicy)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKHTTPCookieStore {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
