//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/webkit/domhtmldocument?language=objc)
    #[unsafe(super(DOMDocument, DOMNode, DOMObject, WebScriptObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "DOMDocument",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    #[deprecated]
    pub struct DOMHTMLDocument;
);

#[cfg(all(
    feature = "DOMDocument",
    feature = "DOMEventTarget",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl DOMEventTarget for DOMHTMLDocument {}

#[cfg(all(
    feature = "DOMDocument",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSCopying for DOMHTMLDocument {}

#[cfg(all(
    feature = "DOMDocument",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl CopyingHelper for DOMHTMLDocument {
    type Result = Self;
}

#[cfg(all(
    feature = "DOMDocument",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSObjectProtocol for DOMHTMLDocument {}

extern_methods!(
    #[cfg(all(
        feature = "DOMDocument",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLDocument {
        #[cfg(feature = "DOMHTMLCollection")]
        #[method_id(embeds)]
        #[unsafe(method_family = none)]
        pub unsafe fn embeds(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[method_id(plugins)]
        #[unsafe(method_family = none)]
        pub unsafe fn plugins(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[method_id(scripts)]
        #[unsafe(method_family = none)]
        pub unsafe fn scripts(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[method(width)]
        pub unsafe fn width(&self) -> c_int;

        #[method(height)]
        pub unsafe fn height(&self) -> c_int;

        #[method_id(dir)]
        #[unsafe(method_family = none)]
        pub unsafe fn dir(&self) -> Retained<NSString>;

        /// Setter for [`dir`][Self::dir].
        #[method(setDir:)]
        pub unsafe fn setDir(&self, dir: Option<&NSString>);

        #[method_id(designMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn designMode(&self) -> Retained<NSString>;

        /// Setter for [`designMode`][Self::designMode].
        #[method(setDesignMode:)]
        pub unsafe fn setDesignMode(&self, design_mode: Option<&NSString>);

        #[method_id(compatMode)]
        #[unsafe(method_family = none)]
        pub unsafe fn compatMode(&self) -> Retained<NSString>;

        #[method_id(bgColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn bgColor(&self) -> Retained<NSString>;

        /// Setter for [`bgColor`][Self::bgColor].
        #[method(setBgColor:)]
        pub unsafe fn setBgColor(&self, bg_color: Option<&NSString>);

        #[method_id(fgColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn fgColor(&self) -> Retained<NSString>;

        /// Setter for [`fgColor`][Self::fgColor].
        #[method(setFgColor:)]
        pub unsafe fn setFgColor(&self, fg_color: Option<&NSString>);

        #[method_id(alinkColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn alinkColor(&self) -> Retained<NSString>;

        /// Setter for [`alinkColor`][Self::alinkColor].
        #[method(setAlinkColor:)]
        pub unsafe fn setAlinkColor(&self, alink_color: Option<&NSString>);

        #[method_id(linkColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn linkColor(&self) -> Retained<NSString>;

        /// Setter for [`linkColor`][Self::linkColor].
        #[method(setLinkColor:)]
        pub unsafe fn setLinkColor(&self, link_color: Option<&NSString>);

        #[method_id(vlinkColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn vlinkColor(&self) -> Retained<NSString>;

        /// Setter for [`vlinkColor`][Self::vlinkColor].
        #[method(setVlinkColor:)]
        pub unsafe fn setVlinkColor(&self, vlink_color: Option<&NSString>);

        #[deprecated]
        #[method(open)]
        pub unsafe fn open(&self);

        #[deprecated]
        #[method(close)]
        pub unsafe fn close(&self);

        #[deprecated]
        #[method(write:)]
        pub unsafe fn write(&self, text: Option<&NSString>);

        #[deprecated]
        #[method(writeln:)]
        pub unsafe fn writeln(&self, text: Option<&NSString>);

        #[method(clear)]
        pub unsafe fn clear(&self);

        #[method(captureEvents)]
        pub unsafe fn captureEvents(&self);

        #[method(releaseEvents)]
        pub unsafe fn releaseEvents(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `DOMObject`
    #[cfg(all(
        feature = "DOMDocument",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLDocument {
        #[deprecated]
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "DOMDocument",
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMHTMLDocument {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
