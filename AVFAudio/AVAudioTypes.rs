//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudioframeposition?language=objc)
pub type AVAudioFramePosition = i64;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudioframecount?language=objc)
pub type AVAudioFrameCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudiopacketcount?language=objc)
pub type AVAudioPacketCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudiochannelcount?language=objc)
pub type AVAudioChannelCount = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudionodecompletionhandler?language=objc)
#[cfg(feature = "block2")]
pub type AVAudioNodeCompletionHandler = *mut block2::Block<dyn Fn()>;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudionodebus?language=objc)
pub type AVAudioNodeBus = NSUInteger;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avmusictimestamp?language=objc)
pub type AVMusicTimeStamp = c_double;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudio3dpoint?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVAudio3DPoint {
    pub x: c_float,
    pub y: c_float,
    pub z: c_float,
}

unsafe impl Encode for AVAudio3DPoint {
    const ENCODING: Encoding = Encoding::Struct(
        "AVAudio3DPoint",
        &[
            <c_float>::ENCODING,
            <c_float>::ENCODING,
            <c_float>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for AVAudio3DPoint {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn AVAudioMake3DPoint(x: c_float,y: c_float,z: c_float,) -> AVAudio3DPoint;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudio3dvector?language=objc)
pub type AVAudio3DVector = AVAudio3DPoint;

// TODO: pub fn AVAudioMake3DVector(x: c_float,y: c_float,z: c_float,) -> AVAudio3DVector;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudio3dvectororientation?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVAudio3DVectorOrientation {
    pub forward: AVAudio3DVector,
    pub up: AVAudio3DVector,
}

unsafe impl Encode for AVAudio3DVectorOrientation {
    const ENCODING: Encoding = Encoding::Struct(
        "AVAudio3DVectorOrientation",
        &[<AVAudio3DVector>::ENCODING, <AVAudio3DVector>::ENCODING],
    );
}

unsafe impl RefEncode for AVAudio3DVectorOrientation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn AVAudioMake3DVectorOrientation(forward: AVAudio3DVector,up: AVAudio3DVector,) -> AVAudio3DVectorOrientation;

/// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudio3dangularorientation?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AVAudio3DAngularOrientation {
    pub yaw: c_float,
    pub pitch: c_float,
    pub roll: c_float,
}

unsafe impl Encode for AVAudio3DAngularOrientation {
    const ENCODING: Encoding = Encoding::Struct(
        "AVAudio3DAngularOrientation",
        &[
            <c_float>::ENCODING,
            <c_float>::ENCODING,
            <c_float>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for AVAudio3DAngularOrientation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn AVAudioMake3DAngularOrientation(yaw: c_float,pitch: c_float,roll: c_float,) -> AVAudio3DAngularOrientation;
