//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudioplayer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAudioPlayer;
);

unsafe impl NSObjectProtocol for AVAudioPlayer {}

extern_methods!(
    unsafe impl AVAudioPlayer {
        #[method_id(@__retain_semantics Init initWithContentsOfURL:error:_)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Init initWithData:error:_)]
        pub unsafe fn initWithData_error(
            this: Allocated<Self>,
            data: &NSData,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Init initWithContentsOfURL:fileTypeHint:error:_)]
        pub unsafe fn initWithContentsOfURL_fileTypeHint_error(
            this: Allocated<Self>,
            url: &NSURL,
            uti_string: Option<&NSString>,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(@__retain_semantics Init initWithData:fileTypeHint:error:_)]
        pub unsafe fn initWithData_fileTypeHint_error(
            this: Allocated<Self>,
            data: &NSData,
            uti_string: Option<&NSString>,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method(prepareToPlay)]
        pub unsafe fn prepareToPlay(&self) -> bool;

        #[method(play)]
        pub unsafe fn play(&self) -> bool;

        #[method(playAtTime:)]
        pub unsafe fn playAtTime(&self, time: NSTimeInterval) -> bool;

        #[method(pause)]
        pub unsafe fn pause(&self);

        #[method(stop)]
        pub unsafe fn stop(&self);

        #[method(isPlaying)]
        pub unsafe fn isPlaying(&self) -> bool;

        #[method(numberOfChannels)]
        pub unsafe fn numberOfChannels(&self) -> NSUInteger;

        #[method(duration)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        #[method_id(@__retain_semantics Other currentDevice)]
        pub unsafe fn currentDevice(&self) -> Option<Retained<NSString>>;

        #[method(setCurrentDevice:)]
        pub unsafe fn setCurrentDevice(&self, current_device: Option<&NSString>);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVAudioPlayerDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AVAudioPlayerDelegate>>,
        );

        #[method_id(@__retain_semantics Other url)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Option<Retained<NSData>>;

        #[method(pan)]
        pub unsafe fn pan(&self) -> c_float;

        #[method(setPan:)]
        pub unsafe fn setPan(&self, pan: c_float);

        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(setVolume:fadeDuration:)]
        pub unsafe fn setVolume_fadeDuration(&self, volume: c_float, duration: NSTimeInterval);

        #[method(enableRate)]
        pub unsafe fn enableRate(&self) -> bool;

        #[method(setEnableRate:)]
        pub unsafe fn setEnableRate(&self, enable_rate: bool);

        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[method(setRate:)]
        pub unsafe fn setRate(&self, rate: c_float);

        #[method(currentTime)]
        pub unsafe fn currentTime(&self) -> NSTimeInterval;

        #[method(setCurrentTime:)]
        pub unsafe fn setCurrentTime(&self, current_time: NSTimeInterval);

        #[method(deviceCurrentTime)]
        pub unsafe fn deviceCurrentTime(&self) -> NSTimeInterval;

        #[method(numberOfLoops)]
        pub unsafe fn numberOfLoops(&self) -> NSInteger;

        #[method(setNumberOfLoops:)]
        pub unsafe fn setNumberOfLoops(&self, number_of_loops: NSInteger);

        #[method_id(@__retain_semantics Other settings)]
        pub unsafe fn settings(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "AVAudioFormat")]
        #[method_id(@__retain_semantics Other format)]
        pub unsafe fn format(&self) -> Retained<AVAudioFormat>;

        #[method(isMeteringEnabled)]
        pub unsafe fn isMeteringEnabled(&self) -> bool;

        #[method(setMeteringEnabled:)]
        pub unsafe fn setMeteringEnabled(&self, metering_enabled: bool);

        #[method(updateMeters)]
        pub unsafe fn updateMeters(&self);

        #[method(peakPowerForChannel:)]
        pub unsafe fn peakPowerForChannel(&self, channel_number: NSUInteger) -> c_float;

        #[method(averagePowerForChannel:)]
        pub unsafe fn averagePowerForChannel(&self, channel_number: NSUInteger) -> c_float;

        #[cfg(feature = "AVAudioSessionRoute")]
        #[method_id(@__retain_semantics Other channelAssignments)]
        pub unsafe fn channelAssignments(
            &self,
        ) -> Option<Retained<NSArray<AVAudioSessionChannelDescription>>>;

        #[cfg(feature = "AVAudioSessionRoute")]
        #[method(setChannelAssignments:)]
        pub unsafe fn setChannelAssignments(
            &self,
            channel_assignments: Option<&NSArray<AVAudioSessionChannelDescription>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVAudioPlayer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfaudio/avaudioplayerdelegate?language=objc)
    pub unsafe trait AVAudioPlayerDelegate: NSObjectProtocol {
        #[optional]
        #[method(audioPlayerDidFinishPlaying:successfully:)]
        unsafe fn audioPlayerDidFinishPlaying_successfully(
            &self,
            player: &AVAudioPlayer,
            flag: bool,
        );

        #[optional]
        #[method(audioPlayerDecodeErrorDidOccur:error:)]
        unsafe fn audioPlayerDecodeErrorDidOccur_error(
            &self,
            player: &AVAudioPlayer,
            error: Option<&NSError>,
        );
    }

    unsafe impl ProtocolType for dyn AVAudioPlayerDelegate {}
);
