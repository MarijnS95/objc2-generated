//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// VSSubscriptionRegistrationCenter stores subscription information.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vssubscriptionregistrationcenter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct VSSubscriptionRegistrationCenter;
);

unsafe impl NSObjectProtocol for VSSubscriptionRegistrationCenter {}

impl VSSubscriptionRegistrationCenter {
    extern_methods!(
        /// Use the default subscription registration center to tell the system about
        /// the customer's ability to access content within your app.
        #[deprecated]
        #[unsafe(method(defaultSubscriptionRegistrationCenter))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultSubscriptionRegistrationCenter(
        ) -> Retained<VSSubscriptionRegistrationCenter>;

        #[cfg(feature = "VSSubscription")]
        /// Provide a subscription when the subscriber first authenticates, and when the
        /// subscription changes.
        ///
        /// When the subscriber signs out or otherwise loses access to subscription
        /// content, invoke this method with nil.
        ///
        /// You might also want to call this method opportunistically, if you happen to
        /// have just confirmed the validity of the subscription, or in response to app
        /// lifecycle events, e.g. when your app becomes active.  The system may use
        /// this activity as a hint that the user is actively using the subscription.
        ///
        /// It is an error to provide a current subscription with an unknown access
        /// level; you should not provide a subscription if the user only has access to
        /// content that is offered for free without any account requirements.
        #[deprecated]
        #[unsafe(method(setCurrentSubscription:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentSubscription(&self, current_subscription: Option<&VSSubscription>);
    );
}

/// Methods declared on superclass `NSObject`.
impl VSSubscriptionRegistrationCenter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
