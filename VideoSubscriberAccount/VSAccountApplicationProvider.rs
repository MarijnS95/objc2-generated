//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An object which provides an account provider to be added to the list of providers in your application.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsaccountapplicationprovider?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VSAccountApplicationProvider;
);

unsafe impl NSObjectProtocol for VSAccountApplicationProvider {}

impl VSAccountApplicationProvider {
    extern_methods!(
        /// Unavailable for this class.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Unavailable for this class.
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns an application provider using a given display name and identifier.
        /// Both the localizedDisplayName and identifier parameters must be non-empty strings.
        #[unsafe(method(initWithLocalizedDisplayName:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocalizedDisplayName_identifier(
            this: Allocated<Self>,
            localized_display_name: &NSString,
            identifier: &NSString,
        ) -> Retained<Self>;

        /// The display name of the provider as it will appear in the list of providers.
        #[unsafe(method(localizedDisplayName))]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedDisplayName(&self) -> Retained<NSString>;

        /// The identifier of the provider.
        /// If selected, this value is returned to your application.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;
    );
}
