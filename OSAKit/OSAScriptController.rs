//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct OSAScriptState(pub NSInteger);
impl OSAScriptState {
    pub const OSAScriptStopped: Self = Self(0);
    pub const OSAScriptRunning: Self = Self(1);
    pub const OSAScriptRecording: Self = Self(2);
}

unsafe impl Encode for OSAScriptState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for OSAScriptState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct OSAScriptController;

    unsafe impl ClassType for OSAScriptController {
        #[inherits(NSObject)]
        type Super = NSController;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSCoding for OSAScriptController {}

unsafe impl NSEditor for OSAScriptController {}

unsafe impl NSEditorRegistration for OSAScriptController {}

unsafe impl NSObjectProtocol for OSAScriptController {}

extern_methods!(
    unsafe impl OSAScriptController {
        #[cfg(feature = "OSAScriptView")]
        #[method_id(@__retain_semantics Other scriptView)]
        pub unsafe fn scriptView(&self) -> Option<Id<OSAScriptView>>;

        #[cfg(feature = "OSAScriptView")]
        #[method(setScriptView:)]
        pub unsafe fn setScriptView(&self, script_view: Option<&OSAScriptView>);

        #[method_id(@__retain_semantics Other resultView)]
        pub unsafe fn resultView(&self) -> Option<Id<NSTextView>>;

        #[method(setResultView:)]
        pub unsafe fn setResultView(&self, result_view: Option<&NSTextView>);

        #[cfg(feature = "OSAScript")]
        #[method_id(@__retain_semantics Other script)]
        pub unsafe fn script(&self) -> Option<Id<OSAScript>>;

        #[cfg(feature = "OSAScript")]
        #[method(setScript:)]
        pub unsafe fn setScript(&self, script: Option<&OSAScript>);

        #[cfg(feature = "OSALanguage")]
        #[method_id(@__retain_semantics Other language)]
        pub unsafe fn language(&self) -> Option<Id<OSALanguage>>;

        #[cfg(feature = "OSALanguage")]
        #[method(setLanguage:)]
        pub unsafe fn setLanguage(&self, language: Option<&OSALanguage>);

        #[method(scriptState)]
        pub unsafe fn scriptState(&self) -> OSAScriptState;

        #[method(isCompiling)]
        pub unsafe fn isCompiling(&self) -> bool;

        #[method(compileScript:)]
        pub unsafe fn compileScript(&self, sender: Option<&AnyObject>);

        #[method(recordScript:)]
        pub unsafe fn recordScript(&self, sender: Option<&AnyObject>);

        #[method(runScript:)]
        pub unsafe fn runScript(&self, sender: Option<&AnyObject>);

        #[method(stopScript:)]
        pub unsafe fn stopScript(&self, sender: Option<&AnyObject>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSController`
    unsafe impl OSAScriptController {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl OSAScriptController {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Id<Self>;
    }
);
