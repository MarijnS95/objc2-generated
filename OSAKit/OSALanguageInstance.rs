//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osalanguageinstance?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct OSALanguageInstance;
);

unsafe impl NSObjectProtocol for OSALanguageInstance {}

extern_methods!(
    unsafe impl OSALanguageInstance {
        #[cfg(feature = "OSALanguage")]
        #[unsafe(method_family(none))]
        #[method_id(languageInstanceWithLanguage:)]
        pub unsafe fn languageInstanceWithLanguage(language: &OSALanguage) -> Retained<Self>;

        #[cfg(feature = "OSALanguage")]
        #[unsafe(method_family(init))]
        #[method_id(initWithLanguage:)]
        pub unsafe fn initWithLanguage(
            this: Allocated<Self>,
            language: &OSALanguage,
        ) -> Retained<Self>;

        #[cfg(feature = "OSALanguage")]
        #[unsafe(method_family(none))]
        #[method_id(language)]
        pub unsafe fn language(&self) -> Retained<OSALanguage>;

        #[unsafe(method_family(none))]
        #[method_id(defaultTarget)]
        pub unsafe fn defaultTarget(&self) -> Option<Retained<NSAppleEventDescriptor>>;

        /// Setter for [`defaultTarget`][Self::defaultTarget].
        #[method(setDefaultTarget:)]
        pub unsafe fn setDefaultTarget(&self, default_target: Option<&NSAppleEventDescriptor>);

        #[unsafe(method_family(none))]
        #[method_id(richTextFromDescriptor:)]
        pub unsafe fn richTextFromDescriptor(
            &self,
            descriptor: &NSAppleEventDescriptor,
        ) -> Option<Retained<NSAttributedString>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl OSALanguageInstance {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
