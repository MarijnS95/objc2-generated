//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrormessagekey?language=objc)
    pub static OSAScriptErrorMessageKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorbriefmessagekey?language=objc)
    pub static OSAScriptErrorBriefMessageKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrornumberkey?language=objc)
    pub static OSAScriptErrorNumberKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorpartialresultkey?language=objc)
    pub static OSAScriptErrorPartialResultKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterroroffendingobjectkey?language=objc)
    pub static OSAScriptErrorOffendingObjectKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorexpectedtypekey?language=objc)
    pub static OSAScriptErrorExpectedTypeKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorappaddresskey?language=objc)
    pub static OSAScriptErrorAppAddressKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorappnamekey?language=objc)
    pub static OSAScriptErrorAppNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorrangekey?language=objc)
    pub static OSAScriptErrorRangeKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrormessage?language=objc)
    pub static OSAScriptErrorMessage: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrornumber?language=objc)
    pub static OSAScriptErrorNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorappname?language=objc)
    pub static OSAScriptErrorAppName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorbriefmessage?language=objc)
    pub static OSAScriptErrorBriefMessage: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascripterrorrange?language=objc)
    pub static OSAScriptErrorRange: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastoragescripttype?language=objc)
    pub static OSAStorageScriptType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastoragescriptbundletype?language=objc)
    pub static OSAStorageScriptBundleType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastorageapplicationtype?language=objc)
    pub static OSAStorageApplicationType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastorageapplicationbundletype?language=objc)
    pub static OSAStorageApplicationBundleType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastoragetexttype?language=objc)
    pub static OSAStorageTextType: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/osakit/osastorageoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct OSAStorageOptions(pub NSUInteger);
bitflags::bitflags! {
    impl OSAStorageOptions: NSUInteger {
        #[doc(alias = "OSANull")]
        const Null = 0x00000000;
        #[doc(alias = "OSAPreventGetSource")]
        const PreventGetSource = 0x00000001;
        #[doc(alias = "OSACompileIntoContext")]
        const CompileIntoContext = 0x00000002;
        #[doc(alias = "OSADontSetScriptLocation")]
        const DontSetScriptLocation = 0x01000000;
        #[doc(alias = "OSAStayOpenApplet")]
        const StayOpenApplet = 0x10000000;
        #[doc(alias = "OSAShowStartupScreen")]
        const ShowStartupScreen = 0x20000000;
    }
}

unsafe impl Encode for OSAStorageOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for OSAStorageOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/osakit/osascript?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct OSAScript;
);

unsafe impl NSCopying for OSAScript {}

unsafe impl CopyingHelper for OSAScript {
    type Result = Self;
}

unsafe impl NSObjectProtocol for OSAScript {}

extern_methods!(
    unsafe impl OSAScript {
        #[method_id(scriptDataDescriptorWithContentsOfURL:)]
        #[unsafe(method_family = none)]
        pub unsafe fn scriptDataDescriptorWithContentsOfURL(
            url: &NSURL,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method_id(initWithSource:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSource(this: Allocated<Self>, source: &NSString) -> Retained<Self>;

        #[cfg(feature = "OSALanguage")]
        #[method_id(initWithSource:language:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSource_language(
            this: Allocated<Self>,
            source: &NSString,
            language: Option<&OSALanguage>,
        ) -> Retained<Self>;

        #[cfg(feature = "OSALanguageInstance")]
        #[method_id(initWithSource:fromURL:languageInstance:usingStorageOptions:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSource_fromURL_languageInstance_usingStorageOptions(
            this: Allocated<Self>,
            source: &NSString,
            url: Option<&NSURL>,
            instance: Option<&OSALanguageInstance>,
            storage_options: OSAStorageOptions,
        ) -> Retained<Self>;

        #[method_id(initWithContentsOfURL:error:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            url: &NSURL,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "OSALanguage")]
        #[deprecated]
        #[method_id(initWithContentsOfURL:language:error:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_language_error(
            this: Allocated<Self>,
            url: &NSURL,
            language: &OSALanguage,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Retained<Self>;

        #[cfg(feature = "OSALanguageInstance")]
        #[method_id(initWithContentsOfURL:languageInstance:usingStorageOptions:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_languageInstance_usingStorageOptions_error(
            this: Allocated<Self>,
            url: &NSURL,
            instance: Option<&OSALanguageInstance>,
            storage_options: OSAStorageOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[deprecated]
        #[method_id(initWithCompiledData:error:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompiledData_error(
            this: Allocated<Self>,
            data: &NSData,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Retained<Self>;

        #[method_id(initWithCompiledData:fromURL:usingStorageOptions:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompiledData_fromURL_usingStorageOptions_error(
            this: Allocated<Self>,
            data: &NSData,
            url: Option<&NSURL>,
            storage_options: OSAStorageOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "OSALanguageInstance")]
        #[method_id(initWithScriptDataDescriptor:fromURL:languageInstance:usingStorageOptions:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithScriptDataDescriptor_fromURL_languageInstance_usingStorageOptions_error(
            this: Allocated<Self>,
            data: &NSAppleEventDescriptor,
            url: Option<&NSURL>,
            instance: Option<&OSALanguageInstance>,
            storage_options: OSAStorageOptions,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(source)]
        #[unsafe(method_family = none)]
        pub unsafe fn source(&self) -> Retained<NSString>;

        #[method_id(url)]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        #[cfg(feature = "OSALanguage")]
        #[method_id(language)]
        #[unsafe(method_family = none)]
        pub unsafe fn language(&self) -> Retained<OSALanguage>;

        #[cfg(feature = "OSALanguage")]
        /// Setter for [`language`][Self::language].
        #[method(setLanguage:)]
        pub unsafe fn setLanguage(&self, language: &OSALanguage);

        #[cfg(feature = "OSALanguageInstance")]
        #[method_id(languageInstance)]
        #[unsafe(method_family = none)]
        pub unsafe fn languageInstance(&self) -> Retained<OSALanguageInstance>;

        #[cfg(feature = "OSALanguageInstance")]
        /// Setter for [`languageInstance`][Self::languageInstance].
        #[method(setLanguageInstance:)]
        pub unsafe fn setLanguageInstance(&self, language_instance: &OSALanguageInstance);

        #[method(isCompiled)]
        pub unsafe fn isCompiled(&self) -> bool;

        #[method(compileAndReturnError:)]
        pub unsafe fn compileAndReturnError(
            &self,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> bool;

        #[method_id(executeAndReturnError:)]
        #[unsafe(method_family = none)]
        pub unsafe fn executeAndReturnError(
            &self,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method_id(executeAppleEvent:error:)]
        #[unsafe(method_family = none)]
        pub unsafe fn executeAppleEvent_error(
            &self,
            event: &NSAppleEventDescriptor,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method_id(executeAndReturnDisplayValue:error:)]
        #[unsafe(method_family = none)]
        pub unsafe fn executeAndReturnDisplayValue_error(
            &self,
            display_value: &mut Option<Retained<NSAttributedString>>,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method_id(executeHandlerWithName:arguments:error:)]
        #[unsafe(method_family = none)]
        pub unsafe fn executeHandlerWithName_arguments_error(
            &self,
            name: &NSString,
            arguments: &NSArray,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<NSAppleEventDescriptor>>;

        #[method_id(richTextSource)]
        #[unsafe(method_family = none)]
        pub unsafe fn richTextSource(&self) -> Option<Retained<NSAttributedString>>;

        #[method_id(richTextFromDescriptor:)]
        #[unsafe(method_family = none)]
        pub unsafe fn richTextFromDescriptor(
            &self,
            descriptor: &NSAppleEventDescriptor,
        ) -> Option<Retained<NSAttributedString>>;

        #[method(writeToURL:ofType:error:)]
        pub unsafe fn writeToURL_ofType_error(
            &self,
            url: &NSURL,
            r#type: &NSString,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> bool;

        #[method(writeToURL:ofType:usingStorageOptions:error:)]
        pub unsafe fn writeToURL_ofType_usingStorageOptions_error(
            &self,
            url: &NSURL,
            r#type: &NSString,
            storage_options: OSAStorageOptions,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> bool;

        #[method_id(compiledDataForType:usingStorageOptions:error:)]
        #[unsafe(method_family = none)]
        pub unsafe fn compiledDataForType_usingStorageOptions_error(
            &self,
            r#type: &NSString,
            storage_options: OSAStorageOptions,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<NSData>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl OSAScript {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
