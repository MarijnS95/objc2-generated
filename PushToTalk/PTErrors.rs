//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/pushtotalk/ptinstantiationerrordomain?language=objc)
    pub static PTInstantiationErrorDomain: Option<&'static NSErrorDomain>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/pushtotalk/ptchannelerrordomain?language=objc)
    pub static PTChannelErrorDomain: Option<&'static NSErrorDomain>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/pushtotalk/ptinstantiationerror?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PTInstantiationError(pub NSInteger);
impl PTInstantiationError {
    #[doc(alias = "PTInstantiationErrorUnknown")]
    pub const Unknown: Self = Self(0);
    /// The PushToTalk API is not available on the simulator or macOS devices
    #[doc(alias = "PTInstantiationErrorInvalidPlatform")]
    pub const InvalidPlatform: Self = Self(1);
    /// App is lacking the push-to-talk UIBackgroundMode
    #[doc(alias = "PTInstantiationErrorMissingBackgroundMode")]
    pub const MissingBackgroundMode: Self = Self(2);
    /// App is lacking apns-environment entitlement (Push Notifications Capability)
    #[doc(alias = "PTInstantiationErrorMissingPushServerEnvironment")]
    pub const MissingPushServerEnvironment: Self = Self(3);
    /// App is lacking the com.apple.developer.push-to-talk entitlement
    #[doc(alias = "PTInstantiationErrorMissingEntitlement")]
    pub const MissingEntitlement: Self = Self(4);
    /// There is already an in-flight instantiation request
    #[doc(alias = "PTInstantiationErrorInstantiationAlreadyInProgress")]
    pub const InstantiationAlreadyInProgress: Self = Self(5);
}

unsafe impl Encode for PTInstantiationError {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PTInstantiationError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/pushtotalk/ptchannelerror?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PTChannelError(pub NSInteger);
impl PTChannelError {
    #[doc(alias = "PTChannelErrorUnknown")]
    pub const Unknown: Self = Self(0);
    /// The action cannot be performed because there is no active channel with the supplied UUID
    #[doc(alias = "PTChannelErrorChannelNotFound")]
    pub const ChannelNotFound: Self = Self(1);
    /// There is a maximum of one active channel at a time, for the whole device
    #[doc(alias = "PTChannelErrorChannelLimitReached")]
    pub const ChannelLimitReached: Self = Self(2);
    /// A traditional call is ongoing, preventing the channel action
    #[doc(alias = "PTChannelErrorCallActive")]
    pub const CallActive: Self = Self(3);
    /// Setting a nonnil active participant is not posible while transmitting is ongoing.
    #[doc(alias = "PTChannelErrorTransmissionInProgress")]
    pub const TransmissionInProgress: Self = Self(4);
    /// Error for trying to end a transmission when no transmission is even started
    #[doc(alias = "PTChannelErrorTransmissionNotFound")]
    pub const TransmissionNotFound: Self = Self(5);
    /// Error for trying to join a channel or begin transmitting while app is not foreground
    #[doc(alias = "PTChannelErrorAppNotForeground")]
    pub const AppNotForeground: Self = Self(6);
    /// A device management policy or profile forbids joining the channel
    #[doc(alias = "PTChannelErrorDeviceManagementRestriction")]
    pub const DeviceManagementRestriction: Self = Self(7);
    /// A Screen Time restriction prevented the action
    #[doc(alias = "PTChannelErrorScreenTimeRestriction")]
    pub const ScreenTimeRestriction: Self = Self(8);
    /// A transmission is not allowed due to the current transmission mode of the channel
    #[doc(alias = "PTChannelErrorTransmissionNotAllowed")]
    pub const TransmissionNotAllowed: Self = Self(9);
}

unsafe impl Encode for PTChannelError {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PTChannelError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
