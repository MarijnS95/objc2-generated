//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-location")]
use objc2_core_location::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-map-kit")]
use objc2_map_kit::*;
#[cfg(feature = "objc2-photos")]
#[cfg(not(target_os = "watchos"))]
use objc2_photos::*;

use crate::*;

/// PHProjectCreationSource is provided as a hint to project extensions of the user context at the time of project creation.
/// For example, if a user is viewing a Memory in the Photos app and from that chooses the 'Create Project' option, the
/// creationSource provided in PHProjectInfo will be PHProjectCreationSourceMemory.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectcreationsource?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHProjectCreationSource(pub NSInteger);
impl PHProjectCreationSource {
    #[doc(alias = "PHProjectCreationSourceUndefined")]
    pub const Undefined: Self = Self(0);
    #[doc(alias = "PHProjectCreationSourceUserSelection")]
    pub const UserSelection: Self = Self(1);
    #[doc(alias = "PHProjectCreationSourceAlbum")]
    pub const Album: Self = Self(2);
    #[doc(alias = "PHProjectCreationSourceMemory")]
    pub const Memory: Self = Self(3);
    #[doc(alias = "PHProjectCreationSourceMoment")]
    pub const Moment: Self = Self(4);
    #[doc(alias = "PHProjectCreationSourceProject")]
    pub const Project: Self = Self(20);
    #[doc(alias = "PHProjectCreationSourceProjectBook")]
    pub const ProjectBook: Self = Self(21);
    #[doc(alias = "PHProjectCreationSourceProjectCalendar")]
    pub const ProjectCalendar: Self = Self(22);
    #[doc(alias = "PHProjectCreationSourceProjectCard")]
    pub const ProjectCard: Self = Self(23);
    #[doc(alias = "PHProjectCreationSourceProjectPrintOrder")]
    pub const ProjectPrintOrder: Self = Self(24);
    #[doc(alias = "PHProjectCreationSourceProjectSlideshow")]
    pub const ProjectSlideshow: Self = Self(25);
    #[doc(alias = "PHProjectCreationSourceProjectExtension")]
    pub const ProjectExtension: Self = Self(26);
}

unsafe impl Encode for PHProjectCreationSource {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHProjectCreationSource {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A PHProjectInfo object is created by Photos and passed along with a PHProjectExtensionContext any time Photos
    /// creates a new project. It comprises the complete content description which a Photos Project Extension can
    /// leverage to influence things like project layout, auto-flow, or theme selection. The properties in this class
    /// are inmutable and the class cannot be instatiated by an extension directly.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectinfo?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectInfo;
);

unsafe impl Send for PHProjectInfo {}

unsafe impl Sync for PHProjectInfo {}

unsafe impl NSCoding for PHProjectInfo {}

unsafe impl NSObjectProtocol for PHProjectInfo {}

unsafe impl NSSecureCoding for PHProjectInfo {}

extern_methods!(
    unsafe impl PHProjectInfo {
        /// Source from which the project was created.
        #[method(creationSource)]
        pub unsafe fn creationSource(&self) -> PHProjectCreationSource;

        #[cfg(feature = "PhotosUITypes")]
        /// Selected projectType value from the extensions options as defined in -[PHProjectExtensionController supportedProjectTypes].
        /// See PHProjectExtensionController.h for more information on configuring the options.
        #[method_id(projectType)]
        #[unsafe(method_family = none)]
        pub unsafe fn projectType(&self) -> Retained<PHProjectType>;

        /// Array of project sections each containing one or more PHProjectSectionContent objects.
        #[method_id(sections)]
        #[unsafe(method_family = none)]
        pub unsafe fn sections(&self) -> Retained<NSArray<PHProjectSection>>;

        /// The following properties are only used when the user creates a new project from an existing Apple Print Product.
        ///
        /// YES if the source project had branding enabled.
        #[method(brandingEnabled)]
        pub unsafe fn brandingEnabled(&self) -> bool;

        /// YES if the source project had page numbers enabled.
        #[method(pageNumbersEnabled)]
        pub unsafe fn pageNumbersEnabled(&self) -> bool;

        /// The product identifier of the originating Apple Print Product.
        #[method_id(productIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn productIdentifier(&self) -> Option<Retained<NSString>>;

        /// The product theme identifier of the originating Apple Print Product.
        #[method_id(themeIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn themeIdentifier(&self) -> Option<Retained<NSString>>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// Options for the sectionType property in PHProjectSection which provides a hint to a section's intended usage.
///
/// - PHProjectSectionTypeUndefined: used when there is only one section and no suggested pagination or project construction
/// - PHProjectSectionTypeCover: represents the cover or title section of a project
/// - PHProjectSectionTypeContent: any section representing general content in a project
/// - PHProjectSectionTypeAuxiliary: auxiliary content (for example, cover flap in a book)
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectsectiontype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHProjectSectionType(pub NSInteger);
impl PHProjectSectionType {
    #[doc(alias = "PHProjectSectionTypeUndefined")]
    pub const Undefined: Self = Self(0);
    #[doc(alias = "PHProjectSectionTypeCover")]
    pub const Cover: Self = Self(1);
    #[doc(alias = "PHProjectSectionTypeContent")]
    pub const Content: Self = Self(2);
    #[doc(alias = "PHProjectSectionTypeAuxiliary")]
    pub const Auxiliary: Self = Self(3);
}

unsafe impl Encode for PHProjectSectionType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHProjectSectionType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

unsafe impl Send for PHProjectSectionType {}

unsafe impl Sync for PHProjectSectionType {}

extern_class!(
    /// A PHProjectSection object represents a collection of content for the project including asset elements and text elements.
    /// Each section contains one or more PHProjectSectionContent objects which provide suggested levels of "curation" for the
    /// content contained in the section. The number of sections included in PHProjectInfo will vary depending on the
    /// creation source at the time of the project initiation. For example:
    /// - if user creates a project from a Memory, there will be one cover section with a key asset element and titling, plus one section containing multiple levels of curation that mirror the "Show Summary" and "Show More" options of the Memory
    /// - if user creates a project from a single Album, the project info may only contain one section unless the album contains a large quantity of photos in which case, Photos may suggest section breaks based on Moments in the user's library
    /// - if user creates a project from an existing Apple Book, Card, or Calendar, the sections provided in the project info will exactly match the pagination in that project (e.g., one section per page in a book).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectsection?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectSection;
);

unsafe impl Send for PHProjectSection {}

unsafe impl Sync for PHProjectSection {}

unsafe impl NSCoding for PHProjectSection {}

unsafe impl NSObjectProtocol for PHProjectSection {}

unsafe impl NSSecureCoding for PHProjectSection {}

extern_methods!(
    unsafe impl PHProjectSection {
        /// Array containing one or more PHProjectSectionContent objects. Ordered by number of elements from least to most.
        /// Projects should only present one level of content to the user at a time as assets will be reused within
        /// individual content objects.
        #[method_id(sectionContents)]
        #[unsafe(method_family = none)]
        pub unsafe fn sectionContents(&self) -> Retained<NSArray<PHProjectSectionContent>>;

        /// The intended usage of the section (e.g., cover, content, auxiliary)
        #[method(sectionType)]
        pub unsafe fn sectionType(&self) -> PHProjectSectionType;

        /// Title for the section (e.g., a Moment name or a general geographical location), might be an empty string.
        #[method_id(title)]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A PHProjectSectionContent object contains all the elements and suggested layout information for a specific
    /// level of curation within a PHProjectSection. A section can provide multiple content objects, but
    /// only one is intended to be used in a project based on the amount of content detail desired.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectsectioncontent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectSectionContent;
);

unsafe impl Send for PHProjectSectionContent {}

unsafe impl Sync for PHProjectSectionContent {}

unsafe impl NSCoding for PHProjectSectionContent {}

unsafe impl NSObjectProtocol for PHProjectSectionContent {}

unsafe impl NSSecureCoding for PHProjectSectionContent {}

extern_methods!(
    unsafe impl PHProjectSectionContent {
        /// Array of asset, text, or journal entry elements contained in the content.
        #[method_id(elements)]
        #[unsafe(method_family = none)]
        pub unsafe fn elements(&self) -> Retained<NSArray<PHProjectElement>>;

        /// The suggested layout of the content is provided in resolution-independent "grid space" units
        /// where one grid space is the width of the defined project canvas divided by numberOfColumns.
        /// If a project represents a "fixed layout" (e.g., it was created from an existing Apple Book, Card, or Calendar)
        /// the specified numberOfColumns will always be 1.
        #[method(numberOfColumns)]
        pub unsafe fn numberOfColumns(&self) -> NSInteger;

        /// Overall aspect ratio of the full content layout (width/height) to enable faithful replication in the project's layout.
        #[method(aspectRatio)]
        pub unsafe fn aspectRatio(&self) -> c_double;

        #[cfg(feature = "objc2-photos")]
        #[cfg(not(target_os = "watchos"))]
        /// Convenience for getting a single array of all cloud asset identifiers referenced in the content without needing to enumerate elements.
        #[method_id(cloudAssetIdentifiers)]
        #[unsafe(method_family = none)]
        pub unsafe fn cloudAssetIdentifiers(&self) -> Retained<NSArray<PHCloudIdentifier>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Background color of the section content.
        /// This property is only used when the user creates a new project from an existing Apple Print Product
        #[method_id(backgroundColor)]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundColor(&self) -> Option<Retained<NSColor>>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// PHProjectElement is the superclass for all element objects. It is never directly used, but defines the shared
    /// properties of any element in an instance of PHProjectSectionContent.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectElement;
);

unsafe impl Send for PHProjectElement {}

unsafe impl Sync for PHProjectElement {}

unsafe impl NSCoding for PHProjectElement {}

unsafe impl NSObjectProtocol for PHProjectElement {}

unsafe impl NSSecureCoding for PHProjectElement {}

extern_methods!(
    unsafe impl PHProjectElement {
        /// Relative significance of any element in the section content is defined by it's weight.
        /// Values range from 0.0 to 1.0 where the higher numbers represent higher overall significance.
        /// Projects that allow a user to reduce the number of elements in any section content can use
        /// this hint to determine which elements are most important to keep in order to preserve context.
        /// Default is 0.5.
        #[method(weight)]
        pub unsafe fn weight(&self) -> c_double;

        #[cfg(feature = "objc2-core-foundation")]
        /// Placement of elements in the suggested layout is provided in grid space coordinates. For example, a rect of (0,0,3,4)
        /// represents a placement in the upper-left of the layout grid that is 3 grid units wide by 4 grid units high.
        /// For layout grids with more than one column, the values in the rect will always be integral. For fixed layouts,
        /// rect values will be in fractional unit values. If suggested placement could not be determined at time of project
        /// creation, placement will contain CGRectNull.
        #[method(placement)]
        pub unsafe fn placement(&self) -> CGRect;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectregionofinterestidentifier?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type PHProjectRegionOfInterestIdentifier = NSString;

extern_class!(
    /// In PHProjectAssetElement objects, an array of PHProjectRegionOfInterest objects may be provided.
    /// These regions represent specific areas in an asset that have signficant meaning. For example, faces
    /// that are relevant to the user (as opposed to faces in a crowd) will be highlighted in the asset
    /// to help with things like auto-pan, auto-zoom, or focusing on specific areas in the asset during animations or
    /// transitions. Regions representing the same person or object across multiple assets are cross-referenced through
    /// the use of the identifier.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectregionofinterest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectRegionOfInterest;
);

unsafe impl NSCoding for PHProjectRegionOfInterest {}

unsafe impl NSObjectProtocol for PHProjectRegionOfInterest {}

unsafe impl NSSecureCoding for PHProjectRegionOfInterest {}

extern_methods!(
    unsafe impl PHProjectRegionOfInterest {
        #[cfg(feature = "objc2-core-foundation")]
        #[method(rect)]
        pub unsafe fn rect(&self) -> CGRect;

        /// Significance of the regionOfInterest in the overall project context is provided as a weight score.
        /// All regions of interest with the same identifier in the project have the same weight.
        /// For projects doing things like animation or transition between assets, focusing on the highest weighted
        /// regions of interest will ensure that the presentation represents something that is most meaningful to the user.
        /// Value range is a double between 0.0 and 1.0.
        /// Default is 0.5.
        #[method(weight)]
        pub unsafe fn weight(&self) -> c_double;

        /// Quality of the represented region of interest in the asset.
        /// Different regions of interest with the same identifier may have different quality values.
        /// If the project wants to decide between multiple assets containing the same region of interest,
        /// the quality score can be used to pick the best representation of the region of interest.
        /// Value range is a double between 0.0 and 1.0.
        #[method(quality)]
        pub unsafe fn quality(&self) -> c_double;

        /// Identifier of the region of interest. Regions representing the same person or object will have
        /// the same identifier across multiple assets.
        #[method_id(identifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<PHProjectRegionOfInterestIdentifier>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A PHProjectAssetElement object represents a media asset within a PHProjectSectionContent.
    /// The underlying PHAsset can be accessed by converting the provided cloudAssetIdentifier to a localIdentifier,
    /// then using the fetchAssetsWithLocalIdentifiers:options: class method defined in PHAsset.h.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectassetelement?language=objc)
    #[unsafe(super(PHProjectElement, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectAssetElement;
);

unsafe impl Send for PHProjectAssetElement {}

unsafe impl Sync for PHProjectAssetElement {}

unsafe impl NSCoding for PHProjectAssetElement {}

unsafe impl NSObjectProtocol for PHProjectAssetElement {}

unsafe impl NSSecureCoding for PHProjectAssetElement {}

extern_methods!(
    unsafe impl PHProjectAssetElement {
        #[cfg(feature = "objc2-photos")]
        #[cfg(not(target_os = "watchos"))]
        /// Cloud identifier for the underlying PHAsset. This identifier must be converted to a localIdentifier
        /// before fetching, but if archiving the identifier in project data the provided PHCloudIdentifier should always be used.
        #[method_id(cloudAssetIdentifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn cloudAssetIdentifier(&self) -> Retained<PHCloudIdentifier>;

        /// If a user has explicitly annotated an asset (e.g., caption) that value will be provided in this property.
        #[method_id(annotation)]
        #[unsafe(method_family = none)]
        pub unsafe fn annotation(&self) -> Retained<NSString>;

        #[cfg(feature = "objc2-core-foundation")]
        /// If the asset was presented to the user in a cropped manner in Photos either automatically or
        /// through user manipulation (pan
        /// &
        /// zoom) before the creation of the project, the visible image
        /// area shown to the user will be provided as a crop rect. As a fallback, Photos may suggest a general
        /// "safe crop" based on image content through this property. The rect is in unit coordinates with an upper left origin.
        /// Default value: {(0.0, 0.0), (1.0,1.0)}
        #[method(cropRect)]
        pub unsafe fn cropRect(&self) -> CGRect;

        /// Array of regions of interest (faces, objects, etc.) in the assets.
        /// Note: Photos will filter out features of an asset that it doesn't believe to be meaningful in the context
        /// of the user's full library. For example, random faces in a crowd.
        #[method_id(regionsOfInterest)]
        #[unsafe(method_family = none)]
        pub unsafe fn regionsOfInterest(&self) -> Retained<NSArray<PHProjectRegionOfInterest>>;

        /// The following properties are only used when the user creates a new project from an existing Apple Print Product.
        ///
        /// YES if the asset was presented horizontally flipped in the originating project.
        #[method(horizontallyFlipped)]
        pub unsafe fn horizontallyFlipped(&self) -> bool;

        /// YES if the asset was presented vertically flipped in the originating project.
        #[method(verticallyFlipped)]
        pub unsafe fn verticallyFlipped(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `PHProjectElement`
    unsafe impl PHProjectAssetElement {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// Options for PHProjectTextElementType
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojecttextelementtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHProjectTextElementType(pub NSInteger);
impl PHProjectTextElementType {
    #[doc(alias = "PHProjectTextElementTypeBody")]
    pub const Body: Self = Self(0);
    #[doc(alias = "PHProjectTextElementTypeTitle")]
    pub const Title: Self = Self(1);
    #[doc(alias = "PHProjectTextElementTypeSubtitle")]
    pub const Subtitle: Self = Self(2);
}

unsafe impl Encode for PHProjectTextElementType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHProjectTextElementType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

unsafe impl Send for PHProjectTextElementType {}

unsafe impl Sync for PHProjectTextElementType {}

extern_class!(
    /// A PHProjectTextElement object represents formatted, positioned text that should be considered
    /// for inclusion in a project. In this case of a Memory, this will always be the Title and Subtitle show in the
    /// Memory header view. For projects created from Apple Book, Card, and Calendar projects, text appearing on any page.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojecttextelement?language=objc)
    #[unsafe(super(PHProjectElement, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectTextElement;
);

unsafe impl Send for PHProjectTextElement {}

unsafe impl Sync for PHProjectTextElement {}

unsafe impl NSCoding for PHProjectTextElement {}

unsafe impl NSObjectProtocol for PHProjectTextElement {}

unsafe impl NSSecureCoding for PHProjectTextElement {}

extern_methods!(
    unsafe impl PHProjectTextElement {
        /// Unformatted, raw string for the text element
        #[method_id(text)]
        #[unsafe(method_family = none)]
        pub unsafe fn text(&self) -> Retained<NSString>;

        /// If the text was presented to the user in a stylized manner in Photos,
        /// attributedText will provide access to those same attributes.
        #[method_id(attributedText)]
        #[unsafe(method_family = none)]
        pub unsafe fn attributedText(&self) -> Option<Retained<NSAttributedString>>;

        #[method(textElementType)]
        pub unsafe fn textElementType(&self) -> PHProjectTextElementType;
    }
);

extern_methods!(
    /// Methods declared on superclass `PHProjectElement`
    unsafe impl PHProjectTextElement {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A PHProjectJournalEntryElement object represents auxilary, date specific information that may be interesting
    /// to include in a project. For example, callouts for specific birthdays or holidays. In general, these will only
    /// be included for projects created from existing Apple Calendar projects.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectjournalentryelement?language=objc)
    #[unsafe(super(PHProjectElement, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectJournalEntryElement;
);

unsafe impl Send for PHProjectJournalEntryElement {}

unsafe impl Sync for PHProjectJournalEntryElement {}

unsafe impl NSCoding for PHProjectJournalEntryElement {}

unsafe impl NSObjectProtocol for PHProjectJournalEntryElement {}

unsafe impl NSSecureCoding for PHProjectJournalEntryElement {}

extern_methods!(
    unsafe impl PHProjectJournalEntryElement {
        /// Date to which the provided asset and/or text pertain
        #[method_id(date)]
        #[unsafe(method_family = none)]
        pub unsafe fn date(&self) -> Retained<NSDate>;

        /// Representative asset, if any, for that date.
        #[method_id(assetElement)]
        #[unsafe(method_family = none)]
        pub unsafe fn assetElement(&self) -> Option<Retained<PHProjectAssetElement>>;

        /// Descriptive text (e.g., "Mom's Birthday") for that date.
        #[method_id(textElement)]
        #[unsafe(method_family = none)]
        pub unsafe fn textElement(&self) -> Option<Retained<PHProjectTextElement>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `PHProjectElement`
    unsafe impl PHProjectJournalEntryElement {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A PHProjectMapElement object representing a map with annotations.
    /// In general, these will only be included for projects created from existing Apple Print Product projects.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phprojectmapelement?language=objc)
    #[unsafe(super(PHProjectElement, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHProjectMapElement;
);

unsafe impl Send for PHProjectMapElement {}

unsafe impl Sync for PHProjectMapElement {}

unsafe impl NSCoding for PHProjectMapElement {}

unsafe impl NSObjectProtocol for PHProjectMapElement {}

unsafe impl NSSecureCoding for PHProjectMapElement {}

extern_methods!(
    unsafe impl PHProjectMapElement {
        #[cfg(feature = "objc2-map-kit")]
        /// The type of the map in the project.
        #[method(mapType)]
        pub unsafe fn mapType(&self) -> MKMapType;

        #[cfg(feature = "objc2-core-location")]
        #[method(centerCoordinate)]
        pub unsafe fn centerCoordinate(&self) -> CLLocationCoordinate2D;

        #[cfg(feature = "objc2-core-location")]
        #[method(heading)]
        pub unsafe fn heading(&self) -> CLLocationDirection;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(pitch)]
        pub unsafe fn pitch(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-location")]
        #[method(altitude)]
        pub unsafe fn altitude(&self) -> CLLocationDistance;

        #[cfg(feature = "objc2-map-kit")]
        #[method_id(annotations)]
        #[unsafe(method_family = none)]
        pub unsafe fn annotations(&self) -> Retained<NSArray<ProtocolObject<dyn MKAnnotation>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `PHProjectElement`
    unsafe impl PHProjectMapElement {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
