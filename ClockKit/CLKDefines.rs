//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationfamily?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationFamily(pub NSInteger);
impl CLKComplicationFamily {
    #[doc(alias = "CLKComplicationFamilyModularSmall")]
    pub const ModularSmall: Self = Self(0);
    #[doc(alias = "CLKComplicationFamilyModularLarge")]
    pub const ModularLarge: Self = Self(1);
    #[doc(alias = "CLKComplicationFamilyUtilitarianSmall")]
    pub const UtilitarianSmall: Self = Self(2);
    #[doc(alias = "CLKComplicationFamilyUtilitarianSmallFlat")]
    pub const UtilitarianSmallFlat: Self = Self(6);
    #[doc(alias = "CLKComplicationFamilyUtilitarianLarge")]
    pub const UtilitarianLarge: Self = Self(3);
    #[doc(alias = "CLKComplicationFamilyCircularSmall")]
    pub const CircularSmall: Self = Self(4);
    #[doc(alias = "CLKComplicationFamilyExtraLarge")]
    pub const ExtraLarge: Self = Self(7);
    #[doc(alias = "CLKComplicationFamilyGraphicCorner")]
    pub const GraphicCorner: Self = Self(8);
    #[doc(alias = "CLKComplicationFamilyGraphicBezel")]
    pub const GraphicBezel: Self = Self(9);
    #[doc(alias = "CLKComplicationFamilyGraphicCircular")]
    pub const GraphicCircular: Self = Self(10);
    #[doc(alias = "CLKComplicationFamilyGraphicRectangular")]
    pub const GraphicRectangular: Self = Self(11);
    #[doc(alias = "CLKComplicationFamilyGraphicExtraLarge")]
    pub const GraphicExtraLarge: Self = Self(12);
}

unsafe impl Encode for CLKComplicationFamily {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationFamily {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationtimetraveldirections?language=objc)
// NS_OPTIONS
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationTimeTravelDirections(pub NSUInteger);
bitflags::bitflags! {
    impl CLKComplicationTimeTravelDirections: NSUInteger {
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[doc(alias = "CLKComplicationTimeTravelDirectionNone")]
        const None = 0;
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[doc(alias = "CLKComplicationTimeTravelDirectionForward")]
        const Forward = 1<<0;
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[doc(alias = "CLKComplicationTimeTravelDirectionBackward")]
        const Backward = 1<<1;
    }
}

unsafe impl Encode for CLKComplicationTimeTravelDirections {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationTimeTravelDirections {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationprivacybehavior?language=objc)
// NS_ENUM
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationPrivacyBehavior(pub NSUInteger);
impl CLKComplicationPrivacyBehavior {
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationPrivacyBehaviorShowOnLockScreen")]
    pub const ShowOnLockScreen: Self = Self(0);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationPrivacyBehaviorHideOnLockScreen")]
    pub const HideOnLockScreen: Self = Self(1);
}

unsafe impl Encode for CLKComplicationPrivacyBehavior {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationPrivacyBehavior {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationtimelineanimationbehavior?language=objc)
// NS_ENUM
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationTimelineAnimationBehavior(pub NSUInteger);
impl CLKComplicationTimelineAnimationBehavior {
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationTimelineAnimationBehaviorNever")]
    pub const Never: Self = Self(0);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationTimelineAnimationBehaviorGrouped")]
    pub const Grouped: Self = Self(1);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationTimelineAnimationBehaviorAlways")]
    pub const Always: Self = Self(2);
}

unsafe impl Encode for CLKComplicationTimelineAnimationBehavior {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationTimelineAnimationBehavior {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationcolumnalignment?language=objc)
// NS_ENUM
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationColumnAlignment(pub NSInteger);
impl CLKComplicationColumnAlignment {
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationColumnAlignmentLeading")]
    pub const Leading: Self = Self(0);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationColumnAlignmentTrailing")]
    pub const Trailing: Self = Self(1);
    #[deprecated]
    #[doc(alias = "CLKComplicationColumnAlignmentLeft")]
    pub const Left: Self = Self(CLKComplicationColumnAlignment::Leading.0);
    #[deprecated]
    #[doc(alias = "CLKComplicationColumnAlignmentRight")]
    pub const Right: Self = Self(CLKComplicationColumnAlignment::Trailing.0);
}

unsafe impl Encode for CLKComplicationColumnAlignment {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationColumnAlignment {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationringstyle?language=objc)
// NS_ENUM
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKComplicationRingStyle(pub NSInteger);
impl CLKComplicationRingStyle {
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationRingStyleClosed")]
    pub const Closed: Self = Self(0);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKComplicationRingStyleOpen")]
    pub const Open: Self = Self(1);
}

unsafe impl Encode for CLKComplicationRingStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CLKComplicationRingStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkgaugeproviderstyle?language=objc)
// NS_ENUM
#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CLKGaugeProviderStyle(pub NSInteger);
impl CLKGaugeProviderStyle {
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKGaugeProviderStyleRing")]
    pub const Ring: Self = Self(0);
    #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
    #[doc(alias = "CLKGaugeProviderStyleFill")]
    pub const Fill: Self = Self(1);
}

unsafe impl Encode for CLKGaugeProviderStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CLKGaugeProviderStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clksimplegaugeproviderfillfractionempty?language=objc)
    pub static CLKSimpleGaugeProviderFillFractionEmpty: c_float;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clklaunchedtimelineentrydatekey?language=objc)
    pub static CLKLaunchedTimelineEntryDateKey: Option<&'static NSString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clklaunchedcomplicationidentifierkey?language=objc)
    pub static CLKLaunchedComplicationIdentifierKey: Option<&'static NSString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkdefaultcomplicationidentifier?language=objc)
    pub static CLKDefaultComplicationIdentifier: Option<&'static NSString>;
}

#[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
#[inline]
pub unsafe extern "C-unwind" fn CLKAllComplicationFamilies() -> Option<Retained<NSArray<NSNumber>>>
{
    extern "C-unwind" {
        fn CLKAllComplicationFamilies() -> *mut NSArray<NSNumber>;
    }
    let ret = unsafe { CLKAllComplicationFamilies() };
    unsafe { Retained::retain_autoreleased(ret) }
}
