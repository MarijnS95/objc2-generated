//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdeviceinstrumentid?language=objc)
pub type MusicDeviceInstrumentID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicestdnoteparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MusicDeviceStdNoteParams {
    pub argCount: u32,
    pub mPitch: f32,
    pub mVelocity: f32,
}

unsafe impl Encode for MusicDeviceStdNoteParams {
    const ENCODING: Encoding = Encoding::Struct(
        "MusicDeviceStdNoteParams",
        &[<u32>::ENCODING, <f32>::ENCODING, <f32>::ENCODING],
    );
}

unsafe impl RefEncode for MusicDeviceStdNoteParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/noteparamscontrolvalue?language=objc)
#[cfg(feature = "AUComponent")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct NoteParamsControlValue {
    pub mID: AudioUnitParameterID,
    pub mValue: AudioUnitParameterValue,
}

#[cfg(feature = "AUComponent")]
unsafe impl Encode for NoteParamsControlValue {
    const ENCODING: Encoding = Encoding::Struct(
        "NoteParamsControlValue",
        &[
            <AudioUnitParameterID>::ENCODING,
            <AudioUnitParameterValue>::ENCODING,
        ],
    );
}

#[cfg(feature = "AUComponent")]
unsafe impl RefEncode for NoteParamsControlValue {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicenoteparams?language=objc)
#[cfg(feature = "AUComponent")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MusicDeviceNoteParams {
    pub argCount: u32,
    pub mPitch: f32,
    pub mVelocity: f32,
    pub mControls: [NoteParamsControlValue; 1],
}

#[cfg(feature = "AUComponent")]
unsafe impl Encode for MusicDeviceNoteParams {
    const ENCODING: Encoding = Encoding::Struct(
        "MusicDeviceNoteParams",
        &[
            <u32>::ENCODING,
            <f32>::ENCODING,
            <f32>::ENCODING,
            <[NoteParamsControlValue; 1]>::ENCODING,
        ],
    );
}

#[cfg(feature = "AUComponent")]
unsafe impl RefEncode for MusicDeviceNoteParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicnoteevent_usegroupinstrument?language=objc)
pub const kMusicNoteEvent_UseGroupInstrument: c_uint = 0xFFFFFFFF;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicnoteevent_unused?language=objc)
pub const kMusicNoteEvent_Unused: c_uint = 0xFFFFFFFF;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicegroupid?language=objc)
pub type MusicDeviceGroupID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/noteinstanceid?language=objc)
pub type NoteInstanceID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicecomponent?language=objc)
#[cfg(feature = "AudioComponent")]
pub type MusicDeviceComponent = AudioComponentInstance;

extern "C-unwind" {
    #[cfg(feature = "AudioComponent")]
    pub fn MusicDeviceMIDIEvent(
        in_unit: MusicDeviceComponent,
        in_status: u32,
        in_data1: u32,
        in_data2: u32,
        in_offset_sample_frame: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "AudioComponent")]
    pub fn MusicDeviceSysEx(
        in_unit: MusicDeviceComponent,
        in_data: NonNull<u8>,
        in_length: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
    pub fn MusicDeviceStartNote(
        in_unit: MusicDeviceComponent,
        in_instrument: MusicDeviceInstrumentID,
        in_group_id: MusicDeviceGroupID,
        out_note_instance_id: NonNull<NoteInstanceID>,
        in_offset_sample_frame: u32,
        in_params: NonNull<MusicDeviceNoteParams>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "AudioComponent")]
    pub fn MusicDeviceStopNote(
        in_unit: MusicDeviceComponent,
        in_group_id: MusicDeviceGroupID,
        in_note_instance_id: NoteInstanceID,
        in_offset_sample_frame: u32,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicerange?language=objc)
pub const kMusicDeviceRange: c_uint = 0x0100;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicemidieventselect?language=objc)
pub const kMusicDeviceMIDIEventSelect: c_uint = 0x0101;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicesysexselect?language=objc)
pub const kMusicDeviceSysExSelect: c_uint = 0x0102;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdeviceprepareinstrumentselect?language=objc)
pub const kMusicDevicePrepareInstrumentSelect: c_uint = 0x0103;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicereleaseinstrumentselect?language=objc)
pub const kMusicDeviceReleaseInstrumentSelect: c_uint = 0x0104;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicestartnoteselect?language=objc)
pub const kMusicDeviceStartNoteSelect: c_uint = 0x0105;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicestopnoteselect?language=objc)
pub const kMusicDeviceStopNoteSelect: c_uint = 0x0106;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kmusicdevicemidieventlistselect?language=objc)
pub const kMusicDeviceMIDIEventListSelect: c_uint = 0x0107;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicemidieventproc?language=objc)
pub type MusicDeviceMIDIEventProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, u32, u32) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicesysexproc?language=objc)
pub type MusicDeviceSysExProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, NonNull<u8>, u32) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicestartnoteproc?language=objc)
#[cfg(feature = "AUComponent")]
pub type MusicDeviceStartNoteProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        MusicDeviceInstrumentID,
        MusicDeviceGroupID,
        NonNull<NoteInstanceID>,
        u32,
        NonNull<MusicDeviceNoteParams>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/musicdevicestopnoteproc?language=objc)
pub type MusicDeviceStopNoteProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        MusicDeviceGroupID,
        NoteInstanceID,
        u32,
    ) -> OSStatus,
>;

extern "C-unwind" {
    #[cfg(feature = "AudioComponent")]
    #[deprecated = "no longer supported"]
    pub fn MusicDevicePrepareInstrument(
        in_unit: MusicDeviceComponent,
        in_instrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "AudioComponent")]
    #[deprecated = "no longer supported"]
    pub fn MusicDeviceReleaseInstrument(
        in_unit: MusicDeviceComponent,
        in_instrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}
