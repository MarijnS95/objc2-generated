//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-security")]
use objc2_security::*;

use crate::*;

extern_class!(
    /// Control and query a Wi-Fi interface on OS X.
    ///
    ///
    /// All actions performed by a CWInterface object are executed on the Wi-Fi device with the corresponding interface name.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwinterface?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CWInterface;
);

unsafe impl NSObjectProtocol for CWInterface {}

impl CWInterface {
    extern_methods!(
        /// Returns the BSD name of the Wi-Fi interface (e.g. "en0").
        #[unsafe(method(interfaceName))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceName(&self) -> Option<Retained<NSString>>;

        /// Returns: YES if the Wi-Fi interface is on, NO otherwise.
        ///
        ///
        /// Indicates the Wi-Fi interface power state.
        ///
        ///
        /// Returns NO if an error occurs.
        #[unsafe(method(powerOn))]
        #[unsafe(method_family = none)]
        pub unsafe fn powerOn(&self) -> bool;

        #[cfg(feature = "CWChannel")]
        /// Returns: An NSSet of CWChannel objects.
        ///
        ///
        /// Returns the set of channels supported by the Wi-Fi interface for the currently adopted country code.
        ///
        ///
        /// Returns nil if an error occurs.
        #[unsafe(method(supportedWLANChannels))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedWLANChannels(&self) -> Option<Retained<NSSet<CWChannel>>>;

        #[cfg(feature = "CWChannel")]
        /// Returns the current channel of the Wi-Fi interface.
        ///
        ///
        /// Returns nil if an error occurs.
        #[unsafe(method(wlanChannel))]
        #[unsafe(method_family = none)]
        pub unsafe fn wlanChannel(&self) -> Option<Retained<CWChannel>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Returns the currently active physical layer (PHY) mode of the Wi-Fi interface.
        ///
        ///
        /// Returns kCWPHYModeNone if an error occurs.
        #[unsafe(method(activePHYMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn activePHYMode(&self) -> CWPHYMode;

        /// Returns the current service set identifier (SSID) of the Wi-Fi interface, encoded as a string.
        ///
        ///
        /// Returns nil if an error occurs, or if the interface is not participating in a Wi-Fi network,
        /// or if the SSID can not be encoded as a valid UTF-8 or WinLatin1 string.
        ///
        ///
        /// Note: SSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(ssid))]
        #[unsafe(method_family = none)]
        pub unsafe fn ssid(&self) -> Option<Retained<NSString>>;

        /// Returns the current service set identifier (SSID) for the interface, encapsulated in an NSData object.
        ///
        ///
        /// Returns nil if an error occurs, or if the interface is not participating in a Wi-Fi network.
        ///
        ///
        /// Note: SSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(ssidData))]
        #[unsafe(method_family = none)]
        pub unsafe fn ssidData(&self) -> Option<Retained<NSData>>;

        /// Returns the current basic service set identifier (BSSID) of the Wi-Fi interface, returned as an UTF-8 string.
        ///
        ///
        /// Returns a UTF-8 string using hexadecimal characters formatted as XX:XX:XX:XX:XX:XX.
        /// Returns nil if an error occurred, or if the interface is not participating in a Wi-Fi network.
        ///
        ///
        /// Note: BSSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(bssid))]
        #[unsafe(method_family = none)]
        pub unsafe fn bssid(&self) -> Option<Retained<NSString>>;

        /// Returns the current received signal strength indication (RSSI) measurement (dBm) for the Wi-Fi interface.
        ///
        ///
        /// Returns 0 if an error occurs, or if the interface is not participating in a Wi-Fi network.
        #[unsafe(method(rssiValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn rssiValue(&self) -> NSInteger;

        /// Returns the current noise measurement (dBm) for the Wi-Fi interface.
        ///
        ///
        /// Returns 0 if an error occurs, or if the interface is not participating in a Wi-Fi network.
        #[unsafe(method(noiseMeasurement))]
        #[unsafe(method_family = none)]
        pub unsafe fn noiseMeasurement(&self) -> NSInteger;

        #[cfg(feature = "CoreWLANTypes")]
        /// Returns the current security type of the Wi-Fi interface.
        ///
        ///
        /// Returns kCWSecurityUnknown if an error occurs, or if the interface is not participating in a Wi-Fi network.
        #[unsafe(method(security))]
        #[unsafe(method_family = none)]
        pub unsafe fn security(&self) -> CWSecurity;

        /// Returns the current transmit rate (Mbps) for the Wi-Fi interface.
        ///
        ///
        /// Returns 0 if an error occurs, or if the interface is not participating in a Wi-Fi network.
        #[unsafe(method(transmitRate))]
        #[unsafe(method_family = none)]
        pub unsafe fn transmitRate(&self) -> c_double;

        /// Returns the currently adopted country code (ISO/IEC 3166-1:1997) for the Wi-Fi interface.
        ///
        ///
        /// Returns nil if an error occurs, or if the Wi-Fi interface is off.
        ///
        ///
        /// Note: Country code information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(countryCode))]
        #[unsafe(method_family = none)]
        pub unsafe fn countryCode(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Returns the current operating mode for the Wi-Fi interface.
        ///
        ///
        /// Returns kCWInterfaceModeNone if an error occurs, or if the interface is not participating in a Wi-Fi network.
        #[unsafe(method(interfaceMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceMode(&self) -> CWInterfaceMode;

        /// Returns the current transmit power (mW) for the Wi-Fi interface.
        ///
        ///
        /// Returns 0 if an error occurs.
        #[unsafe(method(transmitPower))]
        #[unsafe(method_family = none)]
        pub unsafe fn transmitPower(&self) -> NSInteger;

        /// Returns the hardware media access control (MAC) address for the Wi-Fi interface, returned as an UTF-8 string.
        ///
        ///
        /// The standard format for printing a MAC-48 address XX:XX:XX:XX:XX:XX is used to represent
        /// the MAC address as a string.
        /// Returns nil if an error occurs.
        #[unsafe(method(hardwareAddress))]
        #[unsafe(method_family = none)]
        pub unsafe fn hardwareAddress(&self) -> Option<Retained<NSString>>;

        /// Returns: YES if the corresponding network service is active, NO otherwise.
        ///
        ///
        /// Indicates the network service state of the Wi-Fi interface.
        ///
        ///
        /// Returns NO if an error occurs.
        #[unsafe(method(serviceActive))]
        #[unsafe(method_family = none)]
        pub unsafe fn serviceActive(&self) -> bool;

        #[cfg(feature = "CWNetwork")]
        /// Returns: An NSSet of CWNetwork objects.
        ///
        ///
        /// Returns the scan results currently in the scan cache for the Wi-Fi interface.
        ///
        ///
        /// Returns nil if an error occurs.
        #[unsafe(method(cachedScanResults))]
        #[unsafe(method_family = none)]
        pub unsafe fn cachedScanResults(&self) -> Option<Retained<NSSet<CWNetwork>>>;

        #[cfg(feature = "CWConfiguration")]
        /// Returns the current configuration for the Wi-Fi interface.
        ///
        ///
        /// Returns nil if an error occurs.
        #[unsafe(method(configuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration(&self) -> Option<Retained<CWConfiguration>>;

        /// Returns: An NSSet of NSString objects.
        ///
        ///
        /// Returns the list of available Wi-Fi interface names (e.g. "en0").
        ///
        ///
        /// Returns an empty NSArray object if no Wi-Fi interfaces exist.
        /// Returns nil if an error occurs.
        #[deprecated = "Use -[CWWiFiClient interfaceNames] instead"]
        #[unsafe(method(interfaceNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceNames() -> Option<Retained<NSSet<NSString>>>;

        /// Convenience method for getting a CWInterface object for the default Wi-Fi interface.
        #[deprecated = "Use -[CWWiFiClient interface] instead"]
        #[unsafe(method(interface))]
        #[unsafe(method_family = none)]
        pub unsafe fn interface() -> Retained<Self>;

        /// Parameter `name`: The name of an available Wi-Fi interface.
        ///
        ///
        /// Convenience method for getting a CWInterface object bound to the Wi-Fi interface with a specific interface name.
        ///
        ///
        /// Use +[CWInterface interfaceNames] to get a list of available Wi-Fi interface names.
        /// Returns a CWInterface object for the default Wi-Fi interface if no interface name is specified.
        #[deprecated = "Use -[CWWiFiClient interfaceWithName:] instead"]
        #[unsafe(method(interfaceWithName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceWithName(name: Option<&NSString>) -> Retained<Self>;

        /// Parameter `name`: The name of an available Wi-Fi interface.
        ///
        ///
        /// Initializes a CWInterface object, binding to the Wi-Fi interface with a specific interface name.
        ///
        ///
        /// Use +[CWInterface interfaceNames] to get a list of available Wi-Fi interface names.
        /// Returns a CWInterface object for the default Wi-Fi interface if no interface name is specified.
        #[deprecated = "Use -[CWWiFiClient interfaceWithName:] instead"]
        #[unsafe(method(initWithInterfaceName:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithInterfaceName(
            this: Allocated<Self>,
            name: Option<&NSString>,
        ) -> Retained<Self>;

        /// Parameter `power`: A BOOL value indicating Wi-Fi power state. Specify YES to turn on the Wi-Fi interface.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Sets the Wi-Fi interface power state.
        #[unsafe(method(setPower:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPower_error(&self, power: bool) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CWChannel")]
        /// Parameter `channel`: A CWChannel object.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Sets the Wi-Fi interface channel.
        ///
        ///
        /// Setting the channel while the interface is associated to a Wi-Fi network is not permitted.
        #[unsafe(method(setWLANChannel:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWLANChannel_error(
            &self,
            channel: &CWChannel,
        ) -> Result<(), Retained<NSError>>;

        /// Parameter `key`: An NSData object containing the pairwise master key (PMK).
        /// Passing nil clear the PMK for the Wi-Fi interface.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Sets the Wi-Fi interface pairwise master key (PMK).
        ///
        ///
        /// The specified key must be exactly 32 octets.
        #[unsafe(method(setPairwiseMasterKey:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPairwiseMasterKey_error(
            &self,
            key: Option<&NSData>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `key`: An NSData object containing the WEP key.
        /// Passing nil clears the WEP key for the Wi-Fi interface.
        ///
        ///
        /// Parameter `flags`: A bitmask indicating which CWCipherKeyFlags to use for the specified WEP key.
        ///
        ///
        /// Parameter `index`: An NSInteger indicating which default key index (1-4) to use for the specified key.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Sets the Wi-Fi interface WEP key.
        #[unsafe(method(setWEPKey:flags:index:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWEPKey_flags_index_error(
            &self,
            key: Option<&NSData>,
            flags: CWCipherKeyFlags,
            index: NSInteger,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CWNetwork")]
        /// Parameter `ssid`: Probe request SSID.
        /// Pass an SSID to perform a directed scan for hidden Wi-Fi networks.
        /// This parameter is optional.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: An NSSet of CWNetwork objects, or nil if an error occurs.
        ///
        ///
        /// Performs a scan for Wi-Fi networks and returns scan results to the caller.
        ///
        ///
        /// This method will block for the duration of the scan.
        ///
        ///
        /// Note: Returned networks will not contain BSSID information unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(scanForNetworksWithSSID:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn scanForNetworksWithSSID_error(
            &self,
            ssid: Option<&NSData>,
        ) -> Result<Retained<NSSet<CWNetwork>>, Retained<NSError>>;

        #[cfg(feature = "CWNetwork")]
        /// Parameter `ssid`: Probe request SSID.
        /// Pass an SSID to perform a directed scan for hidden Wi-Fi networks.
        /// This parameter is optional.
        ///
        ///
        /// Parameter `includeHidden`: Indicate whether or not hidden networks should not be filtered from the returned scan results.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: An NSSet of CWNetwork objects, or nil if an error occurs.
        ///
        ///
        /// Performs a scan for Wi-Fi networks and returns scan results to the caller.
        ///
        ///
        /// This method will block for the duration of the scan.
        ///
        ///
        /// Note: Returned networks will not contain BSSID information unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(scanForNetworksWithSSID:includeHidden:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn scanForNetworksWithSSID_includeHidden_error(
            &self,
            ssid: Option<&NSData>,
            include_hidden: bool,
        ) -> Result<Retained<NSSet<CWNetwork>>, Retained<NSError>>;

        #[cfg(feature = "CWNetwork")]
        /// Parameter `networkName`: Probe request SSID, encoded as an UTF-8 string.
        /// Pass a networkName to perform a directed scan for hidden Wi-Fi networks.
        /// This parameter is optional.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: An NSSet of CWNetwork objects, or nil if an error occurs.
        ///
        ///
        /// Performs a scan for Wi-Fi networks and returns scan results to the caller.
        ///
        ///
        /// This method will block for the duration of the scan.
        ///
        ///
        /// Note: Returned networks will not contain BSSID information unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(scanForNetworksWithName:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn scanForNetworksWithName_error(
            &self,
            network_name: Option<&NSString>,
        ) -> Result<Retained<NSSet<CWNetwork>>, Retained<NSError>>;

        #[cfg(feature = "CWNetwork")]
        /// Parameter `networkName`: Probe request SSID, encoded as an UTF-8 string.
        /// Pass a networkName to perform a directed scan for hidden Wi-Fi networks.
        /// This parameter is optional.
        ///
        ///
        /// Parameter `includeHidden`: Indicate whether or not hidden networks should not be filtered from the returned scan results.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: An NSSet of CWNetwork objects, or nil if an error occurs.
        ///
        ///
        /// Performs a scan for Wi-Fi networks and returns scan results to the caller.
        ///
        ///
        /// This method will block for the duration of the scan.
        ///
        ///
        /// Note: Returned networks will not contain BSSID information unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(scanForNetworksWithName:includeHidden:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn scanForNetworksWithName_includeHidden_error(
            &self,
            network_name: Option<&NSString>,
            include_hidden: bool,
        ) -> Result<Retained<NSSet<CWNetwork>>, Retained<NSError>>;

        #[cfg(feature = "CWNetwork")]
        /// Parameter `network`: The network to which the Wi-Fi interface will associate.
        ///
        ///
        /// Parameter `password`: The network passphrase or key. Required for association to WEP, WPA Personal, and WPA2 Personal networks.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Associates to a W-Fi network using the specified passphrase.
        ///
        ///
        /// This method will block for the duration of the association.
        #[unsafe(method(associateToNetwork:password:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn associateToNetwork_password_error(
            &self,
            network: &CWNetwork,
            password: Option<&NSString>,
        ) -> Result<(), Retained<NSError>>;

        /// Disassociates from the current Wi-Fi network.
        #[unsafe(method(disassociate))]
        #[unsafe(method_family = none)]
        pub unsafe fn disassociate(&self);

        #[cfg(all(feature = "CWNetwork", feature = "objc2-security"))]
        /// Parameter `network`: The network to which the Wi-Fi interface will associate.
        ///
        ///
        /// Parameter `username`: The username to use for 802.1X authentication.
        ///
        ///
        /// Parameter `password`: The password to use for 802.1X authentication.
        ///
        ///
        /// Parameter `identity`: The identity to use for IEEE 802.1X authentication. Holds the corresponding client certificate.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Associates to an enterprise W-Fi network using the specified 802.1X credentials.
        ///
        ///
        /// This method will block for the duration of the association.
        #[unsafe(method(associateToEnterpriseNetwork:identity:username:password:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn associateToEnterpriseNetwork_identity_username_password_error(
            &self,
            network: &CWNetwork,
            identity: Option<&SecIdentity>,
            username: Option<&NSString>,
            password: Option<&NSString>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `ssidData`: The SSID to use for the IBSS network.
        /// Pass nil to use the machine name as the IBSS network name.
        ///
        ///
        /// Parameter `security`: The CWIBSSModeSecurity type.
        ///
        ///
        /// Parameter `channel`: The channel on which the IBSS network will be created.
        ///
        ///
        /// Parameter `password`: The password to be used. This paramter is required for kCWIBSSModeSecurityWEP40 or kCWIBSSModeSecurityWEP104 security types.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Creates a computer-to-computer (IBSS) network.
        #[deprecated]
        #[unsafe(method(startIBSSModeWithSSID:security:channel:password:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn startIBSSModeWithSSID_security_channel_password_error(
            &self,
            ssid_data: &NSData,
            security: CWIBSSModeSecurity,
            channel: NSUInteger,
            password: Option<&NSString>,
        ) -> Result<(), Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl CWInterface {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
