//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

/// Error codes corresponding to the CWErrorDomain domain.
///
///
/// Success.
///
///
/// EAPOL-related error.
///
///
/// Parameter error.
///
///
/// Memory allocation failed.
///
///
/// Unexpected error condition encountered for which no error code exists.
///
///
/// Operation not supported.
///
///
/// Invalid protocol element field detected.
///
///
/// Operation timed out.
///
///
/// Access point did not specify a reason for authentication/association failure.
///
///
/// Access point cannot support all requested capabilities.
///
///
/// Reassociation was denied because the access point was unable to determine that an association exists.
///
///
/// Association was denied for an unspecified reason.
///
///
/// Specified authentication algorithm is not supported.
///
///
/// Authentication frame received with an authentication sequence number out of expected sequence.
///
///
/// Authentication was rejected because of a challenge failure.
///
///
/// Access point is unable to handle another associated station.
///
///
/// Interface does not support all of the rates in the basic rate set of the access point.
///
///
/// Association denied because short slot time option is not supported by requesting station.
///
///
/// Association denied because DSSS-OFDM is not supported by requesting station.
///
///
/// Invalid information element included in association request.
///
///
/// Invalid group cipher requested.
///
///
/// Invalid pairwise cipher requested.
///
///
/// Invalid authentication selector requested.
///
///
/// Invalid WPA/WPA2 version specified.
///
///
/// Invalid RSN capabilities specified in association request.
///
///
/// Cipher suite rejected due to network security policy.
///
///
/// PMK rejected by the access point.
///
///
/// WPA/WPA2 handshake timed out.
///
///
/// Association was denied because the requesting station does not support HT features.
///
///
/// Association was denied because the requesting station does not support the PCO transition time required by the AP.
///
///
/// No interface is bound to the CWInterface object.
///
///
/// Error communicating with a separate process.
///
///
/// Calling process does not have permission to perform this operation.
///
///
/// Generic error, no specific error code exists to describe the error condition.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwerr?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWErr(pub NSInteger);
impl CWErr {
    pub const kCWNoErr: Self = Self(0);
    pub const kCWEAPOLErr: Self = Self(1);
    pub const kCWInvalidParameterErr: Self = Self(-3900);
    pub const kCWNoMemoryErr: Self = Self(-3901);
    pub const kCWUnknownErr: Self = Self(-3902);
    pub const kCWNotSupportedErr: Self = Self(-3903);
    pub const kCWInvalidFormatErr: Self = Self(-3904);
    pub const kCWTimeoutErr: Self = Self(-3905);
    pub const kCWUnspecifiedFailureErr: Self = Self(-3906);
    pub const kCWUnsupportedCapabilitiesErr: Self = Self(-3907);
    pub const kCWReassociationDeniedErr: Self = Self(-3908);
    pub const kCWAssociationDeniedErr: Self = Self(-3909);
    pub const kCWAuthenticationAlgorithmUnsupportedErr: Self = Self(-3910);
    pub const kCWInvalidAuthenticationSequenceNumberErr: Self = Self(-3911);
    pub const kCWChallengeFailureErr: Self = Self(-3912);
    pub const kCWAPFullErr: Self = Self(-3913);
    pub const kCWUnsupportedRateSetErr: Self = Self(-3914);
    pub const kCWShortSlotUnsupportedErr: Self = Self(-3915);
    pub const kCWDSSSOFDMUnsupportedErr: Self = Self(-3916);
    pub const kCWInvalidInformationElementErr: Self = Self(-3917);
    pub const kCWInvalidGroupCipherErr: Self = Self(-3918);
    pub const kCWInvalidPairwiseCipherErr: Self = Self(-3919);
    pub const kCWInvalidAKMPErr: Self = Self(-3920);
    pub const kCWUnsupportedRSNVersionErr: Self = Self(-3921);
    pub const kCWInvalidRSNCapabilitiesErr: Self = Self(-3922);
    pub const kCWCipherSuiteRejectedErr: Self = Self(-3923);
    pub const kCWInvalidPMKErr: Self = Self(-3924);
    pub const kCWSupplicantTimeoutErr: Self = Self(-3925);
    pub const kCWHTFeaturesNotSupportedErr: Self = Self(-3926);
    pub const kCWPCOTransitionTimeNotSupportedErr: Self = Self(-3927);
    pub const kCWReferenceNotBoundErr: Self = Self(-3928);
    pub const kCWIPCFailureErr: Self = Self(-3929);
    pub const kCWOperationNotPermittedErr: Self = Self(-3930);
    pub const kCWErr: Self = Self(-3931);
}

unsafe impl Encode for CWErr {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWErr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Type describing the IEEE 802.11 physical layer mode.
///
///
///
/// IEEE 802.11a physical layer mode.
///
///
/// IEEE 802.11b physical layer mode.
///
///
/// IEEE 802.11g physical layer mode.
///
///
/// IEEE 802.11n physical layer mode.
///
///
/// IEEE 802.11ac physical layer mode.
///
///
/// IEEE 802.11ax physical layer mode.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwphymode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWPHYMode(pub NSInteger);
impl CWPHYMode {
    pub const kCWPHYModeNone: Self = Self(0);
    pub const kCWPHYMode11a: Self = Self(1);
    pub const kCWPHYMode11b: Self = Self(2);
    pub const kCWPHYMode11g: Self = Self(3);
    pub const kCWPHYMode11n: Self = Self(4);
    pub const kCWPHYMode11ac: Self = Self(5);
    pub const kCWPHYMode11ax: Self = Self(6);
}

unsafe impl Encode for CWPHYMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWPHYMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Wi-Fi interface operating modes returned by -[CWInterface interfaceMode].
///
///
/// Interface is not in any mode.
///
///
/// Interface is participating in an infrastructure network as a non-AP station.
///
///
/// Interface is participating in an IBSS network.
///
///
/// Interface is participating in an infrastructure network as an access point.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwinterfacemode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWInterfaceMode(pub NSInteger);
impl CWInterfaceMode {
    pub const kCWInterfaceModeNone: Self = Self(0);
    pub const kCWInterfaceModeStation: Self = Self(1);
    pub const kCWInterfaceModeIBSS: Self = Self(2);
    pub const kCWInterfaceModeHostAP: Self = Self(3);
}

unsafe impl Encode for CWInterfaceMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWInterfaceMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Wi-Fi security types.
///
///
/// Open System authentication.
///
///
/// WEP security.
///
///
/// WPA Personal authentication.
///
///
/// WPA/WPA2 Personal authentication.
///
///
/// WPA2 Personal authentication.
///
///
/// Dynamic WEP security.
///
///
/// WPA Enterprise authentication.
///
///
/// WPA/WPA2 Enterprise authentication.
///
///
/// WPA2 Enterprise authentication.
///
///
/// WPA3 Enterprise authentication.
///
///
/// WPA3 Personal authentication.
///
///
/// WPA3 Transition (WPA3/WPA2 Personal) authentication.
///
///
/// OWE security.
///
///
/// OWE Transition.
///
///
/// Unknown security type.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwsecurity?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWSecurity(pub NSInteger);
impl CWSecurity {
    pub const kCWSecurityNone: Self = Self(0);
    pub const kCWSecurityWEP: Self = Self(1);
    pub const kCWSecurityWPAPersonal: Self = Self(2);
    pub const kCWSecurityWPAPersonalMixed: Self = Self(3);
    pub const kCWSecurityWPA2Personal: Self = Self(4);
    pub const kCWSecurityPersonal: Self = Self(5);
    pub const kCWSecurityDynamicWEP: Self = Self(6);
    pub const kCWSecurityWPAEnterprise: Self = Self(7);
    pub const kCWSecurityWPAEnterpriseMixed: Self = Self(8);
    pub const kCWSecurityWPA2Enterprise: Self = Self(9);
    pub const kCWSecurityEnterprise: Self = Self(10);
    pub const kCWSecurityWPA3Personal: Self = Self(11);
    pub const kCWSecurityWPA3Enterprise: Self = Self(12);
    pub const kCWSecurityWPA3Transition: Self = Self(13);
    pub const kCWSecurityOWE: Self = Self(14);
    pub const kCWSecurityOWETransition: Self = Self(15);
    pub const kCWSecurityUnknown: Self = Self(NSIntegerMax as _);
}

unsafe impl Encode for CWSecurity {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWSecurity {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// IBSS security types used in -[CWInterface startIBSSModeWithSSID:security:channel:password:error:].
///
///
/// Open System authentication.
///
///
/// WEP security.
///
///
/// WPA Personal authentication.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwibssmodesecurity?language=objc)
// NS_ENUM
#[deprecated]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWIBSSModeSecurity(pub NSInteger);
impl CWIBSSModeSecurity {
    #[deprecated]
    pub const kCWIBSSModeSecurityNone: Self = Self(0);
    #[deprecated]
    pub const kCWIBSSModeSecurityWEP40: Self = Self(1);
    #[deprecated]
    pub const kCWIBSSModeSecurityWEP104: Self = Self(2);
}

unsafe impl Encode for CWIBSSModeSecurity {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWIBSSModeSecurity {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Channel width values returned by -[CWChannel channelWidth].
///
///
/// Unknown channel width.
///
///
/// 20MHz channel width.
///
///
/// 40MHz channel width.
///
///
/// 80MHz channel width.
///
///
/// 160MHz channel width.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwchannelwidth?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWChannelWidth(pub NSInteger);
impl CWChannelWidth {
    pub const kCWChannelWidthUnknown: Self = Self(0);
    pub const kCWChannelWidth20MHz: Self = Self(1);
    pub const kCWChannelWidth40MHz: Self = Self(2);
    pub const kCWChannelWidth80MHz: Self = Self(3);
    pub const kCWChannelWidth160MHz: Self = Self(4);
}

unsafe impl Encode for CWChannelWidth {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWChannelWidth {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Channel band values returned by -[CWChannel channelBand].
///
///
/// Unknown channel band.
///
///
/// 2.4GHz channel band.
///
///
/// 5GHz channel band.
///
///
/// 6GHz channel band.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwchannelband?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWChannelBand(pub NSInteger);
impl CWChannelBand {
    pub const kCWChannelBandUnknown: Self = Self(0);
    pub const kCWChannelBand2GHz: Self = Self(1);
    pub const kCWChannelBand5GHz: Self = Self(2);
    pub const kCWChannelBand6GHz: Self = Self(3);
}

unsafe impl Encode for CWChannelBand {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWChannelBand {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Cipher key flags used in -[CWInterface setWEPKey:flags:index:error:].
///
///
/// Open System authentication.
///
///
/// Cipher key will be used for unicast packets.
///
///
/// Cipher key will be used for multicast packets.
///
///
/// Cipher key will be used for packets sent from the interface.
///
///
/// Cipher key will be used for packets received by the interface.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwcipherkeyflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWCipherKeyFlags(pub NSUInteger);
bitflags::bitflags! {
    impl CWCipherKeyFlags: NSUInteger {
        const kCWCipherKeyFlagsNone = 0;
        const kCWCipherKeyFlagsUnicast = 1<<1;
        const kCWCipherKeyFlagsMulticast = 1<<2;
        const kCWCipherKeyFlagsTx = 1<<3;
        const kCWCipherKeyFlagsRx = 1<<4;
    }
}

unsafe impl Encode for CWCipherKeyFlags {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CWCipherKeyFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Keychain domain types used by CoreWLAN keychain methods.
///
///
/// No keychain domain specified.
///
///
/// The user keychain domain. If iCloud Keychain is enabled, the iCloud keychain is the user keychain.
///
///
/// The system keychain domain.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwkeychaindomain?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWKeychainDomain(pub NSInteger);
impl CWKeychainDomain {
    pub const kCWKeychainDomainNone: Self = Self(0);
    pub const kCWKeychainDomainUser: Self = Self(1);
    pub const kCWKeychainDomainSystem: Self = Self(2);
}

unsafe impl Encode for CWKeychainDomain {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWKeychainDomain {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Wi-Fi event types used in -[CWWiFiClient startMonitoringEventWithType:error:].
///
///
/// No event type specified.
///
///
/// Posted when the power state of any Wi-Fi interface changes.
///
///
/// Posted when the current SSID of any Wi-Fi interface changes.
///
///
/// Posted when the current BSSID of any Wi-Fi interface changes.
///
///
/// Posted when the adopted country code of any Wi-Fi interface changes.
///
///
/// Posted when the link state for any Wi-Fi interface changes.
///
///
/// Posted when the RSSI or transmit rate for any Wi-Fi interface changes.
///
///
/// Posted when the operating mode of any Wi-Fi interface changes.
///
///
/// Posted when the scan cache of any Wi-Fi interface is updated with new scan results.
///
///
/// Unknown event type.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cweventtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CWEventType(pub NSInteger);
impl CWEventType {
    #[doc(alias = "CWEventTypeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "CWEventTypePowerDidChange")]
    pub const PowerDidChange: Self = Self(1);
    #[doc(alias = "CWEventTypeSSIDDidChange")]
    pub const SSIDDidChange: Self = Self(2);
    #[doc(alias = "CWEventTypeBSSIDDidChange")]
    pub const BSSIDDidChange: Self = Self(3);
    #[doc(alias = "CWEventTypeCountryCodeDidChange")]
    pub const CountryCodeDidChange: Self = Self(4);
    #[doc(alias = "CWEventTypeLinkDidChange")]
    pub const LinkDidChange: Self = Self(5);
    #[doc(alias = "CWEventTypeLinkQualityDidChange")]
    pub const LinkQualityDidChange: Self = Self(6);
    #[doc(alias = "CWEventTypeModeDidChange")]
    pub const ModeDidChange: Self = Self(7);
    #[doc(alias = "CWEventTypeScanCacheUpdated")]
    pub const ScanCacheUpdated: Self = Self(8);
    #[doc(alias = "CWEventTypeBtCoexStats")]
    pub const BtCoexStats: Self = Self(9);
    #[doc(alias = "CWEventTypeUnknown")]
    pub const Unknown: Self = Self(NSIntegerMax as _);
}

unsafe impl Encode for CWEventType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CWEventType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
