//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainFindWiFiPassword(
        domain: CWKeychainDomain,
        ssid: &NSData,
        password: *mut *mut NSString,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainSetWiFiPassword(
        domain: CWKeychainDomain,
        ssid: &NSData,
        password: &NSString,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainDeleteWiFiPassword(domain: CWKeychainDomain, ssid: &NSData) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainFindWiFiEAPUsernameAndPassword(
        domain: CWKeychainDomain,
        ssid: &NSData,
        username: *mut *mut NSString,
        password: *mut *mut NSString,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainSetWiFiEAPUsernameAndPassword(
        domain: CWKeychainDomain,
        ssid: &NSData,
        username: Option<&NSString>,
        password: Option<&NSString>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CoreWLANTypes")]
    pub fn CWKeychainDeleteWiFiEAPUsernameAndPassword(
        domain: CWKeychainDomain,
        ssid: &NSData,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CWKeychainCopyEAPIdentityList(list: *mut CFArrayRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainFindWiFiEAPUsernameAndPassword() instead"]
    pub fn CWKeychainCopyEAPUsernameAndPassword(
        ssid_data: CFDataRef,
        username: *mut CFStringRef,
        password: *mut CFStringRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainSetWiFiEAPUsernameAndPassword() instead"]
    pub fn CWKeychainSetEAPUsernameAndPassword(
        ssid_data: CFDataRef,
        username: CFStringRef,
        password: CFStringRef,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainDeleteWiFiEAPUsernameAndPassword() instead"]
    pub fn CWKeychainDeleteEAPUsernameAndPassword(ssid_data: CFDataRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainSetWiFiPassword() instead"]
    pub fn CWKeychainSetPassword(ssid_data: CFDataRef, password: CFStringRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainFindWiFiPassword() instead"]
    pub fn CWKeychainCopyPassword(ssid_data: CFDataRef, password: *mut CFStringRef) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "Use CWKeychainDeleteWiFiPassword() instead"]
    pub fn CWKeychainDeletePassword(ssid_data: CFDataRef) -> OSStatus;
}

#[cfg(feature = "CWNetwork")]
#[inline]
pub unsafe extern "C-unwind" fn CWMergeNetworks(
    networks: &NSSet<CWNetwork>,
) -> Retained<NSSet<CWNetwork>> {
    extern "C-unwind" {
        fn CWMergeNetworks(networks: &NSSet<CWNetwork>) -> NonNull<NSSet<CWNetwork>>;
    }
    let ret = unsafe { CWMergeNetworks(networks) };
    unsafe { Retained::retain_autoreleased(ret.as_ptr()) }
        .expect("function was marked as returning non-null, but actually returned NULL")
}
