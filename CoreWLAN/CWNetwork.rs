//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Represents a device participating in a Wi-Fi network, providing accessors to various network attributes.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwnetwork?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CWNetwork;
);

unsafe impl NSCoding for CWNetwork {}

unsafe impl NSCopying for CWNetwork {}

unsafe impl CopyingHelper for CWNetwork {
    type Result = Self;
}

unsafe impl NSObjectProtocol for CWNetwork {}

unsafe impl NSSecureCoding for CWNetwork {}

impl CWNetwork {
    extern_methods!(
        /// Returns the service set identifier (SSID) for the Wi-Fi network device, encoded as a string.
        ///
        ///
        /// Returns nil if the SSID can not be encoded as a valid UTF-8 or WinLatin1 string.
        ///
        ///
        /// Note: SSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(ssid))]
        #[unsafe(method_family = none)]
        pub unsafe fn ssid(&self) -> Option<Retained<NSString>>;

        /// Returns the service set identifier (SSID) for the Wi-Fi network device, encapsulated in an NSData object.
        ///
        ///
        /// The SSID is defined as 1-32 octets.
        ///
        ///
        /// Note: SSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(ssidData))]
        #[unsafe(method_family = none)]
        pub unsafe fn ssidData(&self) -> Option<Retained<NSData>>;

        /// Returns the basic service set identifier (BSSID) for the Wi-Fi network device, returned as UTF-8 string.
        ///
        ///
        /// Returns a UTF-8 string using hexadecimal characters formatted as XX:XX:XX:XX:XX:XX.
        ///
        ///
        /// Note: BSSID information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(bssid))]
        #[unsafe(method_family = none)]
        pub unsafe fn bssid(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "CWChannel")]
        /// The operating channel of the Wi-Fi device.
        #[unsafe(method(wlanChannel))]
        #[unsafe(method_family = none)]
        pub unsafe fn wlanChannel(&self) -> Option<Retained<CWChannel>>;

        /// Returns the received signal strength indication (RSSI) measurement (dBm) for the Wi-Fi device.
        #[unsafe(method(rssiValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn rssiValue(&self) -> NSInteger;

        /// Returns the noise measurement (dBm) for the Wi-Fi device.
        #[unsafe(method(noiseMeasurement))]
        #[unsafe(method_family = none)]
        pub unsafe fn noiseMeasurement(&self) -> NSInteger;

        /// Returns information element data included in beacon or probe response frames.
        #[unsafe(method(informationElementData))]
        #[unsafe(method_family = none)]
        pub unsafe fn informationElementData(&self) -> Option<Retained<NSData>>;

        /// Returns the advertised country code (ISO/IEC 3166-1:1997) for the Wi-Fi device.
        ///
        ///
        /// Note: Country code information is not available unless Location Services is enabled and the user has authorized the calling app to use location services.
        ///
        ///
        /// See also: CLLocationManager
        #[unsafe(method(countryCode))]
        #[unsafe(method_family = none)]
        pub unsafe fn countryCode(&self) -> Option<Retained<NSString>>;

        /// Returns the beacon interval (ms) for the Wi-Fi device.
        #[unsafe(method(beaconInterval))]
        #[unsafe(method_family = none)]
        pub unsafe fn beaconInterval(&self) -> NSInteger;

        /// Returns: YES if the Wi-Fi device is part of an IBSS network, NO otherwise.
        ///
        ///
        /// Indicates whether or not the Wi-Fi device is participating in an independent basic service set (IBSS), or ad-hoc Wi-Fi network.
        #[unsafe(method(ibss))]
        #[unsafe(method_family = none)]
        pub unsafe fn ibss(&self) -> bool;

        /// Parameter `network`: A CWNetwork object.
        ///
        ///
        /// Returns: YES if the objects are equal, NO otherwise.
        ///
        ///
        /// Determine CWNetwork equality.
        ///
        ///
        /// CWNetwork objects are considered equal if their corresponding
        /// <i>
        /// ssidData
        /// </i>
        /// and
        /// <i>
        /// bssid
        /// </i>
        /// properties are equal.
        #[unsafe(method(isEqualToNetwork:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEqualToNetwork(&self, network: &CWNetwork) -> bool;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `security`: A CWSecurity type value.
        ///
        ///
        /// Returns: <i>
        /// YES
        /// </i>
        /// if the Wi-Fi device supports the specified security type,
        /// <i>
        /// NO
        /// </i>
        /// otherwise.
        ///
        ///
        /// Determine which security types a Wi-Fi device supports.
        #[unsafe(method(supportsSecurity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsSecurity(&self, security: CWSecurity) -> bool;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `phyMode`: A CWPHYMode type value.
        ///
        ///
        /// Returns: YES if the Wi-Fi device supports the specified PHY mode, NO otherwise.
        ///
        ///
        /// Determine which PHY modes a Wi-Fi device supports.
        #[unsafe(method(supportsPHYMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsPHYMode(&self, phy_mode: CWPHYMode) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl CWNetwork {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
