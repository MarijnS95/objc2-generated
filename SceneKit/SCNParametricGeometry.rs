//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// SCNPlane represents a rectangle with controllable width and height. The plane has one visible side.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnplane?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNPlane;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNPlane {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNPlane {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNPlane {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNPlane {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNPlane {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNPlane {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNPlane {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNPlane {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPlane {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a plane with given width and height.
        ///
        /// Parameter `width`: The width of the plane.
        ///
        /// Parameter `height`: The height of the plane.
        #[unsafe(method_family(none))]
        #[method_id(planeWithWidth:height:)]
        pub unsafe fn planeWithWidth_height(width: CGFloat, height: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The plane extent along the X axis. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(width)]
        pub unsafe fn width(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        pub unsafe fn setWidth(&self, width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The plane extent along the Y axis. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        /// The number of subdivisions along the X axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(widthSegmentCount)]
        pub unsafe fn widthSegmentCount(&self) -> NSInteger;

        /// Setter for [`widthSegmentCount`][Self::widthSegmentCount].
        #[method(setWidthSegmentCount:)]
        pub unsafe fn setWidthSegmentCount(&self, width_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. The default value is 1. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// The corner radius. Animatable.
        ///
        /// If the value is strictly less than 0, the geometry is empty. The default value is 0.
        #[method(cornerRadius)]
        pub unsafe fn cornerRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`cornerRadius`][Self::cornerRadius].
        #[method(setCornerRadius:)]
        pub unsafe fn setCornerRadius(&self, corner_radius: CGFloat);

        /// The number of subdivisions for the rounded corners. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 10.
        #[method(cornerSegmentCount)]
        pub unsafe fn cornerSegmentCount(&self) -> NSInteger;

        /// Setter for [`cornerSegmentCount`][Self::cornerSegmentCount].
        #[method(setCornerSegmentCount:)]
        pub unsafe fn setCornerSegmentCount(&self, corner_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPlane {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPlane {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNBox represents a box with rectangular sides and optional chamfers.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnbox?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNBox;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNBox {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNBox {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNBox {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNBox {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNBox {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNBox {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNBox {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNBox {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNBox {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a box with given width, height, length and chamfer radius.
        ///
        /// Parameter `width`: The width of the box.
        ///
        /// Parameter `height`: The height of the box.
        ///
        /// Parameter `length`: The length of the box.
        ///
        /// Parameter `chamferRadius`: The chamfer radius of the box.
        #[unsafe(method_family(none))]
        #[method_id(boxWithWidth:height:length:chamferRadius:)]
        pub unsafe fn boxWithWidth_height_length_chamferRadius(
            width: CGFloat,
            height: CGFloat,
            length: CGFloat,
            chamfer_radius: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The width of the box. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(width)]
        pub unsafe fn width(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        pub unsafe fn setWidth(&self, width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the box. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The length of the box. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(length)]
        pub unsafe fn length(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`length`][Self::length].
        #[method(setLength:)]
        pub unsafe fn setLength(&self, length: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The chamfer radius. Animatable.
        ///
        /// If the value is strictly less than 0, the geometry is empty. The default value is 0.
        #[method(chamferRadius)]
        pub unsafe fn chamferRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`chamferRadius`][Self::chamferRadius].
        #[method(setChamferRadius:)]
        pub unsafe fn setChamferRadius(&self, chamfer_radius: CGFloat);

        /// The number of subdivisions along the X axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(widthSegmentCount)]
        pub unsafe fn widthSegmentCount(&self) -> NSInteger;

        /// Setter for [`widthSegmentCount`][Self::widthSegmentCount].
        #[method(setWidthSegmentCount:)]
        pub unsafe fn setWidthSegmentCount(&self, width_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);

        /// The number of subdivisions along the Z axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(lengthSegmentCount)]
        pub unsafe fn lengthSegmentCount(&self) -> NSInteger;

        /// Setter for [`lengthSegmentCount`][Self::lengthSegmentCount].
        #[method(setLengthSegmentCount:)]
        pub unsafe fn setLengthSegmentCount(&self, length_segment_count: NSInteger);

        /// The number of chamfer subdivisions. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 10.
        #[method(chamferSegmentCount)]
        pub unsafe fn chamferSegmentCount(&self) -> NSInteger;

        /// Setter for [`chamferSegmentCount`][Self::chamferSegmentCount].
        #[method(setChamferSegmentCount:)]
        pub unsafe fn setChamferSegmentCount(&self, chamfer_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNBox {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNBox {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNPyramid represents a right pyramid with a rectangular base.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnpyramid?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNPyramid;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNPyramid {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNPyramid {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNPyramid {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNPyramid {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNPyramid {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNPyramid {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNPyramid {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNPyramid {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPyramid {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a pyramid with given width, height, and length.
        ///
        /// Parameter `width`: The width of the pyramid.
        ///
        /// Parameter `height`: The height of the pyramid.
        ///
        /// Parameter `length`: The length of the pyramid.
        #[unsafe(method_family(none))]
        #[method_id(pyramidWithWidth:height:length:)]
        pub unsafe fn pyramidWithWidth_height_length(
            width: CGFloat,
            height: CGFloat,
            length: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The width of the pyramid base. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(width)]
        pub unsafe fn width(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        pub unsafe fn setWidth(&self, width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the pyramid. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The length of the pyramid base. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(length)]
        pub unsafe fn length(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`length`][Self::length].
        #[method(setLength:)]
        pub unsafe fn setLength(&self, length: CGFloat);

        /// The number of subdivisions along the X axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(widthSegmentCount)]
        pub unsafe fn widthSegmentCount(&self) -> NSInteger;

        /// Setter for [`widthSegmentCount`][Self::widthSegmentCount].
        #[method(setWidthSegmentCount:)]
        pub unsafe fn setWidthSegmentCount(&self, width_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);

        /// The number of subdivisions along the Z axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(lengthSegmentCount)]
        pub unsafe fn lengthSegmentCount(&self) -> NSInteger;

        /// Setter for [`lengthSegmentCount`][Self::lengthSegmentCount].
        #[method(setLengthSegmentCount:)]
        pub unsafe fn setLengthSegmentCount(&self, length_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPyramid {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNPyramid {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNSphere represents a sphere with controllable radius
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnsphere?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNSphere;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNSphere {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNSphere {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNSphere {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNSphere {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNSphere {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNSphere {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNSphere {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNSphere {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNSphere {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a sphere with given radius.
        ///
        /// Parameter `radius`: The radius of the sphere.
        #[unsafe(method_family(none))]
        #[method_id(sphereWithRadius:)]
        pub unsafe fn sphereWithRadius(radius: CGFloat) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The sphere radius. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 0.5.
        #[method(radius)]
        pub unsafe fn radius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        pub unsafe fn setRadius(&self, radius: CGFloat);

        /// Indicate if the geometry is a geosphere.
        ///
        /// The default value is NO.
        #[method(isGeodesic)]
        pub unsafe fn isGeodesic(&self) -> bool;

        /// Setter for [`isGeodesic`][Self::isGeodesic].
        #[method(setGeodesic:)]
        pub unsafe fn setGeodesic(&self, geodesic: bool);

        /// The number of segments along both spherical coordinates. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(segmentCount)]
        pub unsafe fn segmentCount(&self) -> NSInteger;

        /// Setter for [`segmentCount`][Self::segmentCount].
        #[method(setSegmentCount:)]
        pub unsafe fn setSegmentCount(&self, segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNSphere {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNSphere {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNCylinder represents a cylinder with controllable height and radius.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncylinder?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNCylinder;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNCylinder {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNCylinder {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNCylinder {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNCylinder {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNCylinder {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNCylinder {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNCylinder {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNCylinder {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCylinder {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a cylinder with given radius and height.
        ///
        /// Parameter `radius`: The radius of the cylinder.
        ///
        /// Parameter `height`: The height of the cylinder.
        #[unsafe(method_family(none))]
        #[method_id(cylinderWithRadius:height:)]
        pub unsafe fn cylinderWithRadius_height(radius: CGFloat, height: CGFloat)
            -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The radius of the cylinder. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 0.5.
        #[method(radius)]
        pub unsafe fn radius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`radius`][Self::radius].
        #[method(setRadius:)]
        pub unsafe fn setRadius(&self, radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the cylinder. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        /// The number of subdivisions along the radial coordinate. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(radialSegmentCount)]
        pub unsafe fn radialSegmentCount(&self) -> NSInteger;

        /// Setter for [`radialSegmentCount`][Self::radialSegmentCount].
        #[method(setRadialSegmentCount:)]
        pub unsafe fn setRadialSegmentCount(&self, radial_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCylinder {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCylinder {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNCone represents a cone with controllable height, top radius and bottom radius.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncone?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNCone;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNCone {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNCone {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNCone {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNCone {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNCone {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNCone {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNCone {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNCone {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCone {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a cone with given top radius, bottom radius and height.
        ///
        /// Parameter `topRadius`: The radius at the top of the cone.
        ///
        /// Parameter `bottomRadius`: The radius at the bottom of the cone.
        ///
        /// Parameter `height`: The height of the cone.
        #[unsafe(method_family(none))]
        #[method_id(coneWithTopRadius:bottomRadius:height:)]
        pub unsafe fn coneWithTopRadius_bottomRadius_height(
            top_radius: CGFloat,
            bottom_radius: CGFloat,
            height: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The radius at the top of the cone. Animatable.
        ///
        /// If the value is less than 0, the geometry is empty. The default value is 0.
        #[method(topRadius)]
        pub unsafe fn topRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`topRadius`][Self::topRadius].
        #[method(setTopRadius:)]
        pub unsafe fn setTopRadius(&self, top_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The radius at the bottom of the cone. Animatable.
        ///
        /// If the value is less than 0, the geometry is empty. The default value is 0.5.
        #[method(bottomRadius)]
        pub unsafe fn bottomRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bottomRadius`][Self::bottomRadius].
        #[method(setBottomRadius:)]
        pub unsafe fn setBottomRadius(&self, bottom_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the cone. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        /// The number of subdivisions along the radial coordinate. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(radialSegmentCount)]
        pub unsafe fn radialSegmentCount(&self) -> NSInteger;

        /// Setter for [`radialSegmentCount`][Self::radialSegmentCount].
        #[method(setRadialSegmentCount:)]
        pub unsafe fn setRadialSegmentCount(&self, radial_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCone {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCone {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNTube represents a tube with controllable height, inner radius and outer radius.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntube?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNTube;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNTube {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNTube {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNTube {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNTube {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNTube {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNTube {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNTube {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNTube {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTube {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a tube with given inner radius, outer radius and height.
        ///
        /// Parameter `innerRadius`: The inner radius of the tube.
        ///
        /// Parameter `outerRadius`: The outer radius of the tube.
        ///
        /// Parameter `height`: The height of the tube.
        #[unsafe(method_family(none))]
        #[method_id(tubeWithInnerRadius:outerRadius:height:)]
        pub unsafe fn tubeWithInnerRadius_outerRadius_height(
            inner_radius: CGFloat,
            outer_radius: CGFloat,
            height: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The inner radius of the tube. Animatable.
        ///
        /// If the value is less than or equal to 0, or if it is greater than or equal to the outer radius, then the geometry is empty. The default value is 0.25.
        #[method(innerRadius)]
        pub unsafe fn innerRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`innerRadius`][Self::innerRadius].
        #[method(setInnerRadius:)]
        pub unsafe fn setInnerRadius(&self, inner_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The outer radius of the tube. Animatable.
        ///
        /// If the value is less than or equal to 0, or if it is less than or equal to the inner radius, then the geometry is empty. The default value is 0.5.
        #[method(outerRadius)]
        pub unsafe fn outerRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`outerRadius`][Self::outerRadius].
        #[method(setOuterRadius:)]
        pub unsafe fn setOuterRadius(&self, outer_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the tube. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 1.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        /// The number of subdivisions along the radial coordinate. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(radialSegmentCount)]
        pub unsafe fn radialSegmentCount(&self) -> NSInteger;

        /// Setter for [`radialSegmentCount`][Self::radialSegmentCount].
        #[method(setRadialSegmentCount:)]
        pub unsafe fn setRadialSegmentCount(&self, radial_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTube {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTube {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNCapsule represents a capsule with controllable height and cap radius.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncapsule?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNCapsule;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNCapsule {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNCapsule {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNCapsule {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNCapsule {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNCapsule {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNCapsule {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNCapsule {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNCapsule {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCapsule {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a capsule with given radius and height.
        ///
        /// Parameter `capRadius`: The radius of the capsule.
        ///
        /// Parameter `height`: The height of the capsule.
        #[unsafe(method_family(none))]
        #[method_id(capsuleWithCapRadius:height:)]
        pub unsafe fn capsuleWithCapRadius_height(
            cap_radius: CGFloat,
            height: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The cap radius of the capsule. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 0.5.
        #[method(capRadius)]
        pub unsafe fn capRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`capRadius`][Self::capRadius].
        #[method(setCapRadius:)]
        pub unsafe fn setCapRadius(&self, cap_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the capsule. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 2.
        #[method(height)]
        pub unsafe fn height(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`height`][Self::height].
        #[method(setHeight:)]
        pub unsafe fn setHeight(&self, height: CGFloat);

        /// The number of subdivisions along the radial coordinate. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(radialSegmentCount)]
        pub unsafe fn radialSegmentCount(&self) -> NSInteger;

        /// Setter for [`radialSegmentCount`][Self::radialSegmentCount].
        #[method(setRadialSegmentCount:)]
        pub unsafe fn setRadialSegmentCount(&self, radial_segment_count: NSInteger);

        /// The number of subdivisions along the Y axis. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 1.
        #[method(heightSegmentCount)]
        pub unsafe fn heightSegmentCount(&self) -> NSInteger;

        /// Setter for [`heightSegmentCount`][Self::heightSegmentCount].
        #[method(setHeightSegmentCount:)]
        pub unsafe fn setHeightSegmentCount(&self, height_segment_count: NSInteger);

        /// The number of subdivisions in the cap. Animatable.
        ///
        /// If the value is less than 2, the behavior is undefined. The default value is 24.
        #[method(capSegmentCount)]
        pub unsafe fn capSegmentCount(&self) -> NSInteger;

        /// Setter for [`capSegmentCount`][Self::capSegmentCount].
        #[method(setCapSegmentCount:)]
        pub unsafe fn setCapSegmentCount(&self, cap_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCapsule {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNCapsule {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNTorus represents a torus with controllable ring radius and pipe radius.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntorus?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNTorus;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNTorus {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNTorus {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNTorus {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNTorus {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNTorus {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNTorus {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNTorus {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNTorus {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTorus {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a torus with given ring radius and pipe radius.
        ///
        /// Parameter `ringRadius`: The radius of the ring.
        ///
        /// Parameter `pipeRadius`: The radius of the pipe.
        #[unsafe(method_family(none))]
        #[method_id(torusWithRingRadius:pipeRadius:)]
        pub unsafe fn torusWithRingRadius_pipeRadius(
            ring_radius: CGFloat,
            pipe_radius: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The radius of the torus ring. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 0.5.
        #[method(ringRadius)]
        pub unsafe fn ringRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`ringRadius`][Self::ringRadius].
        #[method(setRingRadius:)]
        pub unsafe fn setRingRadius(&self, ring_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The radius of the torus pipe. Animatable.
        ///
        /// If the value is less than or equal to 0, the geometry is empty. The default value is 0.25.
        #[method(pipeRadius)]
        pub unsafe fn pipeRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`pipeRadius`][Self::pipeRadius].
        #[method(setPipeRadius:)]
        pub unsafe fn setPipeRadius(&self, pipe_radius: CGFloat);

        /// The number of subdivisions of the ring. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 48.
        #[method(ringSegmentCount)]
        pub unsafe fn ringSegmentCount(&self) -> NSInteger;

        /// Setter for [`ringSegmentCount`][Self::ringSegmentCount].
        #[method(setRingSegmentCount:)]
        pub unsafe fn setRingSegmentCount(&self, ring_segment_count: NSInteger);

        /// The number of subdivisions of the pipe. Animatable.
        ///
        /// If the value is less than 3, the behavior is undefined. The default value is 24.
        #[method(pipeSegmentCount)]
        pub unsafe fn pipeSegmentCount(&self) -> NSInteger;

        /// Setter for [`pipeSegmentCount`][Self::pipeSegmentCount].
        #[method(setPipeSegmentCount:)]
        pub unsafe fn setPipeSegmentCount(&self, pipe_segment_count: NSInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTorus {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNTorus {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNFloor represents an infinite plane geometry.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnfloor?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNFloor;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNFloor {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNFloor {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNFloor {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNFloor {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNFloor {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNFloor {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNFloor {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNFloor {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNFloor {
        /// Creates and returns a floor.
        ///
        /// A floor is an infinite plane.
        #[unsafe(method_family(none))]
        #[method_id(floor)]
        pub unsafe fn floor() -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the reflectivity of the floor. Animatable.
        ///
        /// If the value is greater than zero then the surface will reflect other objects in the scene. The default value is 0.25.
        #[method(reflectivity)]
        pub unsafe fn reflectivity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`reflectivity`][Self::reflectivity].
        #[method(setReflectivity:)]
        pub unsafe fn setReflectivity(&self, reflectivity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the distance from the floor where the falloff begins. Animatable.
        ///
        /// The default value is 0.
        #[method(reflectionFalloffStart)]
        pub unsafe fn reflectionFalloffStart(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`reflectionFalloffStart`][Self::reflectionFalloffStart].
        #[method(setReflectionFalloffStart:)]
        pub unsafe fn setReflectionFalloffStart(&self, reflection_falloff_start: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the distance from the floor where the falloff finishes. Animatable.
        ///
        /// If the value is 0 then there is no falloff. The default value is 0.
        #[method(reflectionFalloffEnd)]
        pub unsafe fn reflectionFalloffEnd(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`reflectionFalloffEnd`][Self::reflectionFalloffEnd].
        #[method(setReflectionFalloffEnd:)]
        pub unsafe fn setReflectionFalloffEnd(&self, reflection_falloff_end: CGFloat);

        /// Determines the node categories to reflect. Defaults to all bits set.
        #[method(reflectionCategoryBitMask)]
        pub unsafe fn reflectionCategoryBitMask(&self) -> NSUInteger;

        /// Setter for [`reflectionCategoryBitMask`][Self::reflectionCategoryBitMask].
        #[method(setReflectionCategoryBitMask:)]
        pub unsafe fn setReflectionCategoryBitMask(&self, reflection_category_bit_mask: NSUInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// The floor extent along the X axis. Animatable.
        ///
        /// If the value is equal to 0, the floor is infinite on the X axis. The default value is 0.
        #[method(width)]
        pub unsafe fn width(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`width`][Self::width].
        #[method(setWidth:)]
        pub unsafe fn setWidth(&self, width: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// The floor extent along the Z axis. Animatable.
        ///
        /// If the value is equal to 0, the floor is infinite on the Z axis. The default value is 0.
        #[method(length)]
        pub unsafe fn length(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`length`][Self::length].
        #[method(setLength:)]
        pub unsafe fn setLength(&self, length: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the resolution scale factor of the buffer used to render the reflection.
        ///
        /// Defaults to 1.0.
        #[method(reflectionResolutionScaleFactor)]
        pub unsafe fn reflectionResolutionScaleFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`reflectionResolutionScaleFactor`][Self::reflectionResolutionScaleFactor].
        #[method(setReflectionResolutionScaleFactor:)]
        pub unsafe fn setReflectionResolutionScaleFactor(
            &self,
            reflection_resolution_scale_factor: CGFloat,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNFloor {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNFloor {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// SCNText represents a block of text that has been extruded
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntext?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNText;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNText {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNText {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNText {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNText {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNText {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNText {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNText {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNText {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNText {
        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a 3D representation of given text with given extrusion depth.
        ///
        /// Parameter `string`: The text to be represented.
        ///
        /// Parameter `extrusionDepth`: The extrusion depth.
        #[unsafe(method_family(none))]
        #[method_id(textWithString:extrusionDepth:)]
        pub unsafe fn textWithString_extrusionDepth(
            string: Option<&AnyObject>,
            extrusion_depth: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The extrusion depth. Animatable.
        ///
        /// If the value is 0, we get a mono-sided, 2D version of the text.
        #[method(extrusionDepth)]
        pub unsafe fn extrusionDepth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extrusionDepth`][Self::extrusionDepth].
        #[method(setExtrusionDepth:)]
        pub unsafe fn setExtrusionDepth(&self, extrusion_depth: CGFloat);

        /// The text to be represented. The text must be an instance of NSString or NSAttributedString.
        ///
        /// The default value is nil.
        #[unsafe(method_family(none))]
        #[method_id(string)]
        pub unsafe fn string(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`string`][Self::string].
        #[method(setString:)]
        pub unsafe fn setString(&self, string: Option<&AnyObject>);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// The font used to represent the text.
        ///
        /// The font property is only used when the string property is not an NSAttributedString. Defaults to the system font (12 point).
        #[unsafe(method_family(none))]
        #[method_id(font)]
        pub unsafe fn font(&self) -> Option<Retained<NSFont>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`font`][Self::font].
        #[method(setFont:)]
        pub unsafe fn setFont(&self, font: Option<&NSFont>);

        /// Determines whether the text is wrapped to fit within the bounds.
        ///
        /// For the text to be wrapped you first need to set its bounds, otherwise the text is not wrapped. The default value is NO.
        #[method(isWrapped)]
        pub unsafe fn isWrapped(&self) -> bool;

        /// Setter for [`isWrapped`][Self::isWrapped].
        #[method(setWrapped:)]
        pub unsafe fn setWrapped(&self, wrapped: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// A container within which the text may be wrapped or truncated.
        ///
        /// The text will start at the top-left corner of the rect. You need to set this property for text truncation or alignment to work. Getting this property when it has never been set returns CGRectZero.
        #[method(containerFrame)]
        pub unsafe fn containerFrame(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`containerFrame`][Self::containerFrame].
        #[method(setContainerFrame:)]
        pub unsafe fn setContainerFrame(&self, container_frame: CGRect);

        #[cfg(feature = "objc2-core-foundation")]
        /// Returns the bounding box size the receiver occupies.
        #[method(textSize)]
        pub unsafe fn textSize(&self) -> CGSize;

        /// Describes how the text is truncated to fit within the bounds.
        ///
        /// For the text to be truncated you first need to set its bounds, otherwise the text is not truncated. The default value is kCATruncationNone. See truncation modes in CATextLayer.h.
        #[unsafe(method_family(none))]
        #[method_id(truncationMode)]
        pub unsafe fn truncationMode(&self) -> Retained<NSString>;

        /// Setter for [`truncationMode`][Self::truncationMode].
        #[method(setTruncationMode:)]
        pub unsafe fn setTruncationMode(&self, truncation_mode: &NSString);

        /// Determines how individual lines of text are horizontally aligned within the bounds.
        ///
        /// For the text to be aligned you first need to set its bounds, otherwise the text is not aligned. The default value is kCAAlignmentNatural. See alignments in CATextLayer.h.
        #[unsafe(method_family(none))]
        #[method_id(alignmentMode)]
        pub unsafe fn alignmentMode(&self) -> Retained<NSString>;

        /// Setter for [`alignmentMode`][Self::alignmentMode].
        #[method(setAlignmentMode:)]
        pub unsafe fn setAlignmentMode(&self, alignment_mode: &NSString);

        #[cfg(feature = "objc2-core-foundation")]
        /// The chamfer radius. Animatable.
        ///
        /// Values are clamped to the range [0, extrusionDepth / 2]. The actual chamfer radius might be different to the one here specified: large values are clipped to a per-glyph max value. The default value is 0.
        #[method(chamferRadius)]
        pub unsafe fn chamferRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`chamferRadius`][Self::chamferRadius].
        #[method(setChamferRadius:)]
        pub unsafe fn setChamferRadius(&self, chamfer_radius: CGFloat);

        /// The number of chamfer subdivisions. Animatable.
        ///
        /// If the value is less than 1, the behavior is undefined. The default value is 10.
        #[deprecated = "Use SCNText.chamferProfile instead"]
        #[method(chamferSegmentCount)]
        pub unsafe fn chamferSegmentCount(&self) -> NSInteger;

        /// Setter for [`chamferSegmentCount`][Self::chamferSegmentCount].
        #[deprecated = "Use SCNText.chamferProfile instead"]
        #[method(setChamferSegmentCount:)]
        pub unsafe fn setChamferSegmentCount(&self, chamfer_segment_count: NSInteger);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Describes the profile used to when "chamferRadius" is not nil. When "chamferProfile" is nil we fallback on a path representing a quadrant.
        ///
        /// The profile should be a 2D curve beginning at (0,1) and ending at (1,0). The "flatness" property is also used to flatten this path. The default value is nil.
        #[unsafe(method_family(none))]
        #[method_id(chamferProfile)]
        pub unsafe fn chamferProfile(&self) -> Option<Retained<NSBezierPath>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`chamferProfile`][Self::chamferProfile].
        #[method(setChamferProfile:)]
        pub unsafe fn setChamferProfile(&self, chamfer_profile: Option<&NSBezierPath>);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the accuracy (or smoothness) with which fonts are rendered.
        ///
        /// Smaller numbers give smoother curves at the expense of more computation and heavier geometries in terms of vertices. The default value is 0.6, which yields smooth curves.
        #[method(flatness)]
        pub unsafe fn flatness(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`flatness`][Self::flatness].
        #[method(setFlatness:)]
        pub unsafe fn setFlatness(&self, flatness: CGFloat);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNText {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNText {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnchamfermode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNChamferMode(pub NSInteger);
impl SCNChamferMode {
    #[doc(alias = "SCNChamferModeBoth")]
    pub const Both: Self = Self(0);
    #[doc(alias = "SCNChamferModeFront")]
    pub const Front: Self = Self(1);
    #[doc(alias = "SCNChamferModeBack")]
    pub const Back: Self = Self(2);
}

unsafe impl Encode for SCNChamferMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNChamferMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// SCNShape represents a 2D shape (cubic Bezier spline) than can be extruded.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnshape?language=objc)
    #[unsafe(super(SCNGeometry, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SCNGeometry")]
    pub struct SCNShape;
);

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCoding for SCNShape {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSCopying for SCNShape {}

#[cfg(feature = "SCNGeometry")]
unsafe impl CopyingHelper for SCNShape {
    type Result = Self;
}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSObjectProtocol for SCNShape {}

#[cfg(feature = "SCNGeometry")]
unsafe impl NSSecureCoding for SCNShape {}

#[cfg(all(feature = "SCNAnimation", feature = "SCNGeometry"))]
unsafe impl SCNAnimatable for SCNShape {}

#[cfg(all(feature = "SCNBoundingVolume", feature = "SCNGeometry"))]
unsafe impl SCNBoundingVolume for SCNShape {}

#[cfg(all(feature = "SCNGeometry", feature = "SCNShadable"))]
unsafe impl SCNShadable for SCNShape {}

extern_methods!(
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNShape {
        #[cfg(all(feature = "objc2-app-kit", feature = "objc2-core-foundation"))]
        #[cfg(target_os = "macos")]
        /// Creates and returns a 3D representation of the given shape with the given extrusion depth.
        ///
        /// Parameter `path`: The cubic Bezier spline to extrude.
        ///
        /// Parameter `extrusionDepth`: The extrusion depth.
        #[unsafe(method_family(none))]
        #[method_id(shapeWithPath:extrusionDepth:)]
        pub unsafe fn shapeWithPath_extrusionDepth(
            path: Option<&NSBezierPath>,
            extrusion_depth: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// The path defining the shape to be rendered.
        ///
        /// The path defines the outline of the shape. The path is filled using the even-odd rule. If the path is self-intersecting, the behavior is undefined.
        #[unsafe(method_family(none))]
        #[method_id(path)]
        pub unsafe fn path(&self) -> Option<Retained<NSBezierPath>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`path`][Self::path].
        #[method(setPath:)]
        pub unsafe fn setPath(&self, path: Option<&NSBezierPath>);

        #[cfg(feature = "objc2-core-foundation")]
        /// The extrusion depth. Animatable.
        ///
        /// If the value is 0, we get a mono-sided, 2D version of the shape.
        #[method(extrusionDepth)]
        pub unsafe fn extrusionDepth(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`extrusionDepth`][Self::extrusionDepth].
        #[method(setExtrusionDepth:)]
        pub unsafe fn setExtrusionDepth(&self, extrusion_depth: CGFloat);

        /// The sides of the text that are chamfered.
        ///
        /// The default value is SCNChamferModeBoth.
        #[method(chamferMode)]
        pub unsafe fn chamferMode(&self) -> SCNChamferMode;

        /// Setter for [`chamferMode`][Self::chamferMode].
        #[method(setChamferMode:)]
        pub unsafe fn setChamferMode(&self, chamfer_mode: SCNChamferMode);

        #[cfg(feature = "objc2-core-foundation")]
        /// The chamfer radius. Animatable.
        ///
        /// Values are clamped to the range [0, extrusionDepth / 2]. The default value is 0.
        #[method(chamferRadius)]
        pub unsafe fn chamferRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`chamferRadius`][Self::chamferRadius].
        #[method(setChamferRadius:)]
        pub unsafe fn setChamferRadius(&self, chamfer_radius: CGFloat);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Describes the profile used to when "chamferRadius" is not nil. When "chamferProfile" is nil we fallback on a path representing a quadrant.
        ///
        /// The profile should be a 2D curve beginning at (0,1) and ending at (1,0). The "flatness" property is also used to flatten this path. The default value is nil.
        #[unsafe(method_family(none))]
        #[method_id(chamferProfile)]
        pub unsafe fn chamferProfile(&self) -> Option<Retained<NSBezierPath>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`chamferProfile`][Self::chamferProfile].
        #[method(setChamferProfile:)]
        pub unsafe fn setChamferProfile(&self, chamfer_profile: Option<&NSBezierPath>);
    }
);

extern_methods!(
    /// Methods declared on superclass `SCNGeometry`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNShape {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "SCNGeometry")]
    unsafe impl SCNShape {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
