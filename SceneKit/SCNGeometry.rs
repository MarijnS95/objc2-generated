//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal")]
#[cfg(not(target_os = "watchos"))]
use objc2_metal::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometryprimitivetype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNGeometryPrimitiveType(pub NSInteger);
impl SCNGeometryPrimitiveType {
    #[doc(alias = "SCNGeometryPrimitiveTypeTriangles")]
    pub const Triangles: Self = Self(0);
    #[doc(alias = "SCNGeometryPrimitiveTypeTriangleStrip")]
    pub const TriangleStrip: Self = Self(1);
    #[doc(alias = "SCNGeometryPrimitiveTypeLine")]
    pub const Line: Self = Self(2);
    #[doc(alias = "SCNGeometryPrimitiveTypePoint")]
    pub const Point: Self = Self(3);
    #[doc(alias = "SCNGeometryPrimitiveTypePolygon")]
    pub const Polygon: Self = Self(4);
}

unsafe impl Encode for SCNGeometryPrimitiveType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNGeometryPrimitiveType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemantic?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type SCNGeometrySourceSemantic = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticvertex?language=objc)
    pub static SCNGeometrySourceSemanticVertex: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticnormal?language=objc)
    pub static SCNGeometrySourceSemanticNormal: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticcolor?language=objc)
    pub static SCNGeometrySourceSemanticColor: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemantictexcoord?language=objc)
    pub static SCNGeometrySourceSemanticTexcoord: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemantictangent?language=objc)
    pub static SCNGeometrySourceSemanticTangent: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticvertexcrease?language=objc)
    pub static SCNGeometrySourceSemanticVertexCrease: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticedgecrease?language=objc)
    pub static SCNGeometrySourceSemanticEdgeCrease: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticboneweights?language=objc)
    pub static SCNGeometrySourceSemanticBoneWeights: &'static SCNGeometrySourceSemantic;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysourcesemanticboneindices?language=objc)
    pub static SCNGeometrySourceSemanticBoneIndices: &'static SCNGeometrySourceSemantic;
}

extern_class!(
    /// SCNGeometry is an abstract class that represents the geometry that can be attached to a SCNNode.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometry?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNGeometry;
);

unsafe impl NSCoding for SCNGeometry {}

unsafe impl NSCopying for SCNGeometry {}

unsafe impl CopyingHelper for SCNGeometry {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SCNGeometry {}

unsafe impl NSSecureCoding for SCNGeometry {}

#[cfg(feature = "SCNAnimation")]
unsafe impl SCNAnimatable for SCNGeometry {}

#[cfg(feature = "SCNBoundingVolume")]
unsafe impl SCNBoundingVolume for SCNGeometry {}

#[cfg(feature = "SCNShadable")]
unsafe impl SCNShadable for SCNGeometry {}

extern_methods!(
    unsafe impl SCNGeometry {
        /// Creates and returns an empty geometry object.
        ///
        /// An empty geometry may be used as the lowest level of detail of a geometry.
        #[unsafe(method_family(none))]
        #[method_id(geometry)]
        pub unsafe fn geometry() -> Retained<Self>;

        /// Determines the name of the receiver.
        #[unsafe(method_family(none))]
        #[method_id(name)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        /// Setter for [`name`][Self::name].
        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[cfg(feature = "SCNMaterial")]
        /// Specifies the receiver's materials array.
        ///
        /// Each geometry element can be rendered using a different material. The index of the material used for a geometry element is equal to the index of that element modulo the number of materials.
        #[unsafe(method_family(none))]
        #[method_id(materials)]
        pub unsafe fn materials(&self) -> Retained<NSArray<SCNMaterial>>;

        #[cfg(feature = "SCNMaterial")]
        /// Setter for [`materials`][Self::materials].
        #[method(setMaterials:)]
        pub unsafe fn setMaterials(&self, materials: &NSArray<SCNMaterial>);

        #[cfg(feature = "SCNMaterial")]
        /// Determines the first material of the geometry. Returns nil if the geometry has no material.
        ///
        /// This method is here for convenience. It is equivalent to the first object in the "materials" array above.
        #[unsafe(method_family(none))]
        #[method_id(firstMaterial)]
        pub unsafe fn firstMaterial(&self) -> Option<Retained<SCNMaterial>>;

        #[cfg(feature = "SCNMaterial")]
        /// Setter for [`firstMaterial`][Self::firstMaterial].
        #[method(setFirstMaterial:)]
        pub unsafe fn setFirstMaterial(&self, first_material: Option<&SCNMaterial>);

        #[cfg(feature = "SCNMaterial")]
        /// Insert a material in the materials array at the specified index.
        ///
        /// Parameter `material`: The material to insert.
        ///
        /// Parameter `index`: Index in the materials array to insert the new material.
        #[method(insertMaterial:atIndex:)]
        pub unsafe fn insertMaterial_atIndex(&self, material: &SCNMaterial, index: NSUInteger);

        /// Remove the material at the specified index from the materials array.
        ///
        /// Parameter `index`: The index of the material to remove from the 'materials' array.
        #[method(removeMaterialAtIndex:)]
        pub unsafe fn removeMaterialAtIndex(&self, index: NSUInteger);

        #[cfg(feature = "SCNMaterial")]
        /// Remove the material at the index 'index' from the materials array of the receiver and insert 'material' in its position.
        ///
        /// Parameter `index`: The index of the material to replace in the materials array.
        ///
        /// Parameter `material`: The new material that will replace the previous one.
        #[method(replaceMaterialAtIndex:withMaterial:)]
        pub unsafe fn replaceMaterialAtIndex_withMaterial(
            &self,
            index: NSUInteger,
            material: &SCNMaterial,
        );

        #[cfg(feature = "SCNMaterial")]
        /// Return the first material from the materials array of the receiver with the specified name.
        ///
        /// Parameter `name`: The name of the material to retrieve.
        #[unsafe(method_family(none))]
        #[method_id(materialWithName:)]
        pub unsafe fn materialWithName(&self, name: &NSString) -> Option<Retained<SCNMaterial>>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// A geometry is made of geometry sources (at least `SCNGeometrySourceSemanticVertex`) and at least one geometry element. Multiple sources for texture coordinates are accepted. In that case the `mappingChannel` is implicitly set based on the order of the texture sources, starting at index 0.
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:)]
        pub unsafe fn geometryWithSources_elements(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
        ) -> Retained<Self>;

        /// Creates and returns a new geometry built from geometry sources and geometry elements, with per-source indexed geometry data.
        ///
        /// Parameter `sources`: An array of geometry sources. If several geometry sources have the same semantic, only the first one is taken into account.
        ///
        /// Parameter `elements`: An array of geometry elements. The sort order in the array determines the mapping between materials and geometry elements.
        ///
        /// Parameter `sourceChannels`: An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        ///
        /// ```text
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using different indices to reference position and UV data (2 channels)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad   quad   pentagon    quad   quad   pentagon    ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌─────┐ ┌─────┐ ┌───────┐ ┌─────┐ ┌─────┐ ┌───────┐   ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 1.0, 0.0)   ┆        │UV0     UV3│UV0     UV3│        ┆     4 4 5 0 1 2 3 5 4 3 2 7 6 5 2 1 0 1 2 3 2 3 0 1 1 2 3 4 0   ┆                                                              primitiveCount:3
        /// 2 │ (1.0, 0.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────┘ └───────────────────────┘   ┆                                                         indicesChannelCount:2
        /// 3 │ (1.0, 1.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons        channel 0                 channel 1           ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (2.0, 0.0, 0.0)   ┆        │           │           │        ┆                  (positions)                  (UVs)             ┆                                                               bytesPerIndex:…];
        /// 5 │ (2.0, 1.0, 0.0)   ┆        │UV1     UV2│UV1     UV2│        ┆                                                                 ┆
        /// 6 │ (2.0, 2.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 2.0, 0.0)   ┆        │UVO       UV4       UV3│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆        │         POS2          │        ┆                quad A          quad B          pentagon C       ┆                                             sourceChannels:
        /// @
        /// [0, 1]];
        /// UVs               ┆        │                       │        ┆           ┌─────────────┐ ┌─────────────┐ ┌─────────────────┐   ┆
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆     4 4 5 0 0 1 1 2 2 3 3 5 2 4 3 3 0 2 1 7 1 6 2 5 3 2 4 1 0   ┆
        /// 1 │ (0.0, 1.0)        ┆        │                       │        ┆     └───┘└──────────────────────────────────────────────────┘   ┆
        /// 2 │ (1.0, 1.0)        ┆        │UV1                 UV2│        ┆   polygons               interleaved  channels                  ┆
        /// 3 │ (1.0, 0.0)        ┆        └───────────────────────┘        ┆                           (positions and UVs)                   ┆
        /// 4 │ (0.5, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆
        ///
        /// Example: geometry made of 3 primitives (2 quads, 1 pentagon) using the same indices to reference position and UV data (1 channel)
        ///
        /// Positions         ┆   POS0           POS3           POS4    ┆             quad A      quad B      pentagon C                  ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 4.0, 0.0)   ┆        ┌───────────┬───────────┐        ┆           ┌────────┐  ┌────────┐  ┌───────────┐                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 2.0, 0.0)   ┆        │UV0     UV3│UV3     UV4│        ┆     4 4 5 0  1  2  3  5  4  3  2  7  6  5  2  1                 ┆                                                              primitiveCount:3
        /// 2 │ (2.0, 2.0, 0.0)   ┆        │           │           │        ┆     └───┘ └───────────────────────────────────┘                 ┆                                                               bytesPerIndex:…];
        /// 3 │ (2.0, 4.0, 0.0)   ┆        │     A     │     B     │        ┆   polygons              channel 0                               ┆
        /// 4 │ (4.0, 4.0, 0.0)   ┆        │           │           │        ┆                    (positions and UVs)                          ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 5 │ (4.0, 2.0, 0.0)   ┆        │UV1     UV2│UV2     UV5│        ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]];
        /// 6 │ (4.0, 0.0, 0.0)   ┆   POS1 ├───────────┴───────────┤ POS5   ┆                                                                 ┆
        /// 7 │ (0.0, 0.0, 0.0)   ┆        │UV1       UV2       UV5│        ┆                                                                 ┆                                            === or equivalently ===
        /// ┆        │         POS2          │        ┆                                                                 ┆
        /// UVs               ┆        │                       │        ┆                                                                 ┆   SCNGeometryElement *element = [SCNGeometryElement geometryElementWithData:…
        /// 0 │ (0.0, 0.0)        ┆        │           C           │        ┆                                                                 ┆                                                               primitiveType:SCNGeometryPrimitiveTypePolygon
        /// 1 │ (0.0, 0.5)        ┆        │                       │        ┆                                                                 ┆                                                              primitiveCount:3
        /// 2 │ (0.5, 0.5)        ┆        │UV7                 UV6│        ┆                                                                 ┆                                                         indicesChannelCount:1
        /// 3 │ (0.5, 0.0)        ┆        └───────────────────────┘        ┆                                                                 ┆                                                  interleavedIndicesChannels:…
        /// 4 │ (1.0, 0.0)        ┆   POS7                          POS6    ┆                                                                 ┆                                                               bytesPerIndex:…];
        /// 5 │ (1.0, 0.5)        ┆                                         ┆                                                                 ┆
        /// 6 │ (1.0, 1.0)        ┆                                         ┆                                                                 ┆   SCNGeometry *geometry = [SCNGeometry geometryWithSources:
        /// @
        /// [positionSource, texcoordsSource]
        /// 7 │ (0.0, 1.0)        ┆                                         ┆                                                                 ┆                                                   elements:
        /// @
        /// [element]
        /// ┆                                         ┆                                                                 ┆                                             sourceChannels:
        /// @
        /// [0, 0]];                                                                                                                                               ┆
        /// ```
        #[unsafe(method_family(none))]
        #[method_id(geometryWithSources:elements:sourceChannels:)]
        pub unsafe fn geometryWithSources_elements_sourceChannels(
            sources: &NSArray<SCNGeometrySource>,
            elements: Option<&NSArray<SCNGeometryElement>>,
            source_channels: Option<&NSArray<NSNumber>>,
        ) -> Retained<Self>;

        /// The array of geometry sources of the receiver.
        #[unsafe(method_family(none))]
        #[method_id(geometrySources)]
        pub unsafe fn geometrySources(&self) -> Retained<NSArray<SCNGeometrySource>>;

        /// Returns the geometry sources for a given semantic.
        ///
        /// Parameter `semantic`: The semantic of the geometry sources that should be retrieved.
        ///
        /// Returns nil if no geometry source is found for the given semantic. May return more than one source, typically for multiple texture coordinate sources.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourcesForSemantic:)]
        pub unsafe fn geometrySourcesForSemantic(
            &self,
            semantic: &SCNGeometrySourceSemantic,
        ) -> Retained<NSArray<SCNGeometrySource>>;

        /// The array of geometry elements of the receiver.
        #[unsafe(method_family(none))]
        #[method_id(geometryElements)]
        pub unsafe fn geometryElements(&self) -> Retained<NSArray<SCNGeometryElement>>;

        /// Returns the number of geometry elements owned by the geometry.
        #[method(geometryElementCount)]
        pub unsafe fn geometryElementCount(&self) -> NSInteger;

        /// Returns the geometry element at a given index.
        ///
        /// Parameter `elementIndex`: The index of the geometry element.
        #[unsafe(method_family(none))]
        #[method_id(geometryElementAtIndex:)]
        pub unsafe fn geometryElementAtIndex(
            &self,
            element_index: NSInteger,
        ) -> Retained<SCNGeometryElement>;

        /// An array of indices that describes, for each geometry source, which channel of the geometry elements to use.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceChannels)]
        pub unsafe fn geometrySourceChannels(&self) -> Option<Retained<NSArray<NSNumber>>>;

        #[cfg(feature = "SCNLevelOfDetail")]
        /// Determines the receiver's levels of detail. Defaults to nil.
        #[unsafe(method_family(none))]
        #[method_id(levelsOfDetail)]
        pub unsafe fn levelsOfDetail(&self) -> Option<Retained<NSArray<SCNLevelOfDetail>>>;

        #[cfg(feature = "SCNLevelOfDetail")]
        /// Setter for [`levelsOfDetail`][Self::levelsOfDetail].
        #[method(setLevelsOfDetail:)]
        pub unsafe fn setLevelsOfDetail(
            &self,
            levels_of_detail: Option<&NSArray<SCNLevelOfDetail>>,
        );

        #[unsafe(method_family(none))]
        #[method_id(tessellator)]
        pub unsafe fn tessellator(&self) -> Option<Retained<SCNGeometryTessellator>>;

        /// Setter for [`tessellator`][Self::tessellator].
        #[method(setTessellator:)]
        pub unsafe fn setTessellator(&self, tessellator: Option<&SCNGeometryTessellator>);

        /// Specifies the subdivision level of the receiver. Defaults to 0.
        ///
        /// A subdivision level of 0 means no subdivision. When the `tessellator` property of the receiver is not nil, the refinement is done on the GPU.
        #[method(subdivisionLevel)]
        pub unsafe fn subdivisionLevel(&self) -> NSUInteger;

        /// Setter for [`subdivisionLevel`][Self::subdivisionLevel].
        #[method(setSubdivisionLevel:)]
        pub unsafe fn setSubdivisionLevel(&self, subdivision_level: NSUInteger);

        /// Specifies if the subdivision is adaptive or uniform. Defaults to YES.
        ///
        /// Adaptive subdivision requires that the `tessellator` property of the receiver is not nil.
        #[method(wantsAdaptiveSubdivision)]
        pub unsafe fn wantsAdaptiveSubdivision(&self) -> bool;

        /// Setter for [`wantsAdaptiveSubdivision`][Self::wantsAdaptiveSubdivision].
        #[method(setWantsAdaptiveSubdivision:)]
        pub unsafe fn setWantsAdaptiveSubdivision(&self, wants_adaptive_subdivision: bool);

        /// Specifies the edges creases that control the subdivision. Defaults to nil.
        ///
        /// The primitive type of this geometry element must be SCNGeometryPrimitiveTypeLine. See subdivisionLevel above to control the level of subdivision. See edgeCreasesSource below to specify sharpness of the creases.
        #[unsafe(method_family(none))]
        #[method_id(edgeCreasesElement)]
        pub unsafe fn edgeCreasesElement(&self) -> Option<Retained<SCNGeometryElement>>;

        /// Setter for [`edgeCreasesElement`][Self::edgeCreasesElement].
        #[method(setEdgeCreasesElement:)]
        pub unsafe fn setEdgeCreasesElement(
            &self,
            edge_creases_element: Option<&SCNGeometryElement>,
        );

        /// Specifies the crease value of the edges specified by edgeCreasesElement. Defaults to nil.
        ///
        /// The semantic of this geometry source must be "SCNGeometrySourceSemanticEdgeCrease". The creases values are floating values between 0 and 10, where 0 means smooth and 10 means infinitely sharp. See subdivisionLevel above to control the level of subdivision. See edgeCreasesElement above to specify edges for edge creases.
        #[unsafe(method_family(none))]
        #[method_id(edgeCreasesSource)]
        pub unsafe fn edgeCreasesSource(&self) -> Option<Retained<SCNGeometrySource>>;

        /// Setter for [`edgeCreasesSource`][Self::edgeCreasesSource].
        #[method(setEdgeCreasesSource:)]
        pub unsafe fn setEdgeCreasesSource(&self, edge_creases_source: Option<&SCNGeometrySource>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNGeometry {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A geometry source contains geometry data for a specific semantic. The data format is described by properties.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrysource?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNGeometrySource;
);

unsafe impl NSCoding for SCNGeometrySource {}

unsafe impl NSObjectProtocol for SCNGeometrySource {}

unsafe impl NSSecureCoding for SCNGeometrySource {}

extern_methods!(
    unsafe impl SCNGeometrySource {
        /// Creates and returns a geometry source from the given data and parameters.
        ///
        /// Parameter `data`: The geometry data.
        ///
        /// Parameter `semantic`: The semantic of the geometry source.
        ///
        /// Parameter `vectorCount`: The number of geometry source vectors.
        ///
        /// Parameter `floatComponents`: A flag that indicates if vector components are floating point values.
        ///
        /// Parameter `componentsPerVector`: The number of scalar components in a vector.
        ///
        /// Parameter `bytesPerComponent`: The number of bytes that represent a vector component.
        ///
        /// Parameter `offset`: The offset from the beginning of the data. In bytes.
        ///
        /// Parameter `stride`: The number of bytes from a vector to the next one in the data.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:)]
        pub unsafe fn geometrySourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride(
            data: &NSData,
            semantic: &SCNGeometrySourceSemantic,
            vector_count: NSInteger,
            float_components: bool,
            components_per_vector: NSInteger,
            bytes_per_component: NSInteger,
            offset: NSInteger,
            stride: NSInteger,
        ) -> Retained<Self>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Creates and returns a geometry source from vertices stored in a buffer of SCNVector3 values.
        ///
        /// Parameter `vertices`: The buffer of vertices.
        ///
        /// Parameter `count`: The number of vertices.
        ///
        /// Input vertices are copied to an optimized data format. The actual format is described by the properties of the resulting instance.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceWithVertices:count:)]
        pub unsafe fn geometrySourceWithVertices_count(
            vertices: NonNull<SCNVector3>,
            count: NSInteger,
        ) -> Retained<Self>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Creates and returns a geometry source from normals stored in a buffer of SCNVector3 values.
        ///
        /// Parameter `normals`: The buffer of normals.
        ///
        /// Parameter `count`: The number of normals.
        ///
        /// Input normals are copied to an optimized data format. The actual format is described by the properties of the resulting instance.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceWithNormals:count:)]
        pub unsafe fn geometrySourceWithNormals_count(
            normals: NonNull<SCNVector3>,
            count: NSInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a geometry source from texture coordinates stored in a buffer of CGPoint values.
        ///
        /// Parameter `texcoord`: The buffer of texture coordinates.
        ///
        /// Parameter `count`: The number of texture coordinate points.
        ///
        /// Input texture coordinates are copied to an optimized data format. The actual format is described by the properties of the resulting instance.
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceWithTextureCoordinates:count:)]
        pub unsafe fn geometrySourceWithTextureCoordinates_count(
            texcoord: NonNull<CGPoint>,
            count: NSInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        /// Creates and returns a geometry source from the given data and parameters.
        ///
        /// Parameter `buffer`: A Metal buffer.
        ///
        /// Parameter `vertexFormat`: The vertex format.
        ///
        /// Parameter `semantic`: The semantic of the geometry source.
        ///
        /// Parameter `vertexCount`: The number of vertex.
        ///
        /// Parameter `offset`: The offset from the beginning of the data. In bytes.
        ///
        /// Parameter `stride`: The number of bytes from a vector to the next one in the data.
        ///
        /// Attempting to modify the Metal buffer outside the SCNSceneRenderer delegate callbacks is undefined.
        /// The typical usage it to modify the MTLBuffer within the willRenderScene callback, using a compute kernel or a vertex function in the user own command buffer. So something like:
        ///
        /// - (void)renderer:(id
        /// <SCNSceneRenderer
        /// >)aRenderer willRenderScene:(SCNScene *)scene atTime:(NSTimeInterval)time
        /// {
        /// // ask for a new command buffer
        /// id
        /// <MTLCommandBuffer
        /// > myCommandBuffer = [aRenderer.commandQueue commandBuffer];
        ///
        /// // get a compute command encoder
        /// id
        /// <MTLComputeCommandEncoder
        /// > myComputeCommandEncoder = [myCommandBuffer computeCommandEncoder];
        ///
        /// // configure the compute command encoder's pipeline state, buffer inputs etc...
        /// //...
        ///
        /// // dispatch the
        /// [myComputeCommandEncoder dispatchThreadgroups:numberOfWorkingGroups threadsPerThreadgroup:numberOfThreads];
        /// [myComputeCommandEncoder endEncoding];
        ///
        /// [myCommandBuffer commit];
        /// }
        #[unsafe(method_family(none))]
        #[method_id(geometrySourceWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:)]
        pub unsafe fn geometrySourceWithBuffer_vertexFormat_semantic_vertexCount_dataOffset_dataStride(
            buffer: &ProtocolObject<dyn MTLBuffer>,
            vertex_format: MTLVertexFormat,
            semantic: &SCNGeometrySourceSemantic,
            vertex_count: NSInteger,
            offset: NSInteger,
            stride: NSInteger,
        ) -> Retained<Self>;

        /// The data for the geometry source
        #[unsafe(method_family(none))]
        #[method_id(data)]
        pub unsafe fn data(&self) -> Retained<NSData>;

        /// The semantic of the geometry source
        #[unsafe(method_family(none))]
        #[method_id(semantic)]
        pub unsafe fn semantic(&self) -> Retained<SCNGeometrySourceSemantic>;

        /// The number of vectors in the data.
        #[method(vectorCount)]
        pub unsafe fn vectorCount(&self) -> NSInteger;

        /// A flag that indicates if vector components are floating point values.
        #[method(floatComponents)]
        pub unsafe fn floatComponents(&self) -> bool;

        /// The number of scalar components in each vector.
        #[method(componentsPerVector)]
        pub unsafe fn componentsPerVector(&self) -> NSInteger;

        /// The size of a vector component in bytes.
        #[method(bytesPerComponent)]
        pub unsafe fn bytesPerComponent(&self) -> NSInteger;

        /// The offset from the beginning of the data. In bytes.
        #[method(dataOffset)]
        pub unsafe fn dataOffset(&self) -> NSInteger;

        /// The number of bytes from a vector to the next one in the data.
        #[method(dataStride)]
        pub unsafe fn dataStride(&self) -> NSInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNGeometrySource {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// A geometry element describes how vertices from a geometry source are connected together.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometryelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNGeometryElement;
);

unsafe impl NSCoding for SCNGeometryElement {}

unsafe impl NSObjectProtocol for SCNGeometryElement {}

unsafe impl NSSecureCoding for SCNGeometryElement {}

extern_methods!(
    unsafe impl SCNGeometryElement {
        /// Creates and returns a geometry element from the given data and data format info.
        ///
        /// Parameter `data`: The data that contains element indices. You can pass nil to use an implicit vertex ordering (0,1,2,…).
        ///
        /// Parameter `primitiveType`: The primitive type, as listed in the SCNGeometryPrimitiveType enumeration.
        ///
        /// Parameter `primitiveCount`: The number of primitives in the data.
        ///
        /// Parameter `bytesPerIndex`: The number of bytes that represent a single index value in the data.
        #[unsafe(method_family(none))]
        #[method_id(geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:)]
        pub unsafe fn geometryElementWithData_primitiveType_primitiveCount_bytesPerIndex(
            data: Option<&NSData>,
            primitive_type: SCNGeometryPrimitiveType,
            primitive_count: NSInteger,
            bytes_per_index: NSInteger,
        ) -> Retained<Self>;

        /// Parameter `data`: The data that contains element indices. You can pass nil to use an implicit vertex ordering (0,1,2,…).
        ///
        /// Parameter `primitiveType`: The primitive type, as listed in the SCNGeometryPrimitiveType enumeration.
        ///
        /// Parameter `primitiveCount`: The number of primitives in the data.
        ///
        /// Parameter `indicesChannelCount`: The number of channels for the vertex indices.
        ///
        /// Parameter `interleavedIndicesChannels`: Whether the channels are interleaved.
        ///
        /// Parameter `bytesPerIndex`: The number of bytes that represent a single index value in the data.
        #[unsafe(method_family(none))]
        #[method_id(geometryElementWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:)]
        pub unsafe fn geometryElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex(
            data: Option<&NSData>,
            primitive_type: SCNGeometryPrimitiveType,
            primitive_count: NSInteger,
            indices_channel_count: NSInteger,
            interleaved_indices_channels: bool,
            bytes_per_index: NSInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        /// Creates and returns a geometry element from the given Metal buffer and parameters.
        ///
        /// Parameter `buffer`: The buffer that contains element indices.
        ///
        /// Parameter `primitiveType`: The primitive type, as listed in the SCNGeometryPrimitiveType enumeration.
        ///
        /// Parameter `primitiveCount`: The number of primitives in the data.
        ///
        /// Parameter `bytesPerIndex`: The number of bytes that represent a single index value in the data.
        #[unsafe(method_family(none))]
        #[method_id(geometryElementWithBuffer:primitiveType:primitiveCount:bytesPerIndex:)]
        pub unsafe fn geometryElementWithBuffer_primitiveType_primitiveCount_bytesPerIndex(
            buffer: &ProtocolObject<dyn MTLBuffer>,
            primitive_type: SCNGeometryPrimitiveType,
            primitive_count: NSInteger,
            bytes_per_index: NSInteger,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method_family(none))]
        #[method_id(geometryElementWithBuffer:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:)]
        pub unsafe fn geometryElementWithBuffer_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex(
            buffer: &ProtocolObject<dyn MTLBuffer>,
            primitive_type: SCNGeometryPrimitiveType,
            primitive_count: NSInteger,
            indices_channel_count: NSInteger,
            interleaved_indices_channels: bool,
            bytes_per_index: NSInteger,
        ) -> Retained<Self>;

        /// The data for the geometry element
        #[unsafe(method_family(none))]
        #[method_id(data)]
        pub unsafe fn data(&self) -> Retained<NSData>;

        /// The type of the geometry element. Possible values are listed in the SCNGeometryPrimitiveType enumeration.
        #[method(primitiveType)]
        pub unsafe fn primitiveType(&self) -> SCNGeometryPrimitiveType;

        /// The number of primitives in the data.
        #[method(primitiveCount)]
        pub unsafe fn primitiveCount(&self) -> NSInteger;

        /// Determines whether the channels are interleaved.
        #[method(hasInterleavedIndicesChannels)]
        pub unsafe fn hasInterleavedIndicesChannels(&self) -> bool;

        /// The number of channels in the geometry element.
        #[method(indicesChannelCount)]
        pub unsafe fn indicesChannelCount(&self) -> NSInteger;

        /// The number of bytes that represent an index value
        #[method(bytesPerIndex)]
        pub unsafe fn bytesPerIndex(&self) -> NSInteger;

        /// Specifies the subrange of primitives to render within NSMakeRange(0, primitiveCount). Defaults to NSMakeRange(NSNotFound, 0).
        ///
        /// When the location of the range is set to NSNotFound, the entire geometry element is rendered.
        #[method(primitiveRange)]
        pub unsafe fn primitiveRange(&self) -> NSRange;

        /// Setter for [`primitiveRange`][Self::primitiveRange].
        #[method(setPrimitiveRange:)]
        pub unsafe fn setPrimitiveRange(&self, primitive_range: NSRange);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the size of the point in local space. Defaults to 1
        #[method(pointSize)]
        pub unsafe fn pointSize(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`pointSize`][Self::pointSize].
        #[method(setPointSize:)]
        pub unsafe fn setPointSize(&self, point_size: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the minimum size in screen-space (in pixel). Defaults to 1
        #[method(minimumPointScreenSpaceRadius)]
        pub unsafe fn minimumPointScreenSpaceRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`minimumPointScreenSpaceRadius`][Self::minimumPointScreenSpaceRadius].
        #[method(setMinimumPointScreenSpaceRadius:)]
        pub unsafe fn setMinimumPointScreenSpaceRadius(
            &self,
            minimum_point_screen_space_radius: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the maximum size in screen-space (in pixel). Defaults to 1
        #[method(maximumPointScreenSpaceRadius)]
        pub unsafe fn maximumPointScreenSpaceRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumPointScreenSpaceRadius`][Self::maximumPointScreenSpaceRadius].
        #[method(setMaximumPointScreenSpaceRadius:)]
        pub unsafe fn setMaximumPointScreenSpaceRadius(
            &self,
            maximum_point_screen_space_radius: CGFloat,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNGeometryElement {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntessellationsmoothingmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNTessellationSmoothingMode(pub NSInteger);
impl SCNTessellationSmoothingMode {
    #[doc(alias = "SCNTessellationSmoothingModeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "SCNTessellationSmoothingModePNTriangles")]
    pub const PNTriangles: Self = Self(1);
    #[doc(alias = "SCNTessellationSmoothingModePhong")]
    pub const Phong: Self = Self(2);
}

unsafe impl Encode for SCNTessellationSmoothingMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNTessellationSmoothingMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A geometry tessellator describes how a more detailed surface is calculated from the geometry's initial surface.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scngeometrytessellator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNGeometryTessellator;
);

unsafe impl NSCoding for SCNGeometryTessellator {}

unsafe impl NSCopying for SCNGeometryTessellator {}

unsafe impl CopyingHelper for SCNGeometryTessellator {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SCNGeometryTessellator {}

unsafe impl NSSecureCoding for SCNGeometryTessellator {}

extern_methods!(
    unsafe impl SCNGeometryTessellator {
        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the scale factor applied to the per-patch tessellation factors. Defaults to 1.
        #[method(tessellationFactorScale)]
        pub unsafe fn tessellationFactorScale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`tessellationFactorScale`][Self::tessellationFactorScale].
        #[method(setTessellationFactorScale:)]
        pub unsafe fn setTessellationFactorScale(&self, tessellation_factor_scale: CGFloat);

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        /// Specifies the tessellation partition mode. Defaults to MTLTessellationPartitionModeInteger.
        #[method(tessellationPartitionMode)]
        pub unsafe fn tessellationPartitionMode(&self) -> MTLTessellationPartitionMode;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`tessellationPartitionMode`][Self::tessellationPartitionMode].
        #[method(setTessellationPartitionMode:)]
        pub unsafe fn setTessellationPartitionMode(
            &self,
            tessellation_partition_mode: MTLTessellationPartitionMode,
        );

        /// Specifies if the tessellation should be uniform or adaptive. Defaults to NO.
        #[method(isAdaptive)]
        pub unsafe fn isAdaptive(&self) -> bool;

        /// Setter for [`isAdaptive`][Self::isAdaptive].
        #[method(setAdaptive:)]
        pub unsafe fn setAdaptive(&self, adaptive: bool);

        /// Specifies if the level of tessellation should be adapted in screenSpace. Defaults to NO.
        #[method(isScreenSpace)]
        pub unsafe fn isScreenSpace(&self) -> bool;

        /// Setter for [`isScreenSpace`][Self::isScreenSpace].
        #[method(setScreenSpace:)]
        pub unsafe fn setScreenSpace(&self, screen_space: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the edge tessellation factor. Defaults to 1.
        ///
        /// This has no effect for adaptive subdivision
        #[method(edgeTessellationFactor)]
        pub unsafe fn edgeTessellationFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`edgeTessellationFactor`][Self::edgeTessellationFactor].
        #[method(setEdgeTessellationFactor:)]
        pub unsafe fn setEdgeTessellationFactor(&self, edge_tessellation_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the inside tessellation factor. Defaults to 1.
        ///
        /// This has no effect for adaptive subdivision
        #[method(insideTessellationFactor)]
        pub unsafe fn insideTessellationFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`insideTessellationFactor`][Self::insideTessellationFactor].
        #[method(setInsideTessellationFactor:)]
        pub unsafe fn setInsideTessellationFactor(&self, inside_tessellation_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the maximum edge length. Defaults to 1.
        ///
        /// This has no effect for non-adaptive subdivision
        #[method(maximumEdgeLength)]
        pub unsafe fn maximumEdgeLength(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumEdgeLength`][Self::maximumEdgeLength].
        #[method(setMaximumEdgeLength:)]
        pub unsafe fn setMaximumEdgeLength(&self, maximum_edge_length: CGFloat);

        /// Defaults to SCNTessellationSmoothingModeNone.
        #[method(smoothingMode)]
        pub unsafe fn smoothingMode(&self) -> SCNTessellationSmoothingMode;

        /// Setter for [`smoothingMode`][Self::smoothingMode].
        #[method(setSmoothingMode:)]
        pub unsafe fn setSmoothingMode(&self, smoothing_mode: SCNTessellationSmoothingMode);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNGeometryTessellator {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
