//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scninteractionmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNInteractionMode(pub NSInteger);
impl SCNInteractionMode {
    #[doc(alias = "SCNInteractionModeFly")]
    pub const Fly: Self = Self(0);
    #[doc(alias = "SCNInteractionModeOrbitTurntable")]
    pub const OrbitTurntable: Self = Self(1);
    #[doc(alias = "SCNInteractionModeOrbitAngleMapping")]
    pub const OrbitAngleMapping: Self = Self(2);
    #[doc(alias = "SCNInteractionModeOrbitCenteredArcball")]
    pub const OrbitCenteredArcball: Self = Self(3);
    #[doc(alias = "SCNInteractionModeOrbitArcball")]
    pub const OrbitArcball: Self = Self(4);
    #[doc(alias = "SCNInteractionModePan")]
    pub const Pan: Self = Self(5);
    #[doc(alias = "SCNInteractionModeTruck")]
    pub const Truck: Self = Self(6);
}

unsafe impl Encode for SCNInteractionMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNInteractionMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncameracontrollerdelegate?language=objc)
    pub unsafe trait SCNCameraControllerDelegate: NSObjectProtocol {
        #[optional]
        #[method(cameraInertiaWillStartForController:)]
        unsafe fn cameraInertiaWillStartForController(
            &self,
            camera_controller: &SCNCameraController,
        );

        #[optional]
        #[method(cameraInertiaDidEndForController:)]
        unsafe fn cameraInertiaDidEndForController(&self, camera_controller: &SCNCameraController);
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncameracontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNCameraController;
);

unsafe impl NSObjectProtocol for SCNCameraController {}

extern_methods!(
    unsafe impl SCNCameraController {
        #[unsafe(method_family(none))]
        #[method_id(delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn SCNCameraControllerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn SCNCameraControllerDelegate>>,
        );

        #[cfg(feature = "SCNNode")]
        #[unsafe(method_family(none))]
        #[method_id(pointOfView)]
        pub unsafe fn pointOfView(&self) -> Option<Retained<SCNNode>>;

        #[cfg(feature = "SCNNode")]
        /// Setter for [`pointOfView`][Self::pointOfView].
        #[method(setPointOfView:)]
        pub unsafe fn setPointOfView(&self, point_of_view: Option<&SCNNode>);

        #[method(interactionMode)]
        pub unsafe fn interactionMode(&self) -> SCNInteractionMode;

        /// Setter for [`interactionMode`][Self::interactionMode].
        #[method(setInteractionMode:)]
        pub unsafe fn setInteractionMode(&self, interaction_mode: SCNInteractionMode);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(target)]
        pub unsafe fn target(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`target`][Self::target].
        #[method(setTarget:)]
        pub unsafe fn setTarget(&self, target: SCNVector3);

        #[method(automaticTarget)]
        pub unsafe fn automaticTarget(&self) -> bool;

        /// Setter for [`automaticTarget`][Self::automaticTarget].
        #[method(setAutomaticTarget:)]
        pub unsafe fn setAutomaticTarget(&self, automatic_target: bool);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(worldUp)]
        pub unsafe fn worldUp(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`worldUp`][Self::worldUp].
        #[method(setWorldUp:)]
        pub unsafe fn setWorldUp(&self, world_up: SCNVector3);

        #[method(inertiaEnabled)]
        pub unsafe fn inertiaEnabled(&self) -> bool;

        /// Setter for [`inertiaEnabled`][Self::inertiaEnabled].
        #[method(setInertiaEnabled:)]
        pub unsafe fn setInertiaEnabled(&self, inertia_enabled: bool);

        #[method(inertiaFriction)]
        pub unsafe fn inertiaFriction(&self) -> c_float;

        /// Setter for [`inertiaFriction`][Self::inertiaFriction].
        #[method(setInertiaFriction:)]
        pub unsafe fn setInertiaFriction(&self, inertia_friction: c_float);

        #[method(isInertiaRunning)]
        pub unsafe fn isInertiaRunning(&self) -> bool;

        #[method(minimumVerticalAngle)]
        pub unsafe fn minimumVerticalAngle(&self) -> c_float;

        /// Setter for [`minimumVerticalAngle`][Self::minimumVerticalAngle].
        #[method(setMinimumVerticalAngle:)]
        pub unsafe fn setMinimumVerticalAngle(&self, minimum_vertical_angle: c_float);

        #[method(maximumVerticalAngle)]
        pub unsafe fn maximumVerticalAngle(&self) -> c_float;

        /// Setter for [`maximumVerticalAngle`][Self::maximumVerticalAngle].
        #[method(setMaximumVerticalAngle:)]
        pub unsafe fn setMaximumVerticalAngle(&self, maximum_vertical_angle: c_float);

        #[method(minimumHorizontalAngle)]
        pub unsafe fn minimumHorizontalAngle(&self) -> c_float;

        /// Setter for [`minimumHorizontalAngle`][Self::minimumHorizontalAngle].
        #[method(setMinimumHorizontalAngle:)]
        pub unsafe fn setMinimumHorizontalAngle(&self, minimum_horizontal_angle: c_float);

        #[method(maximumHorizontalAngle)]
        pub unsafe fn maximumHorizontalAngle(&self) -> c_float;

        /// Setter for [`maximumHorizontalAngle`][Self::maximumHorizontalAngle].
        #[method(setMaximumHorizontalAngle:)]
        pub unsafe fn setMaximumHorizontalAngle(&self, maximum_horizontal_angle: c_float);

        #[method(translateInCameraSpaceByX:Y:Z:)]
        pub unsafe fn translateInCameraSpaceByX_Y_Z(
            &self,
            delta_x: c_float,
            delta_y: c_float,
            delta_z: c_float,
        );

        #[cfg(feature = "SCNNode")]
        #[method(frameNodes:)]
        pub unsafe fn frameNodes(&self, nodes: &NSArray<SCNNode>);

        #[method(rotateByX:Y:)]
        pub unsafe fn rotateByX_Y(&self, delta_x: c_float, delta_y: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(rollBy:aroundScreenPoint:viewport:)]
        pub unsafe fn rollBy_aroundScreenPoint_viewport(
            &self,
            delta: c_float,
            point: CGPoint,
            viewport: CGSize,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(dollyBy:onScreenPoint:viewport:)]
        pub unsafe fn dollyBy_onScreenPoint_viewport(
            &self,
            delta: c_float,
            point: CGPoint,
            viewport: CGSize,
        );

        #[method(rollAroundTarget:)]
        pub unsafe fn rollAroundTarget(&self, delta: c_float);

        #[method(dollyToTarget:)]
        pub unsafe fn dollyToTarget(&self, delta: c_float);

        #[method(clearRoll)]
        pub unsafe fn clearRoll(&self);

        #[method(stopInertia)]
        pub unsafe fn stopInertia(&self);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(beginInteraction:withViewport:)]
        pub unsafe fn beginInteraction_withViewport(&self, location: CGPoint, viewport: CGSize);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(continueInteraction:withViewport:sensitivity:)]
        pub unsafe fn continueInteraction_withViewport_sensitivity(
            &self,
            location: CGPoint,
            viewport: CGSize,
            sensitivity: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(endInteraction:withViewport:velocity:)]
        pub unsafe fn endInteraction_withViewport_velocity(
            &self,
            location: CGPoint,
            viewport: CGSize,
            velocity: CGPoint,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNCameraController {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
