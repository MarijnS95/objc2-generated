//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleproperty?language=objc)
// NS_TYPED_ENUM
pub type SCNParticleProperty = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyposition?language=objc)
    pub static SCNParticlePropertyPosition: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyangle?language=objc)
    pub static SCNParticlePropertyAngle: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyrotationaxis?language=objc)
    pub static SCNParticlePropertyRotationAxis: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyvelocity?language=objc)
    pub static SCNParticlePropertyVelocity: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyangularvelocity?language=objc)
    pub static SCNParticlePropertyAngularVelocity: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertylife?language=objc)
    pub static SCNParticlePropertyLife: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertycolor?language=objc)
    pub static SCNParticlePropertyColor: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyopacity?language=objc)
    pub static SCNParticlePropertyOpacity: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertysize?language=objc)
    pub static SCNParticlePropertySize: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyframe?language=objc)
    pub static SCNParticlePropertyFrame: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyframerate?language=objc)
    pub static SCNParticlePropertyFrameRate: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertybounce?language=objc)
    pub static SCNParticlePropertyBounce: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertycharge?language=objc)
    pub static SCNParticlePropertyCharge: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertyfriction?language=objc)
    pub static SCNParticlePropertyFriction: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertycontactpoint?language=objc)
    pub static SCNParticlePropertyContactPoint: &'static SCNParticleProperty;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertycontactnormal?language=objc)
    pub static SCNParticlePropertyContactNormal: &'static SCNParticleProperty;
}

/// Parameter `data`: array of particle properties data stripes, ordered by the given NSArray of properties name in [- handleEvent:forProperties:withBlock:]
///
/// Parameter `dataStride`: array of particle properties data stripes stride, with the same ordering than data.
///
/// Parameter `indices`: optional array of count indices referencing the particles affected by the event. Only SCNParticleEventDeath and SCNParticleEventCollision provide this array. For SCNParticleEventBirth the indices are implicitely [0,1,2,..,count-1]
///
/// Parameter `count`: number of particles affected by the event
///
/// This is a small example of usage of an event handling:
/// [particleSystem handleEvent:SCNParticleEventCollision forProperties:
/// @
/// [SCNParticlePropertyAngle, SCNParticlePropertyRotationAxis, SCNParticlePropertyContactNormal] withBlock:^(void **data, size_t *dataStride, uint32_t *indices, NSInteger count) {
/// for (NSInteger i = 0; i
/// <
/// count; ++i) {
/// // SCNParticlePropertyAngle (float)
/// float *angle = (float *)((char *)data[0] + dataStride[0] * indices[i]);
/// // SCNParticlePropertyRotationAxis (float3)
/// float *axis = (float *)((char *)data[1] + dataStride[1] * indices[i]);
/// // SCNParticlePropertyContactNormal (float3)
/// float *colNrm = (float *)((char *)data[2] + dataStride[2] * indices[i]);
///
/// // rotate the particle (angle[0] and axis[0..2] based on the collision normal (colNrm[0..2])
/// // ...
/// }
/// }];
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleeventblock?language=objc)
#[cfg(feature = "block2")]
pub type SCNParticleEventBlock =
    *mut block2::Block<dyn Fn(NonNull<NonNull<c_void>>, NonNull<usize>, *mut u32, NSInteger)>;

/// Parameter `data`: array of particle properties data stripes, ordered by the given NSArray of properties name in [- handleEvent:forProperties:withBlock:]
///
/// Parameter `dataStride`: array of particle properties data stripes stride, with the same ordering than data.
///
/// Parameter `start`: index of the first particle
///
/// Parameter `end`: index of the last particle
///
/// Parameter `deltaTime`: duration of the simulation step, in seconds.
///
/// This is a small example of usage of a modifier block:
/// [self.particleSystem addModifierForProperties:
/// @
/// [SCNParticlePropertyPosition, SCNParticlePropertyVelocity] atStage:SCNParticleModifierStagePreCollision withBlock:^(void **data, size_t *dataStride, NSInteger start, NSInteger end, float deltaTime) {
/// for (NSInteger i = start; i
/// <
/// end; ++i) {
/// // SCNParticlePropertyPosition (float3)
/// float *pos = (float *)((char *)data[0] + dataStride[0] * i);
/// // SCNParticlePropertyVelocity (float3)
/// float *vel = (float *)((char *)data[1] + dataStride[1] * i);
///
/// // change velocity and/or position
/// // ...
/// }
/// }];
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlemodifierblock?language=objc)
#[cfg(feature = "block2")]
pub type SCNParticleModifierBlock = *mut block2::Block<
    dyn Fn(NonNull<NonNull<c_void>>, NonNull<usize>, NSInteger, NSInteger, c_float),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlesortingmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleSortingMode(pub NSInteger);
impl SCNParticleSortingMode {
    #[doc(alias = "SCNParticleSortingModeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "SCNParticleSortingModeProjectedDepth")]
    pub const ProjectedDepth: Self = Self(1);
    #[doc(alias = "SCNParticleSortingModeDistance")]
    pub const Distance: Self = Self(2);
    #[doc(alias = "SCNParticleSortingModeOldestFirst")]
    pub const OldestFirst: Self = Self(3);
    #[doc(alias = "SCNParticleSortingModeYoungestFirst")]
    pub const YoungestFirst: Self = Self(4);
}

unsafe impl Encode for SCNParticleSortingMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleSortingMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleblendmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleBlendMode(pub NSInteger);
impl SCNParticleBlendMode {
    #[doc(alias = "SCNParticleBlendModeAdditive")]
    pub const Additive: Self = Self(0);
    #[doc(alias = "SCNParticleBlendModeSubtract")]
    pub const Subtract: Self = Self(1);
    #[doc(alias = "SCNParticleBlendModeMultiply")]
    pub const Multiply: Self = Self(2);
    #[doc(alias = "SCNParticleBlendModeScreen")]
    pub const Screen: Self = Self(3);
    #[doc(alias = "SCNParticleBlendModeAlpha")]
    pub const Alpha: Self = Self(4);
    #[doc(alias = "SCNParticleBlendModeReplace")]
    pub const Replace: Self = Self(5);
}

unsafe impl Encode for SCNParticleBlendMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleBlendMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleorientationmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleOrientationMode(pub NSInteger);
impl SCNParticleOrientationMode {
    #[doc(alias = "SCNParticleOrientationModeBillboardScreenAligned")]
    pub const BillboardScreenAligned: Self = Self(0);
    #[doc(alias = "SCNParticleOrientationModeBillboardViewAligned")]
    pub const BillboardViewAligned: Self = Self(1);
    #[doc(alias = "SCNParticleOrientationModeFree")]
    pub const Free: Self = Self(2);
    #[doc(alias = "SCNParticleOrientationModeBillboardYAligned")]
    pub const BillboardYAligned: Self = Self(3);
}

unsafe impl Encode for SCNParticleOrientationMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleOrientationMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlebirthlocation?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleBirthLocation(pub NSInteger);
impl SCNParticleBirthLocation {
    #[doc(alias = "SCNParticleBirthLocationSurface")]
    pub const Surface: Self = Self(0);
    #[doc(alias = "SCNParticleBirthLocationVolume")]
    pub const Volume: Self = Self(1);
    #[doc(alias = "SCNParticleBirthLocationVertex")]
    pub const Vertex: Self = Self(2);
}

unsafe impl Encode for SCNParticleBirthLocation {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleBirthLocation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlebirthdirection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleBirthDirection(pub NSInteger);
impl SCNParticleBirthDirection {
    #[doc(alias = "SCNParticleBirthDirectionConstant")]
    pub const Constant: Self = Self(0);
    #[doc(alias = "SCNParticleBirthDirectionSurfaceNormal")]
    pub const SurfaceNormal: Self = Self(1);
    #[doc(alias = "SCNParticleBirthDirectionRandom")]
    pub const Random: Self = Self(2);
}

unsafe impl Encode for SCNParticleBirthDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleBirthDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleimagesequenceanimationmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleImageSequenceAnimationMode(pub NSInteger);
impl SCNParticleImageSequenceAnimationMode {
    #[doc(alias = "SCNParticleImageSequenceAnimationModeRepeat")]
    pub const Repeat: Self = Self(0);
    #[doc(alias = "SCNParticleImageSequenceAnimationModeClamp")]
    pub const Clamp: Self = Self(1);
    #[doc(alias = "SCNParticleImageSequenceAnimationModeAutoReverse")]
    pub const AutoReverse: Self = Self(2);
}

unsafe impl Encode for SCNParticleImageSequenceAnimationMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleImageSequenceAnimationMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleinputmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleInputMode(pub NSInteger);
impl SCNParticleInputMode {
    #[doc(alias = "SCNParticleInputModeOverLife")]
    pub const OverLife: Self = Self(0);
    #[doc(alias = "SCNParticleInputModeOverDistance")]
    pub const OverDistance: Self = Self(1);
    #[doc(alias = "SCNParticleInputModeOverOtherProperty")]
    pub const OverOtherProperty: Self = Self(2);
}

unsafe impl Encode for SCNParticleInputMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleInputMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlemodifierstage?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleModifierStage(pub NSInteger);
impl SCNParticleModifierStage {
    #[doc(alias = "SCNParticleModifierStagePreDynamics")]
    pub const PreDynamics: Self = Self(0);
    #[doc(alias = "SCNParticleModifierStagePostDynamics")]
    pub const PostDynamics: Self = Self(1);
    #[doc(alias = "SCNParticleModifierStagePreCollision")]
    pub const PreCollision: Self = Self(2);
    #[doc(alias = "SCNParticleModifierStagePostCollision")]
    pub const PostCollision: Self = Self(3);
}

unsafe impl Encode for SCNParticleModifierStage {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleModifierStage {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticleevent?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNParticleEvent(pub NSInteger);
impl SCNParticleEvent {
    #[doc(alias = "SCNParticleEventBirth")]
    pub const Birth: Self = Self(0);
    #[doc(alias = "SCNParticleEventDeath")]
    pub const Death: Self = Self(1);
    #[doc(alias = "SCNParticleEventCollision")]
    pub const Collision: Self = Self(2);
}

unsafe impl Encode for SCNParticleEvent {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNParticleEvent {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// The SCNParticlePropertyController class controls the variation over time or over distance of a particle property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlepropertycontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNParticlePropertyController;
);

unsafe impl NSCoding for SCNParticlePropertyController {}

unsafe impl NSCopying for SCNParticlePropertyController {}

unsafe impl CopyingHelper for SCNParticlePropertyController {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SCNParticlePropertyController {}

unsafe impl NSSecureCoding for SCNParticlePropertyController {}

extern_methods!(
    unsafe impl SCNParticlePropertyController {
        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method_family(none))]
        #[method_id(controllerWithAnimation:)]
        pub unsafe fn controllerWithAnimation(animation: &CAAnimation) -> Retained<Self>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method_family(none))]
        #[method_id(animation)]
        pub unsafe fn animation(&self) -> Retained<CAAnimation>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`animation`][Self::animation].
        #[method(setAnimation:)]
        pub unsafe fn setAnimation(&self, animation: &CAAnimation);

        #[method(inputMode)]
        pub unsafe fn inputMode(&self) -> SCNParticleInputMode;

        /// Setter for [`inputMode`][Self::inputMode].
        #[method(setInputMode:)]
        pub unsafe fn setInputMode(&self, input_mode: SCNParticleInputMode);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(inputScale)]
        pub unsafe fn inputScale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`inputScale`][Self::inputScale].
        #[method(setInputScale:)]
        pub unsafe fn setInputScale(&self, input_scale: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(inputBias)]
        pub unsafe fn inputBias(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`inputBias`][Self::inputBias].
        #[method(setInputBias:)]
        pub unsafe fn setInputBias(&self, input_bias: CGFloat);

        #[cfg(feature = "SCNNode")]
        #[unsafe(method_family(none))]
        #[method_id(inputOrigin)]
        pub unsafe fn inputOrigin(&self) -> Option<Retained<SCNNode>>;

        #[cfg(feature = "SCNNode")]
        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`inputOrigin`][Self::inputOrigin].
        #[method(setInputOrigin:)]
        pub unsafe fn setInputOrigin(&self, input_origin: Option<&SCNNode>);

        #[unsafe(method_family(none))]
        #[method_id(inputProperty)]
        pub unsafe fn inputProperty(&self) -> Option<Retained<SCNParticleProperty>>;

        /// Setter for [`inputProperty`][Self::inputProperty].
        #[method(setInputProperty:)]
        pub unsafe fn setInputProperty(&self, input_property: Option<&SCNParticleProperty>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNParticlePropertyController {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// The SCNParticleSystem class represents a system of particles.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnparticlesystem?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNParticleSystem;
);

unsafe impl NSCoding for SCNParticleSystem {}

unsafe impl NSCopying for SCNParticleSystem {}

unsafe impl CopyingHelper for SCNParticleSystem {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SCNParticleSystem {}

unsafe impl NSSecureCoding for SCNParticleSystem {}

#[cfg(feature = "SCNAnimation")]
unsafe impl SCNAnimatable for SCNParticleSystem {}

extern_methods!(
    unsafe impl SCNParticleSystem {
        #[unsafe(method_family(none))]
        #[method_id(particleSystem)]
        pub unsafe fn particleSystem() -> Retained<Self>;

        #[unsafe(method_family(none))]
        #[method_id(particleSystemNamed:inDirectory:)]
        pub unsafe fn particleSystemNamed_inDirectory(
            name: &NSString,
            directory: Option<&NSString>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[method(emissionDuration)]
        pub unsafe fn emissionDuration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionDuration`][Self::emissionDuration].
        #[method(setEmissionDuration:)]
        pub unsafe fn setEmissionDuration(&self, emission_duration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(emissionDurationVariation)]
        pub unsafe fn emissionDurationVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionDurationVariation`][Self::emissionDurationVariation].
        #[method(setEmissionDurationVariation:)]
        pub unsafe fn setEmissionDurationVariation(&self, emission_duration_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(idleDuration)]
        pub unsafe fn idleDuration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`idleDuration`][Self::idleDuration].
        #[method(setIdleDuration:)]
        pub unsafe fn setIdleDuration(&self, idle_duration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(idleDurationVariation)]
        pub unsafe fn idleDurationVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`idleDurationVariation`][Self::idleDurationVariation].
        #[method(setIdleDurationVariation:)]
        pub unsafe fn setIdleDurationVariation(&self, idle_duration_variation: CGFloat);

        #[method(loops)]
        pub unsafe fn loops(&self) -> bool;

        /// Setter for [`loops`][Self::loops].
        #[method(setLoops:)]
        pub unsafe fn setLoops(&self, loops: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(birthRate)]
        pub unsafe fn birthRate(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`birthRate`][Self::birthRate].
        #[method(setBirthRate:)]
        pub unsafe fn setBirthRate(&self, birth_rate: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(birthRateVariation)]
        pub unsafe fn birthRateVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`birthRateVariation`][Self::birthRateVariation].
        #[method(setBirthRateVariation:)]
        pub unsafe fn setBirthRateVariation(&self, birth_rate_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(warmupDuration)]
        pub unsafe fn warmupDuration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`warmupDuration`][Self::warmupDuration].
        #[method(setWarmupDuration:)]
        pub unsafe fn setWarmupDuration(&self, warmup_duration: CGFloat);

        #[cfg(feature = "SCNGeometry")]
        #[unsafe(method_family(none))]
        #[method_id(emitterShape)]
        pub unsafe fn emitterShape(&self) -> Option<Retained<SCNGeometry>>;

        #[cfg(feature = "SCNGeometry")]
        /// Setter for [`emitterShape`][Self::emitterShape].
        #[method(setEmitterShape:)]
        pub unsafe fn setEmitterShape(&self, emitter_shape: Option<&SCNGeometry>);

        #[method(birthLocation)]
        pub unsafe fn birthLocation(&self) -> SCNParticleBirthLocation;

        /// Setter for [`birthLocation`][Self::birthLocation].
        #[method(setBirthLocation:)]
        pub unsafe fn setBirthLocation(&self, birth_location: SCNParticleBirthLocation);

        #[method(birthDirection)]
        pub unsafe fn birthDirection(&self) -> SCNParticleBirthDirection;

        /// Setter for [`birthDirection`][Self::birthDirection].
        #[method(setBirthDirection:)]
        pub unsafe fn setBirthDirection(&self, birth_direction: SCNParticleBirthDirection);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(spreadingAngle)]
        pub unsafe fn spreadingAngle(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`spreadingAngle`][Self::spreadingAngle].
        #[method(setSpreadingAngle:)]
        pub unsafe fn setSpreadingAngle(&self, spreading_angle: CGFloat);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(emittingDirection)]
        pub unsafe fn emittingDirection(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`emittingDirection`][Self::emittingDirection].
        #[method(setEmittingDirection:)]
        pub unsafe fn setEmittingDirection(&self, emitting_direction: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(orientationDirection)]
        pub unsafe fn orientationDirection(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`orientationDirection`][Self::orientationDirection].
        #[method(setOrientationDirection:)]
        pub unsafe fn setOrientationDirection(&self, orientation_direction: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(acceleration)]
        pub unsafe fn acceleration(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`acceleration`][Self::acceleration].
        #[method(setAcceleration:)]
        pub unsafe fn setAcceleration(&self, acceleration: SCNVector3);

        #[method(isLocal)]
        pub unsafe fn isLocal(&self) -> bool;

        /// Setter for [`isLocal`][Self::isLocal].
        #[method(setLocal:)]
        pub unsafe fn setLocal(&self, local: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleAngle)]
        pub unsafe fn particleAngle(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAngle`][Self::particleAngle].
        #[method(setParticleAngle:)]
        pub unsafe fn setParticleAngle(&self, particle_angle: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleAngleVariation)]
        pub unsafe fn particleAngleVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAngleVariation`][Self::particleAngleVariation].
        #[method(setParticleAngleVariation:)]
        pub unsafe fn setParticleAngleVariation(&self, particle_angle_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleVelocity)]
        pub unsafe fn particleVelocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleVelocity`][Self::particleVelocity].
        #[method(setParticleVelocity:)]
        pub unsafe fn setParticleVelocity(&self, particle_velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleVelocityVariation)]
        pub unsafe fn particleVelocityVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleVelocityVariation`][Self::particleVelocityVariation].
        #[method(setParticleVelocityVariation:)]
        pub unsafe fn setParticleVelocityVariation(&self, particle_velocity_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleAngularVelocity)]
        pub unsafe fn particleAngularVelocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAngularVelocity`][Self::particleAngularVelocity].
        #[method(setParticleAngularVelocity:)]
        pub unsafe fn setParticleAngularVelocity(&self, particle_angular_velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleAngularVelocityVariation)]
        pub unsafe fn particleAngularVelocityVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleAngularVelocityVariation`][Self::particleAngularVelocityVariation].
        #[method(setParticleAngularVelocityVariation:)]
        pub unsafe fn setParticleAngularVelocityVariation(
            &self,
            particle_angular_velocity_variation: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleLifeSpan)]
        pub unsafe fn particleLifeSpan(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleLifeSpan`][Self::particleLifeSpan].
        #[method(setParticleLifeSpan:)]
        pub unsafe fn setParticleLifeSpan(&self, particle_life_span: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleLifeSpanVariation)]
        pub unsafe fn particleLifeSpanVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleLifeSpanVariation`][Self::particleLifeSpanVariation].
        #[method(setParticleLifeSpanVariation:)]
        pub unsafe fn setParticleLifeSpanVariation(&self, particle_life_span_variation: CGFloat);

        #[unsafe(method_family(none))]
        #[method_id(systemSpawnedOnDying)]
        pub unsafe fn systemSpawnedOnDying(&self) -> Option<Retained<SCNParticleSystem>>;

        /// Setter for [`systemSpawnedOnDying`][Self::systemSpawnedOnDying].
        #[method(setSystemSpawnedOnDying:)]
        pub unsafe fn setSystemSpawnedOnDying(
            &self,
            system_spawned_on_dying: Option<&SCNParticleSystem>,
        );

        #[unsafe(method_family(none))]
        #[method_id(systemSpawnedOnCollision)]
        pub unsafe fn systemSpawnedOnCollision(&self) -> Option<Retained<SCNParticleSystem>>;

        /// Setter for [`systemSpawnedOnCollision`][Self::systemSpawnedOnCollision].
        #[method(setSystemSpawnedOnCollision:)]
        pub unsafe fn setSystemSpawnedOnCollision(
            &self,
            system_spawned_on_collision: Option<&SCNParticleSystem>,
        );

        #[unsafe(method_family(none))]
        #[method_id(systemSpawnedOnLiving)]
        pub unsafe fn systemSpawnedOnLiving(&self) -> Option<Retained<SCNParticleSystem>>;

        /// Setter for [`systemSpawnedOnLiving`][Self::systemSpawnedOnLiving].
        #[method(setSystemSpawnedOnLiving:)]
        pub unsafe fn setSystemSpawnedOnLiving(
            &self,
            system_spawned_on_living: Option<&SCNParticleSystem>,
        );

        #[unsafe(method_family(none))]
        #[method_id(particleImage)]
        pub unsafe fn particleImage(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`particleImage`][Self::particleImage].
        #[method(setParticleImage:)]
        pub unsafe fn setParticleImage(&self, particle_image: Option<&AnyObject>);

        #[method(imageSequenceColumnCount)]
        pub unsafe fn imageSequenceColumnCount(&self) -> NSUInteger;

        /// Setter for [`imageSequenceColumnCount`][Self::imageSequenceColumnCount].
        #[method(setImageSequenceColumnCount:)]
        pub unsafe fn setImageSequenceColumnCount(&self, image_sequence_column_count: NSUInteger);

        #[method(imageSequenceRowCount)]
        pub unsafe fn imageSequenceRowCount(&self) -> NSUInteger;

        /// Setter for [`imageSequenceRowCount`][Self::imageSequenceRowCount].
        #[method(setImageSequenceRowCount:)]
        pub unsafe fn setImageSequenceRowCount(&self, image_sequence_row_count: NSUInteger);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(imageSequenceInitialFrame)]
        pub unsafe fn imageSequenceInitialFrame(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`imageSequenceInitialFrame`][Self::imageSequenceInitialFrame].
        #[method(setImageSequenceInitialFrame:)]
        pub unsafe fn setImageSequenceInitialFrame(&self, image_sequence_initial_frame: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(imageSequenceInitialFrameVariation)]
        pub unsafe fn imageSequenceInitialFrameVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`imageSequenceInitialFrameVariation`][Self::imageSequenceInitialFrameVariation].
        #[method(setImageSequenceInitialFrameVariation:)]
        pub unsafe fn setImageSequenceInitialFrameVariation(
            &self,
            image_sequence_initial_frame_variation: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[method(imageSequenceFrameRate)]
        pub unsafe fn imageSequenceFrameRate(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`imageSequenceFrameRate`][Self::imageSequenceFrameRate].
        #[method(setImageSequenceFrameRate:)]
        pub unsafe fn setImageSequenceFrameRate(&self, image_sequence_frame_rate: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(imageSequenceFrameRateVariation)]
        pub unsafe fn imageSequenceFrameRateVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`imageSequenceFrameRateVariation`][Self::imageSequenceFrameRateVariation].
        #[method(setImageSequenceFrameRateVariation:)]
        pub unsafe fn setImageSequenceFrameRateVariation(
            &self,
            image_sequence_frame_rate_variation: CGFloat,
        );

        #[method(imageSequenceAnimationMode)]
        pub unsafe fn imageSequenceAnimationMode(&self) -> SCNParticleImageSequenceAnimationMode;

        /// Setter for [`imageSequenceAnimationMode`][Self::imageSequenceAnimationMode].
        #[method(setImageSequenceAnimationMode:)]
        pub unsafe fn setImageSequenceAnimationMode(
            &self,
            image_sequence_animation_mode: SCNParticleImageSequenceAnimationMode,
        );

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[unsafe(method_family(none))]
        #[method_id(particleColor)]
        pub unsafe fn particleColor(&self) -> Retained<NSColor>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`particleColor`][Self::particleColor].
        #[method(setParticleColor:)]
        pub unsafe fn setParticleColor(&self, particle_color: &NSColor);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[method(particleColorVariation)]
        pub unsafe fn particleColorVariation(&self) -> SCNVector4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`particleColorVariation`][Self::particleColorVariation].
        #[method(setParticleColorVariation:)]
        pub unsafe fn setParticleColorVariation(&self, particle_color_variation: SCNVector4);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleSize)]
        pub unsafe fn particleSize(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleSize`][Self::particleSize].
        #[method(setParticleSize:)]
        pub unsafe fn setParticleSize(&self, particle_size: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleSizeVariation)]
        pub unsafe fn particleSizeVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleSizeVariation`][Self::particleSizeVariation].
        #[method(setParticleSizeVariation:)]
        pub unsafe fn setParticleSizeVariation(&self, particle_size_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleIntensity)]
        pub unsafe fn particleIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleIntensity`][Self::particleIntensity].
        #[method(setParticleIntensity:)]
        pub unsafe fn setParticleIntensity(&self, particle_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleIntensityVariation)]
        pub unsafe fn particleIntensityVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleIntensityVariation`][Self::particleIntensityVariation].
        #[method(setParticleIntensityVariation:)]
        pub unsafe fn setParticleIntensityVariation(&self, particle_intensity_variation: CGFloat);

        #[method(blendMode)]
        pub unsafe fn blendMode(&self) -> SCNParticleBlendMode;

        /// Setter for [`blendMode`][Self::blendMode].
        #[method(setBlendMode:)]
        pub unsafe fn setBlendMode(&self, blend_mode: SCNParticleBlendMode);

        #[method(isBlackPassEnabled)]
        pub unsafe fn isBlackPassEnabled(&self) -> bool;

        /// Setter for [`isBlackPassEnabled`][Self::isBlackPassEnabled].
        #[method(setBlackPassEnabled:)]
        pub unsafe fn setBlackPassEnabled(&self, black_pass_enabled: bool);

        #[method(orientationMode)]
        pub unsafe fn orientationMode(&self) -> SCNParticleOrientationMode;

        /// Setter for [`orientationMode`][Self::orientationMode].
        #[method(setOrientationMode:)]
        pub unsafe fn setOrientationMode(&self, orientation_mode: SCNParticleOrientationMode);

        #[method(sortingMode)]
        pub unsafe fn sortingMode(&self) -> SCNParticleSortingMode;

        /// Setter for [`sortingMode`][Self::sortingMode].
        #[method(setSortingMode:)]
        pub unsafe fn setSortingMode(&self, sorting_mode: SCNParticleSortingMode);

        #[method(isLightingEnabled)]
        pub unsafe fn isLightingEnabled(&self) -> bool;

        /// Setter for [`isLightingEnabled`][Self::isLightingEnabled].
        #[method(setLightingEnabled:)]
        pub unsafe fn setLightingEnabled(&self, lighting_enabled: bool);

        #[method(affectedByGravity)]
        pub unsafe fn affectedByGravity(&self) -> bool;

        /// Setter for [`affectedByGravity`][Self::affectedByGravity].
        #[method(setAffectedByGravity:)]
        pub unsafe fn setAffectedByGravity(&self, affected_by_gravity: bool);

        #[method(affectedByPhysicsFields)]
        pub unsafe fn affectedByPhysicsFields(&self) -> bool;

        /// Setter for [`affectedByPhysicsFields`][Self::affectedByPhysicsFields].
        #[method(setAffectedByPhysicsFields:)]
        pub unsafe fn setAffectedByPhysicsFields(&self, affected_by_physics_fields: bool);

        #[method(particleDiesOnCollision)]
        pub unsafe fn particleDiesOnCollision(&self) -> bool;

        /// Setter for [`particleDiesOnCollision`][Self::particleDiesOnCollision].
        #[method(setParticleDiesOnCollision:)]
        pub unsafe fn setParticleDiesOnCollision(&self, particle_dies_on_collision: bool);

        #[cfg(feature = "SCNNode")]
        #[unsafe(method_family(none))]
        #[method_id(colliderNodes)]
        pub unsafe fn colliderNodes(&self) -> Option<Retained<NSArray<SCNNode>>>;

        #[cfg(feature = "SCNNode")]
        /// Setter for [`colliderNodes`][Self::colliderNodes].
        #[method(setColliderNodes:)]
        pub unsafe fn setColliderNodes(&self, collider_nodes: Option<&NSArray<SCNNode>>);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleMass)]
        pub unsafe fn particleMass(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleMass`][Self::particleMass].
        #[method(setParticleMass:)]
        pub unsafe fn setParticleMass(&self, particle_mass: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleMassVariation)]
        pub unsafe fn particleMassVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleMassVariation`][Self::particleMassVariation].
        #[method(setParticleMassVariation:)]
        pub unsafe fn setParticleMassVariation(&self, particle_mass_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleBounce)]
        pub unsafe fn particleBounce(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleBounce`][Self::particleBounce].
        #[method(setParticleBounce:)]
        pub unsafe fn setParticleBounce(&self, particle_bounce: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleBounceVariation)]
        pub unsafe fn particleBounceVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleBounceVariation`][Self::particleBounceVariation].
        #[method(setParticleBounceVariation:)]
        pub unsafe fn setParticleBounceVariation(&self, particle_bounce_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleFriction)]
        pub unsafe fn particleFriction(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleFriction`][Self::particleFriction].
        #[method(setParticleFriction:)]
        pub unsafe fn setParticleFriction(&self, particle_friction: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleFrictionVariation)]
        pub unsafe fn particleFrictionVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleFrictionVariation`][Self::particleFrictionVariation].
        #[method(setParticleFrictionVariation:)]
        pub unsafe fn setParticleFrictionVariation(&self, particle_friction_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleCharge)]
        pub unsafe fn particleCharge(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleCharge`][Self::particleCharge].
        #[method(setParticleCharge:)]
        pub unsafe fn setParticleCharge(&self, particle_charge: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(particleChargeVariation)]
        pub unsafe fn particleChargeVariation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`particleChargeVariation`][Self::particleChargeVariation].
        #[method(setParticleChargeVariation:)]
        pub unsafe fn setParticleChargeVariation(&self, particle_charge_variation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(dampingFactor)]
        pub unsafe fn dampingFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`dampingFactor`][Self::dampingFactor].
        #[method(setDampingFactor:)]
        pub unsafe fn setDampingFactor(&self, damping_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(speedFactor)]
        pub unsafe fn speedFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`speedFactor`][Self::speedFactor].
        #[method(setSpeedFactor:)]
        pub unsafe fn setSpeedFactor(&self, speed_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(stretchFactor)]
        pub unsafe fn stretchFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`stretchFactor`][Self::stretchFactor].
        #[method(setStretchFactor:)]
        pub unsafe fn setStretchFactor(&self, stretch_factor: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[method(fresnelExponent)]
        pub unsafe fn fresnelExponent(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`fresnelExponent`][Self::fresnelExponent].
        #[method(setFresnelExponent:)]
        pub unsafe fn setFresnelExponent(&self, fresnel_exponent: CGFloat);

        /// Determines whether the receiver writes to the depth buffer when rendered. Defaults to NO.
        #[method(writesToDepthBuffer)]
        pub unsafe fn writesToDepthBuffer(&self) -> bool;

        /// Setter for [`writesToDepthBuffer`][Self::writesToDepthBuffer].
        #[method(setWritesToDepthBuffer:)]
        pub unsafe fn setWritesToDepthBuffer(&self, writes_to_depth_buffer: bool);

        #[unsafe(method_family(none))]
        #[method_id(propertyControllers)]
        pub unsafe fn propertyControllers(
            &self,
        ) -> Option<Retained<NSDictionary<SCNParticleProperty, SCNParticlePropertyController>>>;

        /// Setter for [`propertyControllers`][Self::propertyControllers].
        #[method(setPropertyControllers:)]
        pub unsafe fn setPropertyControllers(
            &self,
            property_controllers: Option<
                &NSDictionary<SCNParticleProperty, SCNParticlePropertyController>,
            >,
        );

        #[method(reset)]
        pub unsafe fn reset(&self);

        #[cfg(feature = "block2")]
        #[method(handleEvent:forProperties:withBlock:)]
        pub unsafe fn handleEvent_forProperties_withBlock(
            &self,
            event: SCNParticleEvent,
            properties: &NSArray<SCNParticleProperty>,
            block: SCNParticleEventBlock,
        );

        #[cfg(feature = "block2")]
        #[method(addModifierForProperties:atStage:withBlock:)]
        pub unsafe fn addModifierForProperties_atStage_withBlock(
            &self,
            properties: &NSArray<SCNParticleProperty>,
            stage: SCNParticleModifierStage,
            block: SCNParticleModifierBlock,
        );

        #[method(removeModifiersOfStage:)]
        pub unsafe fn removeModifiersOfStage(&self, stage: SCNParticleModifierStage);

        #[method(removeAllModifiers)]
        pub unsafe fn removeAllModifiers(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNParticleSystem {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// SCNParticleSystemSupport
    #[cfg(feature = "SCNNode")]
    unsafe impl SCNNode {
        #[method(addParticleSystem:)]
        pub unsafe fn addParticleSystem(&self, system: &SCNParticleSystem);

        #[method(removeAllParticleSystems)]
        pub unsafe fn removeAllParticleSystems(&self);

        #[method(removeParticleSystem:)]
        pub unsafe fn removeParticleSystem(&self, system: &SCNParticleSystem);

        #[unsafe(method_family(none))]
        #[method_id(particleSystems)]
        pub unsafe fn particleSystems(&self) -> Option<Retained<NSArray<SCNParticleSystem>>>;
    }
);

extern_methods!(
    /// SCNParticleSystemSupport
    #[cfg(feature = "SCNScene")]
    unsafe impl SCNScene {
        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        #[method(addParticleSystem:withTransform:)]
        pub unsafe fn addParticleSystem_withTransform(
            &self,
            system: &SCNParticleSystem,
            transform: SCNMatrix4,
        );

        #[method(removeAllParticleSystems)]
        pub unsafe fn removeAllParticleSystems(&self);

        #[method(removeParticleSystem:)]
        pub unsafe fn removeParticleSystem(&self, system: &SCNParticleSystem);

        #[unsafe(method_family(none))]
        #[method_id(particleSystems)]
        pub unsafe fn particleSystems(&self) -> Option<Retained<NSArray<SCNParticleSystem>>>;
    }
);
