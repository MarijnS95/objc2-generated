//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// SCNPhysicsBehavior is an abstract class that represents a behavior in the physics world.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsbehavior?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsBehavior;
);

unsafe impl NSCoding for SCNPhysicsBehavior {}

unsafe impl NSObjectProtocol for SCNPhysicsBehavior {}

unsafe impl NSSecureCoding for SCNPhysicsBehavior {}

impl SCNPhysicsBehavior {
    extern_methods!();
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsBehavior {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNPhysicsHingeJoint makes two bodies to move like they are connected by a hinge. It is for example suitable for doors, chains...
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicshingejoint?language=objc)
    #[unsafe(super(SCNPhysicsBehavior, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsHingeJoint;
);

unsafe impl NSCoding for SCNPhysicsHingeJoint {}

unsafe impl NSObjectProtocol for SCNPhysicsHingeJoint {}

unsafe impl NSSecureCoding for SCNPhysicsHingeJoint {}

impl SCNPhysicsHingeJoint {
    extern_methods!(
        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBodyA_axisA_anchorA_bodyB_axisB_anchorB(
            body_a: &SCNPhysicsBody,
            axis_a: SCNVector3,
            anchor_a: SCNVector3,
            body_b: &SCNPhysicsBody,
            axis_b: SCNVector3,
            anchor_b: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBody:axis:anchor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBody_axis_anchor(
            body: &SCNPhysicsBody,
            axis: SCNVector3,
            anchor: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyA))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyA(&self) -> Retained<SCNPhysicsBody>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(axisA))]
        #[unsafe(method_family = none)]
        pub unsafe fn axisA(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`axisA`][Self::axisA].
        #[unsafe(method(setAxisA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAxisA(&self, axis_a: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorA))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorA(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorA`][Self::anchorA].
        #[unsafe(method(setAnchorA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorA(&self, anchor_a: SCNVector3);

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyB))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyB(&self) -> Option<Retained<SCNPhysicsBody>>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(axisB))]
        #[unsafe(method_family = none)]
        pub unsafe fn axisB(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`axisB`][Self::axisB].
        #[unsafe(method(setAxisB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAxisB(&self, axis_b: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorB))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorB(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorB`][Self::anchorB].
        #[unsafe(method(setAnchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorB(&self, anchor_b: SCNVector3);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsHingeJoint {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNPhysicsBallSocketJoint makes two bodies to move like they are connected by a ball-and-socket joint (i.e it allows rotations around all axes).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsballsocketjoint?language=objc)
    #[unsafe(super(SCNPhysicsBehavior, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsBallSocketJoint;
);

unsafe impl NSCoding for SCNPhysicsBallSocketJoint {}

unsafe impl NSObjectProtocol for SCNPhysicsBallSocketJoint {}

unsafe impl NSSecureCoding for SCNPhysicsBallSocketJoint {}

impl SCNPhysicsBallSocketJoint {
    extern_methods!(
        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBodyA:anchorA:bodyB:anchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBodyA_anchorA_bodyB_anchorB(
            body_a: &SCNPhysicsBody,
            anchor_a: SCNVector3,
            body_b: &SCNPhysicsBody,
            anchor_b: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBody:anchor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBody_anchor(
            body: &SCNPhysicsBody,
            anchor: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyA))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyA(&self) -> Retained<SCNPhysicsBody>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorA))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorA(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorA`][Self::anchorA].
        #[unsafe(method(setAnchorA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorA(&self, anchor_a: SCNVector3);

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyB))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyB(&self) -> Option<Retained<SCNPhysicsBody>>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorB))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorB(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorB`][Self::anchorB].
        #[unsafe(method(setAnchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorB(&self, anchor_b: SCNVector3);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsBallSocketJoint {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNPhysicsSliderJoint provides a linear sliding joint between two bodies.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicssliderjoint?language=objc)
    #[unsafe(super(SCNPhysicsBehavior, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsSliderJoint;
);

unsafe impl NSCoding for SCNPhysicsSliderJoint {}

unsafe impl NSObjectProtocol for SCNPhysicsSliderJoint {}

unsafe impl NSSecureCoding for SCNPhysicsSliderJoint {}

impl SCNPhysicsSliderJoint {
    extern_methods!(
        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBodyA_axisA_anchorA_bodyB_axisB_anchorB(
            body_a: &SCNPhysicsBody,
            axis_a: SCNVector3,
            anchor_a: SCNVector3,
            body_b: &SCNPhysicsBody,
            axis_b: SCNVector3,
            anchor_b: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        #[unsafe(method(jointWithBody:axis:anchor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBody_axis_anchor(
            body: &SCNPhysicsBody,
            axis: SCNVector3,
            anchor: SCNVector3,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyA))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyA(&self) -> Retained<SCNPhysicsBody>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(axisA))]
        #[unsafe(method_family = none)]
        pub unsafe fn axisA(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`axisA`][Self::axisA].
        #[unsafe(method(setAxisA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAxisA(&self, axis_a: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorA))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorA(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorA`][Self::anchorA].
        #[unsafe(method(setAnchorA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorA(&self, anchor_a: SCNVector3);

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyB))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyB(&self) -> Option<Retained<SCNPhysicsBody>>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(axisB))]
        #[unsafe(method_family = none)]
        pub unsafe fn axisB(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`axisB`][Self::axisB].
        #[unsafe(method(setAxisB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAxisB(&self, axis_b: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(anchorB))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchorB(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`anchorB`][Self::anchorB].
        #[unsafe(method(setAnchorB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnchorB(&self, anchor_b: SCNVector3);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(minimumLinearLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumLinearLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`minimumLinearLimit`][Self::minimumLinearLimit].
        #[unsafe(method(setMinimumLinearLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinimumLinearLimit(&self, minimum_linear_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumLinearLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumLinearLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumLinearLimit`][Self::maximumLinearLimit].
        #[unsafe(method(setMaximumLinearLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumLinearLimit(&self, maximum_linear_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(minimumAngularLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumAngularLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`minimumAngularLimit`][Self::minimumAngularLimit].
        #[unsafe(method(setMinimumAngularLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinimumAngularLimit(&self, minimum_angular_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumAngularLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumAngularLimit(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumAngularLimit`][Self::maximumAngularLimit].
        #[unsafe(method(setMaximumAngularLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumAngularLimit(&self, maximum_angular_limit: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(motorTargetLinearVelocity))]
        #[unsafe(method_family = none)]
        pub unsafe fn motorTargetLinearVelocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`motorTargetLinearVelocity`][Self::motorTargetLinearVelocity].
        #[unsafe(method(setMotorTargetLinearVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotorTargetLinearVelocity(&self, motor_target_linear_velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(motorMaximumForce))]
        #[unsafe(method_family = none)]
        pub unsafe fn motorMaximumForce(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`motorMaximumForce`][Self::motorMaximumForce].
        #[unsafe(method(setMotorMaximumForce:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotorMaximumForce(&self, motor_maximum_force: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(motorTargetAngularVelocity))]
        #[unsafe(method_family = none)]
        pub unsafe fn motorTargetAngularVelocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`motorTargetAngularVelocity`][Self::motorTargetAngularVelocity].
        #[unsafe(method(setMotorTargetAngularVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotorTargetAngularVelocity(&self, motor_target_angular_velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(motorMaximumTorque))]
        #[unsafe(method_family = none)]
        pub unsafe fn motorMaximumTorque(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`motorMaximumTorque`][Self::motorMaximumTorque].
        #[unsafe(method(setMotorMaximumTorque:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotorMaximumTorque(&self, motor_maximum_torque: CGFloat);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsSliderJoint {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsconetwistjoint?language=objc)
    #[unsafe(super(SCNPhysicsBehavior, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsConeTwistJoint;
);

unsafe impl NSCoding for SCNPhysicsConeTwistJoint {}

unsafe impl NSObjectProtocol for SCNPhysicsConeTwistJoint {}

unsafe impl NSSecureCoding for SCNPhysicsConeTwistJoint {}

impl SCNPhysicsConeTwistJoint {
    extern_methods!(
        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-quartz-core"
        ))]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(jointWithBodyA:frameA:bodyB:frameB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBodyA_frameA_bodyB_frameB(
            body_a: &SCNPhysicsBody,
            frame_a: SCNMatrix4,
            body_b: &SCNPhysicsBody,
            frame_b: SCNMatrix4,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "SCNPhysicsBody",
            feature = "SceneKitTypes",
            feature = "objc2-quartz-core"
        ))]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(jointWithBody:frame:))]
        #[unsafe(method_family = none)]
        pub unsafe fn jointWithBody_frame(
            body: &SCNPhysicsBody,
            frame: SCNMatrix4,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyA))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyA(&self) -> Retained<SCNPhysicsBody>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(frameA))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameA(&self) -> SCNMatrix4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`frameA`][Self::frameA].
        #[unsafe(method(setFrameA:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFrameA(&self, frame_a: SCNMatrix4);

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(bodyB))]
        #[unsafe(method_family = none)]
        pub unsafe fn bodyB(&self) -> Option<Retained<SCNPhysicsBody>>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(frameB))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameB(&self) -> SCNMatrix4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`frameB`][Self::frameB].
        #[unsafe(method(setFrameB:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFrameB(&self, frame_b: SCNMatrix4);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumAngularLimit1))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumAngularLimit1(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumAngularLimit1`][Self::maximumAngularLimit1].
        #[unsafe(method(setMaximumAngularLimit1:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumAngularLimit1(&self, maximum_angular_limit1: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumAngularLimit2))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumAngularLimit2(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumAngularLimit2`][Self::maximumAngularLimit2].
        #[unsafe(method(setMaximumAngularLimit2:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumAngularLimit2(&self, maximum_angular_limit2: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumTwistAngle))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumTwistAngle(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumTwistAngle`][Self::maximumTwistAngle].
        #[unsafe(method(setMaximumTwistAngle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumTwistAngle(&self, maximum_twist_angle: CGFloat);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsConeTwistJoint {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNPhysicsVehicleWheel represents a wheel that can be attached to a SCNPhysicsVehicle instance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsvehiclewheel?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsVehicleWheel;
);

unsafe impl NSCoding for SCNPhysicsVehicleWheel {}

unsafe impl NSCopying for SCNPhysicsVehicleWheel {}

unsafe impl CopyingHelper for SCNPhysicsVehicleWheel {
    type Result = Self;
}

unsafe impl NSObjectProtocol for SCNPhysicsVehicleWheel {}

unsafe impl NSSecureCoding for SCNPhysicsVehicleWheel {}

impl SCNPhysicsVehicleWheel {
    extern_methods!(
        #[cfg(feature = "SCNNode")]
        #[unsafe(method(wheelWithNode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn wheelWithNode(node: &SCNNode) -> Retained<Self>;

        #[cfg(feature = "SCNNode")]
        #[unsafe(method(node))]
        #[unsafe(method_family = none)]
        pub unsafe fn node(&self) -> Retained<SCNNode>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(suspensionStiffness))]
        #[unsafe(method_family = none)]
        pub unsafe fn suspensionStiffness(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`suspensionStiffness`][Self::suspensionStiffness].
        #[unsafe(method(setSuspensionStiffness:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSuspensionStiffness(&self, suspension_stiffness: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(suspensionCompression))]
        #[unsafe(method_family = none)]
        pub unsafe fn suspensionCompression(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`suspensionCompression`][Self::suspensionCompression].
        #[unsafe(method(setSuspensionCompression:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSuspensionCompression(&self, suspension_compression: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(suspensionDamping))]
        #[unsafe(method_family = none)]
        pub unsafe fn suspensionDamping(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`suspensionDamping`][Self::suspensionDamping].
        #[unsafe(method(setSuspensionDamping:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSuspensionDamping(&self, suspension_damping: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumSuspensionTravel))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumSuspensionTravel(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumSuspensionTravel`][Self::maximumSuspensionTravel].
        #[unsafe(method(setMaximumSuspensionTravel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumSuspensionTravel(&self, maximum_suspension_travel: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(frictionSlip))]
        #[unsafe(method_family = none)]
        pub unsafe fn frictionSlip(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`frictionSlip`][Self::frictionSlip].
        #[unsafe(method(setFrictionSlip:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFrictionSlip(&self, friction_slip: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maximumSuspensionForce))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumSuspensionForce(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumSuspensionForce`][Self::maximumSuspensionForce].
        #[unsafe(method(setMaximumSuspensionForce:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumSuspensionForce(&self, maximum_suspension_force: CGFloat);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(connectionPosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn connectionPosition(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`connectionPosition`][Self::connectionPosition].
        #[unsafe(method(setConnectionPosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setConnectionPosition(&self, connection_position: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(steeringAxis))]
        #[unsafe(method_family = none)]
        pub unsafe fn steeringAxis(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`steeringAxis`][Self::steeringAxis].
        #[unsafe(method(setSteeringAxis:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSteeringAxis(&self, steering_axis: SCNVector3);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(axle))]
        #[unsafe(method_family = none)]
        pub unsafe fn axle(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`axle`][Self::axle].
        #[unsafe(method(setAxle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAxle(&self, axle: SCNVector3);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(radius))]
        #[unsafe(method_family = none)]
        pub unsafe fn radius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`radius`][Self::radius].
        #[unsafe(method(setRadius:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRadius(&self, radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(suspensionRestLength))]
        #[unsafe(method_family = none)]
        pub unsafe fn suspensionRestLength(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`suspensionRestLength`][Self::suspensionRestLength].
        #[unsafe(method(setSuspensionRestLength:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSuspensionRestLength(&self, suspension_rest_length: CGFloat);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsVehicleWheel {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNPhysicsVehicle provides a vehicle behavior.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsvehicle?language=objc)
    #[unsafe(super(SCNPhysicsBehavior, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsVehicle;
);

unsafe impl NSCoding for SCNPhysicsVehicle {}

unsafe impl NSObjectProtocol for SCNPhysicsVehicle {}

unsafe impl NSSecureCoding for SCNPhysicsVehicle {}

impl SCNPhysicsVehicle {
    extern_methods!(
        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(vehicleWithChassisBody:wheels:))]
        #[unsafe(method_family = none)]
        pub unsafe fn vehicleWithChassisBody_wheels(
            chassis_body: &SCNPhysicsBody,
            wheels: &NSArray<SCNPhysicsVehicleWheel>,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(speedInKilometersPerHour))]
        #[unsafe(method_family = none)]
        pub unsafe fn speedInKilometersPerHour(&self) -> CGFloat;

        #[unsafe(method(wheels))]
        #[unsafe(method_family = none)]
        pub unsafe fn wheels(&self) -> Retained<NSArray<SCNPhysicsVehicleWheel>>;

        #[cfg(feature = "SCNPhysicsBody")]
        #[unsafe(method(chassisBody))]
        #[unsafe(method_family = none)]
        pub unsafe fn chassisBody(&self) -> Retained<SCNPhysicsBody>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(applyEngineForce:forWheelAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn applyEngineForce_forWheelAtIndex(&self, value: CGFloat, index: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(setSteeringAngle:forWheelAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSteeringAngle_forWheelAtIndex(&self, value: CGFloat, index: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(applyBrakingForce:forWheelAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn applyBrakingForce_forWheelAtIndex(&self, value: CGFloat, index: NSInteger);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsVehicle {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
