//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// SCNSkinner controls the deformation of skinned geometries
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnskinner?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNSkinner;
);

unsafe impl NSCoding for SCNSkinner {}

unsafe impl NSObjectProtocol for SCNSkinner {}

unsafe impl NSSecureCoding for SCNSkinner {}

extern_methods!(
    unsafe impl SCNSkinner {
        #[cfg(feature = "SCNNode")]
        /// Specifies the skeleton of the receiver.
        ///
        /// When setting a new skeleton, the new skeleton must have the same hierarchy of joints.
        #[method_id(skeleton)]
        #[unsafe(method_family = none)]
        pub unsafe fn skeleton(&self) -> Option<Retained<SCNNode>>;

        #[cfg(feature = "SCNNode")]
        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`skeleton`][Self::skeleton].
        #[method(setSkeleton:)]
        pub unsafe fn setSkeleton(&self, skeleton: Option<&SCNNode>);

        #[cfg(all(feature = "SCNGeometry", feature = "SCNNode"))]
        /// Creates and initialize a skinner instance with the specified parameters.
        ///
        /// Parameter `baseGeometry`: Specifies the base geometry used by the skinner
        ///
        /// Parameter `bones`: Specifies the array of bones.
        ///
        /// Parameter `boneInverseBindTransforms`: The inverse of the bone’s bind-space transformation matrix at the time the bind shape was bound to this bone.
        ///
        /// Parameter `boneWeights`: A buffer of weights. This contains the weights of every influence of every vertex. The number of influence per vertex is controlled by the number of component in the geometry source.
        ///
        /// Parameter `boneIndices`: A buffer of bone indexes. This buffer contains the corresponding index in the bones array for every weight in the weights buffer.
        #[method_id(skinnerWithBaseGeometry:bones:boneInverseBindTransforms:boneWeights:boneIndices:)]
        #[unsafe(method_family = none)]
        pub unsafe fn skinnerWithBaseGeometry_bones_boneInverseBindTransforms_boneWeights_boneIndices(
            base_geometry: Option<&SCNGeometry>,
            bones: &NSArray<SCNNode>,
            bone_inverse_bind_transforms: Option<&NSArray<NSValue>>,
            bone_weights: &SCNGeometrySource,
            bone_indices: &SCNGeometrySource,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNGeometry")]
        /// Specifies the base geometry of the receiver.
        ///
        /// Updating this will change the geometry of all the nodes sharing the skinner.
        /// Access the node's geometry if you want to update this specific skinner properties (materials for example).
        /// Access this property if you want a whole new geometry (which will necessarily be shared among the skinner instances), with
        /// different sources, for instance.
        #[method_id(baseGeometry)]
        #[unsafe(method_family = none)]
        pub unsafe fn baseGeometry(&self) -> Option<Retained<SCNGeometry>>;

        #[cfg(feature = "SCNGeometry")]
        /// Setter for [`baseGeometry`][Self::baseGeometry].
        #[method(setBaseGeometry:)]
        pub unsafe fn setBaseGeometry(&self, base_geometry: Option<&SCNGeometry>);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Specifies the transform of the baseGeometry at the time when the mesh was bound to a skeleton. This transforms the baseGeometry from object space to a space on which the skinning then applies.
        #[method(baseGeometryBindTransform)]
        pub unsafe fn baseGeometryBindTransform(&self) -> SCNMatrix4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`baseGeometryBindTransform`][Self::baseGeometryBindTransform].
        #[method(setBaseGeometryBindTransform:)]
        pub unsafe fn setBaseGeometryBindTransform(&self, base_geometry_bind_transform: SCNMatrix4);

        /// The inverse of the bone’s bind-space transformation matrix at the time the bind shape was bound to this bone.
        ///
        /// boneInverseBindTransforms is an array of SCNMatrix4 wrapped into instances of NSValue.
        #[method_id(boneInverseBindTransforms)]
        #[unsafe(method_family = none)]
        pub unsafe fn boneInverseBindTransforms(&self) -> Option<Retained<NSArray<NSValue>>>;

        #[cfg(feature = "SCNNode")]
        /// The bones of the skinner.
        #[method_id(bones)]
        #[unsafe(method_family = none)]
        pub unsafe fn bones(&self) -> Retained<NSArray<SCNNode>>;

        #[cfg(feature = "SCNGeometry")]
        /// The bone weights of the receiver.
        #[method_id(boneWeights)]
        #[unsafe(method_family = none)]
        pub unsafe fn boneWeights(&self) -> Retained<SCNGeometrySource>;

        #[cfg(feature = "SCNGeometry")]
        /// The bone indices of the receiver.
        #[method_id(boneIndices)]
        #[unsafe(method_family = none)]
        pub unsafe fn boneIndices(&self) -> Retained<SCNGeometrySource>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl SCNSkinner {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
