//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/naturallanguage/nldistancetype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NLDistanceType(pub NSInteger);
impl NLDistanceType {
    #[doc(alias = "NLDistanceTypeCosine")]
    pub const Cosine: Self = Self(0);
}

unsafe impl Encode for NLDistanceType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NLDistanceType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/naturallanguage/nldistance?language=objc)
pub type NLDistance = c_double;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/naturallanguage/nlembedding?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NLEmbedding;
);

unsafe impl NSObjectProtocol for NLEmbedding {}

extern_methods!(
    unsafe impl NLEmbedding {
        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(wordEmbeddingForLanguage:)]
        pub unsafe fn wordEmbeddingForLanguage(
            language: &NLLanguage,
        ) -> Option<Retained<NLEmbedding>>;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(wordEmbeddingForLanguage:revision:)]
        pub unsafe fn wordEmbeddingForLanguage_revision(
            language: &NLLanguage,
            revision: NSUInteger,
        ) -> Option<Retained<NLEmbedding>>;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(sentenceEmbeddingForLanguage:)]
        pub unsafe fn sentenceEmbeddingForLanguage(
            language: &NLLanguage,
        ) -> Option<Retained<NLEmbedding>>;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(sentenceEmbeddingForLanguage:revision:)]
        pub unsafe fn sentenceEmbeddingForLanguage_revision(
            language: &NLLanguage,
            revision: NSUInteger,
        ) -> Option<Retained<NLEmbedding>>;

        #[unsafe(method_family(none))]
        #[method_id(embeddingWithContentsOfURL:error:_)]
        pub unsafe fn embeddingWithContentsOfURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method(containsString:)]
        pub unsafe fn containsString(&self, string: &NSString) -> bool;

        #[method(distanceBetweenString:andString:distanceType:)]
        pub unsafe fn distanceBetweenString_andString_distanceType(
            &self,
            first_string: &NSString,
            second_string: &NSString,
            distance_type: NLDistanceType,
        ) -> NLDistance;

        #[cfg(feature = "block2")]
        #[method(enumerateNeighborsForString:maximumCount:distanceType:usingBlock:)]
        pub unsafe fn enumerateNeighborsForString_maximumCount_distanceType_usingBlock(
            &self,
            string: &NSString,
            max_count: NSUInteger,
            distance_type: NLDistanceType,
            block: &block2::Block<dyn Fn(NonNull<NSString>, NLDistance, NonNull<Bool>) + '_>,
        );

        #[cfg(feature = "block2")]
        #[method(enumerateNeighborsForString:maximumCount:maximumDistance:distanceType:usingBlock:)]
        pub unsafe fn enumerateNeighborsForString_maximumCount_maximumDistance_distanceType_usingBlock(
            &self,
            string: &NSString,
            max_count: NSUInteger,
            max_distance: NLDistance,
            distance_type: NLDistanceType,
            block: &block2::Block<dyn Fn(NonNull<NSString>, NLDistance, NonNull<Bool>) + '_>,
        );

        #[unsafe(method_family(none))]
        #[method_id(neighborsForString:maximumCount:distanceType:)]
        pub unsafe fn neighborsForString_maximumCount_distanceType(
            &self,
            string: &NSString,
            max_count: NSUInteger,
            distance_type: NLDistanceType,
        ) -> Option<Retained<NSArray<NSString>>>;

        #[unsafe(method_family(none))]
        #[method_id(neighborsForString:maximumCount:maximumDistance:distanceType:)]
        pub unsafe fn neighborsForString_maximumCount_maximumDistance_distanceType(
            &self,
            string: &NSString,
            max_count: NSUInteger,
            max_distance: NLDistance,
            distance_type: NLDistanceType,
        ) -> Option<Retained<NSArray<NSString>>>;

        #[unsafe(method_family(none))]
        #[method_id(vectorForString:)]
        pub unsafe fn vectorForString(
            &self,
            string: &NSString,
        ) -> Option<Retained<NSArray<NSNumber>>>;

        #[method(getVector:forString:)]
        pub unsafe fn getVector_forString(
            &self,
            vector: NonNull<c_float>,
            string: &NSString,
        ) -> bool;

        #[cfg(feature = "block2")]
        #[method(enumerateNeighborsForVector:maximumCount:distanceType:usingBlock:)]
        pub unsafe fn enumerateNeighborsForVector_maximumCount_distanceType_usingBlock(
            &self,
            vector: &NSArray<NSNumber>,
            max_count: NSUInteger,
            distance_type: NLDistanceType,
            block: &block2::Block<dyn Fn(NonNull<NSString>, NLDistance, NonNull<Bool>) + '_>,
        );

        #[cfg(feature = "block2")]
        #[method(enumerateNeighborsForVector:maximumCount:maximumDistance:distanceType:usingBlock:)]
        pub unsafe fn enumerateNeighborsForVector_maximumCount_maximumDistance_distanceType_usingBlock(
            &self,
            vector: &NSArray<NSNumber>,
            max_count: NSUInteger,
            max_distance: NLDistance,
            distance_type: NLDistanceType,
            block: &block2::Block<dyn Fn(NonNull<NSString>, NLDistance, NonNull<Bool>) + '_>,
        );

        #[unsafe(method_family(none))]
        #[method_id(neighborsForVector:maximumCount:distanceType:)]
        pub unsafe fn neighborsForVector_maximumCount_distanceType(
            &self,
            vector: &NSArray<NSNumber>,
            max_count: NSUInteger,
            distance_type: NLDistanceType,
        ) -> Retained<NSArray<NSString>>;

        #[unsafe(method_family(none))]
        #[method_id(neighborsForVector:maximumCount:maximumDistance:distanceType:)]
        pub unsafe fn neighborsForVector_maximumCount_maximumDistance_distanceType(
            &self,
            vector: &NSArray<NSNumber>,
            max_count: NSUInteger,
            max_distance: NLDistance,
            distance_type: NLDistanceType,
        ) -> Retained<NSArray<NSString>>;

        #[method(dimension)]
        pub unsafe fn dimension(&self) -> NSUInteger;

        #[method(vocabularySize)]
        pub unsafe fn vocabularySize(&self) -> NSUInteger;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(language)]
        pub unsafe fn language(&self) -> Option<Retained<NLLanguage>>;

        #[method(revision)]
        pub unsafe fn revision(&self) -> NSUInteger;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(supportedRevisionsForLanguage:)]
        pub unsafe fn supportedRevisionsForLanguage(language: &NLLanguage) -> Retained<NSIndexSet>;

        #[cfg(feature = "NLLanguage")]
        #[method(currentRevisionForLanguage:)]
        pub unsafe fn currentRevisionForLanguage(language: &NLLanguage) -> NSUInteger;

        #[cfg(feature = "NLLanguage")]
        #[unsafe(method_family(none))]
        #[method_id(supportedSentenceEmbeddingRevisionsForLanguage:)]
        pub unsafe fn supportedSentenceEmbeddingRevisionsForLanguage(
            language: &NLLanguage,
        ) -> Retained<NSIndexSet>;

        #[cfg(feature = "NLLanguage")]
        #[method(currentSentenceEmbeddingRevisionForLanguage:)]
        pub unsafe fn currentSentenceEmbeddingRevisionForLanguage(
            language: &NLLanguage,
        ) -> NSUInteger;

        #[cfg(feature = "NLLanguage")]
        #[method(writeEmbeddingForDictionary:language:revision:toURL:error:_)]
        pub unsafe fn writeEmbeddingForDictionary_language_revision_toURL_error(
            dictionary: &NSDictionary<NSString, NSArray<NSNumber>>,
            language: Option<&NLLanguage>,
            revision: NSUInteger,
            url: &NSURL,
        ) -> Result<(), Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NLEmbedding {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
