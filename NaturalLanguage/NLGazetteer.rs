//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/naturallanguage/nlgazetteer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NLGazetteer;
);

unsafe impl NSObjectProtocol for NLGazetteer {}

extern_methods!(
    unsafe impl NLGazetteer {
        #[method_id(gazetteerWithContentsOfURL:error:_)]
        #[unsafe(method_family = none)]
        pub unsafe fn gazetteerWithContentsOfURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(initWithContentsOfURL:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(initWithData:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithData_error(
            this: Allocated<Self>,
            data: &NSData,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "NLLanguage")]
        #[method_id(initWithDictionary:language:error:_)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDictionary_language_error(
            this: Allocated<Self>,
            dictionary: &NSDictionary<NSString, NSArray<NSString>>,
            language: Option<&NLLanguage>,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[method_id(labelForString:)]
        #[unsafe(method_family = none)]
        pub unsafe fn labelForString(&self, string: &NSString) -> Option<Retained<NSString>>;

        #[cfg(feature = "NLLanguage")]
        #[method_id(language)]
        #[unsafe(method_family = none)]
        pub unsafe fn language(&self) -> Option<Retained<NLLanguage>>;

        #[method_id(data)]
        #[unsafe(method_family = none)]
        pub unsafe fn data(&self) -> Retained<NSData>;

        #[cfg(feature = "NLLanguage")]
        #[method(writeGazetteerForDictionary:language:toURL:error:_)]
        pub unsafe fn writeGazetteerForDictionary_language_toURL_error(
            dictionary: &NSDictionary<NSString, NSArray<NSString>>,
            language: Option<&NLLanguage>,
            url: &NSURL,
        ) -> Result<(), Retained<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NLGazetteer {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
