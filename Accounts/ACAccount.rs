//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accounts/acaccount?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
    pub struct ACAccount;
);

unsafe impl NSObjectProtocol for ACAccount {}

extern_methods!(
    unsafe impl ACAccount {
        #[cfg(feature = "ACAccountType")]
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(initWithAccountType:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAccountType(
            this: Allocated<Self>,
            r#type: Option<&ACAccountType>,
        ) -> Option<Retained<Self>>;

        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(identifier)]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "ACAccountType")]
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(accountType)]
        #[unsafe(method_family = none)]
        pub unsafe fn accountType(&self) -> Option<Retained<ACAccountType>>;

        #[cfg(feature = "ACAccountType")]
        /// Setter for [`accountType`][Self::accountType].
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method(setAccountType:)]
        pub unsafe fn setAccountType(&self, account_type: Option<&ACAccountType>);

        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(accountDescription)]
        #[unsafe(method_family = none)]
        pub unsafe fn accountDescription(&self) -> Retained<NSString>;

        /// Setter for [`accountDescription`][Self::accountDescription].
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method(setAccountDescription:)]
        pub unsafe fn setAccountDescription(&self, account_description: Option<&NSString>);

        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(username)]
        #[unsafe(method_family = none)]
        pub unsafe fn username(&self) -> Retained<NSString>;

        /// Setter for [`username`][Self::username].
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method(setUsername:)]
        pub unsafe fn setUsername(&self, username: Option<&NSString>);

        #[method_id(userFullName)]
        #[unsafe(method_family = none)]
        pub unsafe fn userFullName(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "ACAccountCredential")]
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method_id(credential)]
        #[unsafe(method_family = none)]
        pub unsafe fn credential(&self) -> Option<Retained<ACAccountCredential>>;

        #[cfg(feature = "ACAccountCredential")]
        /// Setter for [`credential`][Self::credential].
        #[deprecated = "Use appropriate non-Apple SDK corresponding to the type of account you want to reference instead"]
        #[method(setCredential:)]
        pub unsafe fn setCredential(&self, credential: Option<&ACAccountCredential>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl ACAccount {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
