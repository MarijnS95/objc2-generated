//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coredata/nsmigrationmanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMigrationManager;
);

unsafe impl NSObjectProtocol for NSMigrationManager {}

extern_methods!(
    unsafe impl NSMigrationManager {
        #[cfg(feature = "NSManagedObjectModel")]
        #[method_id(initWithSourceModel:destinationModel:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSourceModel_destinationModel(
            this: Allocated<Self>,
            source_model: &NSManagedObjectModel,
            destination_model: &NSManagedObjectModel,
        ) -> Retained<Self>;

        #[cfg(feature = "NSMappingModel")]
        #[method(migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:_)]
        pub unsafe fn migrateStoreFromURL_type_options_withMappingModel_toDestinationURL_destinationType_destinationOptions_error(
            &self,
            source_url: &NSURL,
            s_store_type: &NSString,
            s_options: Option<&NSDictionary>,
            mappings: Option<&NSMappingModel>,
            d_url: &NSURL,
            d_store_type: &NSString,
            d_options: Option<&NSDictionary>,
        ) -> Result<(), Retained<NSError>>;

        #[method(usesStoreSpecificMigrationManager)]
        pub unsafe fn usesStoreSpecificMigrationManager(&self) -> bool;

        /// Setter for [`usesStoreSpecificMigrationManager`][Self::usesStoreSpecificMigrationManager].
        #[method(setUsesStoreSpecificMigrationManager:)]
        pub unsafe fn setUsesStoreSpecificMigrationManager(
            &self,
            uses_store_specific_migration_manager: bool,
        );

        #[method(reset)]
        pub unsafe fn reset(&self);

        #[cfg(feature = "NSMappingModel")]
        #[method_id(mappingModel)]
        #[unsafe(method_family = none)]
        pub unsafe fn mappingModel(&self) -> Retained<NSMappingModel>;

        #[cfg(feature = "NSManagedObjectModel")]
        #[method_id(sourceModel)]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceModel(&self) -> Retained<NSManagedObjectModel>;

        #[cfg(feature = "NSManagedObjectModel")]
        #[method_id(destinationModel)]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationModel(&self) -> Retained<NSManagedObjectModel>;

        #[cfg(feature = "NSManagedObjectContext")]
        #[method_id(sourceContext)]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceContext(&self) -> Retained<NSManagedObjectContext>;

        #[cfg(feature = "NSManagedObjectContext")]
        #[method_id(destinationContext)]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationContext(&self) -> Retained<NSManagedObjectContext>;

        #[cfg(all(feature = "NSEntityDescription", feature = "NSEntityMapping"))]
        #[method_id(sourceEntityForEntityMapping:)]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceEntityForEntityMapping(
            &self,
            m_entity: &NSEntityMapping,
        ) -> Option<Retained<NSEntityDescription>>;

        #[cfg(all(feature = "NSEntityDescription", feature = "NSEntityMapping"))]
        #[method_id(destinationEntityForEntityMapping:)]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationEntityForEntityMapping(
            &self,
            m_entity: &NSEntityMapping,
        ) -> Option<Retained<NSEntityDescription>>;

        #[cfg(all(feature = "NSEntityMapping", feature = "NSManagedObject"))]
        #[method(associateSourceInstance:withDestinationInstance:forEntityMapping:)]
        pub unsafe fn associateSourceInstance_withDestinationInstance_forEntityMapping(
            &self,
            source_instance: &NSManagedObject,
            destination_instance: &NSManagedObject,
            entity_mapping: &NSEntityMapping,
        );

        #[cfg(feature = "NSManagedObject")]
        #[method_id(destinationInstancesForEntityMappingNamed:sourceInstances:)]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationInstancesForEntityMappingNamed_sourceInstances(
            &self,
            mapping_name: &NSString,
            source_instances: Option<&NSArray<NSManagedObject>>,
        ) -> Retained<NSArray<NSManagedObject>>;

        #[cfg(feature = "NSManagedObject")]
        #[method_id(sourceInstancesForEntityMappingNamed:destinationInstances:)]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceInstancesForEntityMappingNamed_destinationInstances(
            &self,
            mapping_name: &NSString,
            destination_instances: Option<&NSArray<NSManagedObject>>,
        ) -> Retained<NSArray<NSManagedObject>>;

        #[cfg(feature = "NSEntityMapping")]
        #[method_id(currentEntityMapping)]
        #[unsafe(method_family = none)]
        pub unsafe fn currentEntityMapping(&self) -> Retained<NSEntityMapping>;

        #[method(migrationProgress)]
        pub unsafe fn migrationProgress(&self) -> c_float;

        #[method_id(userInfo)]
        #[unsafe(method_family = none)]
        pub unsafe fn userInfo(&self) -> Option<Retained<NSDictionary>>;

        /// Setter for [`userInfo`][Self::userInfo].
        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, user_info: Option<&NSDictionary>);

        #[method(cancelMigrationWithError:)]
        pub unsafe fn cancelMigrationWithError(&self, error: &NSError);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSMigrationManager {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
