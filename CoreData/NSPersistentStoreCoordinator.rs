//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSQLiteStoreType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSXMLStoreType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBinaryStoreType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSInMemoryStoreType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStoreTypeKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStoreUUIDKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreCoordinatorStoresWillChangeNotification: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreCoordinatorStoresDidChangeNotification: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreCoordinatorWillRemoveStoreNotification: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSAddedPersistentStoresKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSRemovedPersistentStoresKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSUUIDChangedPersistentStoresKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSReadOnlyPersistentStoreOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSValidateXMLStoreOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreTimeoutOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSQLitePragmasOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSQLiteAnalyzeOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSSQLiteManualVacuumOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSIgnorePersistentStoreVersioningOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSMigratePersistentStoresAutomaticallyOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSInferMappingModelAutomaticallyOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStoreModelVersionHashesKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStoreModelVersionIdentifiersKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreOSCompatibility: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreConnectionPoolMaxSizeKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSCoreDataCoreSpotlightExporter: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreStagedMigrationManagerOptionKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSXMLExternalRecordType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBinaryExternalRecordType: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSExternalRecordsFileFormatOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSExternalRecordsDirectoryOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSExternalRecordExtensionOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSEntityNameInPathKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStoreUUIDInPathKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSStorePathKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSModelPathKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSObjectURIKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreForceDestroyOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreFileProtectionKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentHistoryTrackingKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBinaryStoreSecureDecodingClasses: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSBinaryStoreInsecureDecodingCompatibilityOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreRemoteChangeNotificationPostOptionKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreRemoteChangeNotification: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreURLKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentHistoryTokenKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreDeferredLightweightMigrationOptionKey: &'static NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    pub struct NSPersistentStoreCoordinator;

    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    unsafe impl ClassType for NSPersistentStoreCoordinator {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
unsafe impl Send for NSPersistentStoreCoordinator {}

#[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
unsafe impl Sync for NSPersistentStoreCoordinator {}

#[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
unsafe impl NSLocking for NSPersistentStoreCoordinator {}

#[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
unsafe impl NSObjectProtocol for NSPersistentStoreCoordinator {}

extern_methods!(
    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    unsafe impl NSPersistentStoreCoordinator {
        #[cfg(feature = "CoreData_NSManagedObjectModel")]
        #[method_id(@__retain_semantics Init initWithManagedObjectModel:)]
        pub unsafe fn initWithManagedObjectModel(
            this: Allocated<Self>,
            model: &NSManagedObjectModel,
        ) -> Id<Self>;

        #[cfg(feature = "CoreData_NSManagedObjectModel")]
        #[method_id(@__retain_semantics Other managedObjectModel)]
        pub unsafe fn managedObjectModel(&self) -> Id<NSManagedObjectModel>;

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other persistentStores)]
        pub unsafe fn persistentStores(&self) -> Id<NSArray<NSPersistentStore>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other persistentStoreForURL:)]
        pub unsafe fn persistentStoreForURL(&self, url: &NSURL) -> Option<Id<NSPersistentStore>>;

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLForPersistentStore:)]
        pub unsafe fn URLForPersistentStore(&self, store: &NSPersistentStore) -> Id<NSURL>;

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSURL"))]
        #[method(setURL:forPersistentStore:)]
        pub unsafe fn setURL_forPersistentStore(
            &self,
            url: &NSURL,
            store: &NSPersistentStore,
        ) -> bool;

        #[cfg(all(
            feature = "CoreData_NSPersistentStore",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other addPersistentStoreWithType:configuration:URL:options:error:_)]
        pub unsafe fn addPersistentStoreWithType_configuration_URL_options_error(
            &self,
            store_type: &NSString,
            configuration: Option<&NSString>,
            store_url: Option<&NSURL>,
            options: Option<&NSDictionary>,
        ) -> Result<Id<NSPersistentStore>, Id<NSError>>;

        #[cfg(all(
            feature = "CoreData_NSPersistentStoreDescription",
            feature = "Foundation_NSError"
        ))]
        #[method(addPersistentStoreWithDescription:completionHandler:)]
        pub unsafe fn addPersistentStoreWithDescription_completionHandler(
            &self,
            store_description: &NSPersistentStoreDescription,
            block: &Block<dyn Fn(NonNull<NSPersistentStoreDescription>, *mut NSError)>,
        );

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSError"))]
        #[method(removePersistentStore:error:_)]
        pub unsafe fn removePersistentStore_error(
            &self,
            store: &NSPersistentStore,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "CoreData_NSPersistentStore",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method(setMetadata:forPersistentStore:)]
        pub unsafe fn setMetadata_forPersistentStore(
            &self,
            metadata: Option<&NSDictionary<NSString, AnyObject>>,
            store: &NSPersistentStore,
        );

        #[cfg(all(
            feature = "CoreData_NSPersistentStore",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other metadataForPersistentStore:)]
        pub unsafe fn metadataForPersistentStore(
            &self,
            store: &NSPersistentStore,
        ) -> Id<NSDictionary<NSString, AnyObject>>;

        #[cfg(all(feature = "CoreData_NSManagedObjectID", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other managedObjectIDForURIRepresentation:)]
        pub unsafe fn managedObjectIDForURIRepresentation(
            &self,
            url: &NSURL,
        ) -> Option<Id<NSManagedObjectID>>;

        #[cfg(all(
            feature = "CoreData_NSManagedObjectContext",
            feature = "CoreData_NSPersistentStoreRequest",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other executeRequest:withContext:error:_)]
        pub unsafe fn executeRequest_withContext_error(
            &self,
            request: &NSPersistentStoreRequest,
            context: &NSManagedObjectContext,
        ) -> Result<Id<AnyObject>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSValue"
        ))]
        #[method_id(@__retain_semantics Other registeredStoreTypes)]
        pub unsafe fn registeredStoreTypes() -> Id<NSDictionary<NSString, NSValue>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(registerStoreClass:forStoreType:)]
        pub unsafe fn registerStoreClass_forStoreType(
            store_class: Option<&AnyClass>,
            store_type: &NSString,
        );

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other metadataForPersistentStoreOfType:URL:options:error:_)]
        pub unsafe fn metadataForPersistentStoreOfType_URL_options_error(
            store_type: &NSString,
            url: &NSURL,
            options: Option<&NSDictionary>,
        ) -> Result<Id<NSDictionary<NSString, AnyObject>>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(setMetadata:forPersistentStoreOfType:URL:options:error:_)]
        pub unsafe fn setMetadata_forPersistentStoreOfType_URL_options_error(
            metadata: Option<&NSDictionary<NSString, AnyObject>>,
            store_type: &NSString,
            url: &NSURL,
            options: Option<&NSDictionary>,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
        #[deprecated = "Spotlight integration is deprecated. Use CoreSpotlight integration instead."]
        #[method_id(@__retain_semantics Other elementsDerivedFromExternalRecordURL:)]
        pub unsafe fn elementsDerivedFromExternalRecordURL(file_url: &NSURL) -> Id<NSDictionary>;

        #[cfg(all(
            feature = "CoreData_NSPersistentStore",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Spotlight integration is deprecated. Use CoreSpotlight integration instead."]
        #[method_id(@__retain_semantics Other importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error:_)]
        pub unsafe fn importStoreWithIdentifier_fromExternalRecordsDirectory_toURL_options_withType_error(
            &self,
            store_identifier: Option<&NSString>,
            external_records_url: &NSURL,
            destination_url: &NSURL,
            options: Option<&NSDictionary>,
            store_type: &NSString,
        ) -> Result<Id<NSPersistentStore>, Id<NSError>>;

        #[cfg(all(
            feature = "CoreData_NSPersistentStore",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other migratePersistentStore:toURL:options:withType:error:_)]
        pub unsafe fn migratePersistentStore_toURL_options_withType_error(
            &self,
            store: &NSPersistentStore,
            url: &NSURL,
            options: Option<&NSDictionary>,
            store_type: &NSString,
        ) -> Result<Id<NSPersistentStore>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(destroyPersistentStoreAtURL:withType:options:error:_)]
        pub unsafe fn destroyPersistentStoreAtURL_withType_options_error(
            &self,
            url: &NSURL,
            store_type: &NSString,
            options: Option<&NSDictionary>,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:_)]
        pub unsafe fn replacePersistentStoreAtURL_destinationOptions_withPersistentStoreFromURL_sourceOptions_storeType_error(
            &self,
            destination_url: &NSURL,
            destination_options: Option<&NSDictionary>,
            source_url: &NSURL,
            source_options: Option<&NSDictionary>,
            store_type: &NSString,
        ) -> Result<(), Id<NSError>>;

        #[method(performBlock:)]
        pub unsafe fn performBlock(&self, block: &Block<dyn Fn()>);

        #[method(performBlockAndWait:)]
        pub unsafe fn performBlockAndWait(&self, block: &Block<dyn Fn() + '_>);

        #[cfg(all(
            feature = "CoreData_NSPersistentHistoryToken",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other currentPersistentHistoryTokenFromStores:)]
        pub unsafe fn currentPersistentHistoryTokenFromStores(
            &self,
            stores: Option<&NSArray>,
        ) -> Option<Id<NSPersistentHistoryToken>>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(finishDeferredLightweightMigration:_)]
        pub unsafe fn finishDeferredLightweightMigration(&self) -> Result<(), Id<NSError>>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(finishDeferredLightweightMigrationTask:_)]
        pub unsafe fn finishDeferredLightweightMigrationTask(&self) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Use -metadataForPersistentStoreOfType:URL:options:error: and pass in an options dictionary matching addPersistentStoreWithType"]
        #[method_id(@__retain_semantics Other metadataForPersistentStoreWithURL:error:_)]
        pub unsafe fn metadataForPersistentStoreWithURL_error(
            url: &NSURL,
        ) -> Result<Id<NSDictionary>, Id<NSError>>;

        #[deprecated = "Use -performBlockAndWait: instead"]
        #[method(lock)]
        pub unsafe fn lock(&self);

        #[deprecated = "Use -performBlockAndWait: instead"]
        #[method(unlock)]
        pub unsafe fn unlock(&self);

        #[deprecated = "Use -performBlock: instead"]
        #[method(tryLock)]
        pub unsafe fn tryLock(&self) -> bool;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Use -metadataForPersistentStoreOfType:URL:options:error: and pass in an options dictionary matching addPersistentStoreWithType"]
        #[method_id(@__retain_semantics Other metadataForPersistentStoreOfType:URL:error:_)]
        pub unsafe fn metadataForPersistentStoreOfType_URL_error(
            store_type: Option<&NSString>,
            url: &NSURL,
        ) -> Result<Id<NSDictionary<NSString, AnyObject>>, Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Use  -setMetadata:forPersistentStoreOfType:URL:options:error: and pass in an options dictionary matching addPersistentStoreWithType"]
        #[method(setMetadata:forPersistentStoreOfType:URL:error:_)]
        pub unsafe fn setMetadata_forPersistentStoreOfType_URL_error(
            metadata: Option<&NSDictionary<NSString, AnyObject>>,
            store_type: Option<&NSString>,
            url: &NSURL,
        ) -> Result<(), Id<NSError>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[deprecated = "Please see the release notes and Core Data documentation."]
        #[method(removeUbiquitousContentAndPersistentStoreAtURL:options:error:_)]
        pub unsafe fn removeUbiquitousContentAndPersistentStoreAtURL_options_error(
            store_url: &NSURL,
            options: Option<&NSDictionary>,
        ) -> Result<(), Id<NSError>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreData_NSPersistentStoreCoordinator")]
    unsafe impl NSPersistentStoreCoordinator {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    #[deprecated = "Please see the release notes and Core Data documentation."]
    pub enum NSPersistentStoreUbiquitousTransitionType {
        #[deprecated = "Please see the release notes and Core Data documentation."]
        #[doc(alias = "NSPersistentStoreUbiquitousTransitionTypeAccountAdded")]
        AccountAdded = 1,
        #[deprecated = "Please see the release notes and Core Data documentation."]
        #[doc(alias = "NSPersistentStoreUbiquitousTransitionTypeAccountRemoved")]
        AccountRemoved = 2,
        #[deprecated = "Please see the release notes and Core Data documentation."]
        #[doc(alias = "NSPersistentStoreUbiquitousTransitionTypeContentRemoved")]
        ContentRemoved = 3,
        #[deprecated = "Please see the release notes and Core Data documentation."]
        #[doc(alias = "NSPersistentStoreUbiquitousTransitionTypeInitialImportCompleted")]
        InitialImportCompleted = 4,
    }
);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreUbiquitousContentNameKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreUbiquitousContentURLKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreDidImportUbiquitousContentChangesNotification: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreUbiquitousTransitionTypeKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreUbiquitousPeerTokenOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreRemoveUbiquitousMetadataOption: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreUbiquitousContainerIdentifierKey: &'static NSString);

#[cfg(feature = "Foundation_NSString")]
extern_static!(NSPersistentStoreRebuildFromUbiquitousContentOption: &'static NSString);
