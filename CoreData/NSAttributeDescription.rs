//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coredata/nsattributetype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSAttributeType(pub NSUInteger);
impl NSAttributeType {
    #[doc(alias = "NSUndefinedAttributeType")]
    pub const UndefinedAttributeType: Self = Self(0);
    #[doc(alias = "NSInteger16AttributeType")]
    pub const Integer16AttributeType: Self = Self(100);
    #[doc(alias = "NSInteger32AttributeType")]
    pub const Integer32AttributeType: Self = Self(200);
    #[doc(alias = "NSInteger64AttributeType")]
    pub const Integer64AttributeType: Self = Self(300);
    #[doc(alias = "NSDecimalAttributeType")]
    pub const DecimalAttributeType: Self = Self(400);
    #[doc(alias = "NSDoubleAttributeType")]
    pub const DoubleAttributeType: Self = Self(500);
    #[doc(alias = "NSFloatAttributeType")]
    pub const FloatAttributeType: Self = Self(600);
    #[doc(alias = "NSStringAttributeType")]
    pub const StringAttributeType: Self = Self(700);
    #[doc(alias = "NSBooleanAttributeType")]
    pub const BooleanAttributeType: Self = Self(800);
    #[doc(alias = "NSDateAttributeType")]
    pub const DateAttributeType: Self = Self(900);
    #[doc(alias = "NSBinaryDataAttributeType")]
    pub const BinaryDataAttributeType: Self = Self(1000);
    #[doc(alias = "NSUUIDAttributeType")]
    pub const UUIDAttributeType: Self = Self(1100);
    #[doc(alias = "NSURIAttributeType")]
    pub const URIAttributeType: Self = Self(1200);
    #[doc(alias = "NSTransformableAttributeType")]
    pub const TransformableAttributeType: Self = Self(1800);
    #[doc(alias = "NSObjectIDAttributeType")]
    pub const ObjectIDAttributeType: Self = Self(2000);
    #[doc(alias = "NSCompositeAttributeType")]
    pub const CompositeAttributeType: Self = Self(2100);
}

unsafe impl Encode for NSAttributeType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSAttributeType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coredata/nsattributedescription?language=objc)
    #[unsafe(super(NSPropertyDescription, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSPropertyDescription")]
    pub struct NSAttributeDescription;
);

#[cfg(feature = "NSPropertyDescription")]
unsafe impl NSCoding for NSAttributeDescription {}

#[cfg(feature = "NSPropertyDescription")]
unsafe impl NSCopying for NSAttributeDescription {}

#[cfg(feature = "NSPropertyDescription")]
unsafe impl CopyingHelper for NSAttributeDescription {
    type Result = Self;
}

#[cfg(feature = "NSPropertyDescription")]
unsafe impl NSObjectProtocol for NSAttributeDescription {}

extern_methods!(
    #[cfg(feature = "NSPropertyDescription")]
    unsafe impl NSAttributeDescription {
        #[method(attributeType)]
        pub unsafe fn attributeType(&self) -> NSAttributeType;

        /// Setter for [`attributeType`][Self::attributeType].
        #[method(setAttributeType:)]
        pub unsafe fn setAttributeType(&self, attribute_type: NSAttributeType);

        #[unsafe(method_family(none))]
        #[method_id(attributeValueClassName)]
        pub unsafe fn attributeValueClassName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`attributeValueClassName`][Self::attributeValueClassName].
        #[method(setAttributeValueClassName:)]
        pub unsafe fn setAttributeValueClassName(
            &self,
            attribute_value_class_name: Option<&NSString>,
        );

        #[unsafe(method_family(none))]
        #[method_id(defaultValue)]
        pub unsafe fn defaultValue(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`defaultValue`][Self::defaultValue].
        #[method(setDefaultValue:)]
        pub unsafe fn setDefaultValue(&self, default_value: Option<&AnyObject>);

        #[unsafe(method_family(none))]
        #[method_id(versionHash)]
        pub unsafe fn versionHash(&self) -> Retained<NSData>;

        #[unsafe(method_family(none))]
        #[method_id(valueTransformerName)]
        pub unsafe fn valueTransformerName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`valueTransformerName`][Self::valueTransformerName].
        #[method(setValueTransformerName:)]
        pub unsafe fn setValueTransformerName(&self, value_transformer_name: Option<&NSString>);

        #[method(allowsExternalBinaryDataStorage)]
        pub unsafe fn allowsExternalBinaryDataStorage(&self) -> bool;

        /// Setter for [`allowsExternalBinaryDataStorage`][Self::allowsExternalBinaryDataStorage].
        #[method(setAllowsExternalBinaryDataStorage:)]
        pub unsafe fn setAllowsExternalBinaryDataStorage(
            &self,
            allows_external_binary_data_storage: bool,
        );

        #[method(preservesValueInHistoryOnDeletion)]
        pub unsafe fn preservesValueInHistoryOnDeletion(&self) -> bool;

        /// Setter for [`preservesValueInHistoryOnDeletion`][Self::preservesValueInHistoryOnDeletion].
        #[method(setPreservesValueInHistoryOnDeletion:)]
        pub unsafe fn setPreservesValueInHistoryOnDeletion(
            &self,
            preserves_value_in_history_on_deletion: bool,
        );

        #[method(allowsCloudEncryption)]
        pub unsafe fn allowsCloudEncryption(&self) -> bool;

        /// Setter for [`allowsCloudEncryption`][Self::allowsCloudEncryption].
        #[method(setAllowsCloudEncryption:)]
        pub unsafe fn setAllowsCloudEncryption(&self, allows_cloud_encryption: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSPropertyDescription")]
    unsafe impl NSAttributeDescription {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
