//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// An object representing a MIDI-CI Device.
    ///
    ///
    /// The client instance MIDICIDeviceManager maintains a list of discovered CI devices.
    /// MIDICIDevice objects are not constructible via API.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremidi/midicidevice?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct MIDICIDevice;
);

#[cfg(feature = "objc2")]
unsafe impl NSObjectProtocol for MIDICIDevice {}

#[cfg(feature = "objc2")]
extern_methods!(
    #[cfg(feature = "objc2")]
    unsafe impl MIDICIDevice {
        #[cfg(feature = "MIDIUMPEndpoint")]
        /// The basic information describing the CI device.
        #[method_id(@__method_family Other deviceInfo)]
        pub unsafe fn deviceInfo(&self) -> Retained<MIDI2DeviceInfo>;

        #[cfg(feature = "MIDIMessages")]
        /// The MIDI unique identifier (MUID) assigned to the CI device.
        #[method(MUID)]
        pub unsafe fn MUID(&self) -> MIDICIMUID;

        /// MIDI-CI Protocol Negotiation capability.
        #[method(supportsProtocolNegotiation)]
        pub unsafe fn supportsProtocolNegotiation(&self) -> bool;

        /// MIDI-CI Profile Configuration capability.
        #[method(supportsProfileConfiguration)]
        pub unsafe fn supportsProfileConfiguration(&self) -> bool;

        /// MIDI-CI Property Exchange capability.
        #[method(supportsPropertyExchange)]
        pub unsafe fn supportsPropertyExchange(&self) -> bool;

        /// MIDI-CI Process Inquiry capability.
        #[method(supportsProcessInquiry)]
        pub unsafe fn supportsProcessInquiry(&self) -> bool;

        /// The maximum receivable MIDI System Exclusive size for this CI device.
        #[method(maxSysExSize)]
        pub unsafe fn maxSysExSize(&self) -> NSUInteger;

        /// The maximum number of simultaneous Property Exchange requests, if supported.
        #[method(maxPropertyExchangeRequests)]
        pub unsafe fn maxPropertyExchangeRequests(&self) -> NSUInteger;

        #[cfg(feature = "MIDIUMPCI")]
        /// The type of MIDI-CI device.
        #[method(deviceType)]
        pub unsafe fn deviceType(&self) -> MIDICIDeviceType;

        #[cfg(all(feature = "MIDIUMPCIProfile", feature = "objc2-foundation"))]
        /// The MIDI-CI Profiles that are registered to the  Function Block.
        #[method_id(@__method_family Other profiles)]
        pub unsafe fn profiles(&self) -> Retained<NSArray<MIDIUMPCIProfile>>;

        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

#[cfg(feature = "objc2")]
extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2")]
    unsafe impl MIDICIDevice {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
