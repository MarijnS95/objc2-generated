//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// Class representing a network device in a virtual machine.
    ///
    /// VZNetworkDevice should not be instantiated directly.
    ///
    /// Network devices are first configured on the VZVirtualMachineConfiguration through a subclass of VZNetworkDeviceConfiguration.
    /// When a VZVirtualMachine is created from the configuration, the network devices are available through the VZVirtualMachine.networkDevices property.
    ///
    ///
    /// See: VZNetworkDeviceConfiguration
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vznetworkdevice?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VZNetworkDevice;
);

unsafe impl NSObjectProtocol for VZNetworkDevice {}

extern_methods!(
    unsafe impl VZNetworkDevice {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VZNetworkDeviceAttachment")]
        /// The network attachment that's currently connected to this network device.
        ///
        /// Setting this property will result in an attempt to change the network device attachment which may fail, in which case
        /// the -[VZVirtualMachineDelegate virtualMachine:networkDevice:attachmentWasDisconnectedWithError:] will be invoked and this property
        /// will be set to nil.
        ///
        /// This property may change at any time while the VM is running based on the state of the host network.
        #[unsafe(method_family(none))]
        #[method_id(attachment)]
        pub unsafe fn attachment(&self) -> Option<Retained<VZNetworkDeviceAttachment>>;

        #[cfg(feature = "VZNetworkDeviceAttachment")]
        /// Setter for [`attachment`][Self::attachment].
        #[method(setAttachment:)]
        pub unsafe fn setAttachment(&self, attachment: Option<&VZNetworkDeviceAttachment>);
    }
);
