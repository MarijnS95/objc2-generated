//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzspiceagentportattachment?language=objc)
    #[unsafe(super(VZSerialPortAttachment, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VZSerialPortAttachment")]
    pub struct VZSpiceAgentPortAttachment;
);

#[cfg(feature = "VZSerialPortAttachment")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VZSpiceAgentPortAttachment {}
);

#[cfg(feature = "VZSerialPortAttachment")]
impl VZSpiceAgentPortAttachment {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Enable the Spice agent clipboard sharing capability.
        ///
        /// If enabled, the clipboard capability will be advertised to the Spice guest agent. Copy and paste events
        /// will be shared between the host and the virtual machine.
        ///
        /// This property is enabled by default.
        #[unsafe(method(sharesClipboard))]
        #[unsafe(method_family = none)]
        pub unsafe fn sharesClipboard(&self) -> bool;

        /// Setter for [`sharesClipboard`][Self::sharesClipboard].
        #[unsafe(method(setSharesClipboard:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSharesClipboard(&self, shares_clipboard: bool);

        /// The Spice agent port name.
        ///
        /// A console port configured with this name will spawn a Spice guest agent if supported by the guest.
        ///
        /// VZConsolePortConfiguration.attachment must be set to VZSpiceAgentPortAttachment.
        /// VZVirtioConsolePortConfiguration.isConsole must remain false on a Spice agent port.
        #[unsafe(method(spiceAgentPortName))]
        #[unsafe(method_family = none)]
        pub unsafe fn spiceAgentPortName() -> Retained<NSString>;
    );
}

/// Methods declared on superclass `VZSerialPortAttachment`.
#[cfg(feature = "VZSerialPortAttachment")]
impl VZSpiceAgentPortAttachment {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
