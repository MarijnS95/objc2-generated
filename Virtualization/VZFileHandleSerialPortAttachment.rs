//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// File handle serial port attachment.
    ///
    /// VZFileHandleSerialPortAttachment defines a serial port attachment from a file handle.
    /// Data written to fileHandleForReading goes to the guest. Data sent from the guest appears on fileHandleForWriting.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzfilehandleserialportattachment?language=objc)
    #[unsafe(super(VZSerialPortAttachment, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VZSerialPortAttachment")]
    pub struct VZFileHandleSerialPortAttachment;
);

#[cfg(feature = "VZSerialPortAttachment")]
unsafe impl NSObjectProtocol for VZFileHandleSerialPortAttachment {}

extern_methods!(
    #[cfg(feature = "VZSerialPortAttachment")]
    unsafe impl VZFileHandleSerialPortAttachment {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Initialize the VZFileHandleSerialPortAttachment from file handles.
        ///
        /// Parameter `fileHandleForReading`: File handle for reading from the file.
        ///
        /// Parameter `fileHandleForWriting`: File handle for writing to the file.
        ///
        /// Each file handle must either be nil or have a valid file descriptor.
        #[method_id(initWithFileHandleForReading:fileHandleForWriting:)]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileHandleForReading_fileHandleForWriting(
            this: Allocated<Self>,
            file_handle_for_reading: Option<&NSFileHandle>,
            file_handle_for_writing: Option<&NSFileHandle>,
        ) -> Retained<Self>;

        /// File handle for reading from the file.
        ///
        /// Data written to fileHandleForReading goes to the guest.
        #[method_id(fileHandleForReading)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForReading(&self) -> Option<Retained<NSFileHandle>>;

        /// File handle for writing to the file.
        ///
        /// Data sent from the guest appears on fileHandleForWriting.
        #[method_id(fileHandleForWriting)]
        #[unsafe(method_family = none)]
        pub unsafe fn fileHandleForWriting(&self) -> Option<Retained<NSFileHandle>>;
    }
);
