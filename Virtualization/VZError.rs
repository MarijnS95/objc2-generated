//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzerrordomain?language=objc)
    pub static VZErrorDomain: Option<&'static NSErrorDomain>;
}

/// Error type returned by the Virtualization framework.
/// The NSError domain is VZErrorDomain, the code is one of the VZErrorCode constants.
///
/// The virtualization framework can also report errors from other domains when the error originates from a lower level component.
///
///
/// Internal error such as the virtual machine unexpectedly stopping.
///
/// Invalid machine configuration.
///
/// API used with a machine in the wrong state (e.g. interacting with a machine before it is running).
///
/// Invalid change of state (e.g. pausing a virtual machine that is not started).
///
/// Unrecognized disk image format or invalid disk image.
///
/// The running virtual machine limit was exceeded.
///
/// Network error occurred.
///
/// Machine ran out of disk space.
///
/// The operation was cancelled.
///
/// The operation is not supported.
///
/// The save operation failed.
///
/// The restore operation failed.
///
/// The restore image catalog failed to load.
///
/// The restore image catalog is invalid.
///
/// The restore image catalog has no supported restore images.
///
/// The restore image failed to load.
///
/// The restore image is invalid.
///
/// A software update is required to complete the installation.
///
/// An error occurred during installation.
///
/// The connection or the negotiation with the NBD server failed.
///
/// The NBD client is disconnected from the server.
///
/// Controller not found.
///
/// Device is already attached.
///
/// Device initialization failure.
///
/// Device not found.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzerrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VZErrorCode(pub NSInteger);
impl VZErrorCode {
    pub const VZErrorInternal: Self = Self(1);
    pub const VZErrorInvalidVirtualMachineConfiguration: Self = Self(2);
    pub const VZErrorInvalidVirtualMachineState: Self = Self(3);
    pub const VZErrorInvalidVirtualMachineStateTransition: Self = Self(4);
    pub const VZErrorInvalidDiskImage: Self = Self(5);
    pub const VZErrorVirtualMachineLimitExceeded: Self = Self(6);
    pub const VZErrorNetworkError: Self = Self(7);
    pub const VZErrorOutOfDiskSpace: Self = Self(8);
    pub const VZErrorOperationCancelled: Self = Self(9);
    pub const VZErrorNotSupported: Self = Self(10);
    pub const VZErrorSave: Self = Self(11);
    pub const VZErrorRestore: Self = Self(12);
    pub const VZErrorRestoreImageCatalogLoadFailed: Self = Self(10001);
    pub const VZErrorInvalidRestoreImageCatalog: Self = Self(10002);
    pub const VZErrorNoSupportedRestoreImagesInCatalog: Self = Self(10003);
    pub const VZErrorRestoreImageLoadFailed: Self = Self(10004);
    pub const VZErrorInvalidRestoreImage: Self = Self(10005);
    pub const VZErrorInstallationRequiresUpdate: Self = Self(10006);
    pub const VZErrorInstallationFailed: Self = Self(10007);
    pub const VZErrorNetworkBlockDeviceNegotiationFailed: Self = Self(20001);
    pub const VZErrorNetworkBlockDeviceDisconnected: Self = Self(20002);
    pub const VZErrorUSBControllerNotFound: Self = Self(30001);
    pub const VZErrorDeviceAlreadyAttached: Self = Self(30002);
    pub const VZErrorDeviceInitializationFailure: Self = Self(30003);
    pub const VZErrorDeviceNotFound: Self = Self(30004);
}

unsafe impl Encode for VZErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for VZErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
