//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A view that allows user interaction with a virtual machine.
    ///
    /// The VZVirtualMachineView shows the contents of the virtual machine framebuffer. If the virtual machine configuration includes a keyboard and a pointing device,
    /// the view forwards keyboard and mouse events to the virtual machine via those devices.
    ///
    /// See also: VZVirtualMachine
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzvirtualmachineview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    pub struct VZVirtualMachineView;
);

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSAccessibility for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSAccessibilityElementProtocol for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSAnimatablePropertyContainer for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSAppearanceCustomization for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSCoding for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSDraggingDestination for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSObjectProtocol for VZVirtualMachineView {}

#[cfg(feature = "objc2-app-kit")]
unsafe impl NSUserInterfaceItemIdentification for VZVirtualMachineView {}

extern_methods!(
    #[cfg(feature = "objc2-app-kit")]
    unsafe impl VZVirtualMachineView {
        #[cfg(feature = "VZVirtualMachine")]
        /// The virtual machine to display in the view.
        #[unsafe(method_family(none))]
        #[method_id(virtualMachine)]
        pub unsafe fn virtualMachine(&self) -> Option<Retained<VZVirtualMachine>>;

        #[cfg(feature = "VZVirtualMachine")]
        /// Setter for [`virtualMachine`][Self::virtualMachine].
        #[method(setVirtualMachine:)]
        pub unsafe fn setVirtualMachine(&self, virtual_machine: Option<&VZVirtualMachine>);

        /// Whether certain system hot keys should be sent to the guest instead of the host. Defaults to NO.
        #[method(capturesSystemKeys)]
        pub unsafe fn capturesSystemKeys(&self) -> bool;

        /// Setter for [`capturesSystemKeys`][Self::capturesSystemKeys].
        #[method(setCapturesSystemKeys:)]
        pub unsafe fn setCapturesSystemKeys(&self, captures_system_keys: bool);

        /// Automatically reconfigures the graphics display associated with this view with respect to view changes. Defaults to NO.
        ///
        /// Automatically resize or reconfigure this graphics display when the view properties update.
        /// For example, resizing the display when the view has a live resize operation. When enabled,
        /// the graphics display will automatically be reconfigured to match the host display environment.
        ///
        /// This property can only be set on a single VZVirtualMachineView targeting a particular VZGraphicsDisplay
        /// at a time. If multiple VZVirtualMachineViews targeting the same VZGraphicsDisplay enable this property,
        /// only one view will respect the property, and the other view will have had the property disabled.
        #[method(automaticallyReconfiguresDisplay)]
        pub unsafe fn automaticallyReconfiguresDisplay(&self) -> bool;

        /// Setter for [`automaticallyReconfiguresDisplay`][Self::automaticallyReconfiguresDisplay].
        #[method(setAutomaticallyReconfiguresDisplay:)]
        pub unsafe fn setAutomaticallyReconfiguresDisplay(
            &self,
            automatically_reconfigures_display: bool,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "objc2-app-kit")]
    unsafe impl VZVirtualMachineView {
        #[unsafe(method_family(init))]
        #[method_id(initWithFrame:)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        #[unsafe(method_family(init))]
        #[method_id(initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "objc2-app-kit")]
    unsafe impl VZVirtualMachineView {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "objc2-app-kit")]
    unsafe impl VZVirtualMachineView {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
