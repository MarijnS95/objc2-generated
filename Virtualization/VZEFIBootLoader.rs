//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Boot loader configuration for booting guest operating systems expecting an EFI ROM.
    ///
    /// You must use a VZGenericPlatformConfiguration in conjunction with the EFI boot loader.
    /// It is invalid to use it with any other platform configuration.
    ///
    /// See: VZGenericPlatformConfiguration
    ///
    /// See: VZVirtualMachineConfiguration.platform.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzefibootloader?language=objc)
    #[unsafe(super(VZBootLoader, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VZBootLoader")]
    pub struct VZEFIBootLoader;
);

#[cfg(feature = "VZBootLoader")]
unsafe impl NSCopying for VZEFIBootLoader {}

#[cfg(feature = "VZBootLoader")]
unsafe impl CopyingHelper for VZEFIBootLoader {
    type Result = Self;
}

#[cfg(feature = "VZBootLoader")]
unsafe impl NSObjectProtocol for VZEFIBootLoader {}

extern_methods!(
    #[cfg(feature = "VZBootLoader")]
    unsafe impl VZEFIBootLoader {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VZEFIVariableStore")]
        /// The EFI variable store.
        #[unsafe(method_family(none))]
        #[method_id(variableStore)]
        pub unsafe fn variableStore(&self) -> Option<Retained<VZEFIVariableStore>>;

        #[cfg(feature = "VZEFIVariableStore")]
        /// Setter for [`variableStore`][Self::variableStore].
        #[method(setVariableStore:)]
        pub unsafe fn setVariableStore(&self, variable_store: Option<&VZEFIVariableStore>);
    }
);

extern_methods!(
    /// Methods declared on superclass `VZBootLoader`
    #[cfg(feature = "VZBootLoader")]
    unsafe impl VZEFIBootLoader {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
