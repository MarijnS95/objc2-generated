//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// File serial port attachment.
    ///
    /// VZFileSerialPortAttachment defines a serial port attachment from a file.
    /// Any data sent by the guest on the serial interface is written to the file.
    /// No data is sent to the guest over serial with this attachment.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzfileserialportattachment?language=objc)
    #[unsafe(super(VZSerialPortAttachment, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VZSerialPortAttachment")]
    pub struct VZFileSerialPortAttachment;
);

#[cfg(feature = "VZSerialPortAttachment")]
unsafe impl NSObjectProtocol for VZFileSerialPortAttachment {}

extern_methods!(
    #[cfg(feature = "VZSerialPortAttachment")]
    unsafe impl VZFileSerialPortAttachment {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Initialize the VZFileSerialPortAttachment from a URL of a file.
        ///
        /// Parameter `url`: The URL of the file for the attachment on the local file system.
        ///
        /// Parameter `shouldAppend`: True if the file should be opened in append mode, false otherwise.
        /// When a file is opened in append mode, writing to that file will append to the end of it.
        ///
        /// Parameter `error`: If not nil, used to report errors if initialization fails.
        ///
        /// Returns: A newly initialized VZFileSerialPortAttachment. If an error was encountered returns
        /// `nil,`and
        /// `error`contains the error.
        #[method_id(@__method_family Init initWithURL:append:error:_)]
        pub unsafe fn initWithURL_append_error(
            this: Allocated<Self>,
            url: &NSURL,
            should_append: bool,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        /// The URL of the file for the attachment on the local file system.
        #[method_id(@__method_family Other URL)]
        pub unsafe fn URL(&self) -> Retained<NSURL>;

        /// True if the file should be opened in append mode, false otherwise.
        #[method(append)]
        pub unsafe fn append(&self) -> bool;
    }
);
