//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Base class for a USB Controller configuration.
    ///
    /// VZUSBControllerConfiguration should not be instantiated directly.
    /// One of its subclasses like VZXHCIControllerConfiguration should be used instead.
    ///
    /// See: VZXHCIControllerConfiguration
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzusbcontrollerconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VZUSBControllerConfiguration;
);

unsafe impl NSCopying for VZUSBControllerConfiguration {}

unsafe impl CopyingHelper for VZUSBControllerConfiguration {
    type Result = Self;
}

unsafe impl NSObjectProtocol for VZUSBControllerConfiguration {}

extern_methods!(
    unsafe impl VZUSBControllerConfiguration {
        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VZUSBDeviceConfiguration")]
        /// List of USB devices. Empty by default.
        ///
        /// This list represents a set of USB devices that virtual machine will start with.
        /// For each entry in this list, there will be a corresponding runtime object created in VZUSBController.usbDevices property.
        ///
        /// See: VZUSBController
        ///
        /// See: VZUSBDeviceConfiguration
        ///
        /// See: VZUSBMassStorageDeviceConfiguration
        #[method(usbDevices)]
        #[unsafe(method_family = none)]
        pub unsafe fn usbDevices(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn VZUSBDeviceConfiguration>>>;

        #[cfg(feature = "VZUSBDeviceConfiguration")]
        /// Setter for [`usbDevices`][Self::usbDevices].
        #[method(setUsbDevices:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setUsbDevices(
            &self,
            usb_devices: &NSArray<ProtocolObject<dyn VZUSBDeviceConfiguration>>,
        );
    }
);
