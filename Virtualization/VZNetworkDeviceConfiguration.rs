//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Base class for a network adapter configuration.
    ///
    /// VZNetworkDeviceConfiguration should not be instantiated directly.
    /// One of its subclasses like VZVirtioNetworkDeviceConfiguration should be used instead.
    ///
    ///
    /// See: VZVirtioNetworkDeviceConfiguration
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vznetworkdeviceconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VZNetworkDeviceConfiguration;
);

unsafe impl NSCopying for VZNetworkDeviceConfiguration {}

unsafe impl CopyingHelper for VZNetworkDeviceConfiguration {
    type Result = Self;
}

unsafe impl NSObjectProtocol for VZNetworkDeviceConfiguration {}

extern_methods!(
    unsafe impl VZNetworkDeviceConfiguration {
        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VZMACAddress")]
        /// The media access control address of the device. The default is a random, locally administered, unicast address.
        #[method_id(MACAddress)]
        #[unsafe(method_family = none)]
        pub unsafe fn MACAddress(&self) -> Retained<VZMACAddress>;

        #[cfg(feature = "VZMACAddress")]
        /// Setter for [`MACAddress`][Self::MACAddress].
        #[method(setMACAddress:)]
        pub unsafe fn setMACAddress(&self, mac_address: &VZMACAddress);

        #[cfg(feature = "VZNetworkDeviceAttachment")]
        /// Network device attachment. Defines how the virtual device interfaces with the host system. The default is nil.
        ///
        /// See: VZBridgedNetworkDeviceAttachment
        ///
        /// See: VZFileHandleNetworkDeviceAttachment
        ///
        /// See: VZNATNetworkDeviceAttachment
        #[method_id(attachment)]
        #[unsafe(method_family = none)]
        pub unsafe fn attachment(&self) -> Option<Retained<VZNetworkDeviceAttachment>>;

        #[cfg(feature = "VZNetworkDeviceAttachment")]
        /// Setter for [`attachment`][Self::attachment].
        #[method(setAttachment:)]
        pub unsafe fn setAttachment(&self, attachment: Option<&VZNetworkDeviceAttachment>);
    }
);
