//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// MLOptimizationHints
    ///
    /// An object to hold hints that CoreML could use for further optimization
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreml/mloptimizationhints?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MLOptimizationHints;
);

unsafe impl NSCoding for MLOptimizationHints {}

unsafe impl NSCopying for MLOptimizationHints {}

unsafe impl CopyingHelper for MLOptimizationHints {
    type Result = Self;
}

unsafe impl NSObjectProtocol for MLOptimizationHints {}

unsafe impl NSSecureCoding for MLOptimizationHints {}

extern_methods!(
    unsafe impl MLOptimizationHints {
        #[cfg(feature = "MLReshapeFrequencyHint")]
        /// The anticipated reshape frequency
        ///
        /// CoreML framework needs to reshape the model with new shapes for models with flexible input.
        /// Specify the anticipated reshape frequency (frequent or infrequent), so that the framework can optimize for
        /// fast shape switching or fast prediction on seen shapes.
        ///
        /// The default value is frequent, which means CoreML tries to switch to new shapes as fast as possible
        #[method(reshapeFrequency)]
        pub unsafe fn reshapeFrequency(&self) -> MLReshapeFrequencyHint;

        #[cfg(feature = "MLReshapeFrequencyHint")]
        /// Setter for [`reshapeFrequency`][Self::reshapeFrequency].
        #[method(setReshapeFrequency:)]
        pub unsafe fn setReshapeFrequency(&self, reshape_frequency: MLReshapeFrequencyHint);

        #[cfg(feature = "MLSpecializationStrategy")]
        /// Optimization strategy for the model specialization.
        ///
        /// Core ML segments the model's compute graph and optimizes each segment for the
        /// target compute device. This process can affect the model loading time and the prediction latency.
        ///
        /// Use this option to tailor the specialization strategy for your application.
        #[method(specializationStrategy)]
        pub unsafe fn specializationStrategy(&self) -> MLSpecializationStrategy;

        #[cfg(feature = "MLSpecializationStrategy")]
        /// Setter for [`specializationStrategy`][Self::specializationStrategy].
        #[method(setSpecializationStrategy:)]
        pub unsafe fn setSpecializationStrategy(
            &self,
            specialization_strategy: MLSpecializationStrategy,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MLOptimizationHints {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
