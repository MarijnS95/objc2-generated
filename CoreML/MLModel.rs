//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MLModel;

    unsafe impl ClassType for MLModel {
        type Super = NSObject;
    }
);

unsafe impl NSObjectProtocol for MLModel {}

extern_methods!(
    unsafe impl MLModel {
        #[cfg(feature = "MLModelDescription")]
        #[method_id(@__retain_semantics Other modelDescription)]
        pub unsafe fn modelDescription(&self) -> Retained<MLModelDescription>;

        #[cfg(feature = "MLModelConfiguration")]
        #[method_id(@__retain_semantics Other configuration)]
        pub unsafe fn configuration(&self) -> Retained<MLModelConfiguration>;

        #[method_id(@__retain_semantics Other modelWithContentsOfURL:error:_)]
        pub unsafe fn modelWithContentsOfURL_error(
            url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "MLModelConfiguration")]
        #[method_id(@__retain_semantics Other modelWithContentsOfURL:configuration:error:_)]
        pub unsafe fn modelWithContentsOfURL_configuration_error(
            url: &NSURL,
            configuration: &MLModelConfiguration,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "MLModelConfiguration", feature = "block2"))]
        #[method(loadContentsOfURL:configuration:completionHandler:)]
        pub unsafe fn loadContentsOfURL_configuration_completionHandler(
            url: &NSURL,
            configuration: &MLModelConfiguration,
            handler: &block2::Block<dyn Fn(*mut MLModel, *mut NSError)>,
        );

        #[cfg(feature = "MLFeatureProvider")]
        #[method_id(@__retain_semantics Other predictionFromFeatures:error:_)]
        pub unsafe fn predictionFromFeatures_error(
            &self,
            input: &ProtocolObject<dyn MLFeatureProvider>,
        ) -> Result<Retained<ProtocolObject<dyn MLFeatureProvider>>, Retained<NSError>>;

        #[cfg(all(feature = "MLFeatureProvider", feature = "MLPredictionOptions"))]
        #[method_id(@__retain_semantics Other predictionFromFeatures:options:error:_)]
        pub unsafe fn predictionFromFeatures_options_error(
            &self,
            input: &ProtocolObject<dyn MLFeatureProvider>,
            options: &MLPredictionOptions,
        ) -> Result<Retained<ProtocolObject<dyn MLFeatureProvider>>, Retained<NSError>>;

        #[cfg(all(feature = "MLFeatureProvider", feature = "block2"))]
        #[method(predictionFromFeatures:completionHandler:)]
        pub unsafe fn predictionFromFeatures_completionHandler(
            &self,
            input: &ProtocolObject<dyn MLFeatureProvider>,
            completion_handler: &block2::Block<
                dyn Fn(*mut ProtocolObject<dyn MLFeatureProvider>, *mut NSError),
            >,
        );

        #[cfg(all(
            feature = "MLFeatureProvider",
            feature = "MLPredictionOptions",
            feature = "block2"
        ))]
        #[method(predictionFromFeatures:options:completionHandler:)]
        pub unsafe fn predictionFromFeatures_options_completionHandler(
            &self,
            input: &ProtocolObject<dyn MLFeatureProvider>,
            options: &MLPredictionOptions,
            completion_handler: &block2::Block<
                dyn Fn(*mut ProtocolObject<dyn MLFeatureProvider>, *mut NSError),
            >,
        );

        #[cfg(feature = "MLBatchProvider")]
        #[method_id(@__retain_semantics Other predictionsFromBatch:error:_)]
        pub unsafe fn predictionsFromBatch_error(
            &self,
            input_batch: &ProtocolObject<dyn MLBatchProvider>,
        ) -> Result<Retained<ProtocolObject<dyn MLBatchProvider>>, Retained<NSError>>;

        #[cfg(all(feature = "MLBatchProvider", feature = "MLPredictionOptions"))]
        #[method_id(@__retain_semantics Other predictionsFromBatch:options:error:_)]
        pub unsafe fn predictionsFromBatch_options_error(
            &self,
            input_batch: &ProtocolObject<dyn MLBatchProvider>,
            options: &MLPredictionOptions,
        ) -> Result<Retained<ProtocolObject<dyn MLBatchProvider>>, Retained<NSError>>;

        #[cfg(all(feature = "MLKey", feature = "MLParameterKey"))]
        #[method_id(@__retain_semantics Other parameterValueForKey:error:_)]
        pub unsafe fn parameterValueForKey_error(
            &self,
            key: &MLParameterKey,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        #[cfg(all(
            feature = "MLModelAsset",
            feature = "MLModelConfiguration",
            feature = "block2"
        ))]
        #[method(loadModelAsset:configuration:completionHandler:)]
        pub unsafe fn loadModelAsset_configuration_completionHandler(
            asset: &MLModelAsset,
            configuration: &MLModelConfiguration,
            handler: &block2::Block<dyn Fn(*mut MLModel, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MLModel {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
