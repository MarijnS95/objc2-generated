//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkrefreshbackgroundtask?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKRefreshBackgroundTask;
);

unsafe impl Send for WKRefreshBackgroundTask {}

unsafe impl Sync for WKRefreshBackgroundTask {}

unsafe impl NSObjectProtocol for WKRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKRefreshBackgroundTask {
        #[method_id(@__method_family Other userInfo)]
        pub unsafe fn userInfo(
            &self,
        ) -> Option<Retained<AnyObject /* NSSecureCoding+ NSObjectProtocol */>>;

        #[cfg(feature = "block2")]
        /// A handler called shortly before the taskâ€™s background time expires.
        ///
        /// The expiration handler takes no arguments and has no return value. Use the handler to cancel any ongoing work and to do any required cleanup in as short a time as possible.
        /// The handler may be called before the background process uses the full amount of its allocated time.
        ///
        /// Example usage:
        ///
        /// ```text
        ///  func handle(backgroundTasks: Set<WKRefreshBackgroundTask>) {
        ///      for task in backgroundTasks {
        ///          startBackgroundWork()
        ///          task.expirationHandler = {
        ///              cancelExistingWork()
        ///              task.setTaskCompleted()
        ///              ...
        ///          }
        ///      }
        ///  }
        /// ```
        #[method(expirationHandler)]
        pub unsafe fn expirationHandler(&self) -> *mut block2::Block<dyn Fn()>;

        #[cfg(feature = "block2")]
        /// Setter for [`expirationHandler`][Self::expirationHandler].
        #[method(setExpirationHandler:)]
        pub unsafe fn setExpirationHandler(
            &self,
            expiration_handler: Option<&block2::Block<dyn Fn()>>,
        );

        #[deprecated = "Use -setTaskCompletedWithSnapshot: instead, pass NO to duplicate existing behavior"]
        #[method(setTaskCompleted)]
        pub unsafe fn setTaskCompleted(&self);

        #[method(setTaskCompletedWithSnapshot:)]
        pub unsafe fn setTaskCompletedWithSnapshot(&self, refresh_snapshot: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKApplicationRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKApplicationRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKApplicationRefreshBackgroundTask {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKApplicationRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wksnapshotreason?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKSnapshotReason(pub NSInteger);
impl WKSnapshotReason {
    #[doc(alias = "WKSnapshotReasonAppScheduled")]
    pub const AppScheduled: Self = Self(0);
    #[doc(alias = "WKSnapshotReasonReturnToDefaultState")]
    pub const ReturnToDefaultState: Self = Self(1);
    #[doc(alias = "WKSnapshotReasonComplicationUpdate")]
    pub const ComplicationUpdate: Self = Self(2);
    #[doc(alias = "WKSnapshotReasonPrelaunch")]
    pub const Prelaunch: Self = Self(3);
    #[doc(alias = "WKSnapshotReasonAppBackgrounded")]
    pub const AppBackgrounded: Self = Self(4);
}

unsafe impl Encode for WKSnapshotReason {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for WKSnapshotReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wksnapshotrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKSnapshotRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKSnapshotRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKSnapshotRefreshBackgroundTask {
        #[deprecated = "Use reasonForSnapshot instead, WKSnapshotReasonReturnToPrimaryUI is equivalent to returnToDefaultState=true"]
        #[method(returnToDefaultState)]
        pub unsafe fn returnToDefaultState(&self) -> bool;

        #[method(reasonForSnapshot)]
        pub unsafe fn reasonForSnapshot(&self) -> WKSnapshotReason;

        #[method(setTaskCompletedWithDefaultStateRestored:estimatedSnapshotExpiration:userInfo:)]
        pub unsafe fn setTaskCompletedWithDefaultStateRestored_estimatedSnapshotExpiration_userInfo(
            &self,
            restored_default_state: bool,
            estimated_snapshot_expiration: Option<&NSDate>,
            user_info: Option<&AnyObject /* NSSecureCoding+ NSObjectProtocol */>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKSnapshotRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkurlsessionrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKURLSessionRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKURLSessionRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKURLSessionRefreshBackgroundTask {
        #[method_id(@__method_family Other sessionIdentifier)]
        pub unsafe fn sessionIdentifier(&self) -> Retained<NSString>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKURLSessionRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkwatchconnectivityrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKWatchConnectivityRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKWatchConnectivityRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKWatchConnectivityRefreshBackgroundTask {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKWatchConnectivityRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkrelevantshortcutrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKRelevantShortcutRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKRelevantShortcutRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKRelevantShortcutRefreshBackgroundTask {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKRelevantShortcutRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkintentdidrunrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKIntentDidRunRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKIntentDidRunRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKIntentDidRunRefreshBackgroundTask {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKIntentDidRunRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// Updates from Bluetooth are available to the application.
    /// Register a CBCentralManagerDelegate to receive the updates,
    /// and then call this task's completion handler.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkbluetoothalertrefreshbackgroundtask?language=objc)
    #[unsafe(super(WKRefreshBackgroundTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKBluetoothAlertRefreshBackgroundTask;
);

unsafe impl NSObjectProtocol for WKBluetoothAlertRefreshBackgroundTask {}

extern_methods!(
    unsafe impl WKBluetoothAlertRefreshBackgroundTask {}
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKBluetoothAlertRefreshBackgroundTask {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// WKBackgroundTasks
    #[cfg(feature = "WKExtension")]
    unsafe impl WKExtension {
        #[cfg(feature = "block2")]
        #[method(scheduleBackgroundRefreshWithPreferredDate:userInfo:scheduledCompletion:)]
        pub unsafe fn scheduleBackgroundRefreshWithPreferredDate_userInfo_scheduledCompletion(
            &self,
            preferred_fire_date: &NSDate,
            user_info: Option<&AnyObject /* NSSecureCoding+ NSObjectProtocol */>,
            scheduled_completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(scheduleSnapshotRefreshWithPreferredDate:userInfo:scheduledCompletion:)]
        pub unsafe fn scheduleSnapshotRefreshWithPreferredDate_userInfo_scheduledCompletion(
            &self,
            preferred_fire_date: &NSDate,
            user_info: Option<&AnyObject /* NSSecureCoding+ NSObjectProtocol */>,
            scheduled_completion: &block2::Block<dyn Fn(*mut NSError)>,
        );
    }
);

extern_methods!(
    /// WKBackgroundTasks
    #[cfg(feature = "WKApplication")]
    unsafe impl WKApplication {
        #[cfg(feature = "block2")]
        #[method(scheduleBackgroundRefreshWithPreferredDate:userInfo:scheduledCompletion:)]
        pub unsafe fn scheduleBackgroundRefreshWithPreferredDate_userInfo_scheduledCompletion(
            &self,
            preferred_fire_date: &NSDate,
            user_info: Option<&AnyObject /* NSSecureCoding+ NSObjectProtocol */>,
            scheduled_completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(scheduleSnapshotRefreshWithPreferredDate:userInfo:scheduledCompletion:)]
        pub unsafe fn scheduleSnapshotRefreshWithPreferredDate_userInfo_scheduledCompletion(
            &self,
            preferred_fire_date: &NSDate,
            user_info: Option<&AnyObject /* NSSecureCoding+ NSObjectProtocol */>,
            scheduled_completion: &block2::Block<dyn Fn(*mut NSError)>,
        );
    }
);
