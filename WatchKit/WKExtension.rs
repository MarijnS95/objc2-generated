//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-cloud-kit")]
use objc2_cloud_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-health-kit")]
use objc2_health_kit::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKApplicationState(pub NSInteger);
impl WKApplicationState {
    #[doc(alias = "WKApplicationStateActive")]
    pub const Active: Self = Self(0);
    #[doc(alias = "WKApplicationStateInactive")]
    pub const Inactive: Self = Self(1);
    #[doc(alias = "WKApplicationStateBackground")]
    pub const Background: Self = Self(2);
}

unsafe impl Encode for WKApplicationState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for WKApplicationState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkbackgroundfetchresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct WKBackgroundFetchResult(pub NSUInteger);
impl WKBackgroundFetchResult {
    #[doc(alias = "WKBackgroundFetchResultNewData")]
    pub const NewData: Self = Self(0);
    #[doc(alias = "WKBackgroundFetchResultNoData")]
    pub const NoData: Self = Self(1);
    #[doc(alias = "WKBackgroundFetchResultFailed")]
    pub const Failed: Self = Self(2);
}

unsafe impl Encode for WKBackgroundFetchResult {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for WKBackgroundFetchResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkextension?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKExtension;
);

unsafe impl NSObjectProtocol for WKExtension {}

extern_methods!(
    unsafe impl WKExtension {
        #[unsafe(method_family(none))]
        #[method_id(sharedExtension)]
        pub unsafe fn sharedExtension(mtm: MainThreadMarker) -> Retained<WKExtension>;

        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new(&self) -> Retained<Self>;

        #[method(openSystemURL:)]
        pub unsafe fn openSystemURL(&self, url: &NSURL);

        #[unsafe(method_family(none))]
        #[method_id(delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn WKExtensionDelegate>>>;

        #[cfg(feature = "WKInterfaceController")]
        #[unsafe(method_family(none))]
        #[method_id(rootInterfaceController)]
        pub unsafe fn rootInterfaceController(&self) -> Option<Retained<WKInterfaceController>>;

        #[cfg(feature = "WKInterfaceController")]
        #[unsafe(method_family(none))]
        #[method_id(visibleInterfaceController)]
        pub unsafe fn visibleInterfaceController(&self) -> Option<Retained<WKInterfaceController>>;

        #[method(applicationState)]
        pub unsafe fn applicationState(&self) -> WKApplicationState;

        #[method(isApplicationRunningInDock)]
        pub unsafe fn isApplicationRunningInDock(&self) -> bool;

        #[method(isAutorotating)]
        pub unsafe fn isAutorotating(&self) -> bool;

        /// Setter for [`isAutorotating`][Self::isAutorotating].
        #[method(setAutorotating:)]
        pub unsafe fn setAutorotating(&self, autorotating: bool);

        #[method(isAutorotated)]
        pub unsafe fn isAutorotated(&self) -> bool;

        #[deprecated = "No longer supported"]
        #[method(isFrontmostTimeoutExtended)]
        pub unsafe fn isFrontmostTimeoutExtended(&self) -> bool;

        /// Setter for [`isFrontmostTimeoutExtended`][Self::isFrontmostTimeoutExtended].
        #[deprecated = "No longer supported"]
        #[method(setFrontmostTimeoutExtended:)]
        pub unsafe fn setFrontmostTimeoutExtended(&self, frontmost_timeout_extended: bool);

        #[deprecated]
        #[method(enableWaterLock)]
        pub unsafe fn enableWaterLock(&self);

        #[method(registerForRemoteNotifications)]
        pub unsafe fn registerForRemoteNotifications(&self);

        #[method(unregisterForRemoteNotifications)]
        pub unsafe fn unregisterForRemoteNotifications(&self);

        #[method(isRegisteredForRemoteNotifications)]
        pub unsafe fn isRegisteredForRemoteNotifications(&self) -> bool;

        #[cfg(feature = "objc2-ui-kit")]
        #[unsafe(method_family(none))]
        #[method_id(globalTintColor)]
        pub unsafe fn globalTintColor(&self) -> Retained<UIColor>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKExtension {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new_class(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationdidfinishlaunchingnotification?language=objc)
    pub static WKApplicationDidFinishLaunchingNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationdidbecomeactivenotification?language=objc)
    pub static WKApplicationDidBecomeActiveNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationwillresignactivenotification?language=objc)
    pub static WKApplicationWillResignActiveNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationwillenterforegroundnotification?language=objc)
    pub static WKApplicationWillEnterForegroundNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationdidenterbackgroundnotification?language=objc)
    pub static WKApplicationDidEnterBackgroundNotification: &'static NSNotificationName;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkextensiondelegate?language=objc)
    pub unsafe trait WKExtensionDelegate: NSObjectProtocol + MainThreadOnly {
        #[optional]
        #[method(applicationDidFinishLaunching)]
        unsafe fn applicationDidFinishLaunching(&self);

        #[optional]
        #[method(applicationDidBecomeActive)]
        unsafe fn applicationDidBecomeActive(&self);

        #[optional]
        #[method(applicationWillResignActive)]
        unsafe fn applicationWillResignActive(&self);

        #[optional]
        #[method(applicationWillEnterForeground)]
        unsafe fn applicationWillEnterForeground(&self);

        #[optional]
        #[method(applicationDidEnterBackground)]
        unsafe fn applicationDidEnterBackground(&self);

        #[cfg(feature = "objc2-health-kit")]
        #[optional]
        #[method(handleWorkoutConfiguration:)]
        unsafe fn handleWorkoutConfiguration(&self, workout_configuration: &HKWorkoutConfiguration);

        #[optional]
        #[method(handleActiveWorkoutRecovery)]
        unsafe fn handleActiveWorkoutRecovery(&self);

        #[cfg(feature = "WKExtendedRuntimeSession")]
        #[optional]
        #[method(handleExtendedRuntimeSession:)]
        unsafe fn handleExtendedRuntimeSession(
            &self,
            extended_runtime_session: &WKExtendedRuntimeSession,
        );

        #[optional]
        #[method(handleRemoteNowPlayingActivity)]
        unsafe fn handleRemoteNowPlayingActivity(&self);

        #[optional]
        #[method(handleUserActivity:)]
        unsafe fn handleUserActivity(&self, user_info: Option<&NSDictionary>);

        #[optional]
        #[method(handleActivity:)]
        unsafe fn handleActivity(&self, user_activity: &NSUserActivity);

        #[cfg(feature = "WKBackgroundTask")]
        #[optional]
        #[method(handleBackgroundTasks:)]
        unsafe fn handleBackgroundTasks(&self, background_tasks: &NSSet<WKRefreshBackgroundTask>);

        #[optional]
        #[method(deviceOrientationDidChange)]
        unsafe fn deviceOrientationDidChange(&self);

        #[optional]
        #[method(didRegisterForRemoteNotificationsWithDeviceToken:)]
        unsafe fn didRegisterForRemoteNotificationsWithDeviceToken(&self, device_token: &NSData);

        #[optional]
        #[method(didFailToRegisterForRemoteNotificationsWithError:)]
        unsafe fn didFailToRegisterForRemoteNotificationsWithError(&self, error: &NSError);

        #[cfg(feature = "block2")]
        /// This delegate method offers an opportunity for applications with the "remote-notification" background mode to fetch appropriate new data in response to an incoming remote notification. You should call the fetchCompletionHandler as soon as you're finished performing that operation, so the system can accurately estimate its power and data cost.
        ///
        /// This method will be invoked even if the application was launched or resumed because of the remote background notification.!
        #[optional]
        #[method(didReceiveRemoteNotification:fetchCompletionHandler:)]
        unsafe fn didReceiveRemoteNotification_fetchCompletionHandler(
            &self,
            user_info: &NSDictionary,
            completion_handler: &block2::Block<dyn Fn(WKBackgroundFetchResult)>,
        );

        #[cfg(feature = "objc2-cloud-kit")]
        #[optional]
        #[method(userDidAcceptCloudKitShareWithMetadata:)]
        unsafe fn userDidAcceptCloudKitShareWithMetadata(
            &self,
            cloud_kit_share_metadata: &CKShareMetadata,
        );

        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(handleActionWithIdentifier:forRemoteNotification:)]
        unsafe fn handleActionWithIdentifier_forRemoteNotification(
            &self,
            identifier: Option<&NSString>,
            remote_notification: &NSDictionary,
        );

        #[cfg(feature = "objc2-ui-kit")]
        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(handleActionWithIdentifier:forLocalNotification:)]
        unsafe fn handleActionWithIdentifier_forLocalNotification(
            &self,
            identifier: Option<&NSString>,
            local_notification: &UILocalNotification,
        );

        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(handleActionWithIdentifier:forRemoteNotification:withResponseInfo:)]
        unsafe fn handleActionWithIdentifier_forRemoteNotification_withResponseInfo(
            &self,
            identifier: Option<&NSString>,
            remote_notification: &NSDictionary,
            response_info: &NSDictionary,
        );

        #[cfg(feature = "objc2-ui-kit")]
        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(handleActionWithIdentifier:forLocalNotification:withResponseInfo:)]
        unsafe fn handleActionWithIdentifier_forLocalNotification_withResponseInfo(
            &self,
            identifier: Option<&NSString>,
            local_notification: &UILocalNotification,
            response_info: &NSDictionary,
        );

        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(didReceiveRemoteNotification:)]
        unsafe fn didReceiveRemoteNotification(&self, user_info: &NSDictionary);

        #[cfg(feature = "objc2-ui-kit")]
        #[deprecated = "use UNUserNotificationCenterDelegate"]
        #[optional]
        #[method(didReceiveLocalNotification:)]
        unsafe fn didReceiveLocalNotification(&self, notification: &UILocalNotification);
    }
);
