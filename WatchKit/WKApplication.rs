//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-cloud-kit")]
use objc2_cloud_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-health-kit")]
use objc2_health_kit::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplication?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct WKApplication;
);

unsafe impl NSObjectProtocol for WKApplication {}

extern_methods!(
    unsafe impl WKApplication {
        #[method_id(@__retain_semantics Other sharedApplication)]
        pub unsafe fn sharedApplication(mtm: MainThreadMarker) -> Retained<WKApplication>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(&self) -> Retained<Self>;

        #[method(openSystemURL:)]
        pub unsafe fn openSystemURL(&self, url: &NSURL);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn WKApplicationDelegate>>>;

        #[cfg(feature = "WKInterfaceController")]
        #[method_id(@__retain_semantics Other rootInterfaceController)]
        pub unsafe fn rootInterfaceController(&self) -> Option<Retained<WKInterfaceController>>;

        #[cfg(feature = "WKInterfaceController")]
        #[method_id(@__retain_semantics Other visibleInterfaceController)]
        pub unsafe fn visibleInterfaceController(&self) -> Option<Retained<WKInterfaceController>>;

        #[cfg(feature = "WKExtension")]
        #[method(applicationState)]
        pub unsafe fn applicationState(&self) -> WKApplicationState;

        #[method(isApplicationRunningInDock)]
        pub unsafe fn isApplicationRunningInDock(&self) -> bool;

        #[method(isAutorotating)]
        pub unsafe fn isAutorotating(&self) -> bool;

        /// Setter for [`isAutorotating`][Self::isAutorotating].
        #[method(setAutorotating:)]
        pub unsafe fn setAutorotating(&self, autorotating: bool);

        #[method(isAutorotated)]
        pub unsafe fn isAutorotated(&self) -> bool;

        #[method(registerForRemoteNotifications)]
        pub unsafe fn registerForRemoteNotifications(&self);

        #[method(unregisterForRemoteNotifications)]
        pub unsafe fn unregisterForRemoteNotifications(&self);

        #[method(isRegisteredForRemoteNotifications)]
        pub unsafe fn isRegisteredForRemoteNotifications(&self) -> bool;

        #[cfg(feature = "objc2-ui-kit")]
        #[method_id(@__retain_semantics Other globalTintColor)]
        pub unsafe fn globalTintColor(&self) -> Retained<UIColor>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl WKApplication {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new_class(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/watchkit/wkapplicationdelegate?language=objc)
    pub unsafe trait WKApplicationDelegate: NSObjectProtocol + MainThreadOnly {
        #[optional]
        #[method(applicationDidFinishLaunching)]
        unsafe fn applicationDidFinishLaunching(&self);

        #[optional]
        #[method(applicationDidBecomeActive)]
        unsafe fn applicationDidBecomeActive(&self);

        #[optional]
        #[method(applicationWillResignActive)]
        unsafe fn applicationWillResignActive(&self);

        #[optional]
        #[method(applicationWillEnterForeground)]
        unsafe fn applicationWillEnterForeground(&self);

        #[optional]
        #[method(applicationDidEnterBackground)]
        unsafe fn applicationDidEnterBackground(&self);

        #[cfg(feature = "objc2-health-kit")]
        #[optional]
        #[method(handleWorkoutConfiguration:)]
        unsafe fn handleWorkoutConfiguration(&self, workout_configuration: &HKWorkoutConfiguration);

        #[optional]
        #[method(handleActiveWorkoutRecovery)]
        unsafe fn handleActiveWorkoutRecovery(&self);

        #[cfg(feature = "WKExtendedRuntimeSession")]
        #[optional]
        #[method(handleExtendedRuntimeSession:)]
        unsafe fn handleExtendedRuntimeSession(
            &self,
            extended_runtime_session: &WKExtendedRuntimeSession,
        );

        #[optional]
        #[method(handleRemoteNowPlayingActivity)]
        unsafe fn handleRemoteNowPlayingActivity(&self);

        #[optional]
        #[method(handleUserActivity:)]
        unsafe fn handleUserActivity(&self, user_info: Option<&NSDictionary>);

        #[optional]
        #[method(handleActivity:)]
        unsafe fn handleActivity(&self, user_activity: &NSUserActivity);

        #[cfg(feature = "WKBackgroundTask")]
        #[optional]
        #[method(handleBackgroundTasks:)]
        unsafe fn handleBackgroundTasks(&self, background_tasks: &NSSet<WKRefreshBackgroundTask>);

        #[optional]
        #[method(deviceOrientationDidChange)]
        unsafe fn deviceOrientationDidChange(&self);

        #[optional]
        #[method(didRegisterForRemoteNotificationsWithDeviceToken:)]
        unsafe fn didRegisterForRemoteNotificationsWithDeviceToken(&self, device_token: &NSData);

        #[optional]
        #[method(didFailToRegisterForRemoteNotificationsWithError:)]
        unsafe fn didFailToRegisterForRemoteNotificationsWithError(&self, error: &NSError);

        #[cfg(all(feature = "WKExtension", feature = "block2"))]
        /// This delegate method offers an opportunity for applications with the "remote-notification" background mode to fetch appropriate new data in response to an incoming remote notification. You should call the fetchCompletionHandler as soon as you're finished performing that operation, so the system can accurately estimate its power and data cost.
        ///
        /// This method will be invoked even if the application was launched or resumed because of the remote background notification.!
        #[optional]
        #[method(didReceiveRemoteNotification:fetchCompletionHandler:)]
        unsafe fn didReceiveRemoteNotification_fetchCompletionHandler(
            &self,
            user_info: &NSDictionary,
            completion_handler: &block2::Block<dyn Fn(WKBackgroundFetchResult)>,
        );

        #[cfg(feature = "objc2-cloud-kit")]
        #[optional]
        #[method(userDidAcceptCloudKitShareWithMetadata:)]
        unsafe fn userDidAcceptCloudKitShareWithMetadata(
            &self,
            cloud_kit_share_metadata: &CKShareMetadata,
        );
    }
);
