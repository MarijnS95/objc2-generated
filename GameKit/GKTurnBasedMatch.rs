//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedmatchstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKTurnBasedMatchStatus(pub NSInteger);
impl GKTurnBasedMatchStatus {
    #[doc(alias = "GKTurnBasedMatchStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "GKTurnBasedMatchStatusOpen")]
    pub const Open: Self = Self(1);
    #[doc(alias = "GKTurnBasedMatchStatusEnded")]
    pub const Ended: Self = Self(2);
    #[doc(alias = "GKTurnBasedMatchStatusMatching")]
    pub const Matching: Self = Self(3);
}

unsafe impl Encode for GKTurnBasedMatchStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKTurnBasedMatchStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedparticipantstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKTurnBasedParticipantStatus(pub NSInteger);
impl GKTurnBasedParticipantStatus {
    #[doc(alias = "GKTurnBasedParticipantStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "GKTurnBasedParticipantStatusInvited")]
    pub const Invited: Self = Self(1);
    #[doc(alias = "GKTurnBasedParticipantStatusDeclined")]
    pub const Declined: Self = Self(2);
    #[doc(alias = "GKTurnBasedParticipantStatusMatching")]
    pub const Matching: Self = Self(3);
    #[doc(alias = "GKTurnBasedParticipantStatusActive")]
    pub const Active: Self = Self(4);
    #[doc(alias = "GKTurnBasedParticipantStatusDone")]
    pub const Done: Self = Self(5);
}

unsafe impl Encode for GKTurnBasedParticipantStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKTurnBasedParticipantStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedmatchoutcome?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKTurnBasedMatchOutcome(pub NSInteger);
impl GKTurnBasedMatchOutcome {
    #[doc(alias = "GKTurnBasedMatchOutcomeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "GKTurnBasedMatchOutcomeQuit")]
    pub const Quit: Self = Self(1);
    #[doc(alias = "GKTurnBasedMatchOutcomeWon")]
    pub const Won: Self = Self(2);
    #[doc(alias = "GKTurnBasedMatchOutcomeLost")]
    pub const Lost: Self = Self(3);
    #[doc(alias = "GKTurnBasedMatchOutcomeTied")]
    pub const Tied: Self = Self(4);
    #[doc(alias = "GKTurnBasedMatchOutcomeTimeExpired")]
    pub const TimeExpired: Self = Self(5);
    #[doc(alias = "GKTurnBasedMatchOutcomeFirst")]
    pub const First: Self = Self(6);
    #[doc(alias = "GKTurnBasedMatchOutcomeSecond")]
    pub const Second: Self = Self(7);
    #[doc(alias = "GKTurnBasedMatchOutcomeThird")]
    pub const Third: Self = Self(8);
    #[doc(alias = "GKTurnBasedMatchOutcomeFourth")]
    pub const Fourth: Self = Self(9);
    #[doc(alias = "GKTurnBasedMatchOutcomeCustomRange")]
    pub const CustomRange: Self = Self(0x00FF0000);
}

unsafe impl Encode for GKTurnBasedMatchOutcome {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKTurnBasedMatchOutcome {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedparticipant?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKTurnBasedParticipant;
);

unsafe impl NSObjectProtocol for GKTurnBasedParticipant {}

extern_methods!(
    unsafe impl GKTurnBasedParticipant {
        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[method_id(@__retain_semantics Other player)]
        pub unsafe fn player(&self) -> Option<Retained<GKPlayer>>;

        #[method_id(@__retain_semantics Other lastTurnDate)]
        pub unsafe fn lastTurnDate(&self) -> Option<Retained<NSDate>>;

        #[method(status)]
        pub unsafe fn status(&self) -> GKTurnBasedParticipantStatus;

        #[method(matchOutcome)]
        pub unsafe fn matchOutcome(&self) -> GKTurnBasedMatchOutcome;

        #[method(setMatchOutcome:)]
        pub unsafe fn setMatchOutcome(&self, match_outcome: GKTurnBasedMatchOutcome);

        #[method_id(@__retain_semantics Other timeoutDate)]
        pub unsafe fn timeoutDate(&self) -> Option<Retained<NSDate>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKTurnBasedParticipant {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// Obsoleted
    unsafe impl GKTurnBasedParticipant {
        #[deprecated]
        #[method_id(@__retain_semantics Other playerID)]
        pub unsafe fn playerID(&self) -> Option<Retained<NSString>>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedeventlistener?language=objc)
    pub unsafe trait GKTurnBasedEventListener {
        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:didRequestMatchWithOtherPlayers:)]
        unsafe fn player_didRequestMatchWithOtherPlayers(
            &self,
            player: &GKPlayer,
            players_to_invite: &NSArray<GKPlayer>,
        );

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:receivedTurnEventForMatch:didBecomeActive:)]
        unsafe fn player_receivedTurnEventForMatch_didBecomeActive(
            &self,
            player: &GKPlayer,
            r#match: &GKTurnBasedMatch,
            did_become_active: bool,
        );

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:matchEnded:)]
        unsafe fn player_matchEnded(&self, player: &GKPlayer, r#match: &GKTurnBasedMatch);

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:receivedExchangeRequest:forMatch:)]
        unsafe fn player_receivedExchangeRequest_forMatch(
            &self,
            player: &GKPlayer,
            exchange: &GKTurnBasedExchange,
            r#match: &GKTurnBasedMatch,
        );

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:receivedExchangeCancellation:forMatch:)]
        unsafe fn player_receivedExchangeCancellation_forMatch(
            &self,
            player: &GKPlayer,
            exchange: &GKTurnBasedExchange,
            r#match: &GKTurnBasedMatch,
        );

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:receivedExchangeReplies:forCompletedExchange:forMatch:)]
        unsafe fn player_receivedExchangeReplies_forCompletedExchange_forMatch(
            &self,
            player: &GKPlayer,
            replies: &NSArray<GKTurnBasedExchangeReply>,
            exchange: &GKTurnBasedExchange,
            r#match: &GKTurnBasedMatch,
        );

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[optional]
        #[method(player:wantsToQuitMatch:)]
        unsafe fn player_wantsToQuitMatch(&self, player: &GKPlayer, r#match: &GKTurnBasedMatch);

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[deprecated]
        #[optional]
        #[method(player:didRequestMatchWithPlayers:)]
        unsafe fn player_didRequestMatchWithPlayers(
            &self,
            player: &GKPlayer,
            player_i_ds_to_invite: &NSArray<NSString>,
        );
    }

    unsafe impl ProtocolType for dyn GKTurnBasedEventListener {}
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturntimeoutdefault?language=objc)
    pub static GKTurnTimeoutDefault: NSTimeInterval;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturntimeoutnone?language=objc)
    pub static GKTurnTimeoutNone: NSTimeInterval;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedmatch?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKTurnBasedMatch;
);

unsafe impl NSObjectProtocol for GKTurnBasedMatch {}

extern_methods!(
    unsafe impl GKTurnBasedMatch {
        #[method_id(@__retain_semantics Other matchID)]
        pub unsafe fn matchID(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other creationDate)]
        pub unsafe fn creationDate(&self) -> Retained<NSDate>;

        #[method_id(@__retain_semantics Other participants)]
        pub unsafe fn participants(&self) -> Retained<NSArray<GKTurnBasedParticipant>>;

        #[method(status)]
        pub unsafe fn status(&self) -> GKTurnBasedMatchStatus;

        #[method_id(@__retain_semantics Other currentParticipant)]
        pub unsafe fn currentParticipant(&self) -> Option<Retained<GKTurnBasedParticipant>>;

        #[method_id(@__retain_semantics Other matchData)]
        pub unsafe fn matchData(&self) -> Option<Retained<NSData>>;

        #[method(setLocalizableMessageWithKey:arguments:)]
        pub unsafe fn setLocalizableMessageWithKey_arguments(
            &self,
            key: &NSString,
            arguments: Option<&NSArray<NSString>>,
        );

        #[method_id(@__retain_semantics Other message)]
        pub unsafe fn message(&self) -> Option<Retained<NSString>>;

        #[method(setMessage:)]
        pub unsafe fn setMessage(&self, message: Option<&NSString>);

        #[method(matchDataMaximumSize)]
        pub unsafe fn matchDataMaximumSize(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other exchanges)]
        pub unsafe fn exchanges(&self) -> Option<Retained<NSArray<GKTurnBasedExchange>>>;

        #[method_id(@__retain_semantics Other activeExchanges)]
        pub unsafe fn activeExchanges(&self) -> Option<Retained<NSArray<GKTurnBasedExchange>>>;

        #[method_id(@__retain_semantics Other completedExchanges)]
        pub unsafe fn completedExchanges(&self) -> Option<Retained<NSArray<GKTurnBasedExchange>>>;

        #[method(exchangeDataMaximumSize)]
        pub unsafe fn exchangeDataMaximumSize(&self) -> NSUInteger;

        #[method(exchangeMaxInitiatedExchangesPerPlayer)]
        pub unsafe fn exchangeMaxInitiatedExchangesPerPlayer(&self) -> NSUInteger;

        #[cfg(all(feature = "GKMatchmaker", feature = "block2"))]
        #[method(findMatchForRequest:withCompletionHandler:)]
        pub unsafe fn findMatchForRequest_withCompletionHandler(
            request: &GKMatchRequest,
            completion_handler: &block2::Block<dyn Fn(*mut GKTurnBasedMatch, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(loadMatchesWithCompletionHandler:)]
        pub unsafe fn loadMatchesWithCompletionHandler(
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKTurnBasedMatch>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[method(loadMatchWithID:withCompletionHandler:)]
        pub unsafe fn loadMatchWithID_withCompletionHandler(
            match_id: &NSString,
            completion_handler: Option<&block2::Block<dyn Fn(*mut GKTurnBasedMatch, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(rematchWithCompletionHandler:)]
        pub unsafe fn rematchWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut GKTurnBasedMatch, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(acceptInviteWithCompletionHandler:)]
        pub unsafe fn acceptInviteWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut GKTurnBasedMatch, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(declineInviteWithCompletionHandler:)]
        pub unsafe fn declineInviteWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(removeWithCompletionHandler:)]
        pub unsafe fn removeWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(loadMatchDataWithCompletionHandler:)]
        pub unsafe fn loadMatchDataWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSData, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(endTurnWithNextParticipants:turnTimeout:matchData:completionHandler:)]
        pub unsafe fn endTurnWithNextParticipants_turnTimeout_matchData_completionHandler(
            &self,
            next_participants: &NSArray<GKTurnBasedParticipant>,
            timeout: NSTimeInterval,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(participantQuitInTurnWithOutcome:nextParticipants:turnTimeout:matchData:completionHandler:)]
        pub unsafe fn participantQuitInTurnWithOutcome_nextParticipants_turnTimeout_matchData_completionHandler(
            &self,
            match_outcome: GKTurnBasedMatchOutcome,
            next_participants: &NSArray<GKTurnBasedParticipant>,
            timeout: NSTimeInterval,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(participantQuitOutOfTurnWithOutcome:withCompletionHandler:)]
        pub unsafe fn participantQuitOutOfTurnWithOutcome_withCompletionHandler(
            &self,
            match_outcome: GKTurnBasedMatchOutcome,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(endMatchInTurnWithMatchData:completionHandler:)]
        pub unsafe fn endMatchInTurnWithMatchData_completionHandler(
            &self,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(all(feature = "GKAchievement", feature = "GKScore", feature = "block2"))]
        #[deprecated]
        #[method(endMatchInTurnWithMatchData:scores:achievements:completionHandler:)]
        pub unsafe fn endMatchInTurnWithMatchData_scores_achievements_completionHandler(
            &self,
            match_data: &NSData,
            scores: Option<&NSArray<GKScore>>,
            achievements: Option<&NSArray<GKAchievement>>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(all(feature = "GKLeaderboardScore", feature = "block2"))]
        #[method(endMatchInTurnWithMatchData:leaderboardScores:achievements:completionHandler:)]
        pub unsafe fn endMatchInTurnWithMatchData_leaderboardScores_achievements_completionHandler(
            &self,
            match_data: &NSData,
            scores: &NSArray<GKLeaderboardScore>,
            achievements: &NSArray,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(saveCurrentTurnWithMatchData:completionHandler:)]
        pub unsafe fn saveCurrentTurnWithMatchData_completionHandler(
            &self,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(saveMergedMatchData:withResolvedExchanges:completionHandler:)]
        pub unsafe fn saveMergedMatchData_withResolvedExchanges_completionHandler(
            &self,
            match_data: &NSData,
            exchanges: &NSArray<GKTurnBasedExchange>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(sendExchangeToParticipants:data:localizableMessageKey:arguments:timeout:completionHandler:)]
        pub unsafe fn sendExchangeToParticipants_data_localizableMessageKey_arguments_timeout_completionHandler(
            &self,
            participants: &NSArray<GKTurnBasedParticipant>,
            data: &NSData,
            key: &NSString,
            arguments: &NSArray<NSString>,
            timeout: NSTimeInterval,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut GKTurnBasedExchange, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[method(sendReminderToParticipants:localizableMessageKey:arguments:completionHandler:)]
        pub unsafe fn sendReminderToParticipants_localizableMessageKey_arguments_completionHandler(
            &self,
            participants: &NSArray<GKTurnBasedParticipant>,
            key: &NSString,
            arguments: &NSArray<NSString>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(endTurnWithNextParticipant:matchData:completionHandler:)]
        pub unsafe fn endTurnWithNextParticipant_matchData_completionHandler(
            &self,
            next_participant: &GKTurnBasedParticipant,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:)]
        pub unsafe fn participantQuitInTurnWithOutcome_nextParticipant_matchData_completionHandler(
            &self,
            match_outcome: GKTurnBasedMatchOutcome,
            next_participant: &GKTurnBasedParticipant,
            match_data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKTurnBasedMatch {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedexchangestatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKTurnBasedExchangeStatus(pub i8);
impl GKTurnBasedExchangeStatus {
    #[doc(alias = "GKTurnBasedExchangeStatusUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "GKTurnBasedExchangeStatusActive")]
    pub const Active: Self = Self(1);
    #[doc(alias = "GKTurnBasedExchangeStatusComplete")]
    pub const Complete: Self = Self(2);
    #[doc(alias = "GKTurnBasedExchangeStatusResolved")]
    pub const Resolved: Self = Self(3);
    #[doc(alias = "GKTurnBasedExchangeStatusCanceled")]
    pub const Canceled: Self = Self(4);
}

unsafe impl Encode for GKTurnBasedExchangeStatus {
    const ENCODING: Encoding = i8::ENCODING;
}

unsafe impl RefEncode for GKTurnBasedExchangeStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkexchangetimeoutdefault?language=objc)
    pub static GKExchangeTimeoutDefault: NSTimeInterval;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkexchangetimeoutnone?language=objc)
    pub static GKExchangeTimeoutNone: NSTimeInterval;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedexchange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKTurnBasedExchange;
);

unsafe impl NSObjectProtocol for GKTurnBasedExchange {}

extern_methods!(
    unsafe impl GKTurnBasedExchange {
        #[method_id(@__retain_semantics Other exchangeID)]
        pub unsafe fn exchangeID(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other sender)]
        pub unsafe fn sender(&self) -> Retained<GKTurnBasedParticipant>;

        #[method_id(@__retain_semantics Other recipients)]
        pub unsafe fn recipients(&self) -> Retained<NSArray<GKTurnBasedParticipant>>;

        #[method(status)]
        pub unsafe fn status(&self) -> GKTurnBasedExchangeStatus;

        #[method_id(@__retain_semantics Other message)]
        pub unsafe fn message(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Option<Retained<NSData>>;

        #[method_id(@__retain_semantics Other sendDate)]
        pub unsafe fn sendDate(&self) -> Retained<NSDate>;

        #[method_id(@__retain_semantics Other timeoutDate)]
        pub unsafe fn timeoutDate(&self) -> Option<Retained<NSDate>>;

        #[method_id(@__retain_semantics Other completionDate)]
        pub unsafe fn completionDate(&self) -> Option<Retained<NSDate>>;

        #[method_id(@__retain_semantics Other replies)]
        pub unsafe fn replies(&self) -> Option<Retained<NSArray<GKTurnBasedExchangeReply>>>;

        #[cfg(feature = "block2")]
        #[method(cancelWithLocalizableMessageKey:arguments:completionHandler:)]
        pub unsafe fn cancelWithLocalizableMessageKey_arguments_completionHandler(
            &self,
            key: &NSString,
            arguments: &NSArray<NSString>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(replyWithLocalizableMessageKey:arguments:data:completionHandler:)]
        pub unsafe fn replyWithLocalizableMessageKey_arguments_data_completionHandler(
            &self,
            key: &NSString,
            arguments: &NSArray<NSString>,
            data: &NSData,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKTurnBasedExchange {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedexchangereply?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKTurnBasedExchangeReply;
);

unsafe impl NSObjectProtocol for GKTurnBasedExchangeReply {}

extern_methods!(
    unsafe impl GKTurnBasedExchangeReply {
        #[method_id(@__retain_semantics Other recipient)]
        pub unsafe fn recipient(&self) -> Retained<GKTurnBasedParticipant>;

        #[method_id(@__retain_semantics Other message)]
        pub unsafe fn message(&self) -> Option<Retained<NSString>>;

        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Option<Retained<NSData>>;

        #[method_id(@__retain_semantics Other replyDate)]
        pub unsafe fn replyDate(&self) -> Option<Retained<NSDate>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKTurnBasedExchangeReply {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedeventhandlerdelegate?language=objc)
    #[deprecated]
    pub unsafe trait GKTurnBasedEventHandlerDelegate {
        #[deprecated]
        #[method(handleInviteFromGameCenter:)]
        unsafe fn handleInviteFromGameCenter(&self, players_to_invite: &NSArray<NSString>);

        #[deprecated]
        #[method(handleTurnEventForMatch:didBecomeActive:)]
        unsafe fn handleTurnEventForMatch_didBecomeActive(
            &self,
            r#match: &GKTurnBasedMatch,
            did_become_active: bool,
        );

        #[deprecated]
        #[optional]
        #[method(handleTurnEventForMatch:)]
        unsafe fn handleTurnEventForMatch(&self, r#match: &GKTurnBasedMatch);

        #[deprecated]
        #[optional]
        #[method(handleMatchEnded:)]
        unsafe fn handleMatchEnded(&self, r#match: &GKTurnBasedMatch);
    }

    unsafe impl ProtocolType for dyn GKTurnBasedEventHandlerDelegate {}
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkturnbasedeventhandler?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct GKTurnBasedEventHandler;
);

unsafe impl NSObjectProtocol for GKTurnBasedEventHandler {}

extern_methods!(
    unsafe impl GKTurnBasedEventHandler {
        #[deprecated]
        #[method_id(@__retain_semantics Other sharedTurnBasedEventHandler)]
        pub unsafe fn sharedTurnBasedEventHandler() -> Retained<GKTurnBasedEventHandler>;

        #[deprecated]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<NSObject>>;

        /// This is a [weak property][objc2::topics::weak_property].
        #[deprecated]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&NSObject>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKTurnBasedEventHandler {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
