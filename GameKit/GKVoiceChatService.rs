//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// This a not a Game Center feature. To support voice chat as part of Game Center online play, see GKVoiceChat.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkvoicechatservice?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKVoiceChatService;
);

unsafe impl NSObjectProtocol for GKVoiceChatService {}

extern_methods!(
    unsafe impl GKVoiceChatService {
        #[method_id(defaultVoiceChatService)]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultVoiceChatService() -> Option<Retained<GKVoiceChatService>>;

        #[method(isVoIPAllowed)]
        pub unsafe fn isVoIPAllowed() -> bool;

        #[cfg(feature = "GKPublicProtocols")]
        #[method_id(client)]
        #[unsafe(method_family = none)]
        pub unsafe fn client(&self) -> Option<Retained<ProtocolObject<dyn GKVoiceChatClient>>>;

        #[cfg(feature = "GKPublicProtocols")]
        /// Setter for [`client`][Self::client].
        #[method(setClient:)]
        pub unsafe fn setClient(&self, client: Option<&ProtocolObject<dyn GKVoiceChatClient>>);

        #[method(stopVoiceChatWithParticipantID:)]
        pub unsafe fn stopVoiceChatWithParticipantID(&self, participant_id: Option<&NSString>);

        #[method(denyCallID:)]
        pub unsafe fn denyCallID(&self, call_id: NSInteger);

        #[method(receivedRealTimeData:fromParticipantID:)]
        pub unsafe fn receivedRealTimeData_fromParticipantID(
            &self,
            audio: Option<&NSData>,
            participant_id: Option<&NSString>,
        );

        #[method(receivedData:fromParticipantID:)]
        pub unsafe fn receivedData_fromParticipantID(
            &self,
            arbitrary_data: Option<&NSData>,
            participant_id: Option<&NSString>,
        );

        #[method(isMicrophoneMuted)]
        pub unsafe fn isMicrophoneMuted(&self) -> bool;

        /// Setter for [`isMicrophoneMuted`][Self::isMicrophoneMuted].
        #[method(setMicrophoneMuted:)]
        pub unsafe fn setMicrophoneMuted(&self, microphone_muted: bool);

        #[method(remoteParticipantVolume)]
        pub unsafe fn remoteParticipantVolume(&self) -> c_float;

        /// Setter for [`remoteParticipantVolume`][Self::remoteParticipantVolume].
        #[method(setRemoteParticipantVolume:)]
        pub unsafe fn setRemoteParticipantVolume(&self, remote_participant_volume: c_float);

        #[method(isOutputMeteringEnabled)]
        pub unsafe fn isOutputMeteringEnabled(&self) -> bool;

        /// Setter for [`isOutputMeteringEnabled`][Self::isOutputMeteringEnabled].
        #[method(setOutputMeteringEnabled:)]
        pub unsafe fn setOutputMeteringEnabled(&self, output_metering_enabled: bool);

        #[method(isInputMeteringEnabled)]
        pub unsafe fn isInputMeteringEnabled(&self) -> bool;

        /// Setter for [`isInputMeteringEnabled`][Self::isInputMeteringEnabled].
        #[method(setInputMeteringEnabled:)]
        pub unsafe fn setInputMeteringEnabled(&self, input_metering_enabled: bool);

        #[method(outputMeterLevel)]
        pub unsafe fn outputMeterLevel(&self) -> c_float;

        #[method(inputMeterLevel)]
        pub unsafe fn inputMeterLevel(&self) -> c_float;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKVoiceChatService {
        #[method_id(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
