//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gksession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct GKSession;
);

unsafe impl NSObjectProtocol for GKSession {}

extern_methods!(
    unsafe impl GKSession {
        #[cfg(feature = "GKPublicConstants")]
        #[deprecated]
        #[method_id(@__retain_semantics Init initWithSessionID:displayName:sessionMode:)]
        pub unsafe fn initWithSessionID_displayName_sessionMode(
            this: Allocated<Self>,
            session_id: Option<&NSString>,
            name: Option<&NSString>,
            mode: GKSessionMode,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "GKPublicProtocols")]
        #[deprecated]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn GKSessionDelegate>>>;

        #[cfg(feature = "GKPublicProtocols")]
        /// This is a [weak property][objc2::topics::weak_property].
        #[deprecated]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn GKSessionDelegate>>);

        #[deprecated]
        #[method_id(@__retain_semantics Other sessionID)]
        pub unsafe fn sessionID(&self) -> Option<Retained<NSString>>;

        #[deprecated]
        #[method_id(@__retain_semantics Other displayName)]
        pub unsafe fn displayName(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "GKPublicConstants")]
        #[deprecated]
        #[method(sessionMode)]
        pub unsafe fn sessionMode(&self) -> GKSessionMode;

        #[deprecated]
        #[method_id(@__retain_semantics Other peerID)]
        pub unsafe fn peerID(&self) -> Option<Retained<NSString>>;

        #[deprecated]
        #[method(isAvailable)]
        pub unsafe fn isAvailable(&self) -> bool;

        #[deprecated]
        #[method(setAvailable:)]
        pub unsafe fn setAvailable(&self, available: bool);

        #[deprecated]
        #[method(disconnectTimeout)]
        pub unsafe fn disconnectTimeout(&self) -> NSTimeInterval;

        #[deprecated]
        #[method(setDisconnectTimeout:)]
        pub unsafe fn setDisconnectTimeout(&self, disconnect_timeout: NSTimeInterval);

        #[deprecated]
        #[method_id(@__retain_semantics Other displayNameForPeer:)]
        pub unsafe fn displayNameForPeer(
            &self,
            peer_id: Option<&NSString>,
        ) -> Option<Retained<NSString>>;

        #[deprecated]
        #[method(setDataReceiveHandler:withContext:)]
        pub unsafe fn setDataReceiveHandler_withContext(
            &self,
            handler: Option<&AnyObject>,
            context: *mut c_void,
        );

        #[deprecated]
        #[method(connectToPeer:withTimeout:)]
        pub unsafe fn connectToPeer_withTimeout(
            &self,
            peer_id: Option<&NSString>,
            timeout: NSTimeInterval,
        );

        #[deprecated]
        #[method(cancelConnectToPeer:)]
        pub unsafe fn cancelConnectToPeer(&self, peer_id: Option<&NSString>);

        #[deprecated]
        #[method(denyConnectionFromPeer:)]
        pub unsafe fn denyConnectionFromPeer(&self, peer_id: Option<&NSString>);

        #[deprecated]
        #[method(disconnectPeerFromAllPeers:)]
        pub unsafe fn disconnectPeerFromAllPeers(&self, peer_id: Option<&NSString>);

        #[deprecated]
        #[method(disconnectFromAllPeers)]
        pub unsafe fn disconnectFromAllPeers(&self);

        #[cfg(feature = "GKPublicConstants")]
        #[deprecated]
        #[method_id(@__retain_semantics Other peersWithConnectionState:)]
        pub unsafe fn peersWithConnectionState(
            &self,
            state: GKPeerConnectionState,
        ) -> Option<Retained<NSArray>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKSession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
