//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Class representing a saved game for the local player, or a version of a saved game when in conflict
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamekit/gksavedgame?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKSavedGame;
);

unsafe impl NSCopying for GKSavedGame {}

unsafe impl CopyingHelper for GKSavedGame {
    type Result = Self;
}

unsafe impl NSObjectProtocol for GKSavedGame {}

extern_methods!(
    unsafe impl GKSavedGame {
        #[method_id(@__method_family Other name)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        #[method_id(@__method_family Other deviceName)]
        pub unsafe fn deviceName(&self) -> Option<Retained<NSString>>;

        #[method_id(@__method_family Other modificationDate)]
        pub unsafe fn modificationDate(&self) -> Option<Retained<NSDate>>;

        #[cfg(feature = "block2")]
        /// Asynchronously load the data for this saved game. The completion handler is called with loaded data or an error.
        #[method(loadDataWithCompletionHandler:)]
        pub unsafe fn loadDataWithCompletionHandler(
            &self,
            handler: Option<&block2::Block<dyn Fn(*mut NSData, *mut NSError)>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKSavedGame {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// GKSavedGame
    #[cfg(all(
        feature = "GKBasePlayer",
        feature = "GKLocalPlayer",
        feature = "GKPlayer"
    ))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        /// Asynchronously fetch saved games. The handler is called with an array of GKSavedGame objects or an error.
        /// If there is more than one saved game with the same name then a conflict exists. The application should determine the correct data to use and call resolveConflictingSavedGames:withData:completionHandler:. This may require data merging or asking the user.
        #[method(fetchSavedGamesWithCompletionHandler:)]
        pub unsafe fn fetchSavedGamesWithCompletionHandler(
            &self,
            handler: Option<&block2::Block<dyn Fn(*mut NSArray<GKSavedGame>, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// Asynchronously save game data. If a saved game with that name already exists it is overwritten, otherwise a new one is created. The completion handler is called with the new / modified GKSavedGame or an error.
        /// If the saved game was in conflict then the overwritten version will be the one with the same deviceName if present, otherwise the most recent overall.
        #[method(saveGameData:withName:completionHandler:)]
        pub unsafe fn saveGameData_withName_completionHandler(
            &self,
            data: &NSData,
            name: &NSString,
            handler: Option<&block2::Block<dyn Fn(*mut GKSavedGame, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// Asynchronously delete saved games with the given name. The completion handler will indicate whether or not the deletion was successful.
        #[method(deleteSavedGamesWithName:completionHandler:)]
        pub unsafe fn deleteSavedGamesWithName_completionHandler(
            &self,
            name: &NSString,
            handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// Asynchronously resolve a saved game conflict. This deletes all versions included in conflictingSavedGames and creates a new version with the given data. The completion handler is called with the newly created save and all other remaining versions or an error.
        #[method(resolveConflictingSavedGames:withData:completionHandler:)]
        pub unsafe fn resolveConflictingSavedGames_withData_completionHandler(
            &self,
            conflicting_saved_games: &NSArray<GKSavedGame>,
            data: &NSData,
            handler: Option<&block2::Block<dyn Fn(*mut NSArray<GKSavedGame>, *mut NSError)>>,
        );
    }
);

#[cfg(all(
    feature = "GKBasePlayer",
    feature = "GKLocalPlayer",
    feature = "GKPlayer",
    feature = "GKSavedGameListener"
))]
unsafe impl GKSavedGameListener for GKLocalPlayer {}
