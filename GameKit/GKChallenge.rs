//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKChallengeState(pub NSInteger);
impl GKChallengeState {
    #[doc(alias = "GKChallengeStateInvalid")]
    pub const Invalid: Self = Self(0);
    #[doc(alias = "GKChallengeStatePending")]
    pub const Pending: Self = Self(1);
    #[doc(alias = "GKChallengeStateCompleted")]
    pub const Completed: Self = Self(2);
    #[doc(alias = "GKChallengeStateDeclined")]
    pub const Declined: Self = Self(3);
}

unsafe impl Encode for GKChallengeState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKChallengeState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKChallenge;

    unsafe impl ClassType for GKChallenge {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for GKChallenge {}

unsafe impl NSObjectProtocol for GKChallenge {}

unsafe impl NSSecureCoding for GKChallenge {}

extern_methods!(
    unsafe impl GKChallenge {
        #[cfg(feature = "block2")]
        #[method(loadReceivedChallengesWithCompletionHandler:)]
        pub unsafe fn loadReceivedChallengesWithCompletionHandler(
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKChallenge>, *mut NSError)>,
            >,
        );

        #[method(decline)]
        pub unsafe fn decline(&self);

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[method_id(@__retain_semantics Other issuingPlayer)]
        pub unsafe fn issuingPlayer(&self) -> Option<Id<GKPlayer>>;

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        #[method_id(@__retain_semantics Other receivingPlayer)]
        pub unsafe fn receivingPlayer(&self) -> Option<Id<GKPlayer>>;

        #[method(state)]
        pub unsafe fn state(&self) -> GKChallengeState;

        #[method_id(@__retain_semantics Other issueDate)]
        pub unsafe fn issueDate(&self) -> Id<NSDate>;

        #[method_id(@__retain_semantics Other completionDate)]
        pub unsafe fn completionDate(&self) -> Option<Id<NSDate>>;

        #[method_id(@__retain_semantics Other message)]
        pub unsafe fn message(&self) -> Option<Id<NSString>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKChallenge {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_methods!(
    /// Obsoleted
    unsafe impl GKChallenge {
        #[deprecated]
        #[method_id(@__retain_semantics Other issuingPlayerID)]
        pub unsafe fn issuingPlayerID(&self) -> Option<Id<NSString>>;

        #[deprecated]
        #[method_id(@__retain_semantics Other receivingPlayerID)]
        pub unsafe fn receivingPlayerID(&self) -> Option<Id<NSString>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKScoreChallenge;

    unsafe impl ClassType for GKScoreChallenge {
        #[inherits(NSObject)]
        type Super = GKChallenge;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for GKScoreChallenge {}

unsafe impl NSObjectProtocol for GKScoreChallenge {}

unsafe impl NSSecureCoding for GKScoreChallenge {}

extern_methods!(
    unsafe impl GKScoreChallenge {
        #[cfg(feature = "GKScore")]
        #[deprecated]
        #[method_id(@__retain_semantics Other score)]
        pub unsafe fn score(&self) -> Option<Id<GKScore>>;

        #[cfg(feature = "GKLeaderboardEntry")]
        #[method_id(@__retain_semantics Other leaderboardEntry)]
        pub unsafe fn leaderboardEntry(&self) -> Option<Id<GKLeaderboardEntry>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKScoreChallenge {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKAchievementChallenge;

    unsafe impl ClassType for GKAchievementChallenge {
        #[inherits(NSObject)]
        type Super = GKChallenge;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for GKAchievementChallenge {}

unsafe impl NSObjectProtocol for GKAchievementChallenge {}

unsafe impl NSSecureCoding for GKAchievementChallenge {}

extern_methods!(
    unsafe impl GKAchievementChallenge {
        #[cfg(feature = "GKAchievement")]
        #[method_id(@__retain_semantics Other achievement)]
        pub unsafe fn achievement(&self) -> Option<Id<GKAchievement>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl GKAchievementChallenge {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_methods!(
    /// GKChallenge
    #[cfg(feature = "GKScore")]
    unsafe impl GKScore {
        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(reportScores:withEligibleChallenges:withCompletionHandler:)]
        pub unsafe fn reportScores_withEligibleChallenges_withCompletionHandler(
            scores: &NSArray<GKScore>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(all(feature = "GKLeaderboardScore", feature = "block2"))]
        #[method(reportLeaderboardScores:withEligibleChallenges:withCompletionHandler:)]
        pub unsafe fn reportLeaderboardScores_withEligibleChallenges_withCompletionHandler(
            scores: &NSArray<GKLeaderboardScore>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );
    }
);

extern_methods!(
    /// GKChallenge
    #[cfg(feature = "GKAchievement")]
    unsafe impl GKAchievement {
        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer", feature = "block2"))]
        #[method(selectChallengeablePlayers:withCompletionHandler:)]
        pub unsafe fn selectChallengeablePlayers_withCompletionHandler(
            &self,
            players: &NSArray<GKPlayer>,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[method(reportAchievements:withEligibleChallenges:withCompletionHandler:)]
        pub unsafe fn reportAchievements_withEligibleChallenges_withCompletionHandler(
            achievements: &NSArray<GKAchievement>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );
    }
);

extern_methods!(
    /// GKChallengeObsoleted
    #[cfg(feature = "GKScore")]
    unsafe impl GKScore {
        #[deprecated]
        #[method(issueChallengeToPlayers:message:)]
        pub unsafe fn issueChallengeToPlayers_message(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
        );
    }
);

extern_methods!(
    /// GKChallengeObsoleted
    #[cfg(feature = "GKAchievement")]
    unsafe impl GKAchievement {
        #[deprecated]
        #[method(issueChallengeToPlayers:message:)]
        pub unsafe fn issueChallengeToPlayers_message(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(selectChallengeablePlayerIDs:withCompletionHandler:)]
        pub unsafe fn selectChallengeablePlayerIDs_withCompletionHandler(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<NSString>, *mut NSError)>,
            >,
        );
    }
);

#[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
pub type GKChallengeComposeCompletionBlock =
    *mut block2::Block<dyn Fn(NonNull<NSViewController>, Bool, *mut NSArray<NSString>)>;

#[cfg(all(
    feature = "GKBasePlayer",
    feature = "GKPlayer",
    feature = "block2",
    feature = "objc2-app-kit"
))]
#[cfg(target_os = "macos")]
pub type GKChallengeComposeHandler =
    *mut block2::Block<dyn Fn(NonNull<NSViewController>, Bool, *mut NSArray<GKPlayer>)>;

extern_methods!(
    /// GKChallengeUI
    #[cfg(feature = "GKScore")]
    unsafe impl GKScore {
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completionHandler:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completion:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;
    }
);

extern_methods!(
    /// GKChallengeUI
    #[cfg(feature = "GKLeaderboardEntry")]
    unsafe impl GKLeaderboardEntry {
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completionHandler:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completion:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;
    }
);

extern_methods!(
    /// GKChallengeUI
    #[cfg(feature = "GKAchievement")]
    unsafe impl GKAchievement {
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completionHandler:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: &NSArray<GKPlayer>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[method_id(@__retain_semantics Other challengeComposeControllerWithMessage:players:completion:)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: &NSArray<GKPlayer>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Id<NSViewController>;
    }
);

extern_methods!(
    /// GKChallengeObsoletedUI
    #[cfg(feature = "GKScore")]
    unsafe impl GKScore {}
);

extern_methods!(
    /// GKChallengeObsoletedUI
    #[cfg(feature = "GKAchievement")]
    unsafe impl GKAchievement {}
);
