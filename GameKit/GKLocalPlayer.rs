//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gklocalplayer?language=objc)
    #[unsafe(super(GKPlayer, GKBasePlayer, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    pub struct GKLocalPlayer;
);

#[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
unsafe impl NSObjectProtocol for GKLocalPlayer {}

extern_methods!(
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        /// Obtain the primary GKLocalPlayer object.
        /// The player is only available for offline play until logged in.
        /// A temporary player is created if no account is set up.
        #[unsafe(method_family(none))]
        #[method_id(local)]
        pub unsafe fn local() -> Retained<GKLocalPlayer>;

        #[unsafe(method_family(none))]
        #[method_id(localPlayer)]
        pub unsafe fn localPlayer() -> Retained<GKLocalPlayer>;

        /// Authentication state
        #[method(isAuthenticated)]
        pub unsafe fn isAuthenticated(&self) -> bool;

        /// Indicates if a player is under age
        #[method(isUnderage)]
        pub unsafe fn isUnderage(&self) -> bool;

        /// A Boolean value that declares whether or not multiplayer gaming is restricted on this device.
        #[method(isMultiplayerGamingRestricted)]
        pub unsafe fn isMultiplayerGamingRestricted(&self) -> bool;

        /// A Boolean value that declares whether personalized communication is restricted on this device. If it is restricted, the player will not be able to read or write personalized messages on game invites, challenges, or enable voice communication in multiplayer games.  Note: this value will always be true when isUnderage is true.
        #[method(isPersonalizedCommunicationRestricted)]
        pub unsafe fn isPersonalizedCommunicationRestricted(&self) -> bool;

        #[cfg(feature = "block2")]
        /// Asynchronously load the recent players list as an array of GKPlayer.  A recent player is someone that you have played a game with or is a legacy game center friend.  Calls completionHandler when finished. Error will be nil on success.
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        #[method(loadRecentPlayersWithCompletionHandler:)]
        pub unsafe fn loadRecentPlayersWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        /// Asynchronously load the challengable friends list as an array of GKPlayer.  A challengable player is a friend player with friend level FL1 and FL2.  Calls completionHandler when finished. Error will be nil on success.
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        #[method(loadChallengableFriendsWithCompletionHandler:)]
        pub unsafe fn loadChallengableFriendsWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        /// Set the default leaderboard for the current game
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        /// 3. Leaderboard not present
        #[method(setDefaultLeaderboardIdentifier:completionHandler:)]
        pub unsafe fn setDefaultLeaderboardIdentifier_completionHandler(
            &self,
            leaderboard_identifier: &NSString,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// Load the default leaderboard identifier for the local player
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        /// 3. Leaderboard not present
        #[method(loadDefaultLeaderboardIdentifierWithCompletionHandler:)]
        pub unsafe fn loadDefaultLeaderboardIdentifierWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSString, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// Generates a signature allowing 3rd party server to authenticate the GKLocalPlayer
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        #[method(fetchItemsForIdentityVerificationSignature:)]
        pub unsafe fn fetchItemsForIdentityVerificationSignature(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError)>,
            >,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `GKPlayer`
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[unsafe(method_family(none))]
        #[method_id(anonymousGuestPlayerWithIdentifier:)]
        pub unsafe fn anonymousGuestPlayerWithIdentifier(
            guest_identifier: &NSString,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gklocalplayerlistener?language=objc)
    #[cfg(all(
        feature = "GKEventListener",
        feature = "GKMatchmaker",
        feature = "GKSavedGameListener",
        feature = "GKTurnBasedMatch"
    ))]
    pub unsafe trait GKLocalPlayerListener:
        GKChallengeListener + GKInviteEventListener + GKTurnBasedEventListener + GKSavedGameListener
    {
    }
);

extern_methods!(
    /// GKLocalPlayerEvents
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(all(
            feature = "GKEventListener",
            feature = "GKMatchmaker",
            feature = "GKSavedGameListener",
            feature = "GKTurnBasedMatch"
        ))]
        /// A single listener may be registered once. Registering multiple times results in undefined behavior. The registered listener will receive callbacks for any selector it responds to.
        #[method(registerListener:)]
        pub unsafe fn registerListener(&self, listener: &ProtocolObject<dyn GKLocalPlayerListener>);

        #[cfg(all(
            feature = "GKEventListener",
            feature = "GKMatchmaker",
            feature = "GKSavedGameListener",
            feature = "GKTurnBasedMatch"
        ))]
        #[method(unregisterListener:)]
        pub unsafe fn unregisterListener(
            &self,
            listener: &ProtocolObject<dyn GKLocalPlayerListener>,
        );

        #[method(unregisterAllListeners)]
        pub unsafe fn unregisterAllListeners(&self);
    }
);

extern "C" {
    /// Notification will be posted whenever authentication status changes.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkplayerauthenticationdidchangenotificationname?language=objc)
    pub static GKPlayerAuthenticationDidChangeNotificationName: &'static NSNotificationName;
}

extern_methods!(
    /// Deprecated
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(setDefaultLeaderboardCategoryID:completionHandler:)]
        pub unsafe fn setDefaultLeaderboardCategoryID_completionHandler(
            &self,
            category_id: Option<&NSString>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(loadDefaultLeaderboardCategoryIDWithCompletionHandler:)]
        pub unsafe fn loadDefaultLeaderboardCategoryIDWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSString, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(authenticateWithCompletionHandler:)]
        pub unsafe fn authenticateWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(loadFriendPlayersWithCompletionHandler:)]
        pub unsafe fn loadFriendPlayersWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        /// Generates a signature allowing 3rd party server to authenticate the GKLocalPlayer
        /// Possible reasons for error:
        /// 1. Communications problem
        /// 2. Unauthenticated player
        #[deprecated]
        #[method(generateIdentityVerificationSignatureWithCompletionHandler:)]
        pub unsafe fn generateIdentityVerificationSignatureWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError)>,
            >,
        );
    }
);

extern_methods!(
    /// Obsoleted
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        /// This method is obsolete. It will never be invoked and its implementation does nothing**
        #[deprecated]
        #[method(loadFriendsWithCompletionHandler:)]
        pub unsafe fn loadFriendsWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<NSString>, *mut NSError)>,
            >,
        );

        /// This property is obsolete. **
        #[deprecated]
        #[unsafe(method_family(none))]
        #[method_id(friends)]
        pub unsafe fn friends(&self) -> Option<Retained<NSArray<NSString>>>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkfriendsauthorizationstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKFriendsAuthorizationStatus(pub NSInteger);
impl GKFriendsAuthorizationStatus {
    #[doc(alias = "GKFriendsAuthorizationStatusNotDetermined")]
    pub const NotDetermined: Self = Self(0);
    #[doc(alias = "GKFriendsAuthorizationStatusRestricted")]
    pub const Restricted: Self = Self(1);
    #[doc(alias = "GKFriendsAuthorizationStatusDenied")]
    pub const Denied: Self = Self(2);
    #[doc(alias = "GKFriendsAuthorizationStatusAuthorized")]
    pub const Authorized: Self = Self(3);
}

unsafe impl Encode for GKFriendsAuthorizationStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKFriendsAuthorizationStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// FriendsList
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        #[method(loadFriendsAuthorizationStatus:)]
        pub unsafe fn loadFriendsAuthorizationStatus(
            &self,
            completion_handler: &block2::Block<dyn Fn(GKFriendsAuthorizationStatus, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(loadFriends:)]
        pub unsafe fn loadFriends(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(loadFriendsWithIdentifiers:completionHandler:)]
        pub unsafe fn loadFriendsWithIdentifiers_completionHandler(
            &self,
            identifiers: &NSArray<NSString>,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// UI
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        #[method(authenticateHandler)]
        pub unsafe fn authenticateHandler(
            &self,
            mtm: MainThreadMarker,
        ) -> *mut block2::Block<dyn Fn(*mut NSViewController, *mut NSError)>;

        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Setter for [`authenticateHandler`][Self::authenticateHandler].
        #[method(setAuthenticateHandler:)]
        pub unsafe fn setAuthenticateHandler(
            &self,
            authenticate_handler: Option<
                &block2::Block<dyn Fn(*mut NSViewController, *mut NSError)>,
            >,
        );

        /// observable property that becomes true when the friend request view controller is displayed.  It becomes false when it is dismissed
        #[method(isPresentingFriendRequestViewController)]
        pub unsafe fn isPresentingFriendRequestViewController(&self) -> bool;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// presentFriendRequestCreatorFromWindow:
        ///
        /// Discussion:
        /// MacOS only. When invoked, if no error is encountered, the caller application is backgrounded and the 'Messages' application is launched/foregrounded, with a formatted friend request message.
        /// If an error occurs, controls are returned to the caller application, with an error describing the error.
        ///
        /// Possible reasons for error:
        /// - The local player user account is not allowed to add friends
        /// - The device is not allowing outgoing traffic at the time of the operation
        #[method(presentFriendRequestCreatorFromWindow:error:_)]
        pub unsafe fn presentFriendRequestCreatorFromWindow_error(
            &self,
            window: Option<&NSWindow>,
        ) -> Result<(), Retained<NSError>>;
    }
);
