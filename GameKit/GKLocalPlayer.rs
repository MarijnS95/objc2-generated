//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    pub struct GKLocalPlayer;

    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl ClassType for GKLocalPlayer {
        #[inherits(GKBasePlayer, NSObject)]
        type Super = GKPlayer;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
unsafe impl NSObjectProtocol for GKLocalPlayer {}

extern_methods!(
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[method_id(@__retain_semantics Other local)]
        pub unsafe fn local() -> Id<GKLocalPlayer>;

        #[method_id(@__retain_semantics Other localPlayer)]
        pub unsafe fn localPlayer() -> Id<GKLocalPlayer>;

        #[method(isAuthenticated)]
        pub unsafe fn isAuthenticated(&self) -> bool;

        #[method(isUnderage)]
        pub unsafe fn isUnderage(&self) -> bool;

        #[method(isMultiplayerGamingRestricted)]
        pub unsafe fn isMultiplayerGamingRestricted(&self) -> bool;

        #[method(isPersonalizedCommunicationRestricted)]
        pub unsafe fn isPersonalizedCommunicationRestricted(&self) -> bool;

        #[cfg(feature = "block2")]
        #[method(loadRecentPlayersWithCompletionHandler:)]
        pub unsafe fn loadRecentPlayersWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[method(loadChallengableFriendsWithCompletionHandler:)]
        pub unsafe fn loadChallengableFriendsWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[method(setDefaultLeaderboardIdentifier:completionHandler:)]
        pub unsafe fn setDefaultLeaderboardIdentifier_completionHandler(
            &self,
            leaderboard_identifier: &NSString,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(loadDefaultLeaderboardIdentifierWithCompletionHandler:)]
        pub unsafe fn loadDefaultLeaderboardIdentifierWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSString, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[method(fetchItemsForIdentityVerificationSignature:)]
        pub unsafe fn fetchItemsForIdentityVerificationSignature(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError)>,
            >,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `GKPlayer`
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[method_id(@__retain_semantics Other anonymousGuestPlayerWithIdentifier:)]
        pub unsafe fn anonymousGuestPlayerWithIdentifier(guest_identifier: &NSString) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    #[cfg(all(
        feature = "GKEventListener",
        feature = "GKMatchmaker",
        feature = "GKSavedGameListener",
        feature = "GKTurnBasedMatch"
    ))]
    pub unsafe trait GKLocalPlayerListener:
        GKChallengeListener + GKInviteEventListener + GKSavedGameListener + GKTurnBasedEventListener
    {
    }

    #[cfg(all(
        feature = "GKEventListener",
        feature = "GKMatchmaker",
        feature = "GKSavedGameListener",
        feature = "GKTurnBasedMatch"
    ))]
    unsafe impl ProtocolType for dyn GKLocalPlayerListener {}
);

extern_methods!(
    /// GKLocalPlayerEvents
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(all(
            feature = "GKEventListener",
            feature = "GKMatchmaker",
            feature = "GKSavedGameListener",
            feature = "GKTurnBasedMatch"
        ))]
        #[method(registerListener:)]
        pub unsafe fn registerListener(&self, listener: &ProtocolObject<dyn GKLocalPlayerListener>);

        #[cfg(all(
            feature = "GKEventListener",
            feature = "GKMatchmaker",
            feature = "GKSavedGameListener",
            feature = "GKTurnBasedMatch"
        ))]
        #[method(unregisterListener:)]
        pub unsafe fn unregisterListener(
            &self,
            listener: &ProtocolObject<dyn GKLocalPlayerListener>,
        );

        #[method(unregisterAllListeners)]
        pub unsafe fn unregisterAllListeners(&self);
    }
);

extern "C" {
    pub static GKPlayerAuthenticationDidChangeNotificationName: &'static NSNotificationName;
}

extern_methods!(
    /// Deprecated
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(setDefaultLeaderboardCategoryID:completionHandler:)]
        pub unsafe fn setDefaultLeaderboardCategoryID_completionHandler(
            &self,
            category_id: Option<&NSString>,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(loadDefaultLeaderboardCategoryIDWithCompletionHandler:)]
        pub unsafe fn loadDefaultLeaderboardCategoryIDWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSString, *mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(authenticateWithCompletionHandler:)]
        pub unsafe fn authenticateWithCompletionHandler(
            &self,
            completion_handler: Option<&block2::Block<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(loadFriendPlayersWithCompletionHandler:)]
        pub unsafe fn loadFriendPlayersWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(generateIdentityVerificationSignatureWithCompletionHandler:)]
        pub unsafe fn generateIdentityVerificationSignatureWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSURL, *mut NSData, *mut NSData, u64, *mut NSError)>,
            >,
        );
    }
);

extern_methods!(
    /// Obsoleted
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        #[deprecated]
        #[method(loadFriendsWithCompletionHandler:)]
        pub unsafe fn loadFriendsWithCompletionHandler(
            &self,
            completion_handler: Option<
                &block2::Block<dyn Fn(*mut NSArray<NSString>, *mut NSError)>,
            >,
        );

        #[deprecated]
        #[method_id(@__retain_semantics Other friends)]
        pub unsafe fn friends(&self) -> Option<Id<NSArray<NSString>>>;
    }
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKFriendsAuthorizationStatus(pub NSInteger);
impl GKFriendsAuthorizationStatus {
    #[doc(alias = "GKFriendsAuthorizationStatusNotDetermined")]
    pub const NotDetermined: Self = Self(0);
    #[doc(alias = "GKFriendsAuthorizationStatusRestricted")]
    pub const Restricted: Self = Self(1);
    #[doc(alias = "GKFriendsAuthorizationStatusDenied")]
    pub const Denied: Self = Self(2);
    #[doc(alias = "GKFriendsAuthorizationStatusAuthorized")]
    pub const Authorized: Self = Self(3);
}

unsafe impl Encode for GKFriendsAuthorizationStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKFriendsAuthorizationStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_methods!(
    /// FriendsList
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(feature = "block2")]
        #[method(loadFriendsAuthorizationStatus:)]
        pub unsafe fn loadFriendsAuthorizationStatus(
            &self,
            completion_handler: &block2::Block<dyn Fn(GKFriendsAuthorizationStatus, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(loadFriends:)]
        pub unsafe fn loadFriends(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(loadFriendsWithIdentifiers:completionHandler:)]
        pub unsafe fn loadFriendsWithIdentifiers_completionHandler(
            &self,
            identifiers: &NSArray<NSString>,
            completion_handler: &block2::Block<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
        );
    }
);

extern_methods!(
    /// UI
    #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
    unsafe impl GKLocalPlayer {
        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        #[method(authenticateHandler)]
        pub unsafe fn authenticateHandler(
            &self,
            mtm: MainThreadMarker,
        ) -> *mut block2::Block<dyn Fn(*mut NSViewController, *mut NSError)>;

        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        #[method(setAuthenticateHandler:)]
        pub unsafe fn setAuthenticateHandler(
            &self,
            authenticate_handler: Option<
                &block2::Block<dyn Fn(*mut NSViewController, *mut NSError)>,
            >,
        );

        #[method(isPresentingFriendRequestViewController)]
        pub unsafe fn isPresentingFriendRequestViewController(&self) -> bool;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[method(presentFriendRequestCreatorFromWindow:error:_)]
        pub unsafe fn presentFriendRequestCreatorFromWindow_error(
            &self,
            window: Option<&NSWindow>,
        ) -> Result<(), Id<NSError>>;
    }
);
