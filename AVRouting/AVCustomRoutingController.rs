//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// A notification the system posts when the list of authorized routes changes.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avrouting/avcustomroutingcontrollerauthorizedroutesdidchangenotification?language=objc)
    pub static AVCustomRoutingControllerAuthorizedRoutesDidChangeNotification:
        &'static NSNotificationName;
}

extern_class!(
    /// An object that manages the connection from a device to a destination.
    ///
    /// A routing controller also informs its ``AVCustomRoutingController/delegate``
    /// object about which routes the user previously authorized, so it can
    /// reconnect, if appropriate.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avrouting/avcustomroutingcontroller?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCustomRoutingController;
);

unsafe impl NSObjectProtocol for AVCustomRoutingController {}

extern_methods!(
    unsafe impl AVCustomRoutingController {
        /// A delegate object for a routing controller.
        #[method_id(@__method_family Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AVCustomRoutingControllerDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AVCustomRoutingControllerDelegate>>,
        );

        #[cfg(feature = "AVCustomDeviceRoute")]
        /// A list of authorized routes.
        ///
        /// After a user activates a route, it remains authorized for a certain amount
        /// of time even if the connection to the route is temporarily unavailable. Your
        /// app may reactivate any one of these routes when appropriate, but it needs to
        /// inform the system by calling
        /// ``AVCustomRoutingController/setActive:forRoute:``.
        #[method_id(@__method_family Other authorizedRoutes)]
        pub unsafe fn authorizedRoutes(&self) -> Retained<NSArray<AVCustomDeviceRoute>>;

        /// An array of route addresses known to be on the local network.
        #[method_id(@__method_family Other knownRouteIPs)]
        pub unsafe fn knownRouteIPs(&self) -> Retained<NSArray<AVCustomRoutingPartialIP>>;

        /// Setter for [`knownRouteIPs`][Self::knownRouteIPs].
        #[method(setKnownRouteIPs:)]
        pub unsafe fn setKnownRouteIPs(&self, known_route_i_ps: &NSArray<AVCustomRoutingPartialIP>);

        #[cfg(feature = "AVCustomRoutingActionItem")]
        /// An array of custom action items to add to a route picker.
        #[method_id(@__method_family Other customActionItems)]
        pub unsafe fn customActionItems(&self) -> Retained<NSArray<AVCustomRoutingActionItem>>;

        #[cfg(feature = "AVCustomRoutingActionItem")]
        /// Setter for [`customActionItems`][Self::customActionItems].
        #[method(setCustomActionItems:)]
        pub unsafe fn setCustomActionItems(
            &self,
            custom_action_items: &NSArray<AVCustomRoutingActionItem>,
        );

        #[cfg(feature = "AVCustomDeviceRoute")]
        /// Revokes an appâ€™s authorization to connect to a route.
        ///
        /// The route only becomes authorized again if the user selects it using the
        /// route picker.
        ///
        /// - Parameters:
        /// - route: The route to invalidate authorization for.
        #[method(invalidateAuthorizationForRoute:)]
        pub unsafe fn invalidateAuthorizationForRoute(&self, route: &AVCustomDeviceRoute);

        #[cfg(feature = "AVCustomDeviceRoute")]
        /// Sets the active state of a route.
        ///
        /// Set the value to
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/no>
        /// if the connection to the route becomes unavailable, and set it to
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/yes> after you
        /// reestablish the connection.
        ///
        /// - Parameters:
        /// - active: A Boolean value that indicates whether the route is active.
        ///
        /// - route: A route to change the active state for.
        #[method(setActive:forRoute:)]
        pub unsafe fn setActive_forRoute(&self, active: bool, route: &AVCustomDeviceRoute);

        #[cfg(feature = "AVCustomDeviceRoute")]
        /// Returns a Boolean value that indicates whether a route is active.
        ///
        /// - Parameters:
        /// - route: A route for determining its active state.
        ///
        /// - Returns:
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/yes> if
        /// the route is in an active state; otherwise,
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/no>.
        #[method(isRouteActive:)]
        pub unsafe fn isRouteActive(&self, route: &AVCustomDeviceRoute) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl AVCustomRoutingController {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// A protocol for delegates of a custom routing controller.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avrouting/avcustomroutingcontrollerdelegate?language=objc)
    pub unsafe trait AVCustomRoutingControllerDelegate: NSObjectProtocol {
        #[cfg(all(feature = "AVCustomRoutingEvent", feature = "block2"))]
        /// Connects to, or disconnects from, a device when a user requests it in the
        /// picker.
        ///
        /// - Parameters:
        /// - controller: A custom routing controller.
        ///
        /// - event: The routing event to handle.
        ///
        /// - completionHandler: A completion handler to call after processing the
        /// event. Pass
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/yes> to
        /// the completion handler if the activation, reactivation, or deactivation of
        /// the route succeeds, and
        /// <doc
        /// ://com.apple.documentation/documentation/objectivec/no>, otherwise.
        #[method(customRoutingController:handleEvent:completionHandler:)]
        unsafe fn customRoutingController_handleEvent_completionHandler(
            &self,
            controller: &AVCustomRoutingController,
            event: &AVCustomRoutingEvent,
            completion_handler: &block2::Block<dyn Fn(Bool)>,
        );

        #[cfg(feature = "AVCustomRoutingEvent")]
        /// Tells the delegate when a routing event times out.
        ///
        /// Adopt this method to clean up any in-progress connection attempts.
        ///
        /// - Parameters:
        /// - controller: A custom routing controller.
        ///
        /// - event: An event that times out.
        #[optional]
        #[method(customRoutingController:eventDidTimeOut:)]
        unsafe fn customRoutingController_eventDidTimeOut(
            &self,
            controller: &AVCustomRoutingController,
            event: &AVCustomRoutingEvent,
        );

        #[cfg(feature = "AVCustomRoutingActionItem")]
        /// Tells the delegate when a user selects a custom item in the route picker.
        ///
        /// - Parameters:
        /// - controller: A custom routing controller.
        ///
        /// - customActionItem: The selected action item.
        #[optional]
        #[method(customRoutingController:didSelectItem:)]
        unsafe fn customRoutingController_didSelectItem(
            &self,
            controller: &AVCustomRoutingController,
            custom_action_item: &AVCustomRoutingActionItem,
        );
    }
);

extern_class!(
    /// Represents a full or partial IP address.
    ///
    /// Use this class in conjunction with ``knownRouteIPs``.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avrouting/avcustomroutingpartialip?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCustomRoutingPartialIP;
);

unsafe impl Send for AVCustomRoutingPartialIP {}

unsafe impl Sync for AVCustomRoutingPartialIP {}

unsafe impl NSObjectProtocol for AVCustomRoutingPartialIP {}

extern_methods!(
    unsafe impl AVCustomRoutingPartialIP {
        /// A full or partial IP address for a device known to be on the network.
        ///
        /// Use the following code to create a full known IP address.
        ///
        /// ```var anIPAddressInBytes:[Byte] = [192, 168, 10, 5]
        /// var address = Data(bytes: anAddressInBytes, length: anAddressInBytes.count)
        /// var aMaskInBytes:[Byte] = [255, 255, 255, 255]
        /// var mask = Data(bytes: aMaskInBytes, length: aMaskInBytes.count)
        /// var partialIP = AVCustomRoutingPartialIP(address: address, mask: mask)
        /// ```
        #[method_id(@__method_family Other address)]
        pub unsafe fn address(&self) -> Retained<NSData>;

        /// A mask representing how many octets of the IP  address to respect.
        ///
        /// Use this mask to pass the last two bytes of the IP address instead of passing all four bytes.
        ///
        /// ```var anIPAddressInBytes:[Byte] = [0, 0, 10, 5]
        /// var address = Data(bytes: anAddressInBytes, length: anAddressInBytes.count)
        /// var aMaskInBytes:[Byte] = [0, 0, 255, 255]
        /// var mask = Data(bytes: aMaskInBytes, length: aMaskInBytes.count)
        /// var partialIP =AVCustomRoutingPartialIP(address: address, mask: mask)
        /// ```
        #[method_id(@__method_family Other mask)]
        pub unsafe fn mask(&self) -> Retained<NSData>;

        /// Creates an IP fragment.
        /// - Parameters:
        /// - address: The IP address.
        /// - mask: The address mask.
        #[method_id(@__method_family Init initWithAddress:mask:)]
        pub unsafe fn initWithAddress_mask(
            this: Allocated<Self>,
            address: &NSData,
            mask: &NSData,
        ) -> Retained<Self>;

        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
