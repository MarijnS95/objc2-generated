//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Configure a custom catalog of
    /// `SHSignature`objects to match against
    ///
    /// Use a custom catalog if you intend to search against reference signatures that you have provided yourself. All matches will be performed locally on the device against the signatures added to this Catalog.
    /// `SHMediaItem`can be built using custom data that will be returned when a match is made.
    /// Once this catalog has been built it can be written to disk and loaded again at a later date.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shcustomcatalog?language=objc)
    #[unsafe(super(SHCatalog, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "SHCatalog")]
    pub struct SHCustomCatalog;
);

#[cfg(feature = "SHCatalog")]
extern_conformance!(
    unsafe impl NSObjectProtocol for SHCustomCatalog {}
);

#[cfg(feature = "SHCatalog")]
impl SHCustomCatalog {
    extern_methods!(
        /// The data representation of this file, it can be written to disk
        #[unsafe(method(dataRepresentation))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataRepresentation(&self) -> Retained<NSData>;

        #[cfg(all(feature = "SHMediaItem", feature = "SHSignature"))]
        /// Add a reference
        /// `SHSignature`and its associated
        /// `SHMediaItem`for matching
        ///
        /// Parameter `signature`: The reference to match against
        ///
        /// Parameter `mediaItems`: The metadata associated with the
        /// `SHSignature`
        /// Once the
        /// `SHCatalog`had been added to a
        /// `SHSession`further calls to this method will be ignored
        ///
        /// Returns: YES if the data was successfully added, NO on failure with a populated error parameter
        #[unsafe(method(addReferenceSignature:representingMediaItems:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addReferenceSignature_representingMediaItems_error(
            &self,
            signature: &SHSignature,
            media_items: &NSArray<SHMediaItem>,
        ) -> Result<(), Retained<NSError>>;

        /// Load a `shazamcatalog` file from a file path URL
        ///
        /// Parameter `customCatalogURL`: The path to the `shazamcatalog` file.
        ///
        /// Parameter `error`: An error if the catalog could not be loaded
        ///
        /// Returns: YES if the data was successfully added, NO on failure with a populated error parameter
        #[unsafe(method(addCustomCatalogFromURL:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addCustomCatalogFromURL_error(
            &self,
            custom_catalog_url: &NSURL,
        ) -> Result<(), Retained<NSError>>;

        /// Write this Catalog to a URL
        ///
        /// A Catalog can safely be shared among devices
        ///
        /// Note: If the `destinationURL` is a directory, a file named Signatures.shazamcatalog will be created
        ///
        /// Parameter `destinationURL`: The location to write to
        ///
        /// Parameter `error`: populated on error, otherwise nil
        ///
        /// Returns: YES on success, NO on failure with a populated error parameter
        #[deprecated = "Use dataRepresentation"]
        #[unsafe(method(writeToURL:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeToURL_error(
            &self,
            destination_url: &NSURL,
        ) -> Result<(), Retained<NSError>>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Load a
        /// `SHCustomCatalog`from data
        ///
        /// Parameter `dataRepresentation`: The data representation of the
        /// `SHCustomCatalog`
        /// Parameter `error`: Error populated if not a valid data representation
        #[unsafe(method(initWithDataRepresentation:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDataRepresentation_error(
            this: Allocated<Self>,
            data_representation: &NSData,
        ) -> Result<Retained<Self>, Retained<NSError>>;
    );
}
