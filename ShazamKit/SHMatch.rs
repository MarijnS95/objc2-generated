//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A
    /// `SHMatch`indicates that a Signature matched a reference Signature in the target
    /// `SHCatalog`
    /// A
    /// `SHSignature`can match many reference Signatures in a catalog and in turn a Signature can map to
    /// many
    /// `SHMediaItem.`Therefore a match encapsulates the query Signature and all of the various
    /// `SHMediaItem`it matched
    ///
    ///
    /// Note: `SHMatch`is not intended to be subclassed
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmatch?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHMatch;
);

unsafe impl Send for SHMatch {}

unsafe impl Sync for SHMatch {}

extern_conformance!(
    unsafe impl NSCoding for SHMatch {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SHMatch {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SHMatch {}
);

impl SHMatch {
    extern_methods!(
        #[cfg(all(feature = "SHMatchedMediaItem", feature = "SHMediaItem"))]
        /// The
        /// `SHMatchedMediaItem`belonging to the instance of
        /// `SHSignature`that we matched
        ///
        ///
        /// One Signature may match multiple
        /// `SHMediaItem,`especially in the case of audio that uses samples. The array of
        /// `SHMatchedMediaItem`is ordered by the quality of the match. Use the first
        /// `SHMatchedMediaItem`if you intend to only show one result
        #[unsafe(method(mediaItems))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaItems(&self) -> Retained<NSArray<SHMatchedMediaItem>>;

        #[cfg(feature = "SHSignature")]
        /// The
        /// `SHSignature`used to query the
        /// `SHCatalog`
        /// Note: This Signature is the query Signature, not the reference Signature contained in the
        /// `SHCatalog`
        #[unsafe(method(querySignature))]
        #[unsafe(method_family = none)]
        pub unsafe fn querySignature(&self) -> Retained<SHSignature>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}
