//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/shazamkit/sherrordomain?language=objc)
    pub static SHErrorDomain: Option<&'static NSErrorDomain>;
}

/// Error codes returned when generating and matching signatures
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/sherrorcode?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SHErrorCode(pub NSInteger);
impl SHErrorCode {
    /// The
    /// `AVAudioFormat`is not supported
    ///
    /// ShazamKit only accepts certain audio formats
    ///
    /// See: -[SHSignatureGenerator appendBuffer:atTime:error] for valid formats
    #[doc(alias = "SHErrorCodeInvalidAudioFormat")]
    pub const InvalidAudioFormat: Self = Self(100);
    /// The audio provided was not contiguous
    ///
    /// Shazam requires audio to be contiguous in order
    /// to match.
    #[doc(alias = "SHErrorCodeAudioDiscontinuity")]
    pub const AudioDiscontinuity: Self = Self(101);
    /// Failed to create a signature from the provided audio
    ///
    /// Validate the audio you are supplying, it may be silence.
    #[doc(alias = "SHErrorCodeSignatureInvalid")]
    pub const SignatureInvalid: Self = Self(200);
    /// The signature duration is outside the valid range
    ///
    /// The signature is valid but is too long/short for
    /// the service attempting to match it
    #[doc(alias = "SHErrorCodeSignatureDurationInvalid")]
    pub const SignatureDurationInvalid: Self = Self(201);
    /// The request to match the signature failed
    ///
    /// The attempt failed and was not matched, trying again may result in success
    ///
    /// Note: This code does not indicate a 'No Match'
    #[doc(alias = "SHErrorCodeMatchAttemptFailed")]
    pub const MatchAttemptFailed: Self = Self(202);
    /// Failed to load the Custom Catalog
    ///
    /// Validate the structure of the Catalog file
    #[doc(alias = "SHErrorCodeCustomCatalogInvalid")]
    pub const CustomCatalogInvalid: Self = Self(300);
    /// The Custom Catalog URL was invalid
    ///
    /// The URL must be a filePath URL that contains a valid Catalog
    #[doc(alias = "SHErrorCodeCustomCatalogInvalidURL")]
    pub const CustomCatalogInvalidURL: Self = Self(301);
    /// Failed to sync some content to the user's library
    ///
    /// Failed to sync the user's library, trying again may result in success
    /// Underlying error may contain more details about the failure
    #[doc(alias = "SHErrorCodeMediaLibrarySyncFailed")]
    pub const MediaLibrarySyncFailed: Self = Self(400);
    /// Internal Error
    ///
    /// ShazamKit encountered an internal error
    #[doc(alias = "SHErrorCodeInternalError")]
    pub const InternalError: Self = Self(500);
    /// Failed to fetch
    /// `SHMediaItem`
    /// There was an error fetching the
    /// `SHMediaItem`or the provided
    /// `shazamID`is invalid.
    #[doc(alias = "SHErrorCodeMediaItemFetchFailed")]
    pub const MediaItemFetchFailed: Self = Self(600);
}

unsafe impl Encode for SHErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SHErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
