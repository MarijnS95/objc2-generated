//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-av-foundation")]
use objc2_av_foundation::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// `SHSignatureGenerator`provides a way to convert audio data into instances of
    /// `SHSignature`
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shsignaturegenerator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHSignatureGenerator;
);

unsafe impl NSObjectProtocol for SHSignatureGenerator {}

impl SHSignatureGenerator {
    extern_methods!(
        #[cfg(all(
            feature = "SHSignature",
            feature = "block2",
            feature = "objc2-av-foundation"
        ))]
        /// Create a `SHSignature` from an
        /// `AVAsset.`
        /// Parameter `asset`: An AVAsset that contains audio you would like to convert to a Signature
        ///
        /// The asset can be any type of media that has audio tracks. If the asset has multiple tracks, they
        /// will be mixed into one
        /// `SHSignature`
        /// Parameter `completionHandler`: A block called with the created
        /// `SHSignature`or nil and a populated error parameter if a signature could not be created.
        #[unsafe(method(generateSignatureFromAsset:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn generateSignatureFromAsset_completionHandler(
            asset: &AVAsset,
            completion_handler: &block2::DynBlock<dyn Fn(*mut SHSignature, *mut NSError)>,
        );

        #[cfg(feature = "objc2-avf-audio")]
        /// Add audio to the generator
        ///
        /// Audio passed to the generator should be contiguous, passing non contiguous data will affect the quality of the
        /// `SHSignature`produced. Passing the
        /// `AVAudioTime`is not required but recommended, it allows the generator to detect when the audio is not contiguous.
        /// This method only accepts PCM audio formats. The following sample rates are recommended but not required: 48000, 44100, 32000, 16000.
        ///
        /// Parameter `time`: Where in the stream the audio represents
        ///
        /// Parameter `buffer`: The audio data to be appended to the signature
        ///
        /// Parameter `error`: An error if there was an issue appending the buffer
        #[unsafe(method(appendBuffer:atTime:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn appendBuffer_atTime_error(
            &self,
            buffer: &AVAudioPCMBuffer,
            time: Option<&AVAudioTime>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "SHSignature")]
        /// Convert the current audio data into a
        /// `SHSignature`
        /// Signature may be called as many times as needed, each time producing a
        /// `SHSignature`from
        /// the audio data
        #[unsafe(method(signature))]
        #[unsafe(method_family = none)]
        pub unsafe fn signature(&self) -> Retained<SHSignature>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SHSignatureGenerator {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
