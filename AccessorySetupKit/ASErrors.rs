//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// NSError domain for AccessorySetupKit errors.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/aserrordomain?language=objc)
    pub static ASErrorDomain: &'static NSErrorDomain;
}

/// Error codes used with ASErrorDomain.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/aserrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASErrorCode(pub NSInteger);
impl ASErrorCode {
    /// A code that represents a successful action.
    #[doc(alias = "ASErrorCodeSuccess")]
    pub const Success: Self = Self(0);
    /// An underlying failure with an unknown cause.
    #[doc(alias = "ASErrorCodeUnknown")]
    pub const Unknown: Self = Self(1);
    /// Session activation failed.
    #[doc(alias = "ASErrorCodeActivationFailed")]
    pub const ActivationFailed: Self = Self(100);
    /// The session was unable to establish a connection.
    #[doc(alias = "ASErrorCodeConnectionFailed")]
    pub const ConnectionFailed: Self = Self(150);
    /// Accessory discovery timed out.
    #[doc(alias = "ASErrorCodeDiscoveryTimeout")]
    pub const DiscoveryTimeout: Self = Self(200);
    /// The framework couldn't find the app extension.
    #[doc(alias = "ASErrorCodeExtensionNotFound")]
    pub const ExtensionNotFound: Self = Self(300);
    /// The session invalidated prior to completing the operation.
    #[doc(alias = "ASErrorCodeInvalidated")]
    pub const Invalidated: Self = Self(400);
    /// The session received an invalid request.
    #[doc(alias = "ASErrorCodeInvalidRequest")]
    pub const InvalidRequest: Self = Self(450);
    /// The picker received a show request when it was already active.
    #[doc(alias = "ASErrorCodePickerAlreadyActive")]
    pub const PickerAlreadyActive: Self = Self(500);
    /// The picker can't be used because the app is in the background.
    #[doc(alias = "ASErrorCodePickerRestricted")]
    pub const PickerRestricted: Self = Self(550);
    /// The person using the app canceled the operation.
    #[doc(alias = "ASErrorCodeUserCancelled")]
    pub const UserCancelled: Self = Self(700);
    /// The person using the app restricted access.
    #[doc(alias = "ASErrorCodeUserRestricted")]
    pub const UserRestricted: Self = Self(750);
}

unsafe impl Encode for ASErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ASErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
