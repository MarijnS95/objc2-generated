//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A mutable value object representing a postal address.
    ///
    ///
    /// CNMutablePostalAddress is not thread safe.
    ///
    ///
    /// Note: To remove properties when saving a mutable postal address, set string properties to empty values.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cnmutablepostaladdress?language=objc)
    #[unsafe(super(CNPostalAddress, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CNPostalAddress")]
    pub struct CNMutablePostalAddress;
);

#[cfg(feature = "CNPostalAddress")]
unsafe impl NSCoding for CNMutablePostalAddress {}

#[cfg(feature = "CNPostalAddress")]
unsafe impl NSCopying for CNMutablePostalAddress {}

#[cfg(feature = "CNPostalAddress")]
unsafe impl CopyingHelper for CNMutablePostalAddress {
    type Result = CNPostalAddress;
}

#[cfg(feature = "CNPostalAddress")]
unsafe impl NSMutableCopying for CNMutablePostalAddress {}

#[cfg(feature = "CNPostalAddress")]
unsafe impl MutableCopyingHelper for CNMutablePostalAddress {
    type Result = Self;
}

#[cfg(feature = "CNPostalAddress")]
unsafe impl NSObjectProtocol for CNMutablePostalAddress {}

#[cfg(feature = "CNPostalAddress")]
unsafe impl NSSecureCoding for CNMutablePostalAddress {}

extern_methods!(
    #[cfg(feature = "CNPostalAddress")]
    unsafe impl CNMutablePostalAddress {
        /// multi-street address is delimited with carriage returns “
        /// \n”
        #[method(street)]
        #[unsafe(method_family = none)]
        pub unsafe fn street(&self) -> Retained<NSString>;

        /// Setter for [`street`][Self::street].
        #[method(setStreet:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setStreet(&self, street: &NSString);

        #[method(subLocality)]
        #[unsafe(method_family = none)]
        pub unsafe fn subLocality(&self) -> Retained<NSString>;

        /// Setter for [`subLocality`][Self::subLocality].
        #[method(setSubLocality:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubLocality(&self, sub_locality: &NSString);

        #[method(city)]
        #[unsafe(method_family = none)]
        pub unsafe fn city(&self) -> Retained<NSString>;

        /// Setter for [`city`][Self::city].
        #[method(setCity:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCity(&self, city: &NSString);

        #[method(subAdministrativeArea)]
        #[unsafe(method_family = none)]
        pub unsafe fn subAdministrativeArea(&self) -> Retained<NSString>;

        /// Setter for [`subAdministrativeArea`][Self::subAdministrativeArea].
        #[method(setSubAdministrativeArea:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubAdministrativeArea(&self, sub_administrative_area: &NSString);

        #[method(state)]
        #[unsafe(method_family = none)]
        pub unsafe fn state(&self) -> Retained<NSString>;

        /// Setter for [`state`][Self::state].
        #[method(setState:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setState(&self, state: &NSString);

        #[method(postalCode)]
        #[unsafe(method_family = none)]
        pub unsafe fn postalCode(&self) -> Retained<NSString>;

        /// Setter for [`postalCode`][Self::postalCode].
        #[method(setPostalCode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setPostalCode(&self, postal_code: &NSString);

        #[method(country)]
        #[unsafe(method_family = none)]
        pub unsafe fn country(&self) -> Retained<NSString>;

        /// Setter for [`country`][Self::country].
        #[method(setCountry:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setCountry(&self, country: &NSString);

        #[method(ISOCountryCode)]
        #[unsafe(method_family = none)]
        pub unsafe fn ISOCountryCode(&self) -> Retained<NSString>;

        /// Setter for [`ISOCountryCode`][Self::ISOCountryCode].
        #[method(setISOCountryCode:)]
        #[unsafe(method_family = none)]
        pub unsafe fn setISOCountryCode(&self, iso_country_code: &NSString);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CNPostalAddress")]
    unsafe impl CNMutablePostalAddress {
        #[method(init)]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method(new)]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
