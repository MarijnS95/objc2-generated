//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A contact property that has a value and label.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabeledvalue?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CNLabeledValue<ValueType: ?Sized = AnyObject>;
);

unsafe impl<ValueType: ?Sized + NSCoding> NSCoding for CNLabeledValue<ValueType> {}

unsafe impl<ValueType: ?Sized> NSCopying for CNLabeledValue<ValueType> {}

unsafe impl<ValueType: ?Sized + Message> CopyingHelper for CNLabeledValue<ValueType> {
    type Result = Self;
}

unsafe impl<ValueType: ?Sized> NSObjectProtocol for CNLabeledValue<ValueType> {}

unsafe impl<ValueType: ?Sized + NSSecureCoding> NSSecureCoding for CNLabeledValue<ValueType> {}

extern_methods!(
    unsafe impl<ValueType: Message> CNLabeledValue<ValueType> {
        /// The identifier is unique among contacts on the device. It can be saved and used for finding labeled values next application launch.
        #[unsafe(method_family(none))]
        #[method_id(identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        #[unsafe(method_family(none))]
        #[method_id(label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        #[unsafe(method_family(none))]
        #[method_id(value)]
        pub unsafe fn value(&self) -> Retained<ValueType>;

        /// Returns a new CNLabeledValue with a new identifier.
        #[unsafe(method_family(none))]
        #[method_id(labeledValueWithLabel:value:)]
        pub unsafe fn labeledValueWithLabel_value(
            label: Option<&NSString>,
            value: &ValueType,
        ) -> Retained<Self>;

        /// Initializes the CNLabeledValue with a new identifier.
        #[unsafe(method_family(init))]
        #[method_id(initWithLabel:value:)]
        pub unsafe fn initWithLabel_value(
            this: Allocated<Self>,
            label: Option<&NSString>,
            value: &ValueType,
        ) -> Retained<Self>;

        /// Returns a new CNLabeledValue with the existing value and identifier.
        #[unsafe(method_family(none))]
        #[method_id(labeledValueBySettingLabel:)]
        pub unsafe fn labeledValueBySettingLabel(&self, label: Option<&NSString>)
            -> Retained<Self>;

        /// Returns a new CNLabeledValue with the existing label and identifier.
        #[unsafe(method_family(none))]
        #[method_id(labeledValueBySettingValue:)]
        pub unsafe fn labeledValueBySettingValue(&self, value: &ValueType) -> Retained<Self>;

        /// Returns a new CNLabeledValue with the existing identifier.
        #[unsafe(method_family(none))]
        #[method_id(labeledValueBySettingLabel:value:)]
        pub unsafe fn labeledValueBySettingLabel_value(
            &self,
            label: Option<&NSString>,
            value: &ValueType,
        ) -> Retained<Self>;

        /// Get a localized label.
        ///
        ///
        /// Some labels are special keys representing generic labels. Use this to obtain a localized string for a label to display to a user.
        ///
        ///
        /// Parameter `label`: to localize.
        ///
        /// Returns: The localized string if a Contacts framework defined label, otherwise just returns the label.
        #[unsafe(method_family(none))]
        #[method_id(localizedStringForLabel:)]
        pub unsafe fn localizedStringForLabel(label: &NSString) -> Retained<NSString>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl<ValueType: Message> CNLabeledValue<ValueType> {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelhome?language=objc)
    pub static CNLabelHome: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelwork?language=objc)
    pub static CNLabelWork: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelschool?language=objc)
    pub static CNLabelSchool: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelother?language=objc)
    pub static CNLabelOther: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelemailicloud?language=objc)
    pub static CNLabelEmailiCloud: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabelurladdresshomepage?language=objc)
    pub static CNLabelURLAddressHomePage: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cnlabeldateanniversary?language=objc)
    pub static CNLabelDateAnniversary: &'static NSString;
}
