//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/homekit/hmaccessorysetuprequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HMAccessorySetupRequest;
);

unsafe impl Send for HMAccessorySetupRequest {}

unsafe impl Sync for HMAccessorySetupRequest {}

unsafe impl NSCopying for HMAccessorySetupRequest {}

unsafe impl CopyingHelper for HMAccessorySetupRequest {
    type Result = Self;
}

unsafe impl NSObjectProtocol for HMAccessorySetupRequest {}

extern_methods!(
    unsafe impl HMAccessorySetupRequest {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "HMAccessorySetupPayload")]
        /// The payload to use for accessory setup
        ///
        /// Note: When this is non-nil, the following entitlement is required:
        /// com.apple.developer.homekit.allow-setup-payload
        #[unsafe(method_family(none))]
        #[method_id(payload)]
        pub unsafe fn payload(&self) -> Option<Retained<HMAccessorySetupPayload>>;

        #[cfg(feature = "HMAccessorySetupPayload")]
        /// Setter for [`payload`][Self::payload].
        #[method(setPayload:)]
        pub unsafe fn setPayload(&self, payload: Option<&HMAccessorySetupPayload>);

        /// The -[HMHome uniqueIdentifier] that corresponds to the HMHome that the accessory should be
        /// added to when being set up. If nil, then the user will be prompted to choose a home
        #[unsafe(method_family(none))]
        #[method_id(homeUniqueIdentifier)]
        pub unsafe fn homeUniqueIdentifier(&self) -> Option<Retained<NSUUID>>;

        /// Setter for [`homeUniqueIdentifier`][Self::homeUniqueIdentifier].
        #[method(setHomeUniqueIdentifier:)]
        pub unsafe fn setHomeUniqueIdentifier(&self, home_unique_identifier: Option<&NSUUID>);

        /// The -[HMRoom uniqueIdentifier] that corresponds to the existing HMRoom that should be
        /// suggested when the user is prompted to choose a room to add the accessory to. If nil, then any
        /// room may be suggested
        ///
        /// Note: This value will be ignored if homeUniqueIdentifier is nil
        #[unsafe(method_family(none))]
        #[method_id(suggestedRoomUniqueIdentifier)]
        pub unsafe fn suggestedRoomUniqueIdentifier(&self) -> Option<Retained<NSUUID>>;

        /// Setter for [`suggestedRoomUniqueIdentifier`][Self::suggestedRoomUniqueIdentifier].
        #[method(setSuggestedRoomUniqueIdentifier:)]
        pub unsafe fn setSuggestedRoomUniqueIdentifier(
            &self,
            suggested_room_unique_identifier: Option<&NSUUID>,
        );

        /// The name that will be suggested when the user is prompted to name the accessory being set up.
        /// If nil, then the suggested name will be taken from the accessory itself
        ///
        /// Note: If an accessory bridge is being set up, then this value only applies to the accessory bridge
        /// and not any accessories behind the bridge
        #[unsafe(method_family(none))]
        #[method_id(suggestedAccessoryName)]
        pub unsafe fn suggestedAccessoryName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`suggestedAccessoryName`][Self::suggestedAccessoryName].
        #[method(setSuggestedAccessoryName:)]
        pub unsafe fn setSuggestedAccessoryName(&self, suggested_accessory_name: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HMAccessorySetupRequest {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
