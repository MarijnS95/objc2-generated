//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// This class is used to discover new accessories in the home
    /// that have never been paired with and therefore not part of the home.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmaccessorybrowser?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HMAccessoryBrowser;
);

unsafe impl Send for HMAccessoryBrowser {}

unsafe impl Sync for HMAccessoryBrowser {}

unsafe impl NSObjectProtocol for HMAccessoryBrowser {}

extern_methods!(
    unsafe impl HMAccessoryBrowser {
        #[unsafe(method_family(init))]
        #[method_id(init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Delegate that receives updates on the state of the accessories discovered.
        #[unsafe(method_family(none))]
        #[method_id(delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn HMAccessoryBrowserDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn HMAccessoryBrowserDelegate>>,
        );

        #[cfg(feature = "HMAccessory")]
        /// This is the array of HMAccessory objects that represents new
        /// accessories that were discovered as part of a search session.
        /// This array is not updated when a search session is not in progress.
        #[unsafe(method_family(none))]
        #[method_id(discoveredAccessories)]
        pub unsafe fn discoveredAccessories(&self) -> Retained<NSArray<HMAccessory>>;

        /// Starts searching for accessories that are not associated to any home.
        ///
        ///
        /// If any accessories are discovered, updates are sent to the delegate.
        /// This will scan for the following types of accessories:
        /// Accessories supporting HomeKit Wireless Accessory Configuration profile
        /// Accessories supporting HomeKit Accessory Protocol and are already on
        /// the same infrastructure IP network
        /// Accessories supporting HomeKit Accessory Protocol on Bluetooth LE transport
        /// The array of discovered accessories will be updated when this method
        /// is called, so applications should clear and reload any stored copies
        /// of that array or previous new accessory objects.
        #[method(startSearchingForNewAccessories)]
        pub unsafe fn startSearchingForNewAccessories(&self);

        /// Stops searching for new accessories.
        ///
        ///
        /// After this method is called, updates will not be sent to the delegate
        /// if new accessories are found or removed. Scanning may continue for system
        /// reasons or if other delegates are still in active searching sessions.
        /// The contents of the array of discovered accessories will not be updated until
        /// startSearchingForNewAccessories is called.
        #[method(stopSearchingForNewAccessories)]
        pub unsafe fn stopSearchingForNewAccessories(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HMAccessoryBrowser {
        #[unsafe(method_family(new))]
        #[method_id(new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// This delegate receives updates about new accessories in the home.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmaccessorybrowserdelegate?language=objc)
    pub unsafe trait HMAccessoryBrowserDelegate: NSObjectProtocol {
        #[cfg(feature = "HMAccessory")]
        /// Informs the delegate about new accessories discovered in the home.
        ///
        ///
        /// Parameter `browser`: Sender of the message.
        ///
        ///
        /// Parameter `accessory`: New accessory that was discovered.
        #[optional]
        #[method(accessoryBrowser:didFindNewAccessory:)]
        unsafe fn accessoryBrowser_didFindNewAccessory(
            &self,
            browser: &HMAccessoryBrowser,
            accessory: &HMAccessory,
        );

        #[cfg(feature = "HMAccessory")]
        /// Informs the delegate about new accessories removed from the home.
        ///
        ///
        /// Parameter `browser`: Sender of the message.
        ///
        ///
        /// Parameter `accessory`: Accessory that was previously discovered but are no longer reachable.
        /// This method is also invoked when an accessory is added to a home.
        #[optional]
        #[method(accessoryBrowser:didRemoveNewAccessory:)]
        unsafe fn accessoryBrowser_didRemoveNewAccessory(
            &self,
            browser: &HMAccessoryBrowser,
            accessory: &HMAccessory,
        );
    }
);
