//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/homekit/hmaddaccessoryrequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HMAddAccessoryRequest;
);

unsafe impl NSObjectProtocol for HMAddAccessoryRequest {}

extern_methods!(
    unsafe impl HMAddAccessoryRequest {
        #[cfg(feature = "HMHome")]
        /// Home that the accessory is to be added to.
        #[method_id(@__method_family Other home)]
        pub unsafe fn home(&self) -> Retained<HMHome>;

        /// Name of the accessory to be added.
        #[method_id(@__method_family Other accessoryName)]
        pub unsafe fn accessoryName(&self) -> Retained<NSString>;

        #[cfg(feature = "HMAccessoryCategory")]
        /// The category of the accessory to be added.
        #[method_id(@__method_family Other accessoryCategory)]
        pub unsafe fn accessoryCategory(&self) -> Retained<HMAccessoryCategory>;

        /// Indication if the setup URL needs to be updated for this request. If this is true,
        /// payloadWithURL:ownershipToken: must be used to create the HMAccessorySetupPayload.
        #[method(requiresSetupPayloadURL)]
        pub unsafe fn requiresSetupPayloadURL(&self) -> bool;

        /// Indication if the ownership token needs to be updated for this request.
        #[deprecated = "No longer supported"]
        #[method(requiresOwnershipToken)]
        pub unsafe fn requiresOwnershipToken(&self) -> bool;

        #[cfg(feature = "HMAccessorySetupPayload")]
        /// Creates an accessory setup payload with ownership token
        ///
        ///
        /// Parameter `ownershipToken`: The token proving ownership of the accessory being added to the home.
        ///
        ///
        /// Returns: Returns an accessory setup payload object if successful or nil on error.
        ///
        ///
        /// This method may fail if this request requires a setup payload URL.
        #[method_id(@__method_family Other payloadWithOwnershipToken:)]
        pub unsafe fn payloadWithOwnershipToken(
            &self,
            ownership_token: &HMAccessoryOwnershipToken,
        ) -> Option<Retained<HMAccessorySetupPayload>>;

        #[cfg(feature = "HMAccessorySetupPayload")]
        /// Creates an accessory setup payload with URL and ownership token
        ///
        ///
        /// Parameter `setupPayloadURL`: The HomeKit setup payload for the accessory being added to the home.
        ///
        ///
        /// Parameter `ownershipToken`: The token proving ownership of the accessory being added to the home.
        ///
        ///
        /// Returns: Returns an accessory setup payload object if successful or nil on error.
        ///
        ///
        /// This method may fail if the setup payload URL is not a valid payload URL.
        #[method_id(@__method_family Other payloadWithURL:ownershipToken:)]
        pub unsafe fn payloadWithURL_ownershipToken(
            &self,
            setup_payload_url: &NSURL,
            ownership_token: &HMAccessoryOwnershipToken,
        ) -> Option<Retained<HMAccessorySetupPayload>>;

        #[deprecated = "HMAddAccessoryRequest objects are created by their associated objects. Directly creating them is not supported."]
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HMAddAccessoryRequest {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
