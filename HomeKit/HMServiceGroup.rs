//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Used to describe a collection of HMService objects
    ///
    ///
    /// This class is used to group a collection of HMService objects.
    /// This allows for association of a set of accessory services into a group.
    /// Eg. A collection of lights can be grouped as the "Desk Lamps" service group.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmservicegroup?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HMServiceGroup;
);

unsafe impl Send for HMServiceGroup {}

unsafe impl Sync for HMServiceGroup {}

unsafe impl NSObjectProtocol for HMServiceGroup {}

extern_methods!(
    unsafe impl HMServiceGroup {
        #[method_id(@__method_family Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Name of the service group.
        #[method_id(@__method_family Other name)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        #[cfg(feature = "HMService")]
        /// Array of HMService objects that correspond to the services contained in this group.
        #[method_id(@__method_family Other services)]
        pub unsafe fn services(&self) -> Retained<NSArray<HMService>>;

        /// A unique identifier for the service group.
        #[method_id(@__method_family Other uniqueIdentifier)]
        pub unsafe fn uniqueIdentifier(&self) -> Retained<NSUUID>;

        #[cfg(feature = "block2")]
        /// This method is used to change the name of the service group.
        ///
        ///
        /// Parameter `name`: New name for the service group.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(updateName:completionHandler:)]
        pub unsafe fn updateName_completionHandler(
            &self,
            name: &NSString,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "HMService", feature = "block2"))]
        /// Adds an service to this service group. The service and the group must be part of the same
        /// home. A service can be added to multiple service groups, e.g., a light can be added
        /// to "Desk Lamps" as well as "Dimmable Lamps" service groups.
        ///
        ///
        /// Parameter `service`: Service to add to this group.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(addService:completionHandler:)]
        pub unsafe fn addService_completionHandler(
            &self,
            service: &HMService,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "HMService", feature = "block2"))]
        /// Removes an service from this service group.
        ///
        ///
        /// Parameter `service`: Service to remove from this group.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(removeService:completionHandler:)]
        pub unsafe fn removeService_completionHandler(
            &self,
            service: &HMService,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HMServiceGroup {
        #[method_id(@__method_family New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
