//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// This class can be used to take an image snapshot from a camera.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmcamerasnapshotcontrol?language=objc)
    #[unsafe(super(HMCameraControl, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "HMCameraControl")]
    pub struct HMCameraSnapshotControl;
);

#[cfg(feature = "HMCameraControl")]
unsafe impl Send for HMCameraSnapshotControl {}

#[cfg(feature = "HMCameraControl")]
unsafe impl Sync for HMCameraSnapshotControl {}

#[cfg(feature = "HMCameraControl")]
unsafe impl NSObjectProtocol for HMCameraSnapshotControl {}

extern_methods!(
    #[cfg(feature = "HMCameraControl")]
    unsafe impl HMCameraSnapshotControl {
        /// Delegate that receives updates on the camera snapshot changes.
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn HMCameraSnapshotControlDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn HMCameraSnapshotControlDelegate>>,
        );

        #[cfg(all(feature = "HMCameraSnapshot", feature = "HMCameraSource"))]
        /// Represents the most recent snapshot taken from the camera.
        #[method_id(@__retain_semantics Other mostRecentSnapshot)]
        pub unsafe fn mostRecentSnapshot(&self) -> Option<Retained<HMCameraSnapshot>>;

        /// Takes an image snapshot.
        #[method(takeSnapshot)]
        pub unsafe fn takeSnapshot(&self);

        #[deprecated = "HMCameraSnapshotControl objects are created by their parent container objects. Directly creating them is not supported."]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "HMCameraControl")]
    unsafe impl HMCameraSnapshotControl {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    /// This delegate receives updates on the camera snapshot.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmcamerasnapshotcontroldelegate?language=objc)
    pub unsafe trait HMCameraSnapshotControlDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "HMCameraControl",
            feature = "HMCameraSnapshot",
            feature = "HMCameraSource"
        ))]
        /// Informs the delegate that the snapshot was taken.
        ///
        ///
        /// Parameter `cameraSnapshotControl`: Sender of this message.
        ///
        ///
        /// Parameter `snapshot`: Snapshot will be valid if snapshot was successfully taken.
        ///
        ///
        /// Parameter `error`: Error will be populated if the snapshot could not be taken.
        #[optional]
        #[method(cameraSnapshotControl:didTakeSnapshot:error:)]
        unsafe fn cameraSnapshotControl_didTakeSnapshot_error(
            &self,
            camera_snapshot_control: &HMCameraSnapshotControl,
            snapshot: Option<&HMCameraSnapshot>,
            error: Option<&NSError>,
        );

        #[cfg(feature = "HMCameraControl")]
        /// Informs the delegate that the mostRecentSnapshot was updated.
        ///
        ///
        /// Parameter `cameraSnapshotControl`: Sender of this message.
        #[optional]
        #[method(cameraSnapshotControlDidUpdateMostRecentSnapshot:)]
        unsafe fn cameraSnapshotControlDidUpdateMostRecentSnapshot(
            &self,
            camera_snapshot_control: &HMCameraSnapshotControl,
        );
    }
);
