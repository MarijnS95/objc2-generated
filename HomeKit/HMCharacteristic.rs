//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Represent a characteristic on a service of an accessory.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/homekit/hmcharacteristic?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HMCharacteristic;
);

unsafe impl Send for HMCharacteristic {}

unsafe impl Sync for HMCharacteristic {}

unsafe impl NSObjectProtocol for HMCharacteristic {}

extern_methods!(
    unsafe impl HMCharacteristic {
        /// The type of the characteristic, e.g. HMCharacteristicTypePowerState.
        #[method_id(@__retain_semantics Other characteristicType)]
        pub unsafe fn characteristicType(&self) -> Retained<NSString>;

        /// The localized description of the characteristic.
        #[method_id(@__retain_semantics Other localizedDescription)]
        pub unsafe fn localizedDescription(&self) -> Retained<NSString>;

        #[cfg(feature = "HMService")]
        /// Service that contains this characteristic.
        #[method_id(@__retain_semantics Other service)]
        pub unsafe fn service(&self) -> Option<Retained<HMService>>;

        /// Array that describes the properties of the characteristic.
        ///
        ///
        /// This value corresponds to the properties associated with this characteristic.
        /// The contents of the array are one or more HMCharacteristicProperty constants.
        #[method_id(@__retain_semantics Other properties)]
        pub unsafe fn properties(&self) -> Retained<NSArray<NSString>>;

        #[cfg(feature = "HMCharacteristicMetadata")]
        /// Meta data associated with the characteristic.
        #[method_id(@__retain_semantics Other metadata)]
        pub unsafe fn metadata(&self) -> Option<Retained<HMCharacteristicMetadata>>;

        /// The value of the characteristic.
        ///
        ///
        /// The value is a cached value that may have been updated as a result of prior
        /// interaction with the accessory.
        #[method_id(@__retain_semantics Other value)]
        pub unsafe fn value(&self) -> Option<Retained<AnyObject>>;

        /// Specifies whether the characteristic has been enabled to send notifications.
        ///
        ///
        /// This property is reset to NO if the reachability of the accessory is NO.
        #[method(isNotificationEnabled)]
        pub unsafe fn isNotificationEnabled(&self) -> bool;

        /// A unique identifier for the characteristic.
        #[method_id(@__retain_semantics Other uniqueIdentifier)]
        pub unsafe fn uniqueIdentifier(&self) -> Retained<NSUUID>;

        #[cfg(feature = "block2")]
        /// Modifies the value of the characteristic.
        ///
        ///
        /// Parameter `value`: The value to be written.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        ///
        ///
        /// The value being written is validated against the metadata, format and permissions.
        /// The value written may be bounded by metadata for characteristics with int and
        /// float format. If validation fails, the error provided to the completion handler
        /// indicates the type of failure.
        #[method(writeValue:completionHandler:)]
        pub unsafe fn writeValue_completionHandler(
            &self,
            value: Option<&AnyObject>,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        /// Reads the value of the characteristic. The updated value can be read from the 'value' property of the characteristic.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(readValueWithCompletionHandler:)]
        pub unsafe fn readValueWithCompletionHandler(
            &self,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        /// Enables/disables notifications or indications for the value of a specified characteristic.
        ///
        ///
        /// Parameter `enable`: A Boolean value indicating whether you wish to receive notifications or
        /// indications whenever the characteristicâ€™s value changes.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(enableNotification:completionHandler:)]
        pub unsafe fn enableNotification_completionHandler(
            &self,
            enable: bool,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        /// Sets/clears authorization data used when writing to the characteristic.
        ///
        ///
        /// Parameter `data`: New authorization data to use. Specify nil to remove authorization data.
        ///
        ///
        /// Parameter `completion`: Block that is invoked once the request is processed.
        /// The NSError provides more information on the status of the request, error
        /// will be nil on success.
        #[method(updateAuthorizationData:completionHandler:)]
        pub unsafe fn updateAuthorizationData_completionHandler(
            &self,
            data: Option<&NSData>,
            completion: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[deprecated = "HMCharacteristic objects are created by their parent container objects. Directly creating them is not supported."]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl HMCharacteristic {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
